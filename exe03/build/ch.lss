
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001cc0  00001d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b7  0080016e  0080016e  00001dc2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000748  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b611  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000313a  00000000  00000000  0000db6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004339  00000000  00000000  00010ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001554  00000000  00000000  00014fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001db6  00000000  00000000  00016534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007456  00000000  00000000  000182ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d0  00000000  00000000  0001f740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	24 c4       	rjmp	.+2120   	; 0x866 <__vector_7>
      1e:	00 00       	nop
      20:	56 c4       	rjmp	.+2220   	; 0x8ce <__vector_8>
      22:	00 00       	nop
      24:	ec c3       	rjmp	.+2008   	; 0x7fe <__vector_9>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a6 c3       	rjmp	.+1868   	; 0x77a <__vector_11>
      2e:	00 00       	nop
      30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
      36:	00 00       	nop
      38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c6       	rjmp	.+3120   	; 0xc7a <__vector_18>
      4a:	00 00       	nop
      4c:	54 c6       	rjmp	.+3240   	; 0xcf6 <__vector_19>
      4e:	00 00       	nop
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2449>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e0 ec       	ldi	r30, 0xC0	; 192
      9e:	fc e1       	ldi	r31, 0x1C	; 28
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ae 36       	cpi	r26, 0x6E	; 110
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	24 e0       	ldi	r18, 0x04	; 4
      ae:	ae e6       	ldi	r26, 0x6E	; 110
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a5 32       	cpi	r26, 0x25	; 37
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 08 0a 	call	0x1410	; 0x1410 <main>
      c0:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c6:	26 d3       	rcall	.+1612   	; 0x714 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c8:	8e e2       	ldi	r24, 0x2E	; 46
      ca:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
      cc:	24 d3       	rcall	.+1608   	; 0x716 <_pal_lld_init>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      ce:	65 d2       	rcall	.+1226   	; 0x59a <pwmInit>
      d0:	b3 d2       	rcall	.+1382   	; 0x638 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d2:	1c d3       	rcall	.+1592   	; 0x70c <boardInit>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <stInit>

000000d6 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d6:	7c c3       	rjmp	.+1784   	; 0x7d0 <st_lld_init>

000000d8 <stGetCounter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
      d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
      dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 * @api
 */
systime_t stGetCounter(void) {

  return st_lld_get_counter();
}
      e0:	08 95       	ret

000000e2 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
      e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
      ea:	82 e0       	ldi	r24, 0x02	; 2
      ec:	86 bb       	out	0x16, r24	; 22

  /* Enable interrupt. */
  TIMSK_REG = _BV(OCIE1A);
      ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
      f2:	08 95       	ret

000000f4 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
      f4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
      f8:	08 95       	ret

000000fa <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
      fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     102:	08 95       	ret

00000104 <iq_read>:
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
     104:	af 92       	push	r10
     106:	bf 92       	push	r11
     108:	cf 92       	push	r12
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24
     11a:	6b 01       	movw	r12, r22
     11c:	8a 01       	movw	r16, r20
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	84 17       	cp	r24, r20
     124:	95 07       	cpc	r25, r21
     126:	10 f4       	brcc	.+4      	; 0x12c <iq_read+0x28>
     128:	09 81       	ldd	r16, Y+1	; 0x01
     12a:	1a 81       	ldd	r17, Y+2	; 0x02
     12c:	69 85       	ldd	r22, Y+9	; 0x09
     12e:	7a 85       	ldd	r23, Y+10	; 0x0a
     130:	ed 80       	ldd	r14, Y+5	; 0x05
     132:	fe 80       	ldd	r15, Y+6	; 0x06
     134:	e6 1a       	sub	r14, r22
     136:	f7 0a       	sbc	r15, r23
     138:	0e 15       	cp	r16, r14
     13a:	1f 05       	cpc	r17, r15
     13c:	98 f1       	brcs	.+102    	; 0x1a4 <iq_read+0xa0>
     13e:	e0 16       	cp	r14, r16
     140:	f1 06       	cpc	r15, r17
     142:	d0 f0       	brcs	.+52     	; 0x178 <iq_read+0x74>
     144:	a8 01       	movw	r20, r16
     146:	c6 01       	movw	r24, r12
     148:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     14c:	8b 81       	ldd	r24, Y+3	; 0x03
     14e:	9c 81       	ldd	r25, Y+4	; 0x04
     150:	9a 87       	std	Y+10, r25	; 0x0a
     152:	89 87       	std	Y+9, r24	; 0x09
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	9a 81       	ldd	r25, Y+2	; 0x02
     158:	80 1b       	sub	r24, r16
     15a:	91 0b       	sbc	r25, r17
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01
     160:	c8 01       	movw	r24, r16
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16
     16a:	ff 90       	pop	r15
     16c:	ef 90       	pop	r14
     16e:	df 90       	pop	r13
     170:	cf 90       	pop	r12
     172:	bf 90       	pop	r11
     174:	af 90       	pop	r10
     176:	08 95       	ret
     178:	a7 01       	movw	r20, r14
     17a:	c6 01       	movw	r24, r12
     17c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     180:	58 01       	movw	r10, r16
     182:	ae 18       	sub	r10, r14
     184:	bf 08       	sbc	r11, r15
     186:	6b 81       	ldd	r22, Y+3	; 0x03
     188:	7c 81       	ldd	r23, Y+4	; 0x04
     18a:	a5 01       	movw	r20, r10
     18c:	c6 01       	movw	r24, r12
     18e:	8e 0d       	add	r24, r14
     190:	9f 1d       	adc	r25, r15
     192:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	9c 81       	ldd	r25, Y+4	; 0x04
     19a:	a8 0e       	add	r10, r24
     19c:	b9 1e       	adc	r11, r25
     19e:	ba 86       	std	Y+10, r11	; 0x0a
     1a0:	a9 86       	std	Y+9, r10	; 0x09
     1a2:	d8 cf       	rjmp	.-80     	; 0x154 <iq_read+0x50>
     1a4:	a8 01       	movw	r20, r16
     1a6:	c6 01       	movw	r24, r12
     1a8:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     1ac:	89 85       	ldd	r24, Y+9	; 0x09
     1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b0:	80 0f       	add	r24, r16
     1b2:	91 1f       	adc	r25, r17
     1b4:	9a 87       	std	Y+10, r25	; 0x0a
     1b6:	89 87       	std	Y+9, r24	; 0x09
     1b8:	cd cf       	rjmp	.-102    	; 0x154 <iq_read+0x50>

000001ba <oq_write>:
     1ba:	af 92       	push	r10
     1bc:	bf 92       	push	r11
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	ec 01       	movw	r28, r24
     1d0:	6b 01       	movw	r12, r22
     1d2:	8a 01       	movw	r16, r20
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	10 f4       	brcc	.+4      	; 0x1e2 <oq_write+0x28>
     1de:	09 81       	ldd	r16, Y+1	; 0x01
     1e0:	1a 81       	ldd	r17, Y+2	; 0x02
     1e2:	8f 81       	ldd	r24, Y+7	; 0x07
     1e4:	98 85       	ldd	r25, Y+8	; 0x08
     1e6:	ed 80       	ldd	r14, Y+5	; 0x05
     1e8:	fe 80       	ldd	r15, Y+6	; 0x06
     1ea:	e8 1a       	sub	r14, r24
     1ec:	f9 0a       	sbc	r15, r25
     1ee:	0e 15       	cp	r16, r14
     1f0:	1f 05       	cpc	r17, r15
     1f2:	98 f1       	brcs	.+102    	; 0x25a <oq_write+0xa0>
     1f4:	e0 16       	cp	r14, r16
     1f6:	f1 06       	cpc	r15, r17
     1f8:	d0 f0       	brcs	.+52     	; 0x22e <oq_write+0x74>
     1fa:	a8 01       	movw	r20, r16
     1fc:	b6 01       	movw	r22, r12
     1fe:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	9c 81       	ldd	r25, Y+4	; 0x04
     206:	98 87       	std	Y+8, r25	; 0x08
     208:	8f 83       	std	Y+7, r24	; 0x07
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	9a 81       	ldd	r25, Y+2	; 0x02
     20e:	80 1b       	sub	r24, r16
     210:	91 0b       	sbc	r25, r17
     212:	9a 83       	std	Y+2, r25	; 0x02
     214:	89 83       	std	Y+1, r24	; 0x01
     216:	c8 01       	movw	r24, r16
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	cf 90       	pop	r12
     228:	bf 90       	pop	r11
     22a:	af 90       	pop	r10
     22c:	08 95       	ret
     22e:	a7 01       	movw	r20, r14
     230:	b6 01       	movw	r22, r12
     232:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     236:	58 01       	movw	r10, r16
     238:	ae 18       	sub	r10, r14
     23a:	bf 08       	sbc	r11, r15
     23c:	b6 01       	movw	r22, r12
     23e:	6e 0d       	add	r22, r14
     240:	7f 1d       	adc	r23, r15
     242:	a5 01       	movw	r20, r10
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	9c 81       	ldd	r25, Y+4	; 0x04
     248:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	a8 0e       	add	r10, r24
     252:	b9 1e       	adc	r11, r25
     254:	b8 86       	std	Y+8, r11	; 0x08
     256:	af 82       	std	Y+7, r10	; 0x07
     258:	d8 cf       	rjmp	.-80     	; 0x20a <oq_write+0x50>
     25a:	a8 01       	movw	r20, r16
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <memcpy>
     262:	8f 81       	ldd	r24, Y+7	; 0x07
     264:	98 85       	ldd	r25, Y+8	; 0x08
     266:	80 0f       	add	r24, r16
     268:	91 1f       	adc	r25, r17
     26a:	98 87       	std	Y+8, r25	; 0x08
     26c:	8f 83       	std	Y+7, r24	; 0x07
     26e:	cd cf       	rjmp	.-102    	; 0x20a <oq_write+0x50>

00000270 <iqObjectInit>:
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	fc 01       	movw	r30, r24
     276:	10 82       	st	Z, r1
     278:	12 82       	std	Z+2, r1	; 0x02
     27a:	11 82       	std	Z+1, r1	; 0x01
     27c:	74 83       	std	Z+4, r23	; 0x04
     27e:	63 83       	std	Z+3, r22	; 0x03
     280:	72 87       	std	Z+10, r23	; 0x0a
     282:	61 87       	std	Z+9, r22	; 0x09
     284:	70 87       	std	Z+8, r23	; 0x08
     286:	67 83       	std	Z+7, r22	; 0x07
     288:	64 0f       	add	r22, r20
     28a:	75 1f       	adc	r23, r21
     28c:	76 83       	std	Z+6, r23	; 0x06
     28e:	65 83       	std	Z+5, r22	; 0x05
     290:	34 87       	std	Z+12, r19	; 0x0c
     292:	23 87       	std	Z+11, r18	; 0x0b
     294:	16 87       	std	Z+14, r17	; 0x0e
     296:	05 87       	std	Z+13, r16	; 0x0d
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	08 95       	ret

0000029e <iqPutI>:
     29e:	fc 01       	movw	r30, r24
     2a0:	a7 81       	ldd	r26, Z+7	; 0x07
     2a2:	b0 85       	ldd	r27, Z+8	; 0x08
     2a4:	81 85       	ldd	r24, Z+9	; 0x09
     2a6:	92 85       	ldd	r25, Z+10	; 0x0a
     2a8:	a8 17       	cp	r26, r24
     2aa:	b9 07       	cpc	r27, r25
     2ac:	e1 f0       	breq	.+56     	; 0x2e6 <iqPutI+0x48>
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	92 81       	ldd	r25, Z+2	; 0x02
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	92 83       	std	Z+2, r25	; 0x02
     2b6:	81 83       	std	Z+1, r24	; 0x01
     2b8:	cd 01       	movw	r24, r26
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 87       	std	Z+8, r25	; 0x08
     2be:	87 83       	std	Z+7, r24	; 0x07
     2c0:	6c 93       	st	X, r22
     2c2:	27 81       	ldd	r18, Z+7	; 0x07
     2c4:	30 85       	ldd	r19, Z+8	; 0x08
     2c6:	85 81       	ldd	r24, Z+5	; 0x05
     2c8:	96 81       	ldd	r25, Z+6	; 0x06
     2ca:	28 17       	cp	r18, r24
     2cc:	39 07       	cpc	r19, r25
     2ce:	20 f0       	brcs	.+8      	; 0x2d8 <iqPutI+0x3a>
     2d0:	83 81       	ldd	r24, Z+3	; 0x03
     2d2:	94 81       	ldd	r25, Z+4	; 0x04
     2d4:	90 87       	std	Z+8, r25	; 0x08
     2d6:	87 83       	std	Z+7, r24	; 0x07
     2d8:	cf 01       	movw	r24, r30
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	4e d7       	rcall	.+3740   	; 0x117c <chThdDequeueNextI>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	08 95       	ret
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
     2e8:	92 81       	ldd	r25, Z+2	; 0x02
     2ea:	89 2b       	or	r24, r25
     2ec:	01 f3       	breq	.-64     	; 0x2ae <iqPutI+0x10>
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	9f ef       	ldi	r25, 0xFF	; 255
     2f2:	08 95       	ret

000002f4 <iqGetTimeout>:
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ec 01       	movw	r28, r24
     2fe:	8b 01       	movw	r16, r22
     300:	f8 94       	cli
     302:	05 c0       	rjmp	.+10     	; 0x30e <iqGetTimeout+0x1a>
     304:	b8 01       	movw	r22, r16
     306:	ce 01       	movw	r24, r28
     308:	fe d6       	rcall	.+3580   	; 0x1106 <chThdEnqueueTimeoutS>
     30a:	97 fd       	sbrc	r25, 7
     30c:	27 c0       	rjmp	.+78     	; 0x35c <iqGetTimeout+0x68>
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	89 2b       	or	r24, r25
     314:	b9 f3       	breq	.-18     	; 0x304 <iqGetTimeout+0x10>
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	9a 81       	ldd	r25, Y+2	; 0x02
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	e9 85       	ldd	r30, Y+9	; 0x09
     322:	fa 85       	ldd	r31, Y+10	; 0x0a
     324:	cf 01       	movw	r24, r30
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	9a 87       	std	Y+10, r25	; 0x0a
     32a:	89 87       	std	Y+9, r24	; 0x09
     32c:	10 81       	ld	r17, Z
     32e:	2d 81       	ldd	r18, Y+5	; 0x05
     330:	3e 81       	ldd	r19, Y+6	; 0x06
     332:	82 17       	cp	r24, r18
     334:	93 07       	cpc	r25, r19
     336:	20 f0       	brcs	.+8      	; 0x340 <iqGetTimeout+0x4c>
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	9c 81       	ldd	r25, Y+4	; 0x04
     33c:	9a 87       	std	Y+10, r25	; 0x0a
     33e:	89 87       	std	Y+9, r24	; 0x09
     340:	eb 85       	ldd	r30, Y+11	; 0x0b
     342:	fc 85       	ldd	r31, Y+12	; 0x0c
     344:	30 97       	sbiw	r30, 0x00	; 0
     346:	11 f0       	breq	.+4      	; 0x34c <iqGetTimeout+0x58>
     348:	ce 01       	movw	r24, r28
     34a:	09 95       	icall
     34c:	78 94       	sei
     34e:	81 2f       	mov	r24, r17
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret
     35c:	78 94       	sei
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <iqReadTimeout>:
     368:	6f 92       	push	r6
     36a:	7f 92       	push	r7
     36c:	8f 92       	push	r8
     36e:	9f 92       	push	r9
     370:	af 92       	push	r10
     372:	bf 92       	push	r11
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	6c 01       	movw	r12, r24
     386:	7b 01       	movw	r14, r22
     388:	3a 01       	movw	r6, r20
     38a:	49 01       	movw	r8, r18
     38c:	fc 01       	movw	r30, r24
     38e:	a3 84       	ldd	r10, Z+11	; 0x0b
     390:	b4 84       	ldd	r11, Z+12	; 0x0c
     392:	f8 94       	cli
     394:	41 15       	cp	r20, r1
     396:	51 05       	cpc	r21, r1
     398:	b9 f0       	breq	.+46     	; 0x3c8 <iqReadTimeout+0x60>
     39a:	8a 01       	movw	r16, r20
     39c:	a8 01       	movw	r20, r16
     39e:	b7 01       	movw	r22, r14
     3a0:	c6 01       	movw	r24, r12
     3a2:	b0 de       	rcall	.-672    	; 0x104 <iq_read>
     3a4:	ec 01       	movw	r28, r24
     3a6:	89 2b       	or	r24, r25
     3a8:	21 f1       	breq	.+72     	; 0x3f2 <iqReadTimeout+0x8a>
     3aa:	a1 14       	cp	r10, r1
     3ac:	b1 04       	cpc	r11, r1
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <iqReadTimeout+0x4e>
     3b0:	c6 01       	movw	r24, r12
     3b2:	f5 01       	movw	r30, r10
     3b4:	09 95       	icall
     3b6:	78 94       	sei
     3b8:	0c 1b       	sub	r16, r28
     3ba:	1d 0b       	sbc	r17, r29
     3bc:	ec 0e       	add	r14, r28
     3be:	fd 1e       	adc	r15, r29
     3c0:	f8 94       	cli
     3c2:	01 15       	cp	r16, r1
     3c4:	11 05       	cpc	r17, r1
     3c6:	51 f7       	brne	.-44     	; 0x39c <iqReadTimeout+0x34>
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	78 94       	sei
     3ce:	c3 01       	movw	r24, r6
     3d0:	80 1b       	sub	r24, r16
     3d2:	91 0b       	sbc	r25, r17
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	9f 90       	pop	r9
     3ea:	8f 90       	pop	r8
     3ec:	7f 90       	pop	r7
     3ee:	6f 90       	pop	r6
     3f0:	08 95       	ret
     3f2:	b4 01       	movw	r22, r8
     3f4:	c6 01       	movw	r24, r12
     3f6:	87 d6       	rcall	.+3342   	; 0x1106 <chThdEnqueueTimeoutS>
     3f8:	89 2b       	or	r24, r25
     3fa:	81 f2       	breq	.-96     	; 0x39c <iqReadTimeout+0x34>
     3fc:	e7 cf       	rjmp	.-50     	; 0x3cc <iqReadTimeout+0x64>

000003fe <oqObjectInit>:
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	fc 01       	movw	r30, r24
     404:	10 82       	st	Z, r1
     406:	52 83       	std	Z+2, r21	; 0x02
     408:	41 83       	std	Z+1, r20	; 0x01
     40a:	74 83       	std	Z+4, r23	; 0x04
     40c:	63 83       	std	Z+3, r22	; 0x03
     40e:	72 87       	std	Z+10, r23	; 0x0a
     410:	61 87       	std	Z+9, r22	; 0x09
     412:	70 87       	std	Z+8, r23	; 0x08
     414:	67 83       	std	Z+7, r22	; 0x07
     416:	46 0f       	add	r20, r22
     418:	57 1f       	adc	r21, r23
     41a:	56 83       	std	Z+6, r21	; 0x06
     41c:	45 83       	std	Z+5, r20	; 0x05
     41e:	34 87       	std	Z+12, r19	; 0x0c
     420:	23 87       	std	Z+11, r18	; 0x0b
     422:	16 87       	std	Z+14, r17	; 0x0e
     424:	05 87       	std	Z+13, r16	; 0x0d
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <oqPutTimeout>:
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	ec 01       	movw	r28, r24
     438:	f6 2e       	mov	r15, r22
     43a:	8a 01       	movw	r16, r20
     43c:	f8 94       	cli
     43e:	05 c0       	rjmp	.+10     	; 0x44a <oqPutTimeout+0x1e>
     440:	b8 01       	movw	r22, r16
     442:	ce 01       	movw	r24, r28
     444:	60 d6       	rcall	.+3264   	; 0x1106 <chThdEnqueueTimeoutS>
     446:	97 fd       	sbrc	r25, 7
     448:	2a c0       	rjmp	.+84     	; 0x49e <oqPutTimeout+0x72>
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	89 2b       	or	r24, r25
     450:	b9 f3       	breq	.-18     	; 0x440 <oqPutTimeout+0x14>
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	ef 81       	ldd	r30, Y+7	; 0x07
     45e:	f8 85       	ldd	r31, Y+8	; 0x08
     460:	cf 01       	movw	r24, r30
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	98 87       	std	Y+8, r25	; 0x08
     466:	8f 83       	std	Y+7, r24	; 0x07
     468:	f0 82       	st	Z, r15
     46a:	2f 81       	ldd	r18, Y+7	; 0x07
     46c:	38 85       	ldd	r19, Y+8	; 0x08
     46e:	8d 81       	ldd	r24, Y+5	; 0x05
     470:	9e 81       	ldd	r25, Y+6	; 0x06
     472:	28 17       	cp	r18, r24
     474:	39 07       	cpc	r19, r25
     476:	20 f0       	brcs	.+8      	; 0x480 <oqPutTimeout+0x54>
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	98 87       	std	Y+8, r25	; 0x08
     47e:	8f 83       	std	Y+7, r24	; 0x07
     480:	eb 85       	ldd	r30, Y+11	; 0x0b
     482:	fc 85       	ldd	r31, Y+12	; 0x0c
     484:	30 97       	sbiw	r30, 0x00	; 0
     486:	11 f0       	breq	.+4      	; 0x48c <oqPutTimeout+0x60>
     488:	ce 01       	movw	r24, r28
     48a:	09 95       	icall
     48c:	78 94       	sei
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	08 95       	ret
     49e:	78 94       	sei
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	08 95       	ret

000004ac <oqGetI>:
     4ac:	cf 93       	push	r28
     4ae:	fc 01       	movw	r30, r24
     4b0:	a1 85       	ldd	r26, Z+9	; 0x09
     4b2:	b2 85       	ldd	r27, Z+10	; 0x0a
     4b4:	87 81       	ldd	r24, Z+7	; 0x07
     4b6:	90 85       	ldd	r25, Z+8	; 0x08
     4b8:	8a 17       	cp	r24, r26
     4ba:	9b 07       	cpc	r25, r27
     4bc:	e1 f0       	breq	.+56     	; 0x4f6 <oqGetI+0x4a>
     4be:	81 81       	ldd	r24, Z+1	; 0x01
     4c0:	92 81       	ldd	r25, Z+2	; 0x02
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	92 83       	std	Z+2, r25	; 0x02
     4c6:	81 83       	std	Z+1, r24	; 0x01
     4c8:	cd 01       	movw	r24, r26
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	92 87       	std	Z+10, r25	; 0x0a
     4ce:	81 87       	std	Z+9, r24	; 0x09
     4d0:	cc 91       	ld	r28, X
     4d2:	25 81       	ldd	r18, Z+5	; 0x05
     4d4:	36 81       	ldd	r19, Z+6	; 0x06
     4d6:	82 17       	cp	r24, r18
     4d8:	93 07       	cpc	r25, r19
     4da:	40 f4       	brcc	.+16     	; 0x4ec <oqGetI+0x40>
     4dc:	cf 01       	movw	r24, r30
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	4c d6       	rcall	.+3224   	; 0x117c <chThdDequeueNextI>
     4e4:	8c 2f       	mov	r24, r28
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret
     4ec:	83 81       	ldd	r24, Z+3	; 0x03
     4ee:	94 81       	ldd	r25, Z+4	; 0x04
     4f0:	92 87       	std	Z+10, r25	; 0x0a
     4f2:	81 87       	std	Z+9, r24	; 0x09
     4f4:	f3 cf       	rjmp	.-26     	; 0x4dc <oqGetI+0x30>
     4f6:	81 81       	ldd	r24, Z+1	; 0x01
     4f8:	92 81       	ldd	r25, Z+2	; 0x02
     4fa:	89 2b       	or	r24, r25
     4fc:	01 f3       	breq	.-64     	; 0x4be <oqGetI+0x12>
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
     502:	f2 cf       	rjmp	.-28     	; 0x4e8 <oqGetI+0x3c>

00000504 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     504:	6f 92       	push	r6
     506:	7f 92       	push	r7
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	6c 01       	movw	r12, r24
     522:	7b 01       	movw	r14, r22
     524:	3a 01       	movw	r6, r20
     526:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
     528:	fc 01       	movw	r30, r24
     52a:	a3 84       	ldd	r10, Z+11	; 0x0b
     52c:	b4 84       	ldd	r11, Z+12	; 0x0c
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     52e:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     530:	41 15       	cp	r20, r1
     532:	51 05       	cpc	r21, r1
     534:	b9 f0       	breq	.+46     	; 0x564 <oqWriteTimeout+0x60>
     536:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
     538:	a8 01       	movw	r20, r16
     53a:	b7 01       	movw	r22, r14
     53c:	c6 01       	movw	r24, r12
     53e:	3d de       	rcall	.-902    	; 0x1ba <oq_write>
     540:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     542:	89 2b       	or	r24, r25
     544:	21 f1       	breq	.+72     	; 0x58e <oqWriteTimeout+0x8a>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     546:	a1 14       	cp	r10, r1
     548:	b1 04       	cpc	r11, r1
     54a:	19 f0       	breq	.+6      	; 0x552 <oqWriteTimeout+0x4e>
        nfy(oqp);
     54c:	c6 01       	movw	r24, r12
     54e:	f5 01       	movw	r30, r10
     550:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     552:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
     554:	0c 1b       	sub	r16, r28
     556:	1d 0b       	sbc	r17, r29
      bp += done;
     558:	ec 0e       	add	r14, r28
     55a:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     55c:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     55e:	01 15       	cp	r16, r1
     560:	11 05       	cpc	r17, r1
     562:	51 f7       	brne	.-44     	; 0x538 <oqWriteTimeout+0x34>
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	10 e0       	ldi	r17, 0x00	; 0
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     568:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
     56a:	c3 01       	movw	r24, r6
     56c:	80 1b       	sub	r24, r16
     56e:	91 0b       	sbc	r25, r17
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	bf 90       	pop	r11
     582:	af 90       	pop	r10
     584:	9f 90       	pop	r9
     586:	8f 90       	pop	r8
     588:	7f 90       	pop	r7
     58a:	6f 90       	pop	r6
     58c:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     58e:	b4 01       	movw	r22, r8
     590:	c6 01       	movw	r24, r12
     592:	b9 d5       	rcall	.+2930   	; 0x1106 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     594:	89 2b       	or	r24, r25
     596:	81 f2       	breq	.-96     	; 0x538 <oqWriteTimeout+0x34>
     598:	e7 cf       	rjmp	.-50     	; 0x568 <oqWriteTimeout+0x64>

0000059a <pwmInit>:
     59a:	cd c1       	rjmp	.+922    	; 0x936 <pwm_lld_init>

0000059c <pwmObjectInit>:
     59c:	fc 01       	movw	r30, r24
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 83       	st	Z, r24
     5a2:	12 82       	std	Z+2, r1	; 0x02
     5a4:	11 82       	std	Z+1, r1	; 0x01
     5a6:	15 82       	std	Z+5, r1	; 0x05
     5a8:	16 82       	std	Z+6, r1	; 0x06
     5aa:	08 95       	ret

000005ac <pwmStart>:
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
     5b2:	f8 94       	cli
     5b4:	7a 83       	std	Y+2, r23	; 0x02
     5b6:	69 83       	std	Y+1, r22	; 0x01
     5b8:	fb 01       	movw	r30, r22
     5ba:	84 81       	ldd	r24, Z+4	; 0x04
     5bc:	95 81       	ldd	r25, Z+5	; 0x05
     5be:	9c 83       	std	Y+4, r25	; 0x04
     5c0:	8b 83       	std	Y+3, r24	; 0x03
     5c2:	1d 82       	std	Y+5, r1	; 0x05
     5c4:	ce 01       	movw	r24, r28
     5c6:	be d1       	rcall	.+892    	; 0x944 <pwm_lld_start>
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	88 83       	st	Y, r24
     5cc:	78 94       	sei
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <pwmEnableChannel>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     5d8:	f8 94       	cli

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	06 2e       	mov	r0, r22
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <pwmEnableChannel+0xc>
     5e2:	22 0f       	add	r18, r18
     5e4:	0a 94       	dec	r0
     5e6:	ea f7       	brpl	.-6      	; 0x5e2 <pwmEnableChannel+0xa>
     5e8:	fc 01       	movw	r30, r24
     5ea:	35 81       	ldd	r19, Z+5	; 0x05
     5ec:	23 2b       	or	r18, r19
     5ee:	25 83       	std	Z+5, r18	; 0x05
     5f0:	64 d2       	rcall	.+1224   	; 0xaba <pwm_lld_enable_channel>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     5f2:	78 94       	sei
     5f4:	08 95       	ret

000005f6 <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     5f6:	05 96       	adiw	r24, 0x05	; 5
     5f8:	b7 ce       	rjmp	.-658    	; 0x368 <iqReadTimeout>

000005fa <_read>:
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	05 96       	adiw	r24, 0x05	; 5
     600:	b3 ce       	rjmp	.-666    	; 0x368 <iqReadTimeout>

00000602 <_writet>:
     602:	44 96       	adiw	r24, 0x14	; 20
     604:	7f cf       	rjmp	.-258    	; 0x504 <oqWriteTimeout>

00000606 <_write>:
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	44 96       	adiw	r24, 0x14	; 20
     60c:	7b cf       	rjmp	.-266    	; 0x504 <oqWriteTimeout>

0000060e <_gett>:
     60e:	05 96       	adiw	r24, 0x05	; 5
     610:	71 ce       	rjmp	.-798    	; 0x2f4 <iqGetTimeout>

00000612 <_get>:
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	05 96       	adiw	r24, 0x05	; 5
     618:	6d ce       	rjmp	.-806    	; 0x2f4 <iqGetTimeout>

0000061a <_putt>:
     61a:	44 96       	adiw	r24, 0x14	; 20
     61c:	07 cf       	rjmp	.-498    	; 0x42c <oqPutTimeout>

0000061e <_put>:
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	44 96       	adiw	r24, 0x14	; 20
     624:	03 cf       	rjmp	.-506    	; 0x42c <oqPutTimeout>

00000626 <_ctl>:
     626:	61 30       	cpi	r22, 0x01	; 1
     628:	71 05       	cpc	r23, r1
     62a:	19 f0       	breq	.+6      	; 0x632 <_ctl+0xc>
     62c:	8c ee       	ldi	r24, 0xEC	; 236
     62e:	9f ef       	ldi	r25, 0xFF	; 255
     630:	08 95       	ret
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	08 95       	ret

00000638 <sdInit>:
     638:	95 c3       	rjmp	.+1834   	; 0xd64 <sd_lld_init>

0000063a <sdObjectInit>:
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
     648:	9b 01       	movw	r18, r22
     64a:	7a 01       	movw	r14, r20
     64c:	fc 01       	movw	r30, r24
     64e:	8a e1       	ldi	r24, 0x1A	; 26
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	81 93       	st	Z+, r24
     654:	91 93       	st	Z+, r25
     656:	fb 83       	std	Y+3, r31	; 0x03
     658:	ea 83       	std	Y+2, r30	; 0x02
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	8c 83       	std	Y+4, r24	; 0x04
     65e:	be 01       	movw	r22, r28
     660:	6d 5d       	subi	r22, 0xDD	; 221
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	8e 01       	movw	r16, r28
     666:	40 e1       	ldi	r20, 0x10	; 16
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	ce 01       	movw	r24, r28
     66c:	05 96       	adiw	r24, 0x05	; 5
     66e:	00 de       	rcall	.-1024   	; 0x270 <iqObjectInit>
     670:	be 01       	movw	r22, r28
     672:	6d 5c       	subi	r22, 0xCD	; 205
     674:	7f 4f       	sbci	r23, 0xFF	; 255
     676:	97 01       	movw	r18, r14
     678:	40 e1       	ldi	r20, 0x10	; 16
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	44 96       	adiw	r24, 0x14	; 20
     680:	be de       	rcall	.-644    	; 0x3fe <oqObjectInit>
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     69a:	8e 81       	ldd	r24, Y+6	; 0x06
     69c:	9f 81       	ldd	r25, Y+7	; 0x07
     69e:	89 2b       	or	r24, r25
     6a0:	51 f0       	breq	.+20     	; 0x6b6 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6a2:	61 2f       	mov	r22, r17
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	fa dd       	rcall	.-1036   	; 0x29e <iqPutI>
     6aa:	97 fd       	sbrc	r25, 7
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     6b6:	64 e0       	ldi	r22, 0x04	; 4
     6b8:	ce 01       	movw	r24, r28
     6ba:	02 96       	adiw	r24, 0x02	; 2
     6bc:	7a d5       	rcall	.+2804   	; 0x11b2 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6be:	61 2f       	mov	r22, r17
     6c0:	ce 01       	movw	r24, r28
     6c2:	05 96       	adiw	r24, 0x05	; 5
     6c4:	ec dd       	rcall	.-1064   	; 0x29e <iqPutI>
     6c6:	97 ff       	sbrs	r25, 7
     6c8:	f2 cf       	rjmp	.-28     	; 0x6ae <sdIncomingDataI+0x1e>
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	ce 01       	movw	r24, r28
     6ce:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	6d c5       	rjmp	.+2778   	; 0x11b2 <chEvtBroadcastFlagsI>

000006d8 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     6e2:	44 96       	adiw	r24, 0x14	; 20
     6e4:	e3 de       	rcall	.-570    	; 0x4ac <oqGetI>
     6e6:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
     6e8:	97 fd       	sbrc	r25, 7
     6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     6ec:	ce 01       	movw	r24, r28
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret
     6f8:	68 e0       	ldi	r22, 0x08	; 8
     6fa:	c8 01       	movw	r24, r16
     6fc:	02 96       	adiw	r24, 0x02	; 2
     6fe:	59 d5       	rcall	.+2738   	; 0x11b2 <chEvtBroadcastFlagsI>
     700:	ce 01       	movw	r24, r28
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
     70c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
     710:	1d ba       	out	0x1d, r1	; 29
     712:	08 95       	ret

00000714 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     714:	08 95       	ret

00000716 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     716:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     718:	80 81       	ld	r24, Z
     71a:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     724:	83 81       	ldd	r24, Z+3	; 0x03
     726:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     728:	84 81       	ldd	r24, Z+4	; 0x04
     72a:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     72c:	85 81       	ldd	r24, Z+5	; 0x05
     72e:	8a b9       	out	0x0a, r24	; 10
     730:	08 95       	ret

00000732 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     732:	fc 01       	movw	r30, r24

  switch (mode) {
     734:	42 30       	cpi	r20, 0x02	; 2
     736:	c9 f0       	breq	.+50     	; 0x76a <_pal_lld_setgroupmode+0x38>
     738:	98 f0       	brcs	.+38     	; 0x760 <_pal_lld_setgroupmode+0x2e>
     73a:	45 30       	cpi	r20, 0x05	; 5
     73c:	b1 f0       	breq	.+44     	; 0x76a <_pal_lld_setgroupmode+0x38>
     73e:	46 30       	cpi	r20, 0x06	; 6
     740:	21 f4       	brne	.+8      	; 0x74a <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     742:	81 81       	ldd	r24, Z+1	; 0x01
     744:	68 2b       	or	r22, r24
     746:	61 83       	std	Z+1, r22	; 0x01
     748:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     74a:	43 30       	cpi	r20, 0x03	; 3
     74c:	e9 f7       	brne	.-6      	; 0x748 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	96 2f       	mov	r25, r22
     752:	90 95       	com	r25
     754:	89 23       	and	r24, r25
     756:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     758:	82 81       	ldd	r24, Z+2	; 0x02
     75a:	68 2b       	or	r22, r24
     75c:	62 83       	std	Z+2, r22	; 0x02
    break;
     75e:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     760:	44 23       	and	r20, r20
     762:	19 f0       	breq	.+6      	; 0x76a <_pal_lld_setgroupmode+0x38>
     764:	41 30       	cpi	r20, 0x01	; 1
     766:	99 f3       	breq	.-26     	; 0x74e <_pal_lld_setgroupmode+0x1c>
     768:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     76a:	81 81       	ldd	r24, Z+1	; 0x01
     76c:	60 95       	com	r22
     76e:	86 23       	and	r24, r22
     770:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	68 23       	and	r22, r24
     776:	62 83       	std	Z+2, r22	; 0x02
    break;
     778:	08 95       	ret

0000077a <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     7a2:	e7 d2       	rcall	.+1486   	; 0xd72 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     7a4:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>
     7a8:	63 d3       	rcall	.+1734   	; 0xe70 <chSchIsPreemptionRequired>
     7aa:	81 11       	cpse	r24, r1
     7ac:	70 d3       	rcall	.+1760   	; 0xe8e <chSchDoPreemption>
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
     7d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B     = _BV(WGM12);
     7d4:	e1 e8       	ldi	r30, 0x81	; 129
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	80 83       	st	Z, r24

  /* Start disabled. */
  TCCR1C     = 0;
     7dc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  OCR1A      = 0;
     7e0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     7e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  TCNT1      = 0;
     7e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     7ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	86 bb       	out	0x16, r24	; 22
  TIMSK_REG  = 0;
     7f4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  TCCR1B     = PRESCALER;
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	80 83       	st	Z, r24
     7fc:	08 95       	ret

000007fe <__vector_9>:

#if AVR_PWM_USE_TIM2 || defined(__DOXYGEN__)
  /* Can't change period in timer2. */
  if (pwmp == &PWMD2) {
    PWMD2.period = 0xFF;
    return;
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	4f 93       	push	r20
     80e:	5f 93       	push	r21
     810:	6f 93       	push	r22
     812:	7f 93       	push	r23
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>
     826:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <PWMD2+0x1>
     82a:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <PWMD2+0x2>
     82e:	06 80       	ldd	r0, Z+6	; 0x06
     830:	f7 81       	ldd	r31, Z+7	; 0x07
     832:	e0 2d       	mov	r30, r0
     834:	85 ef       	ldi	r24, 0xF5	; 245
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	09 95       	icall
     83a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>
     83e:	18 d3       	rcall	.+1584   	; 0xe70 <chSchIsPreemptionRequired>
     840:	81 11       	cpse	r24, r1
     842:	25 d3       	rcall	.+1610   	; 0xe8e <chSchDoPreemption>
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	0f be       	out	0x3f, r0	; 63
     860:	0f 90       	pop	r0
     862:	1f 90       	pop	r1
     864:	18 95       	reti

00000866 <__vector_7>:
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	2f 93       	push	r18
     872:	3f 93       	push	r19
     874:	4f 93       	push	r20
     876:	5f 93       	push	r21
     878:	6f 93       	push	r22
     87a:	7f 93       	push	r23
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
     880:	af 93       	push	r26
     882:	bf 93       	push	r27
     884:	ef 93       	push	r30
     886:	ff 93       	push	r31
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>
     88e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <PWMD2+0x1>
     892:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <PWMD2+0x2>
     896:	01 84       	ldd	r0, Z+9	; 0x09
     898:	f2 85       	ldd	r31, Z+10	; 0x0a
     89a:	e0 2d       	mov	r30, r0
     89c:	85 ef       	ldi	r24, 0xF5	; 245
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	09 95       	icall
     8a2:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>
     8a6:	e4 d2       	rcall	.+1480   	; 0xe70 <chSchIsPreemptionRequired>
     8a8:	81 11       	cpse	r24, r1
     8aa:	f1 d2       	rcall	.+1506   	; 0xe8e <chSchDoPreemption>
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <__vector_8>:
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>
     8f6:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <PWMD2+0x1>
     8fa:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <PWMD2+0x2>
     8fe:	04 84       	ldd	r0, Z+12	; 0x0c
     900:	f5 85       	ldd	r31, Z+13	; 0x0d
     902:	e0 2d       	mov	r30, r0
     904:	85 ef       	ldi	r24, 0xF5	; 245
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	09 95       	icall
     90a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>
     90e:	b0 d2       	rcall	.+1376   	; 0xe70 <chSchIsPreemptionRequired>
     910:	81 11       	cpse	r24, r1
     912:	bd d2       	rcall	.+1402   	; 0xe8e <chSchDoPreemption>
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <pwm_lld_init>:
     936:	85 ef       	ldi	r24, 0xF5	; 245
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	30 de       	rcall	.-928    	; 0x59c <pwmObjectInit>
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <PWMD2+0x6>
     942:	08 95       	ret

00000944 <pwm_lld_start>:
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	27 97       	sbiw	r28, 0x07	; 7
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	9c 01       	movw	r18, r24
     96a:	dc 01       	movw	r26, r24
     96c:	8c 91       	ld	r24, X
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	89 f0       	breq	.+34     	; 0x994 <pwm_lld_start+0x50>
     972:	27 96       	adiw	r28, 0x07	; 7
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	08 95       	ret
     994:	b1 e0       	ldi	r27, 0x01	; 1
     996:	25 3f       	cpi	r18, 0xF5	; 245
     998:	3b 07       	cpc	r19, r27
     99a:	09 f4       	brne	.+2      	; 0x99e <pwm_lld_start+0x5a>
     99c:	48 c0       	rjmp	.+144    	; 0xa2e <pwm_lld_start+0xea>
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	e0 e0       	ldi	r30, 0x00	; 0
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	de 01       	movw	r26, r28
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	8a 95       	dec	r24
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <pwm_lld_start+0x64>
     9b0:	d9 01       	movw	r26, r18
     9b2:	11 96       	adiw	r26, 0x01	; 1
     9b4:	ed 91       	ld	r30, X+
     9b6:	fc 91       	ld	r31, X
     9b8:	12 97       	sbiw	r26, 0x02	; 2
     9ba:	80 80       	ld	r8, Z
     9bc:	91 80       	ldd	r9, Z+1	; 0x01
     9be:	a2 80       	ldd	r10, Z+2	; 0x02
     9c0:	b3 80       	ldd	r11, Z+3	; 0x03
     9c2:	fe 01       	movw	r30, r28
     9c4:	31 96       	adiw	r30, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	c1 2c       	mov	r12, r1
     9ca:	84 e2       	ldi	r24, 0x24	; 36
     9cc:	d8 2e       	mov	r13, r24
     9ce:	84 ef       	ldi	r24, 0xF4	; 244
     9d0:	e8 2e       	mov	r14, r24
     9d2:	f1 2c       	mov	r15, r1
     9d4:	b7 01       	movw	r22, r14
     9d6:	a6 01       	movw	r20, r12
     9d8:	01 90       	ld	r0, Z+
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <pwm_lld_start+0xa0>
     9dc:	76 95       	lsr	r23
     9de:	67 95       	ror	r22
     9e0:	57 95       	ror	r21
     9e2:	47 95       	ror	r20
     9e4:	0a 94       	dec	r0
     9e6:	d2 f7       	brpl	.-12     	; 0x9dc <pwm_lld_start+0x98>
     9e8:	9f 5f       	subi	r25, 0xFF	; 255
     9ea:	48 15       	cp	r20, r8
     9ec:	59 05       	cpc	r21, r9
     9ee:	6a 05       	cpc	r22, r10
     9f0:	7b 05       	cpc	r23, r11
     9f2:	d9 f0       	breq	.+54     	; 0xa2a <pwm_lld_start+0xe6>
     9f4:	95 30       	cpi	r25, 0x05	; 5
     9f6:	71 f7       	brne	.-36     	; 0x9d4 <pwm_lld_start+0x90>
     9f8:	9d e1       	ldi	r25, 0x1D	; 29
     9fa:	f9 01       	movw	r30, r18
     9fc:	43 81       	ldd	r20, Z+3	; 0x03
     9fe:	54 81       	ldd	r21, Z+4	; 0x04
     a00:	50 93 01 00 	sts	0x0001, r21	; 0x800001 <__TEXT_REGION_LENGTH__+0x7f8001>
     a04:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     a0e:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     a12:	01 80       	ldd	r0, Z+1	; 0x01
     a14:	f2 81       	ldd	r31, Z+2	; 0x02
     a16:	e0 2d       	mov	r30, r0
     a18:	86 81       	ldd	r24, Z+6	; 0x06
     a1a:	97 81       	ldd	r25, Z+7	; 0x07
     a1c:	89 2b       	or	r24, r25
     a1e:	09 f4       	brne	.+2      	; 0xa22 <pwm_lld_start+0xde>
     a20:	a8 cf       	rjmp	.-176    	; 0x972 <pwm_lld_start+0x2e>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     a28:	a4 cf       	rjmp	.-184    	; 0x972 <pwm_lld_start+0x2e>
     a2a:	98 61       	ori	r25, 0x18	; 24
     a2c:	e6 cf       	rjmp	.-52     	; 0x9fa <pwm_lld_start+0xb6>
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <PWMD2+0x4>
     a36:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <PWMD2+0x3>
     a3a:	87 e0       	ldi	r24, 0x07	; 7
     a3c:	e5 e0       	ldi	r30, 0x05	; 5
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	de 01       	movw	r26, r28
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	8a 95       	dec	r24
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <pwm_lld_start+0x100>
     a4c:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <PWMD2+0x1>
     a50:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <PWMD2+0x2>
     a54:	8d 90       	ld	r8, X+
     a56:	9d 90       	ld	r9, X+
     a58:	ad 90       	ld	r10, X+
     a5a:	bc 90       	ld	r11, X
     a5c:	13 97       	sbiw	r26, 0x03	; 3
     a5e:	fe 01       	movw	r30, r28
     a60:	31 96       	adiw	r30, 0x01	; 1
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	c1 2c       	mov	r12, r1
     a66:	94 e2       	ldi	r25, 0x24	; 36
     a68:	d9 2e       	mov	r13, r25
     a6a:	94 ef       	ldi	r25, 0xF4	; 244
     a6c:	e9 2e       	mov	r14, r25
     a6e:	f1 2c       	mov	r15, r1
     a70:	b7 01       	movw	r22, r14
     a72:	a6 01       	movw	r20, r12
     a74:	01 90       	ld	r0, Z+
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <pwm_lld_start+0x13c>
     a78:	76 95       	lsr	r23
     a7a:	67 95       	ror	r22
     a7c:	57 95       	ror	r21
     a7e:	47 95       	ror	r20
     a80:	0a 94       	dec	r0
     a82:	d2 f7       	brpl	.-12     	; 0xa78 <pwm_lld_start+0x134>
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	48 15       	cp	r20, r8
     a88:	59 05       	cpc	r21, r9
     a8a:	6a 05       	cpc	r22, r10
     a8c:	7b 05       	cpc	r23, r11
     a8e:	19 f0       	breq	.+6      	; 0xa96 <pwm_lld_start+0x152>
     a90:	87 30       	cpi	r24, 0x07	; 7
     a92:	71 f7       	brne	.-36     	; 0xa70 <pwm_lld_start+0x12c>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     a9c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     aa0:	16 96       	adiw	r26, 0x06	; 6
     aa2:	8d 91       	ld	r24, X+
     aa4:	9c 91       	ld	r25, X
     aa6:	17 97       	sbiw	r26, 0x07	; 7
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f4       	brne	.+2      	; 0xaae <pwm_lld_start+0x16a>
     aac:	62 cf       	rjmp	.-316    	; 0x972 <pwm_lld_start+0x2e>
     aae:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     ab8:	5c cf       	rjmp	.-328    	; 0x972 <pwm_lld_start+0x2e>

00000aba <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29

  uint16_t val = width;

#if AVR_PWM_USE_TIM2 || defined(__DOXYGEN__)
  if (pwmp == &PWMD2) {
     ac4:	21 e0       	ldi	r18, 0x01	; 1
     ac6:	85 3f       	cpi	r24, 0xF5	; 245
     ac8:	92 07       	cpc	r25, r18
     aca:	09 f4       	brne	.+2      	; 0xace <pwm_lld_enable_channel+0x14>
     acc:	64 c0       	rjmp	.+200    	; 0xb96 <pwm_lld_enable_channel+0xdc>
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     ace:	26 2f       	mov	r18, r22
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	dc 01       	movw	r26, r24
     ad4:	11 96       	adiw	r26, 0x01	; 1
     ad6:	cd 91       	ld	r28, X+
     ad8:	dc 91       	ld	r29, X
     ada:	12 97       	sbiw	r26, 0x02	; 2
     adc:	f9 01       	movw	r30, r18
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	df 01       	movw	r26, r30
     ae4:	a2 0f       	add	r26, r18
     ae6:	b3 1f       	adc	r27, r19
     ae8:	ac 0f       	add	r26, r28
     aea:	bd 1f       	adc	r27, r29
     aec:	18 96       	adiw	r26, 0x08	; 8
     aee:	0c 91       	ld	r16, X
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
     af0:	10 91 00 00 	lds	r17, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     af4:	66 0f       	add	r22, r22
     af6:	a7 e0       	ldi	r26, 0x07	; 7
     af8:	a6 1b       	sub	r26, r22
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	eb 01       	movw	r28, r22
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <pwm_lld_enable_channel+0x4a>
     b02:	cc 0f       	add	r28, r28
     b04:	aa 95       	dec	r26
     b06:	ea f7       	brpl	.-6      	; 0xb02 <pwm_lld_enable_channel+0x48>
     b08:	a3 e0       	ldi	r26, 0x03	; 3
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	a2 1b       	sub	r26, r18
     b0e:	b3 0b       	sbc	r27, r19
     b10:	aa 0f       	add	r26, r26
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <pwm_lld_enable_channel+0x5c>
     b14:	66 0f       	add	r22, r22
     b16:	aa 95       	dec	r26
     b18:	ea f7       	brpl	.-6      	; 0xb14 <pwm_lld_enable_channel+0x5a>
     b1a:	6c 2b       	or	r22, r28
     b1c:	76 2f       	mov	r23, r22
     b1e:	70 95       	com	r23
     b20:	71 23       	and	r23, r17
     b22:	70 93 00 00 	sts	0x0000, r23	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
     b26:	01 30       	cpi	r16, 0x01	; 1
     b28:	51 f1       	breq	.+84     	; 0xb7e <pwm_lld_enable_channel+0xc4>
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
     b2a:	02 30       	cpi	r16, 0x02	; 2
     b2c:	71 f1       	breq	.+92     	; 0xb8a <pwm_lld_enable_channel+0xd0>
    break;
  default:
    ocrh = regs_table[i].ocrah;
    ocrl = regs_table[i].ocral;
  }
  *ocrh = val >> 8;
     b2e:	50 93 00 00 	sts	0x0000, r21	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
  *ocrl = val & 0xFF;
     b32:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
  *regs_table[i].tifr = (1 << (channel + 1));
     b36:	b9 01       	movw	r22, r18
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <pwm_lld_enable_channel+0x8a>
     b42:	44 0f       	add	r20, r20
     b44:	6a 95       	dec	r22
     b46:	ea f7       	brpl	.-6      	; 0xb42 <pwm_lld_enable_channel+0x88>
     b48:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
  if (pwmp->config->channels[channel].callback != NULL)
     b4c:	dc 01       	movw	r26, r24
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	8d 91       	ld	r24, X+
     b52:	9c 91       	ld	r25, X
     b54:	12 97       	sbiw	r26, 0x02	; 2
     b56:	2e 0f       	add	r18, r30
     b58:	3f 1f       	adc	r19, r31
     b5a:	fc 01       	movw	r30, r24
     b5c:	e2 0f       	add	r30, r18
     b5e:	f3 1f       	adc	r31, r19
     b60:	81 85       	ldd	r24, Z+9	; 0x09
     b62:	92 85       	ldd	r25, Z+10	; 0x0a
     b64:	89 2b       	or	r24, r25
     b66:	29 f0       	breq	.+10     	; 0xb72 <pwm_lld_enable_channel+0xb8>
    *regs_table[i].timsk |= (1 << (channel + 1));
     b68:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     b6c:	48 2b       	or	r20, r24
     b6e:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	08 95       	ret
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
     b7e:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     b82:	c6 2b       	or	r28, r22
     b84:	c0 93 00 00 	sts	0x0000, r28	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     b88:	d2 cf       	rjmp	.-92     	; 0xb2e <pwm_lld_enable_channel+0x74>
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
    *tccra |= (1 << com1) | (1 << com0);   /* Inverting mode.     */
     b8a:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     b8e:	67 2b       	or	r22, r23
     b90:	60 93 00 00 	sts	0x0000, r22	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
     b94:	cc cf       	rjmp	.-104    	; 0xb2e <pwm_lld_enable_channel+0x74>

  uint16_t val = width;

#if AVR_PWM_USE_TIM2 || defined(__DOXYGEN__)
  if (pwmp == &PWMD2) {
    config_channel(&TCCR2A,
     b96:	86 2f       	mov	r24, r22
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <PWMD2+0x1>
     b9e:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <PWMD2+0x2>
     ba2:	fc 01       	movw	r30, r24
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ef 01       	movw	r28, r30
     baa:	c8 0f       	add	r28, r24
     bac:	d9 1f       	adc	r29, r25
     bae:	ca 0f       	add	r28, r26
     bb0:	db 1f       	adc	r29, r27
     bb2:	f8 84       	ldd	r15, Y+8	; 0x08
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
     bb4:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     bb8:	26 2f       	mov	r18, r22
     bba:	22 0f       	add	r18, r18
     bbc:	c7 e0       	ldi	r28, 0x07	; 7
     bbe:	c2 1b       	sub	r28, r18
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	89 01       	movw	r16, r18
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <pwm_lld_enable_channel+0x110>
     bc8:	00 0f       	add	r16, r16
     bca:	ca 95       	dec	r28
     bcc:	ea f7       	brpl	.-6      	; 0xbc8 <pwm_lld_enable_channel+0x10e>
     bce:	c3 e0       	ldi	r28, 0x03	; 3
     bd0:	d0 e0       	ldi	r29, 0x00	; 0
     bd2:	c8 1b       	sub	r28, r24
     bd4:	d9 0b       	sbc	r29, r25
     bd6:	cc 0f       	add	r28, r28
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <pwm_lld_enable_channel+0x122>
     bda:	22 0f       	add	r18, r18
     bdc:	ca 95       	dec	r28
     bde:	ea f7       	brpl	.-6      	; 0xbda <pwm_lld_enable_channel+0x120>
     be0:	20 2b       	or	r18, r16
     be2:	32 2f       	mov	r19, r18
     be4:	30 95       	com	r19
     be6:	37 23       	and	r19, r23
     be8:	30 93 b0 00 	sts	0x00B0, r19	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
     bec:	31 e0       	ldi	r19, 0x01	; 1
     bee:	f3 16       	cp	r15, r19
     bf0:	91 f1       	breq	.+100    	; 0xc56 <pwm_lld_enable_channel+0x19c>
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
     bf2:	32 e0       	ldi	r19, 0x02	; 2
     bf4:	f3 16       	cp	r15, r19
     bf6:	a9 f1       	breq	.+106    	; 0xc62 <pwm_lld_enable_channel+0x1a8>
     bf8:	9a 01       	movw	r18, r20
     bfa:	4f 3f       	cpi	r20, 0xFF	; 255
     bfc:	51 05       	cpc	r21, r1
     bfe:	19 f0       	breq	.+6      	; 0xc06 <pwm_lld_enable_channel+0x14c>
     c00:	10 f0       	brcs	.+4      	; 0xc06 <pwm_lld_enable_channel+0x14c>
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	30 e0       	ldi	r19, 0x00	; 0
                   6 - 2*channel,
                   pwmp->config->channels[channel].mode);
    /* Timer 2 is 8 bit. */
    if (val > 0xFF)
      val = 0xFF;
    switch (channel) {
     c06:	66 23       	and	r22, r22
     c08:	19 f1       	breq	.+70     	; 0xc50 <pwm_lld_enable_channel+0x196>
     c0a:	61 30       	cpi	r22, 0x01	; 1
     c0c:	11 f4       	brne	.+4      	; 0xc12 <pwm_lld_enable_channel+0x158>
    case 0: OCR2A = val; break;
    case 1: OCR2B = val; break;
     c0e:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    }
    TIFR2 = 1 << (OCF2A + channel);
     c12:	ac 01       	movw	r20, r24
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <pwm_lld_enable_channel+0x166>
     c1e:	22 0f       	add	r18, r18
     c20:	4a 95       	dec	r20
     c22:	ea f7       	brpl	.-6      	; 0xc1e <pwm_lld_enable_channel+0x164>
     c24:	27 bb       	out	0x17, r18	; 23
    if (pwmp->config->channels[channel].callback)
     c26:	8e 0f       	add	r24, r30
     c28:	9f 1f       	adc	r25, r31
     c2a:	fd 01       	movw	r30, r26
     c2c:	e8 0f       	add	r30, r24
     c2e:	f9 1f       	adc	r31, r25
     c30:	81 85       	ldd	r24, Z+9	; 0x09
     c32:	92 85       	ldd	r25, Z+10	; 0x0a
     c34:	89 2b       	or	r24, r25
     c36:	09 f4       	brne	.+2      	; 0xc3a <pwm_lld_enable_channel+0x180>
     c38:	9c cf       	rjmp	.-200    	; 0xb72 <pwm_lld_enable_channel+0xb8>
      TIMSK2 |= (1 << (OCIE2A + channel));
     c3a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     c3e:	28 2b       	or	r18, r24
     c40:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
  *ocrh = val >> 8;
  *ocrl = val & 0xFF;
  *regs_table[i].tifr = (1 << (channel + 1));
  if (pwmp->config->channels[channel].callback != NULL)
    *regs_table[i].timsk |= (1 << (channel + 1));
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	08 95       	ret
                   pwmp->config->channels[channel].mode);
    /* Timer 2 is 8 bit. */
    if (val > 0xFF)
      val = 0xFF;
    switch (channel) {
    case 0: OCR2A = val; break;
     c50:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c54:	de cf       	rjmp	.-68     	; 0xc12 <pwm_lld_enable_channel+0x158>
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
     c56:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c5a:	02 2b       	or	r16, r18
     c5c:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c60:	cb cf       	rjmp	.-106    	; 0xbf8 <pwm_lld_enable_channel+0x13e>
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
    *tccra |= (1 << com1) | (1 << com0);   /* Inverting mode.     */
     c62:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c66:	23 2b       	or	r18, r19
     c68:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     c6c:	c5 cf       	rjmp	.-118    	; 0xbf8 <pwm_lld_enable_channel+0x13e>

00000c6e <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
     c6e:	e1 ec       	ldi	r30, 0xC1	; 193
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 62       	ori	r24, 0x20	; 32
     c76:	80 83       	st	Z, r24
     c78:	08 95       	ret

00000c7a <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

  sra = UCSR0A;
     ca2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
     ca6:	98 2f       	mov	r25, r24
     ca8:	9c 71       	andi	r25, 0x1C	; 28
     caa:	41 f0       	breq	.+16     	; 0xcbc <__vector_18+0x42>
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
     cac:	82 fd       	sbrc	r24, 2
     cae:	21 c0       	rjmp	.+66     	; 0xcf2 <__vector_18+0x78>
     cb0:	60 e0       	ldi	r22, 0x00	; 0
    sts |= SD_PARITY_ERROR;
  if (sra & fe)
     cb2:	84 fd       	sbrc	r24, 4
    sts |= SD_FRAMING_ERROR;
     cb4:	60 64       	ori	r22, 0x40	; 64
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     cb6:	8e ef       	ldi	r24, 0xFE	; 254
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	7b d2       	rcall	.+1270   	; 0x11b2 <chEvtBroadcastFlagsI>

  sra = UCSR0A;
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
     cbc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     cc0:	8c ef       	ldi	r24, 0xFC	; 252
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	e5 dc       	rcall	.-1590   	; 0x690 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     cc6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>
     cca:	d2 d0       	rcall	.+420    	; 0xe70 <chSchIsPreemptionRequired>
     ccc:	81 11       	cpse	r24, r1
     cce:	df d0       	rcall	.+446    	; 0xe8e <chSchDoPreemption>
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	1f 90       	pop	r1
     cf0:	18 95       	reti
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    sts |= SD_PARITY_ERROR;
     cf2:	60 e2       	ldi	r22, 0x20	; 32
     cf4:	de cf       	rjmp	.-68     	; 0xcb2 <__vector_18+0x38>

00000cf6 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
     d1e:	8c ef       	ldi	r24, 0xFC	; 252
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	da dc       	rcall	.-1612   	; 0x6d8 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
     d24:	97 fd       	sbrc	r25, 7
     d26:	18 c0       	rjmp	.+48     	; 0xd58 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
     d28:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

  OSAL_IRQ_EPILOGUE();
     d2c:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>
     d30:	9f d0       	rcall	.+318    	; 0xe70 <chSchIsPreemptionRequired>
     d32:	81 11       	cpse	r24, r1
     d34:	ac d0       	rcall	.+344    	; 0xe8e <chSchDoPreemption>
}
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
     d58:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     d5c:	8f 7d       	andi	r24, 0xDF	; 223
     d5e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     d62:	e4 cf       	rjmp	.-56     	; 0xd2c <__vector_19+0x36>

00000d64 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
     d64:	47 e3       	ldi	r20, 0x37	; 55
     d66:	56 e0       	ldi	r21, 0x06	; 6
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	8c ef       	ldi	r24, 0xFC	; 252
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	64 cc       	rjmp	.-1848   	; 0x63a <sdObjectInit>

00000d72 <chSysTimerHandlerI>:
void chThdSleepUntil(systime_t abstime) {

  chSysLock();
  chThdSleepUntilS(abstime);
  chSysUnlock();
}
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <nil+0x6>
     d80:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <nil+0x7>
     d84:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <nil+0x4>
     d88:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <nil+0x5>
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	e7 e4       	ldi	r30, 0x47	; 71
     d92:	f2 e0       	ldi	r31, 0x02	; 2
     d94:	cf ef       	ldi	r28, 0xFF	; 255
     d96:	df ef       	ldi	r29, 0xFF	; 255
     d98:	ff 24       	eor	r15, r15
     d9a:	f3 94       	inc	r15
     d9c:	25 81       	ldd	r18, Z+5	; 0x05
     d9e:	36 81       	ldd	r19, Z+6	; 0x06
     da0:	21 15       	cp	r18, r1
     da2:	31 05       	cpc	r19, r1
     da4:	f9 f0       	breq	.+62     	; 0xde4 <chSysTimerHandlerI+0x72>
     da6:	26 0f       	add	r18, r22
     da8:	37 1f       	adc	r19, r23
     daa:	28 1b       	sub	r18, r24
     dac:	39 0b       	sbc	r19, r25
     dae:	36 83       	std	Z+6, r19	; 0x06
     db0:	25 83       	std	Z+5, r18	; 0x05
     db2:	21 15       	cp	r18, r1
     db4:	31 05       	cpc	r19, r1
     db6:	41 f5       	brne	.+80     	; 0xe08 <chSysTimerHandlerI+0x96>
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	25 30       	cpi	r18, 0x05	; 5
     dbc:	c9 f1       	breq	.+114    	; 0xe30 <chSysTimerHandlerI+0xbe>
     dbe:	23 30       	cpi	r18, 0x03	; 3
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <chSysTimerHandlerI+0x52>
     dc2:	3d c0       	rjmp	.+122    	; 0xe3e <chSysTimerHandlerI+0xcc>
     dc4:	d4 83       	std	Z+4, r29	; 0x04
     dc6:	c3 83       	std	Z+3, r28	; 0x03
     dc8:	f2 82       	std	Z+2, r15	; 0x02
     dca:	16 82       	std	Z+6, r1	; 0x06
     dcc:	15 82       	std	Z+5, r1	; 0x05
     dce:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <nil+0x2>
     dd2:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <nil+0x3>
     dd6:	e2 17       	cp	r30, r18
     dd8:	f3 07       	cpc	r31, r19
     dda:	20 f4       	brcc	.+8      	; 0xde4 <chSysTimerHandlerI+0x72>
     ddc:	f0 93 42 02 	sts	0x0242, r31	; 0x800242 <nil+0x3>
     de0:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <nil+0x2>
     de4:	3a 96       	adiw	r30, 0x0a	; 10
     de6:	b2 e0       	ldi	r27, 0x02	; 2
     de8:	ef 36       	cpi	r30, 0x6F	; 111
     dea:	fb 07       	cpc	r31, r27
     dec:	b9 f6       	brne	.-82     	; 0xd9c <chSysTimerHandlerI+0x2a>
     dee:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <nil+0x5>
     df2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <nil+0x4>
     df6:	41 15       	cp	r20, r1
     df8:	51 05       	cpc	r21, r1
     dfa:	71 f4       	brne	.+28     	; 0xe18 <chSysTimerHandlerI+0xa6>
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	76 c9       	rjmp	.-3348   	; 0xf4 <stStopAlarm>
     e08:	8a 01       	movw	r16, r20
     e0a:	01 50       	subi	r16, 0x01	; 1
     e0c:	11 09       	sbc	r17, r1
     e0e:	02 17       	cp	r16, r18
     e10:	13 07       	cpc	r17, r19
     e12:	40 f3       	brcs	.-48     	; 0xde4 <chSysTimerHandlerI+0x72>
     e14:	a9 01       	movw	r20, r18
     e16:	e6 cf       	rjmp	.-52     	; 0xde4 <chSysTimerHandlerI+0x72>
     e18:	84 0f       	add	r24, r20
     e1a:	95 1f       	adc	r25, r21
     e1c:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <nil+0x7>
     e20:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <nil+0x6>
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	65 c9       	rjmp	.-3382   	; 0xfa <stSetAlarm>
     e30:	03 81       	ldd	r16, Z+3	; 0x03
     e32:	14 81       	ldd	r17, Z+4	; 0x04
     e34:	d8 01       	movw	r26, r16
     e36:	2c 91       	ld	r18, X
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	2c 93       	st	X, r18
     e3c:	c3 cf       	rjmp	.-122    	; 0xdc4 <chSysTimerHandlerI+0x52>
     e3e:	23 81       	ldd	r18, Z+3	; 0x03
     e40:	34 81       	ldd	r19, Z+4	; 0x04
     e42:	d9 01       	movw	r26, r18
     e44:	1d 92       	st	X+, r1
     e46:	1c 92       	st	X, r1
     e48:	bd cf       	rjmp	.-134    	; 0xdc4 <chSysTimerHandlerI+0x52>

00000e4a <chSchReadyI>:
     e4a:	fc 01       	movw	r30, r24
     e4c:	74 83       	std	Z+4, r23	; 0x04
     e4e:	63 83       	std	Z+3, r22	; 0x03
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	22 83       	std	Z+2, r18	; 0x02
     e54:	16 82       	std	Z+6, r1	; 0x06
     e56:	15 82       	std	Z+5, r1	; 0x05
     e58:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <nil+0x2>
     e5c:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <nil+0x3>
     e60:	82 17       	cp	r24, r18
     e62:	93 07       	cpc	r25, r19
     e64:	20 f4       	brcc	.+8      	; 0xe6e <chSchReadyI+0x24>
     e66:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nil+0x3>
     e6a:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nil+0x2>
     e6e:	08 95       	ret

00000e70 <chSchIsPreemptionRequired>:
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	40 91 3f 02 	lds	r20, 0x023F	; 0x80023f <nil>
     e76:	50 91 40 02 	lds	r21, 0x0240	; 0x800240 <nil+0x1>
     e7a:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <nil+0x2>
     e7e:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <nil+0x3>
     e82:	42 17       	cp	r20, r18
     e84:	53 07       	cpc	r21, r19
     e86:	09 f0       	breq	.+2      	; 0xe8a <chSchIsPreemptionRequired+0x1a>
     e88:	08 95       	ret
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	08 95       	ret

00000e8e <chSchDoPreemption>:
     e8e:	ef e3       	ldi	r30, 0x3F	; 63
     e90:	f2 e0       	ldi	r31, 0x02	; 2
     e92:	60 81       	ld	r22, Z
     e94:	71 81       	ldd	r23, Z+1	; 0x01
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	4d c2       	rjmp	.+1178   	; 0x133a <_port_switch>
     ea0:	08 95       	ret

00000ea2 <chSchGoSleepTimeoutS>:
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	eb 01       	movw	r28, r22
     eac:	00 91 3f 02 	lds	r16, 0x023F	; 0x80023f <nil>
     eb0:	10 91 40 02 	lds	r17, 0x0240	; 0x800240 <nil+0x1>
     eb4:	f8 01       	movw	r30, r16
     eb6:	82 83       	std	Z+2, r24	; 0x02
     eb8:	20 97       	sbiw	r28, 0x00	; 0
     eba:	e1 f0       	breq	.+56     	; 0xef4 <chSchGoSleepTimeoutS+0x52>
     ebc:	62 30       	cpi	r22, 0x02	; 2
     ebe:	71 05       	cpc	r23, r1
     ec0:	c8 f1       	brcs	.+114    	; 0xf34 <chSchGoSleepTimeoutS+0x92>
     ec2:	0a d9       	rcall	.-3564   	; 0xd8 <stGetCounter>
     ec4:	c8 0f       	add	r28, r24
     ec6:	d9 1f       	adc	r29, r25
     ec8:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <nil+0x4>
     ecc:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <nil+0x5>
     ed0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <nil+0x6>
     ed4:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <nil+0x7>
     ed8:	28 17       	cp	r18, r24
     eda:	39 07       	cpc	r19, r25
     edc:	71 f1       	breq	.+92     	; 0xf3a <chSchGoSleepTimeoutS+0x98>
     ede:	ae 01       	movw	r20, r28
     ee0:	42 1b       	sub	r20, r18
     ee2:	53 0b       	sbc	r21, r19
     ee4:	82 1b       	sub	r24, r18
     ee6:	93 0b       	sbc	r25, r19
     ee8:	48 17       	cp	r20, r24
     eea:	59 07       	cpc	r21, r25
     eec:	a0 f1       	brcs	.+104    	; 0xf56 <chSchGoSleepTimeoutS+0xb4>
     eee:	f8 01       	movw	r30, r16
     ef0:	56 83       	std	Z+6, r21	; 0x06
     ef2:	45 83       	std	Z+5, r20	; 0x05
     ef4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <nil+0xa>
     ef8:	e7 e4       	ldi	r30, 0x47	; 71
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	21 f0       	breq	.+8      	; 0xf08 <chSchGoSleepTimeoutS+0x66>
     f00:	3a 96       	adiw	r30, 0x0a	; 10
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	e1 f7       	brne	.-8      	; 0xf00 <chSchGoSleepTimeoutS+0x5e>
     f08:	f0 93 42 02 	sts	0x0242, r31	; 0x800242 <nil+0x3>
     f0c:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <nil+0x2>
     f10:	f0 93 40 02 	sts	0x0240, r31	; 0x800240 <nil+0x1>
     f14:	e0 93 3f 02 	sts	0x023F, r30	; 0x80023f <nil>
     f18:	b8 01       	movw	r22, r16
     f1a:	cf 01       	movw	r24, r30
     f1c:	0e d2       	rcall	.+1052   	; 0x133a <_port_switch>
     f1e:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <nil>
     f22:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <nil+0x1>
     f26:	83 81       	ldd	r24, Z+3	; 0x03
     f28:	94 81       	ldd	r25, Z+4	; 0x04
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret
     f34:	c2 e0       	ldi	r28, 0x02	; 2
     f36:	d0 e0       	ldi	r29, 0x00	; 0
     f38:	c4 cf       	rjmp	.-120    	; 0xec2 <chSchGoSleepTimeoutS+0x20>
     f3a:	ce 01       	movw	r24, r28
     f3c:	d2 d8       	rcall	.-3676   	; 0xe2 <stStartAlarm>
     f3e:	d0 93 46 02 	sts	0x0246, r29	; 0x800246 <nil+0x7>
     f42:	c0 93 45 02 	sts	0x0245, r28	; 0x800245 <nil+0x6>
     f46:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <nil+0x4>
     f4a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <nil+0x5>
     f4e:	ae 01       	movw	r20, r28
     f50:	48 1b       	sub	r20, r24
     f52:	59 0b       	sbc	r21, r25
     f54:	cc cf       	rjmp	.-104    	; 0xeee <chSchGoSleepTimeoutS+0x4c>
     f56:	ce 01       	movw	r24, r28
     f58:	d0 d8       	rcall	.-3680   	; 0xfa <stSetAlarm>
     f5a:	d0 93 46 02 	sts	0x0246, r29	; 0x800246 <nil+0x7>
     f5e:	c0 93 45 02 	sts	0x0245, r28	; 0x800245 <nil+0x6>
     f62:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <nil+0x4>
     f66:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <nil+0x5>
     f6a:	ae 01       	movw	r20, r28
     f6c:	48 1b       	sub	r20, r24
     f6e:	59 0b       	sbc	r21, r25
     f70:	be cf       	rjmp	.-132    	; 0xeee <chSchGoSleepTimeoutS+0x4c>

00000f72 <chThdCreateI>:
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	dc 01       	movw	r26, r24
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	2c 91       	ld	r18, X
     f7c:	16 97       	sbiw	r26, 0x06	; 6
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	f9 01       	movw	r30, r18
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	c9 01       	movw	r24, r18
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	e8 0f       	add	r30, r24
     f96:	f9 1f       	adc	r31, r25
     f98:	cf 01       	movw	r24, r30
     f9a:	89 5b       	subi	r24, 0xB9	; 185
     f9c:	9d 4f       	sbci	r25, 0xFD	; 253
     f9e:	e1 5c       	subi	r30, 0xC1	; 193
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	17 86       	std	Z+15, r1	; 0x0f
     fa4:	14 96       	adiw	r26, 0x04	; 4
     fa6:	cd 91       	ld	r28, X+
     fa8:	dc 91       	ld	r29, X
     faa:	15 97       	sbiw	r26, 0x05	; 5
     fac:	65 97       	sbiw	r28, 0x15	; 21
     fae:	d1 87       	std	Z+9, r29	; 0x09
     fb0:	c0 87       	std	Z+8, r28	; 0x08
     fb2:	17 96       	adiw	r26, 0x07	; 7
     fb4:	4c 91       	ld	r20, X
     fb6:	17 97       	sbiw	r26, 0x07	; 7
     fb8:	4a 8b       	std	Y+18, r20	; 0x12
     fba:	c0 85       	ldd	r28, Z+8	; 0x08
     fbc:	d1 85       	ldd	r29, Z+9	; 0x09
     fbe:	18 96       	adiw	r26, 0x08	; 8
     fc0:	4c 91       	ld	r20, X
     fc2:	18 97       	sbiw	r26, 0x08	; 8
     fc4:	49 8b       	std	Y+17, r20	; 0x11
     fc6:	c0 85       	ldd	r28, Z+8	; 0x08
     fc8:	d1 85       	ldd	r29, Z+9	; 0x09
     fca:	19 96       	adiw	r26, 0x09	; 9
     fcc:	4c 91       	ld	r20, X
     fce:	19 97       	sbiw	r26, 0x09	; 9
     fd0:	48 8b       	std	Y+16, r20	; 0x10
     fd2:	c0 85       	ldd	r28, Z+8	; 0x08
     fd4:	d1 85       	ldd	r29, Z+9	; 0x09
     fd6:	1a 96       	adiw	r26, 0x0a	; 10
     fd8:	4c 91       	ld	r20, X
     fda:	4f 87       	std	Y+15, r20	; 0x0f
     fdc:	a0 85       	ldd	r26, Z+8	; 0x08
     fde:	b1 85       	ldd	r27, Z+9	; 0x09
     fe0:	4c ec       	ldi	r20, 0xCC	; 204
     fe2:	59 e0       	ldi	r21, 0x09	; 9
     fe4:	53 96       	adiw	r26, 0x13	; 19
     fe6:	5c 93       	st	X, r21
     fe8:	a0 85       	ldd	r26, Z+8	; 0x08
     fea:	b1 85       	ldd	r27, Z+9	; 0x09
     fec:	54 96       	adiw	r26, 0x14	; 20
     fee:	4c 93       	st	X, r20
     ff0:	14 86       	std	Z+12, r1	; 0x0c
     ff2:	13 86       	std	Z+11, r1	; 0x0b
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	d9 01       	movw	r26, r18
     ffa:	aa 0f       	add	r26, r26
     ffc:	bb 1f       	adc	r27, r27
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	22 0f       	add	r18, r18
    1004:	33 1f       	adc	r19, r19
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	a2 0f       	add	r26, r18
    100c:	b3 1f       	adc	r27, r19
    100e:	a1 5c       	subi	r26, 0xC1	; 193
    1010:	bd 4f       	sbci	r27, 0xFD	; 253
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	2c 93       	st	X, r18
    1016:	16 86       	std	Z+14, r1	; 0x0e
    1018:	15 86       	std	Z+13, r1	; 0x0d
    101a:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <nil+0x2>
    101e:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <nil+0x3>
    1022:	82 17       	cp	r24, r18
    1024:	93 07       	cpc	r25, r19
    1026:	20 f4       	brcc	.+8      	; 0x1030 <chThdCreateI+0xbe>
    1028:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <nil+0x3>
    102c:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <nil+0x2>
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <chSysInit>:
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	e0 d0       	rcall	.+448    	; 0x11fc <__core_init>
    103c:	31 d1       	rcall	.+610    	; 0x12a0 <__heap_init>
    103e:	4a d1       	rcall	.+660    	; 0x12d4 <__factory_init>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>
    1046:	2f e6       	ldi	r18, 0x6F	; 111
    1048:	32 e0       	ldi	r19, 0x02	; 2
    104a:	30 93 40 02 	sts	0x0240, r19	; 0x800240 <nil+0x1>
    104e:	20 93 3f 02 	sts	0x023F, r18	; 0x80023f <nil>
    1052:	30 93 42 02 	sts	0x0242, r19	; 0x800242 <nil+0x3>
    1056:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <nil+0x2>
    105a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <nil+0x32>
    105e:	f8 94       	cli
    1060:	cc e4       	ldi	r28, 0x4C	; 76
    1062:	d1 e0       	ldi	r29, 0x01	; 1
    1064:	ce 01       	movw	r24, r28
    1066:	85 df       	rcall	.-246    	; 0xf72 <chThdCreateI>
    1068:	2b 96       	adiw	r28, 0x0b	; 11
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	98 85       	ldd	r25, Y+8	; 0x08
    106e:	89 2b       	or	r24, r25
    1070:	c9 f7       	brne	.-14     	; 0x1064 <chSysInit+0x2e>
    1072:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <nil>
    1076:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <nil+0x1>
    107a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <nil+0x2>
    107e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <nil+0x3>
    1082:	86 17       	cp	r24, r22
    1084:	97 07       	cpc	r25, r23
    1086:	29 f0       	breq	.+10     	; 0x1092 <chSysInit+0x5c>
    1088:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <nil+0x1>
    108c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <nil>
    1090:	54 d1       	rcall	.+680    	; 0x133a <_port_switch>
    1092:	78 94       	sei
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <chThdExit>:
    109a:	bc 01       	movw	r22, r24
    109c:	f8 94       	cli
    109e:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <nil>
    10a2:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <nil+0x1>
    10a6:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <nil+0x2>
    10aa:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <nil+0x3>
    10ae:	e7 e4       	ldi	r30, 0x47	; 71
    10b0:	f2 e0       	ldi	r31, 0x02	; 2
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	92 81       	ldd	r25, Z+2	; 0x02
    10b6:	94 30       	cpi	r25, 0x04	; 4
    10b8:	89 f0       	breq	.+34     	; 0x10dc <chThdExit+0x42>
    10ba:	3a 96       	adiw	r30, 0x0a	; 10
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	ef 36       	cpi	r30, 0x6F	; 111
    10c0:	f9 07       	cpc	r31, r25
    10c2:	c1 f7       	brne	.-16     	; 0x10b4 <chThdExit+0x1a>
    10c4:	30 93 42 02 	sts	0x0242, r19	; 0x800242 <nil+0x3>
    10c8:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <nil+0x2>
    10cc:	14 96       	adiw	r26, 0x04	; 4
    10ce:	7c 93       	st	X, r23
    10d0:	6e 93       	st	-X, r22
    10d2:	13 97       	sbiw	r26, 0x03	; 3
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	8b e0       	ldi	r24, 0x0B	; 11
    10da:	e3 ce       	rjmp	.-570    	; 0xea2 <chSchGoSleepTimeoutS>
    10dc:	43 81       	ldd	r20, Z+3	; 0x03
    10de:	54 81       	ldd	r21, Z+4	; 0x04
    10e0:	4a 17       	cp	r20, r26
    10e2:	5b 07       	cpc	r21, r27
    10e4:	51 f7       	brne	.-44     	; 0x10ba <chThdExit+0x20>
    10e6:	74 83       	std	Z+4, r23	; 0x04
    10e8:	63 83       	std	Z+3, r22	; 0x03
    10ea:	82 83       	std	Z+2, r24	; 0x02
    10ec:	16 82       	std	Z+6, r1	; 0x06
    10ee:	15 82       	std	Z+5, r1	; 0x05
    10f0:	e2 17       	cp	r30, r18
    10f2:	f3 07       	cpc	r31, r19
    10f4:	10 f7       	brcc	.-60     	; 0x10ba <chThdExit+0x20>
    10f6:	9f 01       	movw	r18, r30
    10f8:	e0 cf       	rjmp	.-64     	; 0x10ba <chThdExit+0x20>

000010fa <chThdSleep>:
    10fa:	f8 94       	cli
    10fc:	bc 01       	movw	r22, r24
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	d0 de       	rcall	.-608    	; 0xea2 <chSchGoSleepTimeoutS>
    1102:	78 94       	sei
    1104:	08 95       	ret

00001106 <chThdEnqueueTimeoutS>:
  chDbgCheckClassS();
  chDbgCheck(tqp != NULL);

  chDbgAssert(tqp->cnt <= (cnt_t)0, "invalid counter");

  if (TIME_IMMEDIATE == timeout) {
    1106:	6f 3f       	cpi	r22, 0xFF	; 255
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	72 07       	cpc	r23, r18
    110c:	61 f0       	breq	.+24     	; 0x1126 <chThdEnqueueTimeoutS+0x20>
    return MSG_TIMEOUT;
  }

  tqp->cnt--;
    110e:	fc 01       	movw	r30, r24
    1110:	20 81       	ld	r18, Z
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	20 83       	st	Z, r18
  nil.current->u1.tqp = tqp;
    1116:	e0 91 3f 02 	lds	r30, 0x023F	; 0x80023f <nil>
    111a:	f0 91 40 02 	lds	r31, 0x0240	; 0x800240 <nil+0x1>
    111e:	94 83       	std	Z+4, r25	; 0x04
    1120:	83 83       	std	Z+3, r24	; 0x03
  return chSchGoSleepTimeoutS(NIL_STATE_WTQUEUE, timeout);
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	be ce       	rjmp	.-644    	; 0xea2 <chSchGoSleepTimeoutS>
}
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	9f ef       	ldi	r25, 0xFF	; 255
    112a:	08 95       	ret

0000112c <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    112c:	dc 01       	movw	r26, r24
  thread_t *tp;

  chDbgAssert(tqp->cnt < (cnt_t)0, "empty queue");

  tqp->cnt++;
    112e:	8c 91       	ld	r24, X
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	8c 93       	st	X, r24
 * @retval NULL         if the thread is not found.
 *
 * @notapi
 */
thread_t *nil_find_thread(tstate_t state, void *p) {
  thread_t *tp = nil.threads;
    1134:	e7 e4       	ldi	r30, 0x47	; 71
    1136:	f2 e0       	ldi	r31, 0x02	; 2

  while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
    /* Is this thread matching?*/
    if ((tp->state == state) && (tp->u1.p == p)) {
    1138:	92 81       	ldd	r25, Z+2	; 0x02
    113a:	95 30       	cpi	r25, 0x05	; 5
    113c:	c9 f0       	breq	.+50     	; 0x1170 <chThdDoDequeueNextI+0x44>
      return tp;
    }
    tp++;
    113e:	3a 96       	adiw	r30, 0x0a	; 10
 * @notapi
 */
thread_t *nil_find_thread(tstate_t state, void *p) {
  thread_t *tp = nil.threads;

  while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	ef 36       	cpi	r30, 0x6F	; 111
    1144:	f8 07       	cpc	r31, r24
    1146:	c1 f7       	brne	.-16     	; 0x1138 <chThdDoDequeueNextI+0xc>
    if ((tp->state == state) && (tp->u1.p == p)) {
      return tp;
    }
    tp++;
  }
  return NULL;
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f0 e0       	ldi	r31, 0x00	; 0
  chDbgCheckClassI();
  chDbgCheck((tp >= nil.threads) && (tp < &nil.threads[CH_CFG_MAX_THREADS]));
  chDbgAssert(!NIL_THD_IS_READY(tp), "already ready");
  chDbgAssert(nil.next <= nil.current, "priority ordering");

  tp->u1.msg = msg;
    114c:	74 83       	std	Z+4, r23	; 0x04
    114e:	63 83       	std	Z+3, r22	; 0x03
  tp->state = NIL_STATE_READY;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	82 83       	std	Z+2, r24	; 0x02
  tp->timeout = (sysinterval_t)0;
    1154:	16 82       	std	Z+6, r1	; 0x06
    1156:	15 82       	std	Z+5, r1	; 0x05
  if (tp < nil.next) {
    1158:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <nil+0x2>
    115c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <nil+0x3>
    1160:	e8 17       	cp	r30, r24
    1162:	f9 07       	cpc	r31, r25
    1164:	20 f4       	brcc	.+8      	; 0x116e <chThdDoDequeueNextI+0x42>
    nil.next = tp;
    1166:	f0 93 42 02 	sts	0x0242, r31	; 0x800242 <nil+0x3>
    116a:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <nil+0x2>
    116e:	08 95       	ret
thread_t *nil_find_thread(tstate_t state, void *p) {
  thread_t *tp = nil.threads;

  while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
    /* Is this thread matching?*/
    if ((tp->state == state) && (tp->u1.p == p)) {
    1170:	83 81       	ldd	r24, Z+3	; 0x03
    1172:	94 81       	ldd	r25, Z+4	; 0x04
    1174:	a8 17       	cp	r26, r24
    1176:	b9 07       	cpc	r27, r25
    1178:	11 f7       	brne	.-60     	; 0x113e <chThdDoDequeueNextI+0x12>
    117a:	e8 cf       	rjmp	.-48     	; 0x114c <chThdDoDequeueNextI+0x20>

0000117c <chThdDequeueNextI>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(tqp != NULL);

  if (tqp->cnt < (cnt_t)0) {
    117c:	fc 01       	movw	r30, r24
    117e:	20 81       	ld	r18, Z
    1180:	27 ff       	sbrs	r18, 7
    1182:	08 95       	ret
    chThdDoDequeueNextI(tqp, msg);
    1184:	d3 cf       	rjmp	.-90     	; 0x112c <chThdDoDequeueNextI>

00001186 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the event flags set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
    1186:	fc 01       	movw	r30, r24

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epmask |= events;
    1188:	97 81       	ldd	r25, Z+7	; 0x07
    118a:	69 2b       	or	r22, r25
    118c:	67 83       	std	Z+7, r22	; 0x07
  if ((NIL_THD_IS_WTOREVT(tp) &&
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	86 30       	cpi	r24, 0x06	; 6
    1192:	59 f0       	breq	.+22     	; 0x11aa <chEvtSignalI+0x24>
       ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) ||
    1194:	87 30       	cpi	r24, 0x07	; 7
    1196:	09 f0       	breq	.+2      	; 0x119a <chEvtSignalI+0x14>
    1198:	08 95       	ret
      (NIL_THD_IS_WTANDEVT(tp) &&
       ((tp->epmask & tp->u1.ewmask) == tp->u1.ewmask))) {
    119a:	83 81       	ldd	r24, Z+3	; 0x03
  chDbgCheck(tp != NULL);

  tp->epmask |= events;
  if ((NIL_THD_IS_WTOREVT(tp) &&
       ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) ||
      (NIL_THD_IS_WTANDEVT(tp) &&
    119c:	68 23       	and	r22, r24
    119e:	86 13       	cpse	r24, r22
    11a0:	fb cf       	rjmp	.-10     	; 0x1198 <chEvtSignalI+0x12>
       ((tp->epmask & tp->u1.ewmask) == tp->u1.ewmask))) {
    (void) chSchReadyI(tp, MSG_OK);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	cf 01       	movw	r24, r30
    11a8:	50 ce       	rjmp	.-864    	; 0xe4a <chSchReadyI>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epmask |= events;
  if ((NIL_THD_IS_WTOREVT(tp) &&
    11aa:	83 81       	ldd	r24, Z+3	; 0x03
    11ac:	68 23       	and	r22, r24
    11ae:	c9 f7       	brne	.-14     	; 0x11a2 <chEvtSignalI+0x1c>
    11b0:	08 95       	ret

000011b2 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	7c 01       	movw	r14, r24
    11be:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
    11c0:	fc 01       	movw	r30, r24
    11c2:	c0 81       	ld	r28, Z
    11c4:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    11c6:	8c 17       	cp	r24, r28
    11c8:	9d 07       	cpc	r25, r29
    11ca:	91 f0       	breq	.+36     	; 0x11f0 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	81 2b       	or	r24, r17
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    11d2:	11 23       	and	r17, r17
    11d4:	19 f0       	breq	.+6      	; 0x11dc <chEvtBroadcastFlagsI+0x2a>
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	81 23       	and	r24, r17
    11da:	21 f0       	breq	.+8      	; 0x11e4 <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    11dc:	6c 81       	ldd	r22, Y+4	; 0x04
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	d1 df       	rcall	.-94     	; 0x1186 <chEvtSignalI>
    }
    elp = elp->next;
    11e4:	09 90       	ld	r0, Y+
    11e6:	d8 81       	ld	r29, Y
    11e8:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    11ea:	ec 16       	cp	r14, r28
    11ec:	fd 06       	cpc	r15, r29
    11ee:	71 f7       	brne	.-36     	; 0x11cc <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	08 95       	ret

000011fc <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
    11fc:	e9 e7       	ldi	r30, 0x79	; 121
    11fe:	f2 e0       	ldi	r31, 0x02	; 2
    1200:	8e e6       	ldi	r24, 0x6E	; 110
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	8e ee       	ldi	r24, 0xEE	; 238
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	93 83       	std	Z+3, r25	; 0x03
    120e:	82 83       	std	Z+2, r24	; 0x02
    1210:	08 95       	ret

00001212 <chCoreAllocFromTopI>:
    1212:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <ch_memcore+0x2>
    1216:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <ch_memcore+0x3>
    121a:	f9 01       	movw	r30, r18
    121c:	e8 1b       	sub	r30, r24
    121e:	f9 0b       	sbc	r31, r25
    1220:	71 95       	neg	r23
    1222:	61 95       	neg	r22
    1224:	71 09       	sbc	r23, r1
    1226:	6e 23       	and	r22, r30
    1228:	7f 23       	and	r23, r31
    122a:	cb 01       	movw	r24, r22
    122c:	84 1b       	sub	r24, r20
    122e:	95 0b       	sbc	r25, r21
    1230:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <ch_memcore>
    1234:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <ch_memcore+0x1>
    1238:	84 17       	cp	r24, r20
    123a:	95 07       	cpc	r25, r21
    123c:	48 f0       	brcs	.+18     	; 0x1250 <chCoreAllocFromTopI+0x3e>
    123e:	28 17       	cp	r18, r24
    1240:	39 07       	cpc	r19, r25
    1242:	30 f0       	brcs	.+12     	; 0x1250 <chCoreAllocFromTopI+0x3e>
    1244:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <ch_memcore+0x3>
    1248:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <ch_memcore+0x2>
    124c:	cb 01       	movw	r24, r22
    124e:	08 95       	ret
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	08 95       	ret

00001256 <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1256:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
    1258:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <ch_memcore+0x2>
    125c:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <ch_memcore+0x3>
    1260:	f9 01       	movw	r30, r18
    1262:	e8 1b       	sub	r30, r24
    1264:	f9 0b       	sbc	r31, r25
    1266:	71 95       	neg	r23
    1268:	61 95       	neg	r22
    126a:	71 09       	sbc	r23, r1
    126c:	6e 23       	and	r22, r30
    126e:	7f 23       	and	r23, r31
  prev = p - offset;
    1270:	cb 01       	movw	r24, r22
    1272:	84 1b       	sub	r24, r20
    1274:	95 0b       	sbc	r25, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    1276:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <ch_memcore>
    127a:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <ch_memcore+0x1>
    127e:	84 17       	cp	r24, r20
    1280:	95 07       	cpc	r25, r21
    1282:	50 f0       	brcs	.+20     	; 0x1298 <chCoreAllocFromTop+0x42>
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	38 f0       	brcs	.+14     	; 0x1298 <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
    128a:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <ch_memcore+0x3>
    128e:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <ch_memcore+0x2>

  return p;
    1292:	cb 01       	movw	r24, r22
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    1294:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    1296:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    129e:	08 95       	ret

000012a0 <__heap_init>:
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
    12a0:	ee ee       	ldi	r30, 0xEE	; 238
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	8b e2       	ldi	r24, 0x2B	; 43
    12a6:	99 e0       	ldi	r25, 0x09	; 9
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
  H_NEXT(&default_heap.header) = NULL;
    12ac:	13 82       	std	Z+3, r1	; 0x03
    12ae:	12 82       	std	Z+2, r1	; 0x02
  H_PAGES(&default_heap.header) = 0;
    12b0:	15 82       	std	Z+5, r1	; 0x05
    12b2:	14 82       	std	Z+4, r1	; 0x04
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	86 83       	std	Z+6, r24	; 0x06
    12b8:	08 95       	ret

000012ba <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
    12ba:	fc 01       	movw	r30, r24
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
    12bc:	11 82       	std	Z+1, r1	; 0x01
    12be:	10 82       	st	Z, r1
  mp->object_size = size;
    12c0:	73 83       	std	Z+3, r23	; 0x03
    12c2:	62 83       	std	Z+2, r22	; 0x02
  mp->align = align;
    12c4:	55 83       	std	Z+5, r21	; 0x05
    12c6:	44 83       	std	Z+4, r20	; 0x04
  mp->provider = provider;
    12c8:	37 83       	std	Z+7, r19	; 0x07
    12ca:	26 83       	std	Z+6, r18	; 0x06
    12cc:	08 95       	ret

000012ce <chCoreAllocAlignedI>:
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");

  dep->refs--;
  if (dep->refs == (ucnt_t)0) {
    dep = dyn_list_unlink(dep, dlp);
    chHeapFree((void *)dep);
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	9f cf       	rjmp	.-194    	; 0x1212 <chCoreAllocFromTopI>

000012d4 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
    12d8:	cd e7       	ldi	r28, 0x7D	; 125
    12da:	d2 e0       	ldi	r29, 0x02	; 2
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	88 83       	st	Y, r24
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
    12e0:	8e e7       	ldi	r24, 0x7E	; 126
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
    12e8:	27 e6       	ldi	r18, 0x67	; 103
    12ea:	39 e0       	ldi	r19, 0x09	; 9
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	6d e0       	ldi	r22, 0x0D	; 13
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	e0 df       	rcall	.-64     	; 0x12ba <chPoolObjectInitAligned>
    12fa:	88 e8       	ldi	r24, 0x88	; 136
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	9c 87       	std	Y+12, r25	; 0x0c
    1300:	8b 87       	std	Y+11, r24	; 0x0b
    1302:	8a e8       	ldi	r24, 0x8A	; 138
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	9e 87       	std	Y+14, r25	; 0x0e
    1308:	8d 87       	std	Y+13, r24	; 0x0d
    130a:	27 e6       	ldi	r18, 0x67	; 103
    130c:	39 e0       	ldi	r19, 0x09	; 9
    130e:	41 e0       	ldi	r20, 0x01	; 1
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	6c e0       	ldi	r22, 0x0C	; 12
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	8c e8       	ldi	r24, 0x8C	; 140
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	cf df       	rcall	.-98     	; 0x12ba <chPoolObjectInitAligned>
    131c:	84 e9       	ldi	r24, 0x94	; 148
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	98 8f       	std	Y+24, r25	; 0x18
    1322:	8f 8b       	std	Y+23, r24	; 0x17
    1324:	86 e9       	ldi	r24, 0x96	; 150
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	9a 8f       	std	Y+26, r25	; 0x1a
    132a:	89 8f       	std	Y+25, r24	; 0x19
    132c:	88 e9       	ldi	r24, 0x98	; 152
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	9c 8f       	std	Y+28, r25	; 0x1c
    1332:	8b 8f       	std	Y+27, r24	; 0x1b
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
    133a:	2f 92       	push	r2
  asm volatile ("push    r3");
    133c:	3f 92       	push	r3
  asm volatile ("push    r4");
    133e:	4f 92       	push	r4
  asm volatile ("push    r5");
    1340:	5f 92       	push	r5
  asm volatile ("push    r6");
    1342:	6f 92       	push	r6
  asm volatile ("push    r7");
    1344:	7f 92       	push	r7
  asm volatile ("push    r8");
    1346:	8f 92       	push	r8
  asm volatile ("push    r9");
    1348:	9f 92       	push	r9
  asm volatile ("push    r10");
    134a:	af 92       	push	r10
  asm volatile ("push    r11");
    134c:	bf 92       	push	r11
  asm volatile ("push    r12");
    134e:	cf 92       	push	r12
  asm volatile ("push    r13");
    1350:	df 92       	push	r13
  asm volatile ("push    r14");
    1352:	ef 92       	push	r14
  asm volatile ("push    r15");
    1354:	ff 92       	push	r15
  asm volatile ("push    r16");
    1356:	0f 93       	push	r16
  asm volatile ("push    r17");
    1358:	1f 93       	push	r17
  asm volatile ("push    r28");
    135a:	cf 93       	push	r28
  asm volatile ("push    r29");
    135c:	df 93       	push	r29
  asm volatile ("ldd     r0, Z+6");
  asm volatile ("out     0x3e, r0");
#endif

#if defined(__CHIBIOS_NIL__)
  asm volatile ("movw    r30, r22");
    135e:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
    1360:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+0, r0");
    1362:	00 82       	st	Z, r0
  asm volatile ("in      r0, 0x3e");
    1364:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+1, r0");
    1366:	01 82       	std	Z+1, r0	; 0x01

  asm volatile ("movw    r30, r24");
    1368:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+0");
    136a:	00 80       	ld	r0, Z
  asm volatile ("out     0x3d, r0");
    136c:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+1");
    136e:	01 80       	ldd	r0, Z+1	; 0x01
  asm volatile ("out     0x3e, r0");
    1370:	0e be       	out	0x3e, r0	; 62
#endif

  asm volatile ("pop     r29");
    1372:	df 91       	pop	r29
  asm volatile ("pop     r28");
    1374:	cf 91       	pop	r28
  asm volatile ("pop     r17");
    1376:	1f 91       	pop	r17
  asm volatile ("pop     r16");
    1378:	0f 91       	pop	r16
  asm volatile ("pop     r15");
    137a:	ff 90       	pop	r15
  asm volatile ("pop     r14");
    137c:	ef 90       	pop	r14
  asm volatile ("pop     r13");
    137e:	df 90       	pop	r13
  asm volatile ("pop     r12");
    1380:	cf 90       	pop	r12
  asm volatile ("pop     r11");
    1382:	bf 90       	pop	r11
  asm volatile ("pop     r10");
    1384:	af 90       	pop	r10
  asm volatile ("pop     r9");
    1386:	9f 90       	pop	r9
  asm volatile ("pop     r8");
    1388:	8f 90       	pop	r8
  asm volatile ("pop     r7");
    138a:	7f 90       	pop	r7
  asm volatile ("pop     r6");
    138c:	6f 90       	pop	r6
  asm volatile ("pop     r5");
    138e:	5f 90       	pop	r5
  asm volatile ("pop     r4");
    1390:	4f 90       	pop	r4
  asm volatile ("pop     r3");
    1392:	3f 90       	pop	r3
  asm volatile ("pop     r2");
    1394:	2f 90       	pop	r2
  asm volatile ("ret");
    1396:	08 95       	ret

00001398 <_port_thread_start>:
    1398:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
    139a:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
    139c:	f1 01       	movw	r30, r2
  asm volatile ("icall");
    139e:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
    13a0:	7c ce       	rjmp	.-776    	; 0x109a <chThdExit>

000013a2 <Thread_Led>:
THD_FUNCTION(Thread_Led, arg) {

	(void)arg;

	while (true) {
		palTogglePad(IOPORT4, LED_YLW);
    13a2:	d4 e0       	ldi	r29, 0x04	; 4
		palTogglePad(IOPORT4, LED_GRN);
    13a4:	c8 e0       	ldi	r28, 0x08	; 8
THD_FUNCTION(Thread_Led, arg) {

	(void)arg;

	while (true) {
		palTogglePad(IOPORT4, LED_YLW);
    13a6:	8b b1       	in	r24, 0x0b	; 11
    13a8:	8d 27       	eor	r24, r29
    13aa:	8b b9       	out	0x0b, r24	; 11
		palTogglePad(IOPORT4, LED_GRN);
    13ac:	8b b1       	in	r24, 0x0b	; 11
    13ae:	8c 27       	eor	r24, r28
    13b0:	8b b9       	out	0x0b, r24	; 11
		chThdSleepMilliseconds(500);
    13b2:	84 e8       	ldi	r24, 0x84	; 132
    13b4:	9e e1       	ldi	r25, 0x1E	; 30
    13b6:	a1 de       	rcall	.-702    	; 0x10fa <chThdSleep>
    13b8:	f6 cf       	rjmp	.-20     	; 0x13a6 <Thread_Led+0x4>

000013ba <Thread_Pwm>:
THD_FUNCTION(Thread_Pwm, arg) {

	(void)arg;

	while (true) {
		for (uint16_t i = 1000; i < 10000; i += 1000) {
    13ba:	c8 ee       	ldi	r28, 0xE8	; 232
    13bc:	d3 e0       	ldi	r29, 0x03	; 3
			pwmEnableChannel(&PWMD2, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD2, i));
    13be:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <PWMD2+0x3>
    13c2:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <PWMD2+0x4>
    13c6:	c8 9f       	mul	r28, r24
    13c8:	90 01       	movw	r18, r0
    13ca:	c9 9f       	mul	r28, r25
    13cc:	30 0d       	add	r19, r0
    13ce:	d8 9f       	mul	r29, r24
    13d0:	30 0d       	add	r19, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	32 95       	swap	r19
    13d6:	22 95       	swap	r18
    13d8:	2f 70       	andi	r18, 0x0F	; 15
    13da:	23 27       	eor	r18, r19
    13dc:	3f 70       	andi	r19, 0x0F	; 15
    13de:	23 27       	eor	r18, r19
    13e0:	a7 e4       	ldi	r26, 0x47	; 71
    13e2:	b3 e0       	ldi	r27, 0x03	; 3
    13e4:	15 d3       	rcall	.+1578   	; 0x1a10 <__umulhisi3>
    13e6:	ac 01       	movw	r20, r24
    13e8:	56 95       	lsr	r21
    13ea:	47 95       	ror	r20
    13ec:	56 95       	lsr	r21
    13ee:	47 95       	ror	r20
    13f0:	56 95       	lsr	r21
    13f2:	47 95       	ror	r20
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	85 ef       	ldi	r24, 0xF5	; 245
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	ee d8       	rcall	.-3620   	; 0x5d8 <pwmEnableChannel>
			chThdSleepMilliseconds(100);
    13fc:	8b e1       	ldi	r24, 0x1B	; 27
    13fe:	96 e0       	ldi	r25, 0x06	; 6
    1400:	7c de       	rcall	.-776    	; 0x10fa <chThdSleep>
THD_FUNCTION(Thread_Pwm, arg) {

	(void)arg;

	while (true) {
		for (uint16_t i = 1000; i < 10000; i += 1000) {
    1402:	c8 51       	subi	r28, 0x18	; 24
    1404:	dc 4f       	sbci	r29, 0xFC	; 252
    1406:	c0 31       	cpi	r28, 0x10	; 16
    1408:	87 e2       	ldi	r24, 0x27	; 39
    140a:	d8 07       	cpc	r29, r24
    140c:	c1 f6       	brne	.-80     	; 0x13be <Thread_Pwm+0x4>
    140e:	d5 cf       	rjmp	.-86     	; 0x13ba <Thread_Pwm>

00001410 <main>:
THD_TABLE_END

/*
 * Application entry point.
 */
int main(void) {
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	2e 97       	sbiw	r28, 0x0e	; 14
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
	halInit();
    1424:	0e 94 63 00 	call	0xc6	; 0xc6 <halInit>
	chSysInit();
    1428:	06 de       	rcall	.-1012   	; 0x1036 <chSysInit>

	palSetPadMode(IOPORT4, LED_YLW, PAL_MODE_OUTPUT_PUSHPULL);
    142a:	46 e0       	ldi	r20, 0x06	; 6
    142c:	64 e0       	ldi	r22, 0x04	; 4
    142e:	89 e2       	ldi	r24, 0x29	; 41
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	7f d9       	rcall	.-3330   	; 0x732 <_pal_lld_setgroupmode>
	palSetPadMode(IOPORT4, LED_GRN, PAL_MODE_OUTPUT_PUSHPULL);
    1434:	46 e0       	ldi	r20, 0x06	; 6
    1436:	68 e0       	ldi	r22, 0x08	; 8
    1438:	89 e2       	ldi	r24, 0x29	; 41
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	7a d9       	rcall	.-3340   	; 0x732 <_pal_lld_setgroupmode>
	palSetPadMode(IOPORT2, LED_PWM, PAL_MODE_OUTPUT_PUSHPULL);
    143e:	46 e0       	ldi	r20, 0x06	; 6
    1440:	68 e0       	ldi	r22, 0x08	; 8
    1442:	83 e2       	ldi	r24, 0x23	; 35
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	75 d9       	rcall	.-3350   	; 0x732 <_pal_lld_setgroupmode>

	// PWM configuration

	PWMConfig pwm_driver = {
    1448:	8e e0       	ldi	r24, 0x0E	; 14
    144a:	ec e0       	ldi	r30, 0x0C	; 12
    144c:	f1 e0       	ldi	r31, 0x01	; 1
    144e:	de 01       	movw	r26, r28
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	01 90       	ld	r0, Z+
    1454:	0d 92       	st	X+, r0
    1456:	8a 95       	dec	r24
    1458:	e1 f7       	brne	.-8      	; 0x1452 <main+0x42>
			{PWM_OUTPUT_ACTIVE_HIGH, NULL},
			{PWM_OUTPUT_DISABLED, NULL}
		}
	};

	pwmStart(&PWMD2, &pwm_driver);
    145a:	be 01       	movw	r22, r28
    145c:	6f 5f       	subi	r22, 0xFF	; 255
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	85 ef       	ldi	r24, 0xF5	; 245
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	a3 d8       	rcall	.-3770   	; 0x5ac <pwmStart>
    1466:	ff cf       	rjmp	.-2      	; 0x1466 <main+0x56>

00001468 <vfprintf>:
    1468:	ab e0       	ldi	r26, 0x0B	; 11
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e9 e3       	ldi	r30, 0x39	; 57
    146e:	fa e0       	ldi	r31, 0x0A	; 10
    1470:	e2 c2       	rjmp	.+1476   	; 0x1a36 <__prologue_saves__+0x8>
    1472:	6c 01       	movw	r12, r24
    1474:	7b 01       	movw	r14, r22
    1476:	3a 01       	movw	r6, r20
    1478:	fc 01       	movw	r30, r24
    147a:	17 82       	std	Z+7, r1	; 0x07
    147c:	16 82       	std	Z+6, r1	; 0x06
    147e:	83 81       	ldd	r24, Z+3	; 0x03
    1480:	81 ff       	sbrs	r24, 1
    1482:	f9 c0       	rjmp	.+498    	; 0x1676 <vfprintf+0x20e>
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	4c 01       	movw	r8, r24
    148a:	f6 01       	movw	r30, r12
    148c:	b3 80       	ldd	r11, Z+3	; 0x03
    148e:	f7 01       	movw	r30, r14
    1490:	b3 fc       	sbrc	r11, 3
    1492:	05 91       	lpm	r16, Z+
    1494:	b3 fe       	sbrs	r11, 3
    1496:	01 91       	ld	r16, Z+
    1498:	7f 01       	movw	r14, r30
    149a:	00 23       	and	r16, r16
    149c:	09 f4       	brne	.+2      	; 0x14a0 <vfprintf+0x38>
    149e:	e7 c0       	rjmp	.+462    	; 0x166e <vfprintf+0x206>
    14a0:	05 32       	cpi	r16, 0x25	; 37
    14a2:	49 f4       	brne	.+18     	; 0x14b6 <vfprintf+0x4e>
    14a4:	b3 fc       	sbrc	r11, 3
    14a6:	05 91       	lpm	r16, Z+
    14a8:	b3 fe       	sbrs	r11, 3
    14aa:	01 91       	ld	r16, Z+
    14ac:	7f 01       	movw	r14, r30
    14ae:	05 32       	cpi	r16, 0x25	; 37
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <vfprintf+0x4e>
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	17 c0       	rjmp	.+46     	; 0x14e4 <vfprintf+0x7c>
    14b6:	b6 01       	movw	r22, r12
    14b8:	80 2f       	mov	r24, r16
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	49 d3       	rcall	.+1682   	; 0x1b50 <fputc>
    14be:	53 01       	movw	r10, r6
    14c0:	35 01       	movw	r6, r10
    14c2:	e3 cf       	rjmp	.-58     	; 0x148a <vfprintf+0x22>
    14c4:	00 23       	and	r16, r16
    14c6:	09 f4       	brne	.+2      	; 0x14ca <vfprintf+0x62>
    14c8:	d2 c0       	rjmp	.+420    	; 0x166e <vfprintf+0x206>
    14ca:	60 2f       	mov	r22, r16
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	8f e6       	ldi	r24, 0x6F	; 111
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	ec d2       	rcall	.+1496   	; 0x1aac <strchr_P>
    14d4:	89 2b       	or	r24, r25
    14d6:	49 f0       	breq	.+18     	; 0x14ea <vfprintf+0x82>
    14d8:	f7 01       	movw	r30, r14
    14da:	b3 fc       	sbrc	r11, 3
    14dc:	05 91       	lpm	r16, Z+
    14de:	b3 fe       	sbrs	r11, 3
    14e0:	01 91       	ld	r16, Z+
    14e2:	7f 01       	movw	r14, r30
    14e4:	17 ff       	sbrs	r17, 7
    14e6:	ee cf       	rjmp	.-36     	; 0x14c4 <vfprintf+0x5c>
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <vfprintf+0x8a>
    14ea:	03 32       	cpi	r16, 0x23	; 35
    14ec:	39 f0       	breq	.+14     	; 0x14fc <vfprintf+0x94>
    14ee:	0c 36       	cpi	r16, 0x6C	; 108
    14f0:	19 f0       	breq	.+6      	; 0x14f8 <vfprintf+0x90>
    14f2:	01 11       	cpse	r16, r1
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <vfprintf+0x98>
    14f6:	bb c0       	rjmp	.+374    	; 0x166e <vfprintf+0x206>
    14f8:	10 68       	ori	r17, 0x80	; 128
    14fa:	ee cf       	rjmp	.-36     	; 0x14d8 <vfprintf+0x70>
    14fc:	10 e1       	ldi	r17, 0x10	; 16
    14fe:	ec cf       	rjmp	.-40     	; 0x14d8 <vfprintf+0x70>
    1500:	60 2f       	mov	r22, r16
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	88 e6       	ldi	r24, 0x68	; 104
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	d1 d2       	rcall	.+1442   	; 0x1aac <strchr_P>
    150a:	89 2b       	or	r24, r25
    150c:	41 f0       	breq	.+16     	; 0x151e <vfprintf+0xb6>
    150e:	53 01       	movw	r10, r6
    1510:	f4 e0       	ldi	r31, 0x04	; 4
    1512:	af 0e       	add	r10, r31
    1514:	b1 1c       	adc	r11, r1
    1516:	b6 01       	movw	r22, r12
    1518:	8f e3       	ldi	r24, 0x3F	; 63
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	10 c0       	rjmp	.+32     	; 0x153e <vfprintf+0xd6>
    151e:	03 36       	cpi	r16, 0x63	; 99
    1520:	31 f0       	breq	.+12     	; 0x152e <vfprintf+0xc6>
    1522:	03 37       	cpi	r16, 0x73	; 115
    1524:	71 f0       	breq	.+28     	; 0x1542 <vfprintf+0xda>
    1526:	03 35       	cpi	r16, 0x53	; 83
    1528:	01 f5       	brne	.+64     	; 0x156a <vfprintf+0x102>
    152a:	11 60       	ori	r17, 0x01	; 1
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <vfprintf+0xda>
    152e:	53 01       	movw	r10, r6
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	a8 0e       	add	r10, r24
    1534:	b1 1c       	adc	r11, r1
    1536:	b6 01       	movw	r22, r12
    1538:	f3 01       	movw	r30, r6
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	08 d3       	rcall	.+1552   	; 0x1b50 <fputc>
    1540:	bf cf       	rjmp	.-130    	; 0x14c0 <vfprintf+0x58>
    1542:	53 01       	movw	r10, r6
    1544:	f2 e0       	ldi	r31, 0x02	; 2
    1546:	af 0e       	add	r10, r31
    1548:	b1 1c       	adc	r11, r1
    154a:	f3 01       	movw	r30, r6
    154c:	60 80       	ld	r6, Z
    154e:	71 80       	ldd	r7, Z+1	; 0x01
    1550:	f3 01       	movw	r30, r6
    1552:	10 fd       	sbrc	r17, 0
    1554:	85 91       	lpm	r24, Z+
    1556:	10 ff       	sbrs	r17, 0
    1558:	81 91       	ld	r24, Z+
    155a:	3f 01       	movw	r6, r30
    155c:	88 23       	and	r24, r24
    155e:	09 f4       	brne	.+2      	; 0x1562 <vfprintf+0xfa>
    1560:	af cf       	rjmp	.-162    	; 0x14c0 <vfprintf+0x58>
    1562:	b6 01       	movw	r22, r12
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	f4 d2       	rcall	.+1512   	; 0x1b50 <fputc>
    1568:	f3 cf       	rjmp	.-26     	; 0x1550 <vfprintf+0xe8>
    156a:	04 36       	cpi	r16, 0x64	; 100
    156c:	11 f0       	breq	.+4      	; 0x1572 <vfprintf+0x10a>
    156e:	09 36       	cpi	r16, 0x69	; 105
    1570:	21 f5       	brne	.+72     	; 0x15ba <vfprintf+0x152>
    1572:	53 01       	movw	r10, r6
    1574:	17 ff       	sbrs	r17, 7
    1576:	09 c0       	rjmp	.+18     	; 0x158a <vfprintf+0x122>
    1578:	f4 e0       	ldi	r31, 0x04	; 4
    157a:	af 0e       	add	r10, r31
    157c:	b1 1c       	adc	r11, r1
    157e:	f3 01       	movw	r30, r6
    1580:	60 81       	ld	r22, Z
    1582:	71 81       	ldd	r23, Z+1	; 0x01
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	0a c0       	rjmp	.+20     	; 0x159e <vfprintf+0x136>
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	af 0e       	add	r10, r31
    158e:	b1 1c       	adc	r11, r1
    1590:	f3 01       	movw	r30, r6
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	07 2e       	mov	r0, r23
    1598:	00 0c       	add	r0, r0
    159a:	88 0b       	sbc	r24, r24
    159c:	99 0b       	sbc	r25, r25
    159e:	1f 7e       	andi	r17, 0xEF	; 239
    15a0:	97 ff       	sbrs	r25, 7
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <vfprintf+0x14c>
    15a4:	90 95       	com	r25
    15a6:	80 95       	com	r24
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	10 64       	ori	r17, 0x40	; 64
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	30 c0       	rjmp	.+96     	; 0x161a <vfprintf+0x1b2>
    15ba:	00 37       	cpi	r16, 0x70	; 112
    15bc:	91 f0       	breq	.+36     	; 0x15e2 <vfprintf+0x17a>
    15be:	40 f4       	brcc	.+16     	; 0x15d0 <vfprintf+0x168>
    15c0:	08 35       	cpi	r16, 0x58	; 88
    15c2:	a1 f0       	breq	.+40     	; 0x15ec <vfprintf+0x184>
    15c4:	0f 36       	cpi	r16, 0x6F	; 111
    15c6:	09 f0       	breq	.+2      	; 0x15ca <vfprintf+0x162>
    15c8:	52 c0       	rjmp	.+164    	; 0x166e <vfprintf+0x206>
    15ca:	28 e0       	ldi	r18, 0x08	; 8
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	11 c0       	rjmp	.+34     	; 0x15f2 <vfprintf+0x18a>
    15d0:	05 37       	cpi	r16, 0x75	; 117
    15d2:	19 f0       	breq	.+6      	; 0x15da <vfprintf+0x172>
    15d4:	08 37       	cpi	r16, 0x78	; 120
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <vfprintf+0x17c>
    15d8:	4a c0       	rjmp	.+148    	; 0x166e <vfprintf+0x206>
    15da:	1f 7e       	andi	r17, 0xEF	; 239
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <vfprintf+0x18a>
    15e2:	10 61       	ori	r17, 0x10	; 16
    15e4:	14 62       	ori	r17, 0x24	; 36
    15e6:	20 e1       	ldi	r18, 0x10	; 16
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <vfprintf+0x18a>
    15ec:	14 60       	ori	r17, 0x04	; 4
    15ee:	20 e1       	ldi	r18, 0x10	; 16
    15f0:	32 e0       	ldi	r19, 0x02	; 2
    15f2:	53 01       	movw	r10, r6
    15f4:	17 ff       	sbrs	r17, 7
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <vfprintf+0x1a2>
    15f8:	f4 e0       	ldi	r31, 0x04	; 4
    15fa:	af 0e       	add	r10, r31
    15fc:	b1 1c       	adc	r11, r1
    15fe:	f3 01       	movw	r30, r6
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	08 c0       	rjmp	.+16     	; 0x161a <vfprintf+0x1b2>
    160a:	f2 e0       	ldi	r31, 0x02	; 2
    160c:	af 0e       	add	r10, r31
    160e:	b1 1c       	adc	r11, r1
    1610:	f3 01       	movw	r30, r6
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a4 01       	movw	r20, r8
    161c:	ee d2       	rcall	.+1500   	; 0x1bfa <__ultoa_invert>
    161e:	08 2f       	mov	r16, r24
    1620:	08 19       	sub	r16, r8
    1622:	16 ff       	sbrs	r17, 6
    1624:	04 c0       	rjmp	.+8      	; 0x162e <vfprintf+0x1c6>
    1626:	b6 01       	movw	r22, r12
    1628:	8d e2       	ldi	r24, 0x2D	; 45
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	91 d2       	rcall	.+1314   	; 0x1b50 <fputc>
    162e:	14 ff       	sbrs	r17, 4
    1630:	13 c0       	rjmp	.+38     	; 0x1658 <vfprintf+0x1f0>
    1632:	fe 01       	movw	r30, r28
    1634:	e0 0f       	add	r30, r16
    1636:	f1 1d       	adc	r31, r1
    1638:	80 81       	ld	r24, Z
    163a:	80 33       	cpi	r24, 0x30	; 48
    163c:	69 f0       	breq	.+26     	; 0x1658 <vfprintf+0x1f0>
    163e:	b6 01       	movw	r22, r12
    1640:	80 e3       	ldi	r24, 0x30	; 48
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	85 d2       	rcall	.+1290   	; 0x1b50 <fputc>
    1646:	12 ff       	sbrs	r17, 2
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <vfprintf+0x1f0>
    164a:	10 72       	andi	r17, 0x20	; 32
    164c:	81 2f       	mov	r24, r17
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	b6 01       	movw	r22, r12
    1652:	88 5a       	subi	r24, 0xA8	; 168
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	7c d2       	rcall	.+1272   	; 0x1b50 <fputc>
    1658:	01 50       	subi	r16, 0x01	; 1
    165a:	f4 01       	movw	r30, r8
    165c:	e0 0f       	add	r30, r16
    165e:	f1 1d       	adc	r31, r1
    1660:	80 81       	ld	r24, Z
    1662:	b6 01       	movw	r22, r12
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	74 d2       	rcall	.+1256   	; 0x1b50 <fputc>
    1668:	01 11       	cpse	r16, r1
    166a:	f6 cf       	rjmp	.-20     	; 0x1658 <vfprintf+0x1f0>
    166c:	29 cf       	rjmp	.-430    	; 0x14c0 <vfprintf+0x58>
    166e:	f6 01       	movw	r30, r12
    1670:	86 81       	ldd	r24, Z+6	; 0x06
    1672:	97 81       	ldd	r25, Z+7	; 0x07
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x212>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	2b 96       	adiw	r28, 0x0b	; 11
    167c:	ee e0       	ldi	r30, 0x0E	; 14
    167e:	f7 c1       	rjmp	.+1006   	; 0x1a6e <__epilogue_restores__+0x8>

00001680 <putval>:
    1680:	20 fd       	sbrc	r18, 0
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <putval+0x16>
    1684:	fc 01       	movw	r30, r24
    1686:	23 fd       	sbrc	r18, 3
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <putval+0x14>
    168a:	22 ff       	sbrs	r18, 2
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <putval+0x12>
    168e:	73 83       	std	Z+3, r23	; 0x03
    1690:	62 83       	std	Z+2, r22	; 0x02
    1692:	51 83       	std	Z+1, r21	; 0x01
    1694:	40 83       	st	Z, r20
    1696:	08 95       	ret

00001698 <mulacc>:
    1698:	44 fd       	sbrc	r20, 4
    169a:	17 c0       	rjmp	.+46     	; 0x16ca <mulacc+0x32>
    169c:	46 fd       	sbrc	r20, 6
    169e:	17 c0       	rjmp	.+46     	; 0x16ce <mulacc+0x36>
    16a0:	ab 01       	movw	r20, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	da 01       	movw	r26, r20
    16a6:	fb 01       	movw	r30, r22
    16a8:	aa 0f       	add	r26, r26
    16aa:	bb 1f       	adc	r27, r27
    16ac:	ee 1f       	adc	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	10 94       	com	r1
    16b2:	d1 f7       	brne	.-12     	; 0x16a8 <mulacc+0x10>
    16b4:	4a 0f       	add	r20, r26
    16b6:	5b 1f       	adc	r21, r27
    16b8:	6e 1f       	adc	r22, r30
    16ba:	7f 1f       	adc	r23, r31
    16bc:	cb 01       	movw	r24, r22
    16be:	ba 01       	movw	r22, r20
    16c0:	66 0f       	add	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <mulacc+0x44>
    16ca:	33 e0       	ldi	r19, 0x03	; 3
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <mulacc+0x38>
    16ce:	34 e0       	ldi	r19, 0x04	; 4
    16d0:	66 0f       	add	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	31 50       	subi	r19, 0x01	; 1
    16da:	d1 f7       	brne	.-12     	; 0x16d0 <mulacc+0x38>
    16dc:	62 0f       	add	r22, r18
    16de:	71 1d       	adc	r23, r1
    16e0:	81 1d       	adc	r24, r1
    16e2:	91 1d       	adc	r25, r1
    16e4:	08 95       	ret

000016e6 <skip_spaces>:
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	8c 01       	movw	r16, r24
    16f0:	c8 01       	movw	r24, r16
    16f2:	f0 d1       	rcall	.+992    	; 0x1ad4 <fgetc>
    16f4:	ec 01       	movw	r28, r24
    16f6:	97 fd       	sbrc	r25, 7
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <skip_spaces+0x20>
    16fa:	d0 d1       	rcall	.+928    	; 0x1a9c <isspace>
    16fc:	89 2b       	or	r24, r25
    16fe:	c1 f7       	brne	.-16     	; 0x16f0 <skip_spaces+0xa>
    1700:	b8 01       	movw	r22, r16
    1702:	ce 01       	movw	r24, r28
    1704:	61 d2       	rcall	.+1218   	; 0x1bc8 <ungetc>
    1706:	ce 01       	movw	r24, r28
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <conv_int>:
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	8c 01       	movw	r16, r24
    1728:	d6 2f       	mov	r29, r22
    172a:	7a 01       	movw	r14, r20
    172c:	b2 2e       	mov	r11, r18
    172e:	d2 d1       	rcall	.+932    	; 0x1ad4 <fgetc>
    1730:	9c 01       	movw	r18, r24
    1732:	33 27       	eor	r19, r19
    1734:	2b 32       	cpi	r18, 0x2B	; 43
    1736:	31 05       	cpc	r19, r1
    1738:	31 f0       	breq	.+12     	; 0x1746 <conv_int+0x34>
    173a:	2d 32       	cpi	r18, 0x2D	; 45
    173c:	31 05       	cpc	r19, r1
    173e:	59 f4       	brne	.+22     	; 0x1756 <conv_int+0x44>
    1740:	8b 2d       	mov	r24, r11
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	b8 2e       	mov	r11, r24
    1746:	d1 50       	subi	r29, 0x01	; 1
    1748:	11 f4       	brne	.+4      	; 0x174e <conv_int+0x3c>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	61 c0       	rjmp	.+194    	; 0x1810 <conv_int+0xfe>
    174e:	c8 01       	movw	r24, r16
    1750:	c1 d1       	rcall	.+898    	; 0x1ad4 <fgetc>
    1752:	97 fd       	sbrc	r25, 7
    1754:	fa cf       	rjmp	.-12     	; 0x174a <conv_int+0x38>
    1756:	cb 2d       	mov	r28, r11
    1758:	cd 7f       	andi	r28, 0xFD	; 253
    175a:	2b 2d       	mov	r18, r11
    175c:	20 73       	andi	r18, 0x30	; 48
    175e:	f9 f4       	brne	.+62     	; 0x179e <conv_int+0x8c>
    1760:	80 33       	cpi	r24, 0x30	; 48
    1762:	e9 f4       	brne	.+58     	; 0x179e <conv_int+0x8c>
    1764:	aa 24       	eor	r10, r10
    1766:	aa 94       	dec	r10
    1768:	ad 0e       	add	r10, r29
    176a:	09 f4       	brne	.+2      	; 0x176e <conv_int+0x5c>
    176c:	3e c0       	rjmp	.+124    	; 0x17ea <conv_int+0xd8>
    176e:	c8 01       	movw	r24, r16
    1770:	b1 d1       	rcall	.+866    	; 0x1ad4 <fgetc>
    1772:	97 fd       	sbrc	r25, 7
    1774:	3a c0       	rjmp	.+116    	; 0x17ea <conv_int+0xd8>
    1776:	9c 01       	movw	r18, r24
    1778:	2f 7d       	andi	r18, 0xDF	; 223
    177a:	33 27       	eor	r19, r19
    177c:	28 35       	cpi	r18, 0x58	; 88
    177e:	31 05       	cpc	r19, r1
    1780:	41 f4       	brne	.+16     	; 0x1792 <conv_int+0x80>
    1782:	c2 64       	ori	r28, 0x42	; 66
    1784:	d2 50       	subi	r29, 0x02	; 2
    1786:	89 f1       	breq	.+98     	; 0x17ea <conv_int+0xd8>
    1788:	c8 01       	movw	r24, r16
    178a:	a4 d1       	rcall	.+840    	; 0x1ad4 <fgetc>
    178c:	97 ff       	sbrs	r25, 7
    178e:	07 c0       	rjmp	.+14     	; 0x179e <conv_int+0x8c>
    1790:	2c c0       	rjmp	.+88     	; 0x17ea <conv_int+0xd8>
    1792:	b6 fe       	sbrs	r11, 6
    1794:	02 c0       	rjmp	.+4      	; 0x179a <conv_int+0x88>
    1796:	c2 60       	ori	r28, 0x02	; 2
    1798:	01 c0       	rjmp	.+2      	; 0x179c <conv_int+0x8a>
    179a:	c2 61       	ori	r28, 0x12	; 18
    179c:	da 2d       	mov	r29, r10
    179e:	81 2c       	mov	r8, r1
    17a0:	91 2c       	mov	r9, r1
    17a2:	54 01       	movw	r10, r8
    17a4:	20 ed       	ldi	r18, 0xD0	; 208
    17a6:	28 0f       	add	r18, r24
    17a8:	28 30       	cpi	r18, 0x08	; 8
    17aa:	78 f0       	brcs	.+30     	; 0x17ca <conv_int+0xb8>
    17ac:	c4 ff       	sbrs	r28, 4
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <conv_int+0xa4>
    17b0:	b8 01       	movw	r22, r16
    17b2:	0a d2       	rcall	.+1044   	; 0x1bc8 <ungetc>
    17b4:	17 c0       	rjmp	.+46     	; 0x17e4 <conv_int+0xd2>
    17b6:	2a 30       	cpi	r18, 0x0A	; 10
    17b8:	40 f0       	brcs	.+16     	; 0x17ca <conv_int+0xb8>
    17ba:	c6 ff       	sbrs	r28, 6
    17bc:	f9 cf       	rjmp	.-14     	; 0x17b0 <conv_int+0x9e>
    17be:	2f 7d       	andi	r18, 0xDF	; 223
    17c0:	3f ee       	ldi	r19, 0xEF	; 239
    17c2:	32 0f       	add	r19, r18
    17c4:	36 30       	cpi	r19, 0x06	; 6
    17c6:	a0 f7       	brcc	.-24     	; 0x17b0 <conv_int+0x9e>
    17c8:	27 50       	subi	r18, 0x07	; 7
    17ca:	4c 2f       	mov	r20, r28
    17cc:	c5 01       	movw	r24, r10
    17ce:	b4 01       	movw	r22, r8
    17d0:	63 df       	rcall	.-314    	; 0x1698 <mulacc>
    17d2:	4b 01       	movw	r8, r22
    17d4:	5c 01       	movw	r10, r24
    17d6:	c2 60       	ori	r28, 0x02	; 2
    17d8:	d1 50       	subi	r29, 0x01	; 1
    17da:	51 f0       	breq	.+20     	; 0x17f0 <conv_int+0xde>
    17dc:	c8 01       	movw	r24, r16
    17de:	7a d1       	rcall	.+756    	; 0x1ad4 <fgetc>
    17e0:	97 ff       	sbrs	r25, 7
    17e2:	e0 cf       	rjmp	.-64     	; 0x17a4 <conv_int+0x92>
    17e4:	c1 fd       	sbrc	r28, 1
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <conv_int+0xde>
    17e8:	b0 cf       	rjmp	.-160    	; 0x174a <conv_int+0x38>
    17ea:	81 2c       	mov	r8, r1
    17ec:	91 2c       	mov	r9, r1
    17ee:	54 01       	movw	r10, r8
    17f0:	c7 ff       	sbrs	r28, 7
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <conv_int+0xf2>
    17f4:	b0 94       	com	r11
    17f6:	a0 94       	com	r10
    17f8:	90 94       	com	r9
    17fa:	80 94       	com	r8
    17fc:	81 1c       	adc	r8, r1
    17fe:	91 1c       	adc	r9, r1
    1800:	a1 1c       	adc	r10, r1
    1802:	b1 1c       	adc	r11, r1
    1804:	2c 2f       	mov	r18, r28
    1806:	b5 01       	movw	r22, r10
    1808:	a4 01       	movw	r20, r8
    180a:	c7 01       	movw	r24, r14
    180c:	39 df       	rcall	.-398    	; 0x1680 <putval>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	08 95       	ret

00001826 <vfscanf>:
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e8 e1       	ldi	r30, 0x18	; 24
    182c:	fc e0       	ldi	r31, 0x0C	; 12
    182e:	02 c1       	rjmp	.+516    	; 0x1a34 <__prologue_saves__+0x6>
    1830:	6c 01       	movw	r12, r24
    1832:	eb 01       	movw	r28, r22
    1834:	5a 01       	movw	r10, r20
    1836:	fc 01       	movw	r30, r24
    1838:	17 82       	std	Z+7, r1	; 0x07
    183a:	16 82       	std	Z+6, r1	; 0x06
    183c:	51 2c       	mov	r5, r1
    183e:	f6 01       	movw	r30, r12
    1840:	f3 80       	ldd	r15, Z+3	; 0x03
    1842:	fe 01       	movw	r30, r28
    1844:	f3 fc       	sbrc	r15, 3
    1846:	85 91       	lpm	r24, Z+
    1848:	f3 fe       	sbrs	r15, 3
    184a:	81 91       	ld	r24, Z+
    184c:	18 2f       	mov	r17, r24
    184e:	ef 01       	movw	r28, r30
    1850:	88 23       	and	r24, r24
    1852:	09 f4       	brne	.+2      	; 0x1856 <vfscanf+0x30>
    1854:	d4 c0       	rjmp	.+424    	; 0x19fe <vfscanf+0x1d8>
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	21 d1       	rcall	.+578    	; 0x1a9c <isspace>
    185a:	89 2b       	or	r24, r25
    185c:	19 f0       	breq	.+6      	; 0x1864 <vfscanf+0x3e>
    185e:	c6 01       	movw	r24, r12
    1860:	42 df       	rcall	.-380    	; 0x16e6 <skip_spaces>
    1862:	ed cf       	rjmp	.-38     	; 0x183e <vfscanf+0x18>
    1864:	15 32       	cpi	r17, 0x25	; 37
    1866:	41 f4       	brne	.+16     	; 0x1878 <vfscanf+0x52>
    1868:	fe 01       	movw	r30, r28
    186a:	f3 fc       	sbrc	r15, 3
    186c:	15 91       	lpm	r17, Z+
    186e:	f3 fe       	sbrs	r15, 3
    1870:	11 91       	ld	r17, Z+
    1872:	ef 01       	movw	r28, r30
    1874:	15 32       	cpi	r17, 0x25	; 37
    1876:	71 f4       	brne	.+28     	; 0x1894 <vfscanf+0x6e>
    1878:	c6 01       	movw	r24, r12
    187a:	2c d1       	rcall	.+600    	; 0x1ad4 <fgetc>
    187c:	97 fd       	sbrc	r25, 7
    187e:	bd c0       	rjmp	.+378    	; 0x19fa <vfscanf+0x1d4>
    1880:	41 2f       	mov	r20, r17
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	9c 01       	movw	r18, r24
    1886:	33 27       	eor	r19, r19
    1888:	24 17       	cp	r18, r20
    188a:	35 07       	cpc	r19, r21
    188c:	c1 f2       	breq	.-80     	; 0x183e <vfscanf+0x18>
    188e:	b6 01       	movw	r22, r12
    1890:	9b d1       	rcall	.+822    	; 0x1bc8 <ungetc>
    1892:	b5 c0       	rjmp	.+362    	; 0x19fe <vfscanf+0x1d8>
    1894:	1a 32       	cpi	r17, 0x2A	; 42
    1896:	39 f4       	brne	.+14     	; 0x18a6 <vfscanf+0x80>
    1898:	f3 fc       	sbrc	r15, 3
    189a:	15 91       	lpm	r17, Z+
    189c:	f3 fe       	sbrs	r15, 3
    189e:	11 91       	ld	r17, Z+
    18a0:	ef 01       	movw	r28, r30
    18a2:	01 e0       	ldi	r16, 0x01	; 1
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <vfscanf+0x82>
    18a6:	00 e0       	ldi	r16, 0x00	; 0
    18a8:	e1 2c       	mov	r14, r1
    18aa:	20 ed       	ldi	r18, 0xD0	; 208
    18ac:	21 0f       	add	r18, r17
    18ae:	2a 30       	cpi	r18, 0x0A	; 10
    18b0:	78 f4       	brcc	.+30     	; 0x18d0 <vfscanf+0xaa>
    18b2:	02 60       	ori	r16, 0x02	; 2
    18b4:	6e 2d       	mov	r22, r14
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	40 e2       	ldi	r20, 0x20	; 32
    18be:	ec de       	rcall	.-552    	; 0x1698 <mulacc>
    18c0:	e6 2e       	mov	r14, r22
    18c2:	fe 01       	movw	r30, r28
    18c4:	f3 fc       	sbrc	r15, 3
    18c6:	15 91       	lpm	r17, Z+
    18c8:	f3 fe       	sbrs	r15, 3
    18ca:	11 91       	ld	r17, Z+
    18cc:	ef 01       	movw	r28, r30
    18ce:	ed cf       	rjmp	.-38     	; 0x18aa <vfscanf+0x84>
    18d0:	01 ff       	sbrs	r16, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfscanf+0xb4>
    18d4:	e1 10       	cpse	r14, r1
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <vfscanf+0xb8>
    18d8:	92 c0       	rjmp	.+292    	; 0x19fe <vfscanf+0x1d8>
    18da:	ee 24       	eor	r14, r14
    18dc:	ea 94       	dec	r14
    18de:	18 36       	cpi	r17, 0x68	; 104
    18e0:	19 f0       	breq	.+6      	; 0x18e8 <vfscanf+0xc2>
    18e2:	1c 36       	cpi	r17, 0x6C	; 108
    18e4:	51 f0       	breq	.+20     	; 0x18fa <vfscanf+0xd4>
    18e6:	10 c0       	rjmp	.+32     	; 0x1908 <vfscanf+0xe2>
    18e8:	fe 01       	movw	r30, r28
    18ea:	f3 fc       	sbrc	r15, 3
    18ec:	15 91       	lpm	r17, Z+
    18ee:	f3 fe       	sbrs	r15, 3
    18f0:	11 91       	ld	r17, Z+
    18f2:	ef 01       	movw	r28, r30
    18f4:	18 36       	cpi	r17, 0x68	; 104
    18f6:	41 f4       	brne	.+16     	; 0x1908 <vfscanf+0xe2>
    18f8:	08 60       	ori	r16, 0x08	; 8
    18fa:	04 60       	ori	r16, 0x04	; 4
    18fc:	fe 01       	movw	r30, r28
    18fe:	f3 fc       	sbrc	r15, 3
    1900:	15 91       	lpm	r17, Z+
    1902:	f3 fe       	sbrs	r15, 3
    1904:	11 91       	ld	r17, Z+
    1906:	ef 01       	movw	r28, r30
    1908:	11 23       	and	r17, r17
    190a:	09 f4       	brne	.+2      	; 0x190e <vfscanf+0xe8>
    190c:	78 c0       	rjmp	.+240    	; 0x19fe <vfscanf+0x1d8>
    190e:	61 2f       	mov	r22, r17
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	8f e7       	ldi	r24, 0x7F	; 127
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	ca d0       	rcall	.+404    	; 0x1aac <strchr_P>
    1918:	89 2b       	or	r24, r25
    191a:	09 f4       	brne	.+2      	; 0x191e <vfscanf+0xf8>
    191c:	70 c0       	rjmp	.+224    	; 0x19fe <vfscanf+0x1d8>
    191e:	00 fd       	sbrc	r16, 0
    1920:	07 c0       	rjmp	.+14     	; 0x1930 <vfscanf+0x10a>
    1922:	f5 01       	movw	r30, r10
    1924:	80 80       	ld	r8, Z
    1926:	91 80       	ldd	r9, Z+1	; 0x01
    1928:	c5 01       	movw	r24, r10
    192a:	02 96       	adiw	r24, 0x02	; 2
    192c:	5c 01       	movw	r10, r24
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfscanf+0x10e>
    1930:	81 2c       	mov	r8, r1
    1932:	91 2c       	mov	r9, r1
    1934:	1e 36       	cpi	r17, 0x6E	; 110
    1936:	49 f4       	brne	.+18     	; 0x194a <vfscanf+0x124>
    1938:	f6 01       	movw	r30, r12
    193a:	46 81       	ldd	r20, Z+6	; 0x06
    193c:	57 81       	ldd	r21, Z+7	; 0x07
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	20 2f       	mov	r18, r16
    1944:	c4 01       	movw	r24, r8
    1946:	9c de       	rcall	.-712    	; 0x1680 <putval>
    1948:	7a cf       	rjmp	.-268    	; 0x183e <vfscanf+0x18>
    194a:	13 36       	cpi	r17, 0x63	; 99
    194c:	a1 f4       	brne	.+40     	; 0x1976 <vfscanf+0x150>
    194e:	01 fd       	sbrc	r16, 1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfscanf+0x130>
    1952:	ee 24       	eor	r14, r14
    1954:	e3 94       	inc	r14
    1956:	c6 01       	movw	r24, r12
    1958:	bd d0       	rcall	.+378    	; 0x1ad4 <fgetc>
    195a:	97 fd       	sbrc	r25, 7
    195c:	4e c0       	rjmp	.+156    	; 0x19fa <vfscanf+0x1d4>
    195e:	81 14       	cp	r8, r1
    1960:	91 04       	cpc	r9, r1
    1962:	29 f0       	breq	.+10     	; 0x196e <vfscanf+0x148>
    1964:	f4 01       	movw	r30, r8
    1966:	80 83       	st	Z, r24
    1968:	c4 01       	movw	r24, r8
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	4c 01       	movw	r8, r24
    196e:	ea 94       	dec	r14
    1970:	e1 10       	cpse	r14, r1
    1972:	f1 cf       	rjmp	.-30     	; 0x1956 <vfscanf+0x130>
    1974:	3e c0       	rjmp	.+124    	; 0x19f2 <vfscanf+0x1cc>
    1976:	c6 01       	movw	r24, r12
    1978:	b6 de       	rcall	.-660    	; 0x16e6 <skip_spaces>
    197a:	97 fd       	sbrc	r25, 7
    197c:	3e c0       	rjmp	.+124    	; 0x19fa <vfscanf+0x1d4>
    197e:	1f 36       	cpi	r17, 0x6F	; 111
    1980:	49 f1       	breq	.+82     	; 0x19d4 <vfscanf+0x1ae>
    1982:	28 f4       	brcc	.+10     	; 0x198e <vfscanf+0x168>
    1984:	14 36       	cpi	r17, 0x64	; 100
    1986:	21 f1       	breq	.+72     	; 0x19d0 <vfscanf+0x1aa>
    1988:	19 36       	cpi	r17, 0x69	; 105
    198a:	39 f1       	breq	.+78     	; 0x19da <vfscanf+0x1b4>
    198c:	25 c0       	rjmp	.+74     	; 0x19d8 <vfscanf+0x1b2>
    198e:	13 37       	cpi	r17, 0x73	; 115
    1990:	71 f0       	breq	.+28     	; 0x19ae <vfscanf+0x188>
    1992:	15 37       	cpi	r17, 0x75	; 117
    1994:	e9 f0       	breq	.+58     	; 0x19d0 <vfscanf+0x1aa>
    1996:	20 c0       	rjmp	.+64     	; 0x19d8 <vfscanf+0x1b2>
    1998:	81 14       	cp	r8, r1
    199a:	91 04       	cpc	r9, r1
    199c:	29 f0       	breq	.+10     	; 0x19a8 <vfscanf+0x182>
    199e:	f4 01       	movw	r30, r8
    19a0:	60 82       	st	Z, r6
    19a2:	c4 01       	movw	r24, r8
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	4c 01       	movw	r8, r24
    19a8:	ea 94       	dec	r14
    19aa:	ee 20       	and	r14, r14
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <vfscanf+0x19e>
    19ae:	c6 01       	movw	r24, r12
    19b0:	91 d0       	rcall	.+290    	; 0x1ad4 <fgetc>
    19b2:	3c 01       	movw	r6, r24
    19b4:	97 fd       	sbrc	r25, 7
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <vfscanf+0x19e>
    19b8:	71 d0       	rcall	.+226    	; 0x1a9c <isspace>
    19ba:	89 2b       	or	r24, r25
    19bc:	69 f3       	breq	.-38     	; 0x1998 <vfscanf+0x172>
    19be:	b6 01       	movw	r22, r12
    19c0:	c3 01       	movw	r24, r6
    19c2:	02 d1       	rcall	.+516    	; 0x1bc8 <ungetc>
    19c4:	81 14       	cp	r8, r1
    19c6:	91 04       	cpc	r9, r1
    19c8:	a1 f0       	breq	.+40     	; 0x19f2 <vfscanf+0x1cc>
    19ca:	f4 01       	movw	r30, r8
    19cc:	10 82       	st	Z, r1
    19ce:	11 c0       	rjmp	.+34     	; 0x19f2 <vfscanf+0x1cc>
    19d0:	00 62       	ori	r16, 0x20	; 32
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <vfscanf+0x1b4>
    19d4:	00 61       	ori	r16, 0x10	; 16
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <vfscanf+0x1b4>
    19d8:	00 64       	ori	r16, 0x40	; 64
    19da:	20 2f       	mov	r18, r16
    19dc:	a4 01       	movw	r20, r8
    19de:	6e 2d       	mov	r22, r14
    19e0:	c6 01       	movw	r24, r12
    19e2:	97 de       	rcall	.-722    	; 0x1712 <conv_int>
    19e4:	81 11       	cpse	r24, r1
    19e6:	05 c0       	rjmp	.+10     	; 0x19f2 <vfscanf+0x1cc>
    19e8:	f6 01       	movw	r30, r12
    19ea:	83 81       	ldd	r24, Z+3	; 0x03
    19ec:	80 73       	andi	r24, 0x30	; 48
    19ee:	29 f4       	brne	.+10     	; 0x19fa <vfscanf+0x1d4>
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <vfscanf+0x1d8>
    19f2:	00 fd       	sbrc	r16, 0
    19f4:	24 cf       	rjmp	.-440    	; 0x183e <vfscanf+0x18>
    19f6:	53 94       	inc	r5
    19f8:	22 cf       	rjmp	.-444    	; 0x183e <vfscanf+0x18>
    19fa:	55 20       	and	r5, r5
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <vfscanf+0x1de>
    19fe:	85 2d       	mov	r24, r5
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <vfscanf+0x1e2>
    1a04:	8f ef       	ldi	r24, 0xFF	; 255
    1a06:	9f ef       	ldi	r25, 0xFF	; 255
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	ef e0       	ldi	r30, 0x0F	; 15
    1a0e:	2e c0       	rjmp	.+92     	; 0x1a6c <__epilogue_restores__+0x6>

00001a10 <__umulhisi3>:
    1a10:	a2 9f       	mul	r26, r18
    1a12:	b0 01       	movw	r22, r0
    1a14:	b3 9f       	mul	r27, r19
    1a16:	c0 01       	movw	r24, r0
    1a18:	a3 9f       	mul	r26, r19
    1a1a:	70 0d       	add	r23, r0
    1a1c:	81 1d       	adc	r24, r1
    1a1e:	11 24       	eor	r1, r1
    1a20:	91 1d       	adc	r25, r1
    1a22:	b2 9f       	mul	r27, r18
    1a24:	70 0d       	add	r23, r0
    1a26:	81 1d       	adc	r24, r1
    1a28:	11 24       	eor	r1, r1
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	08 95       	ret

00001a2e <__prologue_saves__>:
    1a2e:	2f 92       	push	r2
    1a30:	3f 92       	push	r3
    1a32:	4f 92       	push	r4
    1a34:	5f 92       	push	r5
    1a36:	6f 92       	push	r6
    1a38:	7f 92       	push	r7
    1a3a:	8f 92       	push	r8
    1a3c:	9f 92       	push	r9
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	ca 1b       	sub	r28, r26
    1a58:	db 0b       	sbc	r29, r27
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	09 94       	ijmp

00001a66 <__epilogue_restores__>:
    1a66:	2a 88       	ldd	r2, Y+18	; 0x12
    1a68:	39 88       	ldd	r3, Y+17	; 0x11
    1a6a:	48 88       	ldd	r4, Y+16	; 0x10
    1a6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a70:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a72:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a74:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a76:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a78:	b9 84       	ldd	r11, Y+9	; 0x09
    1a7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1a7c:	df 80       	ldd	r13, Y+7	; 0x07
    1a7e:	ee 80       	ldd	r14, Y+6	; 0x06
    1a80:	fd 80       	ldd	r15, Y+5	; 0x05
    1a82:	0c 81       	ldd	r16, Y+4	; 0x04
    1a84:	1b 81       	ldd	r17, Y+3	; 0x03
    1a86:	aa 81       	ldd	r26, Y+2	; 0x02
    1a88:	b9 81       	ldd	r27, Y+1	; 0x01
    1a8a:	ce 0f       	add	r28, r30
    1a8c:	d1 1d       	adc	r29, r1
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	ed 01       	movw	r28, r26
    1a9a:	08 95       	ret

00001a9c <isspace>:
    1a9c:	91 11       	cpse	r25, r1
    1a9e:	0b c1       	rjmp	.+534    	; 0x1cb6 <__ctype_isfalse>
    1aa0:	80 32       	cpi	r24, 0x20	; 32
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <isspace+0xe>
    1aa4:	89 50       	subi	r24, 0x09	; 9
    1aa6:	85 50       	subi	r24, 0x05	; 5
    1aa8:	d0 f7       	brcc	.-12     	; 0x1a9e <isspace+0x2>
    1aaa:	08 95       	ret

00001aac <strchr_P>:
    1aac:	fc 01       	movw	r30, r24
    1aae:	05 90       	lpm	r0, Z+
    1ab0:	06 16       	cp	r0, r22
    1ab2:	21 f0       	breq	.+8      	; 0x1abc <strchr_P+0x10>
    1ab4:	00 20       	and	r0, r0
    1ab6:	d9 f7       	brne	.-10     	; 0x1aae <strchr_P+0x2>
    1ab8:	c0 01       	movw	r24, r0
    1aba:	08 95       	ret
    1abc:	31 97       	sbiw	r30, 0x01	; 1
    1abe:	cf 01       	movw	r24, r30
    1ac0:	08 95       	ret

00001ac2 <memcpy>:
    1ac2:	fb 01       	movw	r30, r22
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <memcpy+0xa>
    1ac8:	01 90       	ld	r0, Z+
    1aca:	0d 92       	st	X+, r0
    1acc:	41 50       	subi	r20, 0x01	; 1
    1ace:	50 40       	sbci	r21, 0x00	; 0
    1ad0:	d8 f7       	brcc	.-10     	; 0x1ac8 <memcpy+0x6>
    1ad2:	08 95       	ret

00001ad4 <fgetc>:
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	ec 01       	movw	r28, r24
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	20 ff       	sbrs	r18, 0
    1ade:	33 c0       	rjmp	.+102    	; 0x1b46 <fgetc+0x72>
    1ae0:	26 ff       	sbrs	r18, 6
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <fgetc+0x24>
    1ae4:	2f 7b       	andi	r18, 0xBF	; 191
    1ae6:	2b 83       	std	Y+3, r18	; 0x03
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	9f 83       	std	Y+7, r25	; 0x07
    1af0:	8e 83       	std	Y+6, r24	; 0x06
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	29 c0       	rjmp	.+82     	; 0x1b4a <fgetc+0x76>
    1af8:	22 ff       	sbrs	r18, 2
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <fgetc+0x46>
    1afc:	e8 81       	ld	r30, Y
    1afe:	f9 81       	ldd	r31, Y+1	; 0x01
    1b00:	80 81       	ld	r24, Z
    1b02:	08 2e       	mov	r0, r24
    1b04:	00 0c       	add	r0, r0
    1b06:	99 0b       	sbc	r25, r25
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	19 f4       	brne	.+6      	; 0x1b12 <fgetc+0x3e>
    1b0c:	20 62       	ori	r18, 0x20	; 32
    1b0e:	2b 83       	std	Y+3, r18	; 0x03
    1b10:	1a c0       	rjmp	.+52     	; 0x1b46 <fgetc+0x72>
    1b12:	31 96       	adiw	r30, 0x01	; 1
    1b14:	f9 83       	std	Y+1, r31	; 0x01
    1b16:	e8 83       	st	Y, r30
    1b18:	0e c0       	rjmp	.+28     	; 0x1b36 <fgetc+0x62>
    1b1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b1e:	09 95       	icall
    1b20:	97 ff       	sbrs	r25, 7
    1b22:	09 c0       	rjmp	.+18     	; 0x1b36 <fgetc+0x62>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <fgetc+0x5a>
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <fgetc+0x5c>
    1b2e:	80 e1       	ldi	r24, 0x10	; 16
    1b30:	82 2b       	or	r24, r18
    1b32:	8b 83       	std	Y+3, r24	; 0x03
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <fgetc+0x72>
    1b36:	2e 81       	ldd	r18, Y+6	; 0x06
    1b38:	3f 81       	ldd	r19, Y+7	; 0x07
    1b3a:	2f 5f       	subi	r18, 0xFF	; 255
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	3f 83       	std	Y+7, r19	; 0x07
    1b40:	2e 83       	std	Y+6, r18	; 0x06
    1b42:	99 27       	eor	r25, r25
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <fgetc+0x76>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <fputc>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	fb 01       	movw	r30, r22
    1b5a:	23 81       	ldd	r18, Z+3	; 0x03
    1b5c:	21 fd       	sbrc	r18, 1
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <fputc+0x16>
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	9f ef       	ldi	r25, 0xFF	; 255
    1b64:	2c c0       	rjmp	.+88     	; 0x1bbe <fputc+0x6e>
    1b66:	22 ff       	sbrs	r18, 2
    1b68:	16 c0       	rjmp	.+44     	; 0x1b96 <fputc+0x46>
    1b6a:	46 81       	ldd	r20, Z+6	; 0x06
    1b6c:	57 81       	ldd	r21, Z+7	; 0x07
    1b6e:	24 81       	ldd	r18, Z+4	; 0x04
    1b70:	35 81       	ldd	r19, Z+5	; 0x05
    1b72:	42 17       	cp	r20, r18
    1b74:	53 07       	cpc	r21, r19
    1b76:	44 f4       	brge	.+16     	; 0x1b88 <fputc+0x38>
    1b78:	a0 81       	ld	r26, Z
    1b7a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b7c:	9d 01       	movw	r18, r26
    1b7e:	2f 5f       	subi	r18, 0xFF	; 255
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	31 83       	std	Z+1, r19	; 0x01
    1b84:	20 83       	st	Z, r18
    1b86:	8c 93       	st	X, r24
    1b88:	26 81       	ldd	r18, Z+6	; 0x06
    1b8a:	37 81       	ldd	r19, Z+7	; 0x07
    1b8c:	2f 5f       	subi	r18, 0xFF	; 255
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	37 83       	std	Z+7, r19	; 0x07
    1b92:	26 83       	std	Z+6, r18	; 0x06
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <fputc+0x6e>
    1b96:	8b 01       	movw	r16, r22
    1b98:	ec 01       	movw	r28, r24
    1b9a:	fb 01       	movw	r30, r22
    1b9c:	00 84       	ldd	r0, Z+8	; 0x08
    1b9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1ba0:	e0 2d       	mov	r30, r0
    1ba2:	09 95       	icall
    1ba4:	89 2b       	or	r24, r25
    1ba6:	e1 f6       	brne	.-72     	; 0x1b60 <fputc+0x10>
    1ba8:	d8 01       	movw	r26, r16
    1baa:	16 96       	adiw	r26, 0x06	; 6
    1bac:	8d 91       	ld	r24, X+
    1bae:	9c 91       	ld	r25, X
    1bb0:	17 97       	sbiw	r26, 0x07	; 7
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	17 96       	adiw	r26, 0x07	; 7
    1bb6:	9c 93       	st	X, r25
    1bb8:	8e 93       	st	-X, r24
    1bba:	16 97       	sbiw	r26, 0x06	; 6
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <ungetc>:
    1bc8:	fb 01       	movw	r30, r22
    1bca:	23 81       	ldd	r18, Z+3	; 0x03
    1bcc:	20 ff       	sbrs	r18, 0
    1bce:	12 c0       	rjmp	.+36     	; 0x1bf4 <ungetc+0x2c>
    1bd0:	26 fd       	sbrc	r18, 6
    1bd2:	10 c0       	rjmp	.+32     	; 0x1bf4 <ungetc+0x2c>
    1bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	93 07       	cpc	r25, r19
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <ungetc+0x2c>
    1bdc:	82 83       	std	Z+2, r24	; 0x02
    1bde:	2f 7d       	andi	r18, 0xDF	; 223
    1be0:	20 64       	ori	r18, 0x40	; 64
    1be2:	23 83       	std	Z+3, r18	; 0x03
    1be4:	26 81       	ldd	r18, Z+6	; 0x06
    1be6:	37 81       	ldd	r19, Z+7	; 0x07
    1be8:	21 50       	subi	r18, 0x01	; 1
    1bea:	31 09       	sbc	r19, r1
    1bec:	37 83       	std	Z+7, r19	; 0x07
    1bee:	26 83       	std	Z+6, r18	; 0x06
    1bf0:	99 27       	eor	r25, r25
    1bf2:	08 95       	ret
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	9f ef       	ldi	r25, 0xFF	; 255
    1bf8:	08 95       	ret

00001bfa <__ultoa_invert>:
    1bfa:	fa 01       	movw	r30, r20
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	28 30       	cpi	r18, 0x08	; 8
    1c00:	51 f1       	breq	.+84     	; 0x1c56 <__ultoa_invert+0x5c>
    1c02:	20 31       	cpi	r18, 0x10	; 16
    1c04:	81 f1       	breq	.+96     	; 0x1c66 <__ultoa_invert+0x6c>
    1c06:	e8 94       	clt
    1c08:	6f 93       	push	r22
    1c0a:	6e 7f       	andi	r22, 0xFE	; 254
    1c0c:	6e 5f       	subi	r22, 0xFE	; 254
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	af 4f       	sbci	r26, 0xFF	; 255
    1c16:	b1 e0       	ldi	r27, 0x01	; 1
    1c18:	3e d0       	rcall	.+124    	; 0x1c96 <__ultoa_invert+0x9c>
    1c1a:	b4 e0       	ldi	r27, 0x04	; 4
    1c1c:	3c d0       	rcall	.+120    	; 0x1c96 <__ultoa_invert+0x9c>
    1c1e:	67 0f       	add	r22, r23
    1c20:	78 1f       	adc	r23, r24
    1c22:	89 1f       	adc	r24, r25
    1c24:	9a 1f       	adc	r25, r26
    1c26:	a1 1d       	adc	r26, r1
    1c28:	68 0f       	add	r22, r24
    1c2a:	79 1f       	adc	r23, r25
    1c2c:	8a 1f       	adc	r24, r26
    1c2e:	91 1d       	adc	r25, r1
    1c30:	a1 1d       	adc	r26, r1
    1c32:	6a 0f       	add	r22, r26
    1c34:	71 1d       	adc	r23, r1
    1c36:	81 1d       	adc	r24, r1
    1c38:	91 1d       	adc	r25, r1
    1c3a:	a1 1d       	adc	r26, r1
    1c3c:	20 d0       	rcall	.+64     	; 0x1c7e <__ultoa_invert+0x84>
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__ultoa_invert+0x48>
    1c40:	68 94       	set
    1c42:	3f 91       	pop	r19
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	26 9f       	mul	r18, r22
    1c48:	11 24       	eor	r1, r1
    1c4a:	30 19       	sub	r19, r0
    1c4c:	30 5d       	subi	r19, 0xD0	; 208
    1c4e:	31 93       	st	Z+, r19
    1c50:	de f6       	brtc	.-74     	; 0x1c08 <__ultoa_invert+0xe>
    1c52:	cf 01       	movw	r24, r30
    1c54:	08 95       	ret
    1c56:	46 2f       	mov	r20, r22
    1c58:	47 70       	andi	r20, 0x07	; 7
    1c5a:	40 5d       	subi	r20, 0xD0	; 208
    1c5c:	41 93       	st	Z+, r20
    1c5e:	b3 e0       	ldi	r27, 0x03	; 3
    1c60:	0f d0       	rcall	.+30     	; 0x1c80 <__ultoa_invert+0x86>
    1c62:	c9 f7       	brne	.-14     	; 0x1c56 <__ultoa_invert+0x5c>
    1c64:	f6 cf       	rjmp	.-20     	; 0x1c52 <__ultoa_invert+0x58>
    1c66:	46 2f       	mov	r20, r22
    1c68:	4f 70       	andi	r20, 0x0F	; 15
    1c6a:	40 5d       	subi	r20, 0xD0	; 208
    1c6c:	4a 33       	cpi	r20, 0x3A	; 58
    1c6e:	18 f0       	brcs	.+6      	; 0x1c76 <__ultoa_invert+0x7c>
    1c70:	49 5d       	subi	r20, 0xD9	; 217
    1c72:	31 fd       	sbrc	r19, 1
    1c74:	40 52       	subi	r20, 0x20	; 32
    1c76:	41 93       	st	Z+, r20
    1c78:	02 d0       	rcall	.+4      	; 0x1c7e <__ultoa_invert+0x84>
    1c7a:	a9 f7       	brne	.-22     	; 0x1c66 <__ultoa_invert+0x6c>
    1c7c:	ea cf       	rjmp	.-44     	; 0x1c52 <__ultoa_invert+0x58>
    1c7e:	b4 e0       	ldi	r27, 0x04	; 4
    1c80:	a6 95       	lsr	r26
    1c82:	97 95       	ror	r25
    1c84:	87 95       	ror	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	ba 95       	dec	r27
    1c8c:	c9 f7       	brne	.-14     	; 0x1c80 <__ultoa_invert+0x86>
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 05       	cpc	r22, r1
    1c92:	71 05       	cpc	r23, r1
    1c94:	08 95       	ret
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	0a 2e       	mov	r0, r26
    1c9c:	06 94       	lsr	r0
    1c9e:	57 95       	ror	r21
    1ca0:	47 95       	ror	r20
    1ca2:	37 95       	ror	r19
    1ca4:	27 95       	ror	r18
    1ca6:	ba 95       	dec	r27
    1ca8:	c9 f7       	brne	.-14     	; 0x1c9c <__ultoa_invert+0xa2>
    1caa:	62 0f       	add	r22, r18
    1cac:	73 1f       	adc	r23, r19
    1cae:	84 1f       	adc	r24, r20
    1cb0:	95 1f       	adc	r25, r21
    1cb2:	a0 1d       	adc	r26, r0
    1cb4:	08 95       	ret

00001cb6 <__ctype_isfalse>:
    1cb6:	99 27       	eor	r25, r25
    1cb8:	88 27       	eor	r24, r24

00001cba <__ctype_istrue>:
    1cba:	08 95       	ret

00001cbc <_exit>:
    1cbc:	f8 94       	cli

00001cbe <__stop_program>:
    1cbe:	ff cf       	rjmp	.-2      	; 0x1cbe <__stop_program>
