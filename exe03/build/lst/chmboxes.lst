   1               		.file	"chmboxes.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMBObjectInit,"ax",@progbits
  11               	.global	chMBObjectInit
  13               	chMBObjectInit:
  14               	.LFB98:
  15               		.file 1 "../../../os/oslib/src/chmboxes.c"
   1:../../../os/oslib/src/chmboxes.c **** /*
   2:../../../os/oslib/src/chmboxes.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/src/chmboxes.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/src/chmboxes.c **** 
   5:../../../os/oslib/src/chmboxes.c ****     This file is part of ChibiOS.
   6:../../../os/oslib/src/chmboxes.c **** 
   7:../../../os/oslib/src/chmboxes.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/src/chmboxes.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/src/chmboxes.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/src/chmboxes.c **** 
  11:../../../os/oslib/src/chmboxes.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/src/chmboxes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/src/chmboxes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/src/chmboxes.c ****     GNU General Public License for more details.
  15:../../../os/oslib/src/chmboxes.c **** 
  16:../../../os/oslib/src/chmboxes.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/src/chmboxes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/src/chmboxes.c **** */
  19:../../../os/oslib/src/chmboxes.c **** 
  20:../../../os/oslib/src/chmboxes.c **** /**
  21:../../../os/oslib/src/chmboxes.c ****  * @file    oslib/src/chmboxes.c
  22:../../../os/oslib/src/chmboxes.c ****  * @brief   Mailboxes code.
  23:../../../os/oslib/src/chmboxes.c ****  *
  24:../../../os/oslib/src/chmboxes.c ****  * @addtogroup oslib_mailboxes
  25:../../../os/oslib/src/chmboxes.c ****  * @details Asynchronous messages.
  26:../../../os/oslib/src/chmboxes.c ****  *          <h2>Operation mode</h2>
  27:../../../os/oslib/src/chmboxes.c ****  *          A mailbox is an asynchronous communication mechanism.<br>
  28:../../../os/oslib/src/chmboxes.c ****  *          Operations defined for mailboxes:
  29:../../../os/oslib/src/chmboxes.c ****  *          - <b>Post</b>: Posts a message on the mailbox in FIFO order.
  30:../../../os/oslib/src/chmboxes.c ****  *          - <b>Post Ahead</b>: Posts a message on the mailbox with urgent
  31:../../../os/oslib/src/chmboxes.c ****  *            priority.
  32:../../../os/oslib/src/chmboxes.c ****  *          - <b>Fetch</b>: A message is fetched from the mailbox and removed
  33:../../../os/oslib/src/chmboxes.c ****  *            from the queue.
  34:../../../os/oslib/src/chmboxes.c ****  *          - <b>Reset</b>: The mailbox is emptied and all the stored messages
  35:../../../os/oslib/src/chmboxes.c ****  *            are lost.
  36:../../../os/oslib/src/chmboxes.c ****  *          .
  37:../../../os/oslib/src/chmboxes.c ****  *          A message is a variable of type msg_t that is guaranteed to have
  38:../../../os/oslib/src/chmboxes.c ****  *          the same size of and be compatible with (data) pointers (anyway an
  39:../../../os/oslib/src/chmboxes.c ****  *          explicit cast is needed).
  40:../../../os/oslib/src/chmboxes.c ****  *          If larger messages need to be exchanged then a pointer to a
  41:../../../os/oslib/src/chmboxes.c ****  *          structure can be posted in the mailbox but the posting side has
  42:../../../os/oslib/src/chmboxes.c ****  *          no predefined way to know when the message has been processed. A
  43:../../../os/oslib/src/chmboxes.c ****  *          possible approach is to allocate memory (from a memory pool for
  44:../../../os/oslib/src/chmboxes.c ****  *          example) from the posting side and free it on the fetching side.
  45:../../../os/oslib/src/chmboxes.c ****  *          Another approach is to set a "done" flag into the structure pointed
  46:../../../os/oslib/src/chmboxes.c ****  *          by the message.
  47:../../../os/oslib/src/chmboxes.c ****  * @pre     In order to use the mailboxes APIs the @p CH_CFG_USE_MAILBOXES
  48:../../../os/oslib/src/chmboxes.c ****  *          option must be enabled in @p chconf.h.
  49:../../../os/oslib/src/chmboxes.c ****  * @note    Compatible with RT and NIL.
  50:../../../os/oslib/src/chmboxes.c ****  * @{
  51:../../../os/oslib/src/chmboxes.c ****  */
  52:../../../os/oslib/src/chmboxes.c **** 
  53:../../../os/oslib/src/chmboxes.c **** #include "ch.h"
  54:../../../os/oslib/src/chmboxes.c **** 
  55:../../../os/oslib/src/chmboxes.c **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  56:../../../os/oslib/src/chmboxes.c **** 
  57:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  58:../../../os/oslib/src/chmboxes.c **** /* Module exported variables.                                                */
  59:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  60:../../../os/oslib/src/chmboxes.c **** 
  61:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  62:../../../os/oslib/src/chmboxes.c **** /* Module local types.                                                       */
  63:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  64:../../../os/oslib/src/chmboxes.c **** 
  65:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  66:../../../os/oslib/src/chmboxes.c **** /* Module local variables.                                                   */
  67:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  68:../../../os/oslib/src/chmboxes.c **** 
  69:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  70:../../../os/oslib/src/chmboxes.c **** /* Module local functions.                                                   */
  71:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  72:../../../os/oslib/src/chmboxes.c **** 
  73:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  74:../../../os/oslib/src/chmboxes.c **** /* Module exported functions.                                                */
  75:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  76:../../../os/oslib/src/chmboxes.c **** 
  77:../../../os/oslib/src/chmboxes.c **** /**
  78:../../../os/oslib/src/chmboxes.c ****  * @brief   Initializes a @p mailbox_t object.
  79:../../../os/oslib/src/chmboxes.c ****  *
  80:../../../os/oslib/src/chmboxes.c ****  * @param[out] mbp      the pointer to the @p mailbox_t structure to be
  81:../../../os/oslib/src/chmboxes.c ****  *                      initialized
  82:../../../os/oslib/src/chmboxes.c ****  * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
  83:../../../os/oslib/src/chmboxes.c ****  * @param[in] n         number of elements in the buffer array
  84:../../../os/oslib/src/chmboxes.c ****  *
  85:../../../os/oslib/src/chmboxes.c ****  * @init
  86:../../../os/oslib/src/chmboxes.c ****  */
  87:../../../os/oslib/src/chmboxes.c **** void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
  16               		.loc 1 87 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
  88:../../../os/oslib/src/chmboxes.c **** 
  89:../../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));
  90:../../../os/oslib/src/chmboxes.c **** 
  91:../../../os/oslib/src/chmboxes.c ****   mbp->buffer = buf;
  24               		.loc 1 91 0
  25 0002 7183      		std Z+1,r23
  26 0004 6083      		st Z,r22
  92:../../../os/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  27               		.loc 1 92 0
  28 0006 7783      		std Z+7,r23
  29 0008 6683      		std Z+6,r22
  93:../../../os/oslib/src/chmboxes.c ****   mbp->wrptr  = buf;
  30               		.loc 1 93 0
  31 000a 7583      		std Z+5,r23
  32 000c 6483      		std Z+4,r22
  94:../../../os/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  33               		.loc 1 94 0
  34 000e 440F      		lsl r20
  35 0010 551F      		rol r21
  36               	.LVL1:
  37 0012 640F      		add r22,r20
  38 0014 751F      		adc r23,r21
  39               	.LVL2:
  40 0016 7383      		std Z+3,r23
  41 0018 6283      		std Z+2,r22
  95:../../../os/oslib/src/chmboxes.c ****   mbp->cnt    = (size_t)0;
  42               		.loc 1 95 0
  43 001a 1186      		std Z+9,__zero_reg__
  44 001c 1086      		std Z+8,__zero_reg__
  96:../../../os/oslib/src/chmboxes.c ****   mbp->reset  = false;
  45               		.loc 1 96 0
  46 001e 1286      		std Z+10,__zero_reg__
  97:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qw);
  47               		.loc 1 97 0
  48 0020 1386      		std Z+11,__zero_reg__
  98:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  49               		.loc 1 98 0
  50 0022 1486      		std Z+12,__zero_reg__
  51 0024 0895      		ret
  52               		.cfi_endproc
  53               	.LFE98:
  55               		.section	.text.chMBResetI,"ax",@progbits
  56               	.global	chMBResetI
  58               	chMBResetI:
  59               	.LFB100:
  99:../../../os/oslib/src/chmboxes.c **** }
 100:../../../os/oslib/src/chmboxes.c **** 
 101:../../../os/oslib/src/chmboxes.c **** /**
 102:../../../os/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 103:../../../os/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 104:../../../os/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 105:../../../os/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 106:../../../os/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 107:../../../os/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 108:../../../os/oslib/src/chmboxes.c ****  *
 109:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 110:../../../os/oslib/src/chmboxes.c ****  *
 111:../../../os/oslib/src/chmboxes.c ****  * @api
 112:../../../os/oslib/src/chmboxes.c ****  */
 113:../../../os/oslib/src/chmboxes.c **** void chMBReset(mailbox_t *mbp) {
 114:../../../os/oslib/src/chmboxes.c **** 
 115:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 116:../../../os/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 117:../../../os/oslib/src/chmboxes.c ****   chSchRescheduleS();
 118:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 119:../../../os/oslib/src/chmboxes.c **** }
 120:../../../os/oslib/src/chmboxes.c **** 
 121:../../../os/oslib/src/chmboxes.c **** /**
 122:../../../os/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 123:../../../os/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 124:../../../os/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 125:../../../os/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 126:../../../os/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 127:../../../os/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 128:../../../os/oslib/src/chmboxes.c ****  *
 129:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 130:../../../os/oslib/src/chmboxes.c ****  *
 131:../../../os/oslib/src/chmboxes.c ****  * @api
 132:../../../os/oslib/src/chmboxes.c ****  */
 133:../../../os/oslib/src/chmboxes.c **** void chMBResetI(mailbox_t *mbp) {
  60               		.loc 1 133 0
  61               		.cfi_startproc
  62               	.LVL3:
  63 0000 CF93      		push r28
  64               	.LCFI0:
  65               		.cfi_def_cfa_offset 3
  66               		.cfi_offset 28, -2
  67 0002 DF93      		push r29
  68               	.LCFI1:
  69               		.cfi_def_cfa_offset 4
  70               		.cfi_offset 29, -3
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 2 */
  74               	.L__stack_usage = 2
  75 0004 EC01      		movw r28,r24
 134:../../../os/oslib/src/chmboxes.c **** 
 135:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 136:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 137:../../../os/oslib/src/chmboxes.c **** 
 138:../../../os/oslib/src/chmboxes.c ****   mbp->wrptr = mbp->buffer;
  76               		.loc 1 138 0
  77 0006 8881      		ld r24,Y
  78 0008 9981      		ldd r25,Y+1
  79               	.LVL4:
  80 000a 9D83      		std Y+5,r25
  81 000c 8C83      		std Y+4,r24
 139:../../../os/oslib/src/chmboxes.c ****   mbp->rdptr = mbp->buffer;
  82               		.loc 1 139 0
  83 000e 9F83      		std Y+7,r25
  84 0010 8E83      		std Y+6,r24
 140:../../../os/oslib/src/chmboxes.c ****   mbp->cnt   = (size_t)0;
  85               		.loc 1 140 0
  86 0012 1986      		std Y+9,__zero_reg__
  87 0014 1886      		std Y+8,__zero_reg__
 141:../../../os/oslib/src/chmboxes.c ****   mbp->reset = true;
  88               		.loc 1 141 0
  89 0016 81E0      		ldi r24,lo8(1)
  90 0018 8A87      		std Y+10,r24
 142:../../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qw, MSG_RESET);
  91               		.loc 1 142 0
  92 001a 6EEF      		ldi r22,lo8(-2)
  93 001c 7FEF      		ldi r23,lo8(-1)
  94 001e CE01      		movw r24,r28
  95 0020 0B96      		adiw r24,11
  96 0022 0E94 0000 		call chThdDequeueAllI
  97               	.LVL5:
 143:../../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
  98               		.loc 1 143 0
  99 0026 6EEF      		ldi r22,lo8(-2)
 100 0028 7FEF      		ldi r23,lo8(-1)
 101 002a CE01      		movw r24,r28
 102 002c 0C96      		adiw r24,12
 103               	/* epilogue start */
 144:../../../os/oslib/src/chmboxes.c **** }
 104               		.loc 1 144 0
 105 002e DF91      		pop r29
 106 0030 CF91      		pop r28
 107               	.LVL6:
 143:../../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 108               		.loc 1 143 0
 109 0032 0C94 0000 		jmp chThdDequeueAllI
 110               	.LVL7:
 111               		.cfi_endproc
 112               	.LFE100:
 114               		.section	.text.chMBReset,"ax",@progbits
 115               	.global	chMBReset
 117               	chMBReset:
 118               	.LFB99:
 113:../../../os/oslib/src/chmboxes.c **** 
 119               		.loc 1 113 0
 120               		.cfi_startproc
 121               	.LVL8:
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
 126               	.LBB64:
 127               	.LBB65:
 128               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 129               		.loc 2 430 0
 130               	/* #APP */
 131               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 132 0000 F894      		cli
 133               	 ;  0 "" 2
 134               	/* #NOAPP */
 135               	.LBE65:
 136               	.LBE64:
 116:../../../os/oslib/src/chmboxes.c ****   chSchRescheduleS();
 137               		.loc 1 116 0
 138 0002 0E94 0000 		call chMBResetI
 139               	.LVL9:
 117:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 140               		.loc 1 117 0
 141 0006 0E94 0000 		call chSchRescheduleS
 142               	.LVL10:
 143               	.LBB66:
 144               	.LBB67:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 145               		.loc 2 440 0
 146               	/* #APP */
 147               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 148 000a 7894      		sei
 149               	 ;  0 "" 2
 150               	/* #NOAPP */
 151 000c 0895      		ret
 152               	.LBE67:
 153               	.LBE66:
 154               		.cfi_endproc
 155               	.LFE99:
 157               		.section	.text.chMBPostTimeoutS,"ax",@progbits
 158               	.global	chMBPostTimeoutS
 160               	chMBPostTimeoutS:
 161               	.LFB102:
 145:../../../os/oslib/src/chmboxes.c **** 
 146:../../../os/oslib/src/chmboxes.c **** /**
 147:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 148:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 149:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 150:../../../os/oslib/src/chmboxes.c ****  *
 151:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 152:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 153:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 154:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 155:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 156:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 157:../../../os/oslib/src/chmboxes.c ****  *                      .
 158:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 159:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 160:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 161:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 162:../../../os/oslib/src/chmboxes.c ****  *
 163:../../../os/oslib/src/chmboxes.c ****  * @api
 164:../../../os/oslib/src/chmboxes.c ****  */
 165:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 166:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 167:../../../os/oslib/src/chmboxes.c **** 
 168:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 169:../../../os/oslib/src/chmboxes.c ****   rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 170:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 171:../../../os/oslib/src/chmboxes.c **** 
 172:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 173:../../../os/oslib/src/chmboxes.c **** }
 174:../../../os/oslib/src/chmboxes.c **** 
 175:../../../os/oslib/src/chmboxes.c **** /**
 176:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 177:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 178:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 179:../../../os/oslib/src/chmboxes.c ****  *
 180:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 181:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 182:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 183:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 184:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 185:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 186:../../../os/oslib/src/chmboxes.c ****  *                      .
 187:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 188:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 189:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 190:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 191:../../../os/oslib/src/chmboxes.c ****  *
 192:../../../os/oslib/src/chmboxes.c ****  * @sclass
 193:../../../os/oslib/src/chmboxes.c ****  */
 194:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 162               		.loc 1 194 0
 163               		.cfi_startproc
 164               	.LVL11:
 165 0000 CF92      		push r12
 166               	.LCFI2:
 167               		.cfi_def_cfa_offset 3
 168               		.cfi_offset 12, -2
 169 0002 DF92      		push r13
 170               	.LCFI3:
 171               		.cfi_def_cfa_offset 4
 172               		.cfi_offset 13, -3
 173 0004 EF92      		push r14
 174               	.LCFI4:
 175               		.cfi_def_cfa_offset 5
 176               		.cfi_offset 14, -4
 177 0006 FF92      		push r15
 178               	.LCFI5:
 179               		.cfi_def_cfa_offset 6
 180               		.cfi_offset 15, -5
 181 0008 0F93      		push r16
 182               	.LCFI6:
 183               		.cfi_def_cfa_offset 7
 184               		.cfi_offset 16, -6
 185 000a 1F93      		push r17
 186               	.LCFI7:
 187               		.cfi_def_cfa_offset 8
 188               		.cfi_offset 17, -7
 189 000c CF93      		push r28
 190               	.LCFI8:
 191               		.cfi_def_cfa_offset 9
 192               		.cfi_offset 28, -8
 193 000e DF93      		push r29
 194               	.LCFI9:
 195               		.cfi_def_cfa_offset 10
 196               		.cfi_offset 29, -9
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 8 */
 200               	.L__stack_usage = 8
 201 0010 EC01      		movw r28,r24
 202 0012 6B01      		movw r12,r22
 203 0014 7A01      		movw r14,r20
 195:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 196:../../../os/oslib/src/chmboxes.c **** 
 197:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 198:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 199:../../../os/oslib/src/chmboxes.c **** 
 200:../../../os/oslib/src/chmboxes.c ****   do {
 201:../../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 202:../../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 203:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 204:../../../os/oslib/src/chmboxes.c ****     }
 205:../../../os/oslib/src/chmboxes.c **** 
 206:../../../os/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 207:../../../os/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 208:../../../os/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 209:../../../os/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 210:../../../os/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 211:../../../os/oslib/src/chmboxes.c ****       }
 212:../../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 213:../../../os/oslib/src/chmboxes.c **** 
 214:../../../os/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 215:../../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 216:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 217:../../../os/oslib/src/chmboxes.c **** 
 218:../../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 219:../../../os/oslib/src/chmboxes.c ****     }
 220:../../../os/oslib/src/chmboxes.c **** 
 221:../../../os/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 222:../../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 204               		.loc 1 222 0
 205 0016 8C01      		movw r16,r24
 206 0018 055F      		subi r16,-11
 207 001a 1F4F      		sbci r17,-1
 208 001c 00C0      		rjmp .L8
 209               	.LVL12:
 210               	.L14:
 211               	.LBB82:
 212               	.LBB83:
 213               	.LBB84:
 214               		.file 3 "../../../os/oslib/include/chmboxes.h"
   1:../../../os/oslib/include/chmboxes.h **** /*
   2:../../../os/oslib/include/chmboxes.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/include/chmboxes.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/include/chmboxes.h **** 
   5:../../../os/oslib/include/chmboxes.h ****     This file is part of ChibiOS.
   6:../../../os/oslib/include/chmboxes.h **** 
   7:../../../os/oslib/include/chmboxes.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/include/chmboxes.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/include/chmboxes.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/include/chmboxes.h **** 
  11:../../../os/oslib/include/chmboxes.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/include/chmboxes.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/include/chmboxes.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/include/chmboxes.h ****     GNU General Public License for more details.
  15:../../../os/oslib/include/chmboxes.h **** 
  16:../../../os/oslib/include/chmboxes.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/include/chmboxes.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/include/chmboxes.h **** */
  19:../../../os/oslib/include/chmboxes.h **** 
  20:../../../os/oslib/include/chmboxes.h **** /**
  21:../../../os/oslib/include/chmboxes.h ****  * @file    oslib/include/chmboxes.h
  22:../../../os/oslib/include/chmboxes.h ****  * @brief   Mailboxes macros and structures.
  23:../../../os/oslib/include/chmboxes.h ****  *
  24:../../../os/oslib/include/chmboxes.h ****  * @addtogroup oslib_mailboxes
  25:../../../os/oslib/include/chmboxes.h ****  * @{
  26:../../../os/oslib/include/chmboxes.h ****  */
  27:../../../os/oslib/include/chmboxes.h **** 
  28:../../../os/oslib/include/chmboxes.h **** #ifndef CHMBOXES_H
  29:../../../os/oslib/include/chmboxes.h **** #define CHMBOXES_H
  30:../../../os/oslib/include/chmboxes.h **** 
  31:../../../os/oslib/include/chmboxes.h **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/oslib/include/chmboxes.h **** 
  33:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  34:../../../os/oslib/include/chmboxes.h **** /* Module constants.                                                         */
  35:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  36:../../../os/oslib/include/chmboxes.h **** 
  37:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  38:../../../os/oslib/include/chmboxes.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  40:../../../os/oslib/include/chmboxes.h **** 
  41:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  42:../../../os/oslib/include/chmboxes.h **** /* Derived constants and error checks.                                       */
  43:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  44:../../../os/oslib/include/chmboxes.h **** 
  45:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  46:../../../os/oslib/include/chmboxes.h **** /* Module data structures and types.                                         */
  47:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  48:../../../os/oslib/include/chmboxes.h **** 
  49:../../../os/oslib/include/chmboxes.h **** /**
  50:../../../os/oslib/include/chmboxes.h ****  * @brief   Structure representing a mailbox object.
  51:../../../os/oslib/include/chmboxes.h ****  */
  52:../../../os/oslib/include/chmboxes.h **** typedef struct {
  53:../../../os/oslib/include/chmboxes.h ****   msg_t                 *buffer;        /**< @brief Pointer to the mailbox
  54:../../../os/oslib/include/chmboxes.h ****                                                     buffer.                 */
  55:../../../os/oslib/include/chmboxes.h ****   msg_t                 *top;           /**< @brief Pointer to the location
  56:../../../os/oslib/include/chmboxes.h ****                                                     after the buffer.       */
  57:../../../os/oslib/include/chmboxes.h ****   msg_t                 *wrptr;         /**< @brief Write pointer.          */
  58:../../../os/oslib/include/chmboxes.h ****   msg_t                 *rdptr;         /**< @brief Read pointer.           */
  59:../../../os/oslib/include/chmboxes.h ****   size_t                cnt;            /**< @brief Messages in queue.      */
  60:../../../os/oslib/include/chmboxes.h ****   bool                  reset;          /**< @brief True in reset state.    */
  61:../../../os/oslib/include/chmboxes.h ****   threads_queue_t       qw;             /**< @brief Queued writers.         */
  62:../../../os/oslib/include/chmboxes.h ****   threads_queue_t       qr;             /**< @brief Queued readers.         */
  63:../../../os/oslib/include/chmboxes.h **** } mailbox_t;
  64:../../../os/oslib/include/chmboxes.h **** 
  65:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  66:../../../os/oslib/include/chmboxes.h **** /* Module macros.                                                            */
  67:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
  68:../../../os/oslib/include/chmboxes.h **** 
  69:../../../os/oslib/include/chmboxes.h **** /**
  70:../../../os/oslib/include/chmboxes.h ****  * @brief   Data part of a static mailbox initializer.
  71:../../../os/oslib/include/chmboxes.h ****  * @details This macro should be used when statically initializing a
  72:../../../os/oslib/include/chmboxes.h ****  *          mailbox that is part of a bigger structure.
  73:../../../os/oslib/include/chmboxes.h ****  *
  74:../../../os/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  75:../../../os/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  76:../../../os/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  77:../../../os/oslib/include/chmboxes.h ****  */
  78:../../../os/oslib/include/chmboxes.h **** #define __MAILBOX_DATA(name, buffer, size) {                                \
  79:../../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  80:../../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer) + size,                                                 \
  81:../../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  82:../../../os/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  83:../../../os/oslib/include/chmboxes.h ****   (size_t)0,                                                                \
  84:../../../os/oslib/include/chmboxes.h ****   false,                                                                    \
  85:../../../os/oslib/include/chmboxes.h ****   __THREADS_QUEUE_DATA(name.qw),                                            \
  86:../../../os/oslib/include/chmboxes.h ****   __THREADS_QUEUE_DATA(name.qr),                                            \
  87:../../../os/oslib/include/chmboxes.h **** }
  88:../../../os/oslib/include/chmboxes.h **** 
  89:../../../os/oslib/include/chmboxes.h **** /**
  90:../../../os/oslib/include/chmboxes.h ****  * @brief   Static mailbox initializer.
  91:../../../os/oslib/include/chmboxes.h ****  * @details Statically initialized mailboxes require no explicit
  92:../../../os/oslib/include/chmboxes.h ****  *          initialization using @p chMBObjectInit().
  93:../../../os/oslib/include/chmboxes.h ****  *
  94:../../../os/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  95:../../../os/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  96:../../../os/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  97:../../../os/oslib/include/chmboxes.h ****  */
  98:../../../os/oslib/include/chmboxes.h **** #define MAILBOX_DECL(name, buffer, size)                                    \
  99:../../../os/oslib/include/chmboxes.h ****   mailbox_t name = __MAILBOX_DATA(name, buffer, size)
 100:../../../os/oslib/include/chmboxes.h **** 
 101:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 102:../../../os/oslib/include/chmboxes.h **** /* External declarations.                                                    */
 103:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 104:../../../os/oslib/include/chmboxes.h **** 
 105:../../../os/oslib/include/chmboxes.h **** #ifdef __cplusplus
 106:../../../os/oslib/include/chmboxes.h **** extern "C" {
 107:../../../os/oslib/include/chmboxes.h **** #endif
 108:../../../os/oslib/include/chmboxes.h ****   void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n);
 109:../../../os/oslib/include/chmboxes.h ****   void chMBReset(mailbox_t *mbp);
 110:../../../os/oslib/include/chmboxes.h ****   void chMBResetI(mailbox_t *mbp);
 111:../../../os/oslib/include/chmboxes.h ****   msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 112:../../../os/oslib/include/chmboxes.h ****   msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 113:../../../os/oslib/include/chmboxes.h ****   msg_t chMBPostI(mailbox_t *mbp, msg_t msg);
 114:../../../os/oslib/include/chmboxes.h ****   msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 115:../../../os/oslib/include/chmboxes.h ****   msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout);
 116:../../../os/oslib/include/chmboxes.h ****   msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg);
 117:../../../os/oslib/include/chmboxes.h ****   msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout);
 118:../../../os/oslib/include/chmboxes.h ****   msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout);
 119:../../../os/oslib/include/chmboxes.h ****   msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp);
 120:../../../os/oslib/include/chmboxes.h **** #ifdef __cplusplus
 121:../../../os/oslib/include/chmboxes.h **** }
 122:../../../os/oslib/include/chmboxes.h **** #endif
 123:../../../os/oslib/include/chmboxes.h **** 
 124:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 125:../../../os/oslib/include/chmboxes.h **** /* Module inline functions.                                                  */
 126:../../../os/oslib/include/chmboxes.h **** /*===========================================================================*/
 127:../../../os/oslib/include/chmboxes.h **** 
 128:../../../os/oslib/include/chmboxes.h **** /**
 129:../../../os/oslib/include/chmboxes.h ****  * @brief   Returns the mailbox buffer size as number of messages.
 130:../../../os/oslib/include/chmboxes.h ****  *
 131:../../../os/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 132:../../../os/oslib/include/chmboxes.h ****  * @return              The size of the mailbox.
 133:../../../os/oslib/include/chmboxes.h ****  *
 134:../../../os/oslib/include/chmboxes.h ****  * @iclass
 135:../../../os/oslib/include/chmboxes.h ****  */
 136:../../../os/oslib/include/chmboxes.h **** static inline size_t chMBGetSizeI(const mailbox_t *mbp) {
 137:../../../os/oslib/include/chmboxes.h **** 
 138:../../../os/oslib/include/chmboxes.h ****   /*lint -save -e9033 [10.8] Perfectly safe pointers
 139:../../../os/oslib/include/chmboxes.h ****     arithmetic.*/
 140:../../../os/oslib/include/chmboxes.h ****   return (size_t)(mbp->top - mbp->buffer);
 215               		.loc 3 140 0
 216 001e 2A81      		ldd r18,Y+2
 217 0020 3B81      		ldd r19,Y+3
 218 0022 4881      		ld r20,Y
 219 0024 5981      		ldd r21,Y+1
 220               	.LVL13:
 221               	.LBE84:
 222               	.LBE83:
 223               	.LBE82:
 207:../../../os/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 224               		.loc 1 207 0
 225 0026 C901      		movw r24,r18
 226 0028 841B      		sub r24,r20
 227 002a 950B      		sbc r25,r21
 228 002c 9595      		asr r25
 229 002e 8795      		ror r24
 230 0030 6885      		ldd r22,Y+8
 231 0032 7985      		ldd r23,Y+9
 232 0034 8617      		cp r24,r22
 233 0036 9707      		cpc r25,r23
 234 0038 01F4      		brne .L13
 235               		.loc 1 222 0
 236 003a B701      		movw r22,r14
 237 003c C801      		movw r24,r16
 238 003e 0E94 0000 		call chThdEnqueueTimeoutS
 239               	.LVL14:
 223:../../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 240               		.loc 1 223 0
 241 0042 0097      		sbiw r24,0
 242 0044 01F4      		brne .L5
 243               	.LVL15:
 244               	.L8:
 202:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 245               		.loc 1 202 0
 246 0046 8A85      		ldd r24,Y+10
 247 0048 8823      		tst r24
 248 004a 01F0      		breq .L14
 203:../../../os/oslib/src/chmboxes.c ****     }
 249               		.loc 1 203 0
 250 004c 8EEF      		ldi r24,lo8(-2)
 251 004e 9FEF      		ldi r25,lo8(-1)
 252               	.L5:
 253               	/* epilogue start */
 224:../../../os/oslib/src/chmboxes.c **** 
 225:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 226:../../../os/oslib/src/chmboxes.c **** }
 254               		.loc 1 226 0
 255 0050 DF91      		pop r29
 256 0052 CF91      		pop r28
 257               	.LVL16:
 258 0054 1F91      		pop r17
 259 0056 0F91      		pop r16
 260               	.LVL17:
 261 0058 FF90      		pop r15
 262 005a EF90      		pop r14
 263               	.LVL18:
 264 005c DF90      		pop r13
 265 005e CF90      		pop r12
 266               	.LVL19:
 267 0060 0895      		ret
 268               	.LVL20:
 269               	.L13:
 208:../../../os/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 270               		.loc 1 208 0
 271 0062 EC81      		ldd r30,Y+4
 272 0064 FD81      		ldd r31,Y+5
 273 0066 CF01      		movw r24,r30
 274 0068 0296      		adiw r24,2
 275 006a 9D83      		std Y+5,r25
 276 006c 8C83      		std Y+4,r24
 277 006e D182      		std Z+1,r13
 278 0070 C082      		st Z,r12
 209:../../../os/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 279               		.loc 1 209 0
 280 0072 8217      		cp r24,r18
 281 0074 9307      		cpc r25,r19
 282 0076 00F0      		brlo .L7
 210:../../../os/oslib/src/chmboxes.c ****       }
 283               		.loc 1 210 0
 284 0078 5D83      		std Y+5,r21
 285 007a 4C83      		std Y+4,r20
 286               	.L7:
 287               	.LVL21:
 288               	.LBB85:
 289               	.LBB86:
 212:../../../os/oslib/src/chmboxes.c **** 
 290               		.loc 1 212 0
 291 007c 8885      		ldd r24,Y+8
 292 007e 9985      		ldd r25,Y+9
 293 0080 0196      		adiw r24,1
 294 0082 9987      		std Y+9,r25
 295 0084 8887      		std Y+8,r24
 215:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 296               		.loc 1 215 0
 297 0086 60E0      		ldi r22,0
 298 0088 70E0      		ldi r23,0
 299 008a CE01      		movw r24,r28
 300 008c 0C96      		adiw r24,12
 301 008e 0E94 0000 		call chThdDequeueNextI
 302               	.LVL22:
 216:../../../os/oslib/src/chmboxes.c **** 
 303               		.loc 1 216 0
 304 0092 0E94 0000 		call chSchRescheduleS
 305               	.LVL23:
 306 0096 80E0      		ldi r24,0
 307 0098 90E0      		ldi r25,0
 308 009a 00C0      		rjmp .L5
 309               	.LBE86:
 310               	.LBE85:
 311               		.cfi_endproc
 312               	.LFE102:
 314               		.section	.text.chMBPostTimeout,"ax",@progbits
 315               	.global	chMBPostTimeout
 317               	chMBPostTimeout:
 318               	.LFB101:
 165:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 319               		.loc 1 165 0
 320               		.cfi_startproc
 321               	.LVL24:
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 326               	.LBB87:
 327               	.LBB88:
 430:../../../os/common/ports/AVR/chcore.h **** }
 328               		.loc 2 430 0
 329               	/* #APP */
 330               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 331 0000 F894      		cli
 332               	 ;  0 "" 2
 333               	/* #NOAPP */
 334               	.LBE88:
 335               	.LBE87:
 169:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 336               		.loc 1 169 0
 337 0002 0E94 0000 		call chMBPostTimeoutS
 338               	.LVL25:
 339               	.LBB89:
 340               	.LBB90:
 341               		.loc 2 440 0
 342               	/* #APP */
 343               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 344 0006 7894      		sei
 345               	 ;  0 "" 2
 346               	/* #NOAPP */
 347               	.LBE90:
 348               	.LBE89:
 173:../../../os/oslib/src/chmboxes.c **** 
 349               		.loc 1 173 0
 350 0008 0895      		ret
 351               		.cfi_endproc
 352               	.LFE101:
 354               		.section	.text.chMBPostI,"ax",@progbits
 355               	.global	chMBPostI
 357               	chMBPostI:
 358               	.LFB103:
 227:../../../os/oslib/src/chmboxes.c **** 
 228:../../../os/oslib/src/chmboxes.c **** /**
 229:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 230:../../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 231:../../../os/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 232:../../../os/oslib/src/chmboxes.c ****  *
 233:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 234:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 235:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 236:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 237:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 238:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 239:../../../os/oslib/src/chmboxes.c ****  *                      posted.
 240:../../../os/oslib/src/chmboxes.c ****  *
 241:../../../os/oslib/src/chmboxes.c ****  * @iclass
 242:../../../os/oslib/src/chmboxes.c ****  */
 243:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 359               		.loc 1 243 0
 360               		.cfi_startproc
 361               	.LVL26:
 362               	/* prologue: function */
 363               	/* frame size = 0 */
 364               	/* stack size = 0 */
 365               	.L__stack_usage = 0
 366 0000 FC01      		movw r30,r24
 244:../../../os/oslib/src/chmboxes.c **** 
 245:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 246:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 247:../../../os/oslib/src/chmboxes.c **** 
 248:../../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 249:../../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 367               		.loc 1 249 0
 368 0002 8285      		ldd r24,Z+10
 369               	.LVL27:
 370 0004 8111      		cpse r24,__zero_reg__
 371 0006 00C0      		rjmp .L19
 372               	.LVL28:
 373               	.LBB91:
 374               	.LBB92:
 375               	.LBB93:
 376               		.loc 3 140 0
 377 0008 2281      		ldd r18,Z+2
 378 000a 3381      		ldd r19,Z+3
 379 000c 4081      		ld r20,Z
 380 000e 5181      		ldd r21,Z+1
 381               	.LVL29:
 382               	.LBE93:
 383               	.LBE92:
 384               	.LBE91:
 250:../../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 251:../../../os/oslib/src/chmboxes.c ****   }
 252:../../../os/oslib/src/chmboxes.c **** 
 253:../../../os/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 254:../../../os/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 385               		.loc 1 254 0
 386 0010 C901      		movw r24,r18
 387 0012 841B      		sub r24,r20
 388 0014 950B      		sbc r25,r21
 389 0016 9595      		asr r25
 390 0018 8795      		ror r24
 391 001a A085      		ldd r26,Z+8
 392 001c B185      		ldd r27,Z+9
 393 001e 8A17      		cp r24,r26
 394 0020 9B07      		cpc r25,r27
 395 0022 01F0      		breq .L20
 255:../../../os/oslib/src/chmboxes.c ****     *mbp->wrptr++ = msg;
 396               		.loc 1 255 0
 397 0024 A481      		ldd r26,Z+4
 398 0026 B581      		ldd r27,Z+5
 399 0028 CD01      		movw r24,r26
 400 002a 0296      		adiw r24,2
 401 002c 9583      		std Z+5,r25
 402 002e 8483      		std Z+4,r24
 403 0030 6D93      		st X+,r22
 404 0032 7C93      		st X,r23
 256:../../../os/oslib/src/chmboxes.c ****     if (mbp->wrptr >= mbp->top) {
 405               		.loc 1 256 0
 406 0034 8217      		cp r24,r18
 407 0036 9307      		cpc r25,r19
 408 0038 00F0      		brlo .L18
 257:../../../os/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 409               		.loc 1 257 0
 410 003a 5583      		std Z+5,r21
 411 003c 4483      		std Z+4,r20
 412               	.L18:
 258:../../../os/oslib/src/chmboxes.c ****     }
 259:../../../os/oslib/src/chmboxes.c ****     mbp->cnt++;
 413               		.loc 1 259 0
 414 003e 8085      		ldd r24,Z+8
 415 0040 9185      		ldd r25,Z+9
 416 0042 0196      		adiw r24,1
 417 0044 9187      		std Z+9,r25
 418 0046 8087      		std Z+8,r24
 260:../../../os/oslib/src/chmboxes.c **** 
 261:../../../os/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 262:../../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 419               		.loc 1 262 0
 420 0048 60E0      		ldi r22,0
 421 004a 70E0      		ldi r23,0
 422               	.LVL30:
 423 004c CF01      		movw r24,r30
 424 004e 0C96      		adiw r24,12
 425 0050 0E94 0000 		call chThdDequeueNextI
 426               	.LVL31:
 263:../../../os/oslib/src/chmboxes.c **** 
 264:../../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 427               		.loc 1 264 0
 428 0054 80E0      		ldi r24,0
 429 0056 90E0      		ldi r25,0
 430 0058 0895      		ret
 431               	.LVL32:
 432               	.L19:
 250:../../../os/oslib/src/chmboxes.c ****   }
 433               		.loc 1 250 0
 434 005a 8EEF      		ldi r24,lo8(-2)
 435 005c 9FEF      		ldi r25,lo8(-1)
 436 005e 0895      		ret
 437               	.L20:
 265:../../../os/oslib/src/chmboxes.c ****   }
 266:../../../os/oslib/src/chmboxes.c **** 
 267:../../../os/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 268:../../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 438               		.loc 1 268 0
 439 0060 8FEF      		ldi r24,lo8(-1)
 440 0062 9FEF      		ldi r25,lo8(-1)
 269:../../../os/oslib/src/chmboxes.c **** }
 441               		.loc 1 269 0
 442 0064 0895      		ret
 443               		.cfi_endproc
 444               	.LFE103:
 446               		.section	.text.chMBPostAheadTimeoutS,"ax",@progbits
 447               	.global	chMBPostAheadTimeoutS
 449               	chMBPostAheadTimeoutS:
 450               	.LFB105:
 270:../../../os/oslib/src/chmboxes.c **** 
 271:../../../os/oslib/src/chmboxes.c **** /**
 272:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 273:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 274:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 275:../../../os/oslib/src/chmboxes.c ****  *
 276:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 277:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 278:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 279:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 280:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 281:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 282:../../../os/oslib/src/chmboxes.c ****  *                      .
 283:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 284:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 285:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 286:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 287:../../../os/oslib/src/chmboxes.c ****  *
 288:../../../os/oslib/src/chmboxes.c ****  * @api
 289:../../../os/oslib/src/chmboxes.c ****  */
 290:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 291:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 292:../../../os/oslib/src/chmboxes.c **** 
 293:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 294:../../../os/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 295:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 296:../../../os/oslib/src/chmboxes.c **** 
 297:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 298:../../../os/oslib/src/chmboxes.c **** }
 299:../../../os/oslib/src/chmboxes.c **** 
 300:../../../os/oslib/src/chmboxes.c **** /**
 301:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 302:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 303:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 304:../../../os/oslib/src/chmboxes.c ****  *
 305:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 306:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 307:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 308:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 309:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 310:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 311:../../../os/oslib/src/chmboxes.c ****  *                      .
 312:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 313:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 314:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 315:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 316:../../../os/oslib/src/chmboxes.c ****  *
 317:../../../os/oslib/src/chmboxes.c ****  * @sclass
 318:../../../os/oslib/src/chmboxes.c ****  */
 319:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 451               		.loc 1 319 0
 452               		.cfi_startproc
 453               	.LVL33:
 454 0000 CF92      		push r12
 455               	.LCFI10:
 456               		.cfi_def_cfa_offset 3
 457               		.cfi_offset 12, -2
 458 0002 DF92      		push r13
 459               	.LCFI11:
 460               		.cfi_def_cfa_offset 4
 461               		.cfi_offset 13, -3
 462 0004 EF92      		push r14
 463               	.LCFI12:
 464               		.cfi_def_cfa_offset 5
 465               		.cfi_offset 14, -4
 466 0006 FF92      		push r15
 467               	.LCFI13:
 468               		.cfi_def_cfa_offset 6
 469               		.cfi_offset 15, -5
 470 0008 0F93      		push r16
 471               	.LCFI14:
 472               		.cfi_def_cfa_offset 7
 473               		.cfi_offset 16, -6
 474 000a 1F93      		push r17
 475               	.LCFI15:
 476               		.cfi_def_cfa_offset 8
 477               		.cfi_offset 17, -7
 478 000c CF93      		push r28
 479               	.LCFI16:
 480               		.cfi_def_cfa_offset 9
 481               		.cfi_offset 28, -8
 482 000e DF93      		push r29
 483               	.LCFI17:
 484               		.cfi_def_cfa_offset 10
 485               		.cfi_offset 29, -9
 486               	/* prologue: function */
 487               	/* frame size = 0 */
 488               	/* stack size = 8 */
 489               	.L__stack_usage = 8
 490 0010 EC01      		movw r28,r24
 491 0012 6B01      		movw r12,r22
 492 0014 7A01      		movw r14,r20
 320:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 321:../../../os/oslib/src/chmboxes.c **** 
 322:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 323:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 324:../../../os/oslib/src/chmboxes.c **** 
 325:../../../os/oslib/src/chmboxes.c ****   do {
 326:../../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 327:../../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 328:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 329:../../../os/oslib/src/chmboxes.c ****     }
 330:../../../os/oslib/src/chmboxes.c **** 
 331:../../../os/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 332:../../../os/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 333:../../../os/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 334:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 335:../../../os/oslib/src/chmboxes.c ****       }
 336:../../../os/oslib/src/chmboxes.c ****       *mbp->rdptr = msg;
 337:../../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 338:../../../os/oslib/src/chmboxes.c **** 
 339:../../../os/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 340:../../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 341:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 342:../../../os/oslib/src/chmboxes.c **** 
 343:../../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 344:../../../os/oslib/src/chmboxes.c ****     }
 345:../../../os/oslib/src/chmboxes.c **** 
 346:../../../os/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 347:../../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 493               		.loc 1 347 0
 494 0016 8C01      		movw r16,r24
 495 0018 055F      		subi r16,-11
 496 001a 1F4F      		sbci r17,-1
 497 001c 00C0      		rjmp .L26
 498               	.LVL34:
 499               	.L32:
 500               	.LBB108:
 501               	.LBB109:
 502               	.LBB110:
 503               		.loc 3 140 0
 504 001e 4A81      		ldd r20,Y+2
 505 0020 5B81      		ldd r21,Y+3
 506 0022 2881      		ld r18,Y
 507 0024 3981      		ldd r19,Y+1
 508               	.LVL35:
 509               	.LBE110:
 510               	.LBE109:
 511               	.LBE108:
 332:../../../os/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 512               		.loc 1 332 0
 513 0026 CA01      		movw r24,r20
 514 0028 821B      		sub r24,r18
 515 002a 930B      		sbc r25,r19
 516 002c 9595      		asr r25
 517 002e 8795      		ror r24
 518 0030 6885      		ldd r22,Y+8
 519 0032 7985      		ldd r23,Y+9
 520 0034 8617      		cp r24,r22
 521 0036 9707      		cpc r25,r23
 522 0038 01F4      		brne .L31
 523               		.loc 1 347 0
 524 003a B701      		movw r22,r14
 525 003c C801      		movw r24,r16
 526 003e 0E94 0000 		call chThdEnqueueTimeoutS
 527               	.LVL36:
 348:../../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 528               		.loc 1 348 0
 529 0042 0097      		sbiw r24,0
 530 0044 01F4      		brne .L22
 531               	.LVL37:
 532               	.L26:
 327:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 533               		.loc 1 327 0
 534 0046 8A85      		ldd r24,Y+10
 535 0048 8823      		tst r24
 536 004a 01F0      		breq .L32
 328:../../../os/oslib/src/chmboxes.c ****     }
 537               		.loc 1 328 0
 538 004c 8EEF      		ldi r24,lo8(-2)
 539 004e 9FEF      		ldi r25,lo8(-1)
 540               	.L22:
 541               	/* epilogue start */
 349:../../../os/oslib/src/chmboxes.c **** 
 350:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 351:../../../os/oslib/src/chmboxes.c **** }
 542               		.loc 1 351 0
 543 0050 DF91      		pop r29
 544 0052 CF91      		pop r28
 545               	.LVL38:
 546 0054 1F91      		pop r17
 547 0056 0F91      		pop r16
 548               	.LVL39:
 549 0058 FF90      		pop r15
 550 005a EF90      		pop r14
 551               	.LVL40:
 552 005c DF90      		pop r13
 553 005e CF90      		pop r12
 554               	.LVL41:
 555 0060 0895      		ret
 556               	.LVL42:
 557               	.L31:
 333:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 558               		.loc 1 333 0
 559 0062 EE81      		ldd r30,Y+6
 560 0064 FF81      		ldd r31,Y+7
 561 0066 3297      		sbiw r30,2
 562 0068 E217      		cp r30,r18
 563 006a F307      		cpc r31,r19
 564 006c 00F4      		brsh .L30
 334:../../../os/oslib/src/chmboxes.c ****       }
 565               		.loc 1 334 0
 566 006e FA01      		movw r30,r20
 567 0070 3297      		sbiw r30,2
 568               	.L30:
 569 0072 FF83      		std Y+7,r31
 570 0074 EE83      		std Y+6,r30
 571               	.LVL43:
 572               	.LBB111:
 573               	.LBB112:
 336:../../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 574               		.loc 1 336 0
 575 0076 D182      		std Z+1,r13
 576 0078 C082      		st Z,r12
 337:../../../os/oslib/src/chmboxes.c **** 
 577               		.loc 1 337 0
 578 007a 8885      		ldd r24,Y+8
 579 007c 9985      		ldd r25,Y+9
 580 007e 0196      		adiw r24,1
 581 0080 9987      		std Y+9,r25
 582 0082 8887      		std Y+8,r24
 340:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 583               		.loc 1 340 0
 584 0084 60E0      		ldi r22,0
 585 0086 70E0      		ldi r23,0
 586 0088 CE01      		movw r24,r28
 587 008a 0C96      		adiw r24,12
 588 008c 0E94 0000 		call chThdDequeueNextI
 589               	.LVL44:
 341:../../../os/oslib/src/chmboxes.c **** 
 590               		.loc 1 341 0
 591 0090 0E94 0000 		call chSchRescheduleS
 592               	.LVL45:
 593 0094 80E0      		ldi r24,0
 594 0096 90E0      		ldi r25,0
 595 0098 00C0      		rjmp .L22
 596               	.LBE112:
 597               	.LBE111:
 598               		.cfi_endproc
 599               	.LFE105:
 601               		.section	.text.chMBPostAheadTimeout,"ax",@progbits
 602               	.global	chMBPostAheadTimeout
 604               	chMBPostAheadTimeout:
 605               	.LFB104:
 290:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 606               		.loc 1 290 0
 607               		.cfi_startproc
 608               	.LVL46:
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 0 */
 612               	.L__stack_usage = 0
 613               	.LBB113:
 614               	.LBB114:
 430:../../../os/common/ports/AVR/chcore.h **** }
 615               		.loc 2 430 0
 616               	/* #APP */
 617               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 618 0000 F894      		cli
 619               	 ;  0 "" 2
 620               	/* #NOAPP */
 621               	.LBE114:
 622               	.LBE113:
 294:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 623               		.loc 1 294 0
 624 0002 0E94 0000 		call chMBPostAheadTimeoutS
 625               	.LVL47:
 626               	.LBB115:
 627               	.LBB116:
 628               		.loc 2 440 0
 629               	/* #APP */
 630               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 631 0006 7894      		sei
 632               	 ;  0 "" 2
 633               	/* #NOAPP */
 634               	.LBE116:
 635               	.LBE115:
 298:../../../os/oslib/src/chmboxes.c **** 
 636               		.loc 1 298 0
 637 0008 0895      		ret
 638               		.cfi_endproc
 639               	.LFE104:
 641               		.section	.text.chMBPostAheadI,"ax",@progbits
 642               	.global	chMBPostAheadI
 644               	chMBPostAheadI:
 645               	.LFB106:
 352:../../../os/oslib/src/chmboxes.c **** 
 353:../../../os/oslib/src/chmboxes.c **** /**
 354:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 355:../../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 356:../../../os/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 357:../../../os/oslib/src/chmboxes.c ****  *
 358:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 359:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 360:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 361:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 362:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 363:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 364:../../../os/oslib/src/chmboxes.c ****  *                      posted.
 365:../../../os/oslib/src/chmboxes.c ****  *
 366:../../../os/oslib/src/chmboxes.c ****  * @iclass
 367:../../../os/oslib/src/chmboxes.c ****  */
 368:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 646               		.loc 1 368 0
 647               		.cfi_startproc
 648               	.LVL48:
 649               	/* prologue: function */
 650               	/* frame size = 0 */
 651               	/* stack size = 0 */
 652               	.L__stack_usage = 0
 653 0000 FC01      		movw r30,r24
 369:../../../os/oslib/src/chmboxes.c **** 
 370:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 371:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 372:../../../os/oslib/src/chmboxes.c **** 
 373:../../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 374:../../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 654               		.loc 1 374 0
 655 0002 8285      		ldd r24,Z+10
 656               	.LVL49:
 657 0004 8111      		cpse r24,__zero_reg__
 658 0006 00C0      		rjmp .L38
 659               	.LVL50:
 660               	.LBB117:
 661               	.LBB118:
 662               	.LBB119:
 663               		.loc 3 140 0
 664 0008 4281      		ldd r20,Z+2
 665 000a 5381      		ldd r21,Z+3
 666 000c 2081      		ld r18,Z
 667 000e 3181      		ldd r19,Z+1
 668               	.LVL51:
 669               	.LBE119:
 670               	.LBE118:
 671               	.LBE117:
 375:../../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 376:../../../os/oslib/src/chmboxes.c ****   }
 377:../../../os/oslib/src/chmboxes.c **** 
 378:../../../os/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 379:../../../os/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 672               		.loc 1 379 0
 673 0010 CA01      		movw r24,r20
 674 0012 821B      		sub r24,r18
 675 0014 930B      		sbc r25,r19
 676 0016 9595      		asr r25
 677 0018 8795      		ror r24
 678 001a A085      		ldd r26,Z+8
 679 001c B185      		ldd r27,Z+9
 680 001e 8A17      		cp r24,r26
 681 0020 9B07      		cpc r25,r27
 682 0022 01F0      		breq .L39
 380:../../../os/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 683               		.loc 1 380 0
 684 0024 A681      		ldd r26,Z+6
 685 0026 B781      		ldd r27,Z+7
 686 0028 1297      		sbiw r26,2
 687 002a A217      		cp r26,r18
 688 002c B307      		cpc r27,r19
 689 002e 00F4      		brsh .L40
 381:../../../os/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->top - 1;
 690               		.loc 1 381 0
 691 0030 DA01      		movw r26,r20
 692 0032 1297      		sbiw r26,2
 693               	.L40:
 694 0034 B783      		std Z+7,r27
 695 0036 A683      		std Z+6,r26
 382:../../../os/oslib/src/chmboxes.c ****     }
 383:../../../os/oslib/src/chmboxes.c ****     *mbp->rdptr = msg;
 696               		.loc 1 383 0
 697 0038 6D93      		st X+,r22
 698 003a 7C93      		st X,r23
 384:../../../os/oslib/src/chmboxes.c ****     mbp->cnt++;
 699               		.loc 1 384 0
 700 003c 8085      		ldd r24,Z+8
 701 003e 9185      		ldd r25,Z+9
 702 0040 0196      		adiw r24,1
 703 0042 9187      		std Z+9,r25
 704 0044 8087      		std Z+8,r24
 385:../../../os/oslib/src/chmboxes.c **** 
 386:../../../os/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 387:../../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 705               		.loc 1 387 0
 706 0046 60E0      		ldi r22,0
 707 0048 70E0      		ldi r23,0
 708               	.LVL52:
 709 004a CF01      		movw r24,r30
 710 004c 0C96      		adiw r24,12
 711 004e 0E94 0000 		call chThdDequeueNextI
 712               	.LVL53:
 388:../../../os/oslib/src/chmboxes.c **** 
 389:../../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 713               		.loc 1 389 0
 714 0052 80E0      		ldi r24,0
 715 0054 90E0      		ldi r25,0
 716 0056 0895      		ret
 717               	.LVL54:
 718               	.L38:
 375:../../../os/oslib/src/chmboxes.c ****   }
 719               		.loc 1 375 0
 720 0058 8EEF      		ldi r24,lo8(-2)
 721 005a 9FEF      		ldi r25,lo8(-1)
 722 005c 0895      		ret
 723               	.L39:
 390:../../../os/oslib/src/chmboxes.c ****   }
 391:../../../os/oslib/src/chmboxes.c **** 
 392:../../../os/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 393:../../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 724               		.loc 1 393 0
 725 005e 8FEF      		ldi r24,lo8(-1)
 726 0060 9FEF      		ldi r25,lo8(-1)
 394:../../../os/oslib/src/chmboxes.c **** }
 727               		.loc 1 394 0
 728 0062 0895      		ret
 729               		.cfi_endproc
 730               	.LFE106:
 732               		.section	.text.chMBFetchTimeoutS,"ax",@progbits
 733               	.global	chMBFetchTimeoutS
 735               	chMBFetchTimeoutS:
 736               	.LFB108:
 395:../../../os/oslib/src/chmboxes.c **** 
 396:../../../os/oslib/src/chmboxes.c **** /**
 397:../../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 398:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 399:../../../os/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 400:../../../os/oslib/src/chmboxes.c ****  *
 401:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 402:../../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 403:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 404:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 405:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 406:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 407:../../../os/oslib/src/chmboxes.c ****  *                      .
 408:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 409:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 410:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 411:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 412:../../../os/oslib/src/chmboxes.c ****  *
 413:../../../os/oslib/src/chmboxes.c ****  * @api
 414:../../../os/oslib/src/chmboxes.c ****  */
 415:../../../os/oslib/src/chmboxes.c **** msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 416:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 417:../../../os/oslib/src/chmboxes.c **** 
 418:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 419:../../../os/oslib/src/chmboxes.c ****   rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 420:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 421:../../../os/oslib/src/chmboxes.c **** 
 422:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 423:../../../os/oslib/src/chmboxes.c **** }
 424:../../../os/oslib/src/chmboxes.c **** 
 425:../../../os/oslib/src/chmboxes.c **** /**
 426:../../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 427:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 428:../../../os/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 429:../../../os/oslib/src/chmboxes.c ****  *
 430:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 431:../../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 432:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 433:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 434:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 435:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 436:../../../os/oslib/src/chmboxes.c ****  *                      .
 437:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 438:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 439:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 440:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 441:../../../os/oslib/src/chmboxes.c ****  *
 442:../../../os/oslib/src/chmboxes.c ****  * @sclass
 443:../../../os/oslib/src/chmboxes.c ****  */
 444:../../../os/oslib/src/chmboxes.c **** msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 737               		.loc 1 444 0
 738               		.cfi_startproc
 739               	.LVL55:
 740 0000 CF92      		push r12
 741               	.LCFI18:
 742               		.cfi_def_cfa_offset 3
 743               		.cfi_offset 12, -2
 744 0002 DF92      		push r13
 745               	.LCFI19:
 746               		.cfi_def_cfa_offset 4
 747               		.cfi_offset 13, -3
 748 0004 EF92      		push r14
 749               	.LCFI20:
 750               		.cfi_def_cfa_offset 5
 751               		.cfi_offset 14, -4
 752 0006 FF92      		push r15
 753               	.LCFI21:
 754               		.cfi_def_cfa_offset 6
 755               		.cfi_offset 15, -5
 756 0008 0F93      		push r16
 757               	.LCFI22:
 758               		.cfi_def_cfa_offset 7
 759               		.cfi_offset 16, -6
 760 000a 1F93      		push r17
 761               	.LCFI23:
 762               		.cfi_def_cfa_offset 8
 763               		.cfi_offset 17, -7
 764 000c CF93      		push r28
 765               	.LCFI24:
 766               		.cfi_def_cfa_offset 9
 767               		.cfi_offset 28, -8
 768 000e DF93      		push r29
 769               	.LCFI25:
 770               		.cfi_def_cfa_offset 10
 771               		.cfi_offset 29, -9
 772               	/* prologue: function */
 773               	/* frame size = 0 */
 774               	/* stack size = 8 */
 775               	.L__stack_usage = 8
 776 0010 EC01      		movw r28,r24
 777 0012 6B01      		movw r12,r22
 778 0014 7A01      		movw r14,r20
 445:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 446:../../../os/oslib/src/chmboxes.c **** 
 447:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 448:../../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 449:../../../os/oslib/src/chmboxes.c **** 
 450:../../../os/oslib/src/chmboxes.c ****   do {
 451:../../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 452:../../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 453:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 454:../../../os/oslib/src/chmboxes.c ****     }
 455:../../../os/oslib/src/chmboxes.c **** 
 456:../../../os/oslib/src/chmboxes.c ****     /* Is there a message in queue? if so then fetch.*/
 457:../../../os/oslib/src/chmboxes.c ****     if (chMBGetUsedCountI(mbp) > (size_t)0) {
 458:../../../os/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 459:../../../os/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 460:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 461:../../../os/oslib/src/chmboxes.c ****       }
 462:../../../os/oslib/src/chmboxes.c ****       mbp->cnt--;
 463:../../../os/oslib/src/chmboxes.c **** 
 464:../../../os/oslib/src/chmboxes.c ****       /* If there is a writer waiting then makes it ready.*/
 465:../../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qw, MSG_OK);
 466:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 467:../../../os/oslib/src/chmboxes.c **** 
 468:../../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 469:../../../os/oslib/src/chmboxes.c ****     }
 470:../../../os/oslib/src/chmboxes.c **** 
 471:../../../os/oslib/src/chmboxes.c ****     /* No message in the queue, waiting for a message to become available.*/
 472:../../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 779               		.loc 1 472 0
 780 0016 8C01      		movw r16,r24
 781 0018 045F      		subi r16,-12
 782 001a 1F4F      		sbci r17,-1
 783 001c 00C0      		rjmp .L45
 784               	.LVL56:
 785               	.L50:
 457:../../../os/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 786               		.loc 1 457 0
 787 001e 8885      		ldd r24,Y+8
 788 0020 9985      		ldd r25,Y+9
 789 0022 892B      		or r24,r25
 790 0024 01F4      		brne .L49
 791               		.loc 1 472 0
 792 0026 B701      		movw r22,r14
 793 0028 C801      		movw r24,r16
 794 002a 0E94 0000 		call chThdEnqueueTimeoutS
 795               	.LVL57:
 473:../../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 796               		.loc 1 473 0
 797 002e 0097      		sbiw r24,0
 798 0030 01F4      		brne .L42
 799               	.LVL58:
 800               	.L45:
 452:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 801               		.loc 1 452 0
 802 0032 8A85      		ldd r24,Y+10
 803 0034 8823      		tst r24
 804 0036 01F0      		breq .L50
 453:../../../os/oslib/src/chmboxes.c ****     }
 805               		.loc 1 453 0
 806 0038 8EEF      		ldi r24,lo8(-2)
 807 003a 9FEF      		ldi r25,lo8(-1)
 808               	.L42:
 809               	/* epilogue start */
 474:../../../os/oslib/src/chmboxes.c **** 
 475:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 476:../../../os/oslib/src/chmboxes.c **** }
 810               		.loc 1 476 0
 811 003c DF91      		pop r29
 812 003e CF91      		pop r28
 813               	.LVL59:
 814 0040 1F91      		pop r17
 815 0042 0F91      		pop r16
 816               	.LVL60:
 817 0044 FF90      		pop r15
 818 0046 EF90      		pop r14
 819               	.LVL61:
 820 0048 DF90      		pop r13
 821 004a CF90      		pop r12
 822               	.LVL62:
 823 004c 0895      		ret
 824               	.LVL63:
 825               	.L49:
 826               	.LBB126:
 827               	.LBB127:
 458:../../../os/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 828               		.loc 1 458 0
 829 004e EE81      		ldd r30,Y+6
 830 0050 FF81      		ldd r31,Y+7
 831 0052 CF01      		movw r24,r30
 832 0054 0296      		adiw r24,2
 833 0056 9F83      		std Y+7,r25
 834 0058 8E83      		std Y+6,r24
 835 005a 2081      		ld r18,Z
 836 005c 3181      		ldd r19,Z+1
 837 005e F601      		movw r30,r12
 838 0060 3183      		std Z+1,r19
 839 0062 2083      		st Z,r18
 459:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 840               		.loc 1 459 0
 841 0064 2A81      		ldd r18,Y+2
 842 0066 3B81      		ldd r19,Y+3
 843 0068 8217      		cp r24,r18
 844 006a 9307      		cpc r25,r19
 845 006c 00F0      		brlo .L44
 460:../../../os/oslib/src/chmboxes.c ****       }
 846               		.loc 1 460 0
 847 006e 8881      		ld r24,Y
 848 0070 9981      		ldd r25,Y+1
 849 0072 9F83      		std Y+7,r25
 850 0074 8E83      		std Y+6,r24
 851               	.L44:
 462:../../../os/oslib/src/chmboxes.c **** 
 852               		.loc 1 462 0
 853 0076 8885      		ldd r24,Y+8
 854 0078 9985      		ldd r25,Y+9
 855 007a 0197      		sbiw r24,1
 856 007c 9987      		std Y+9,r25
 857 007e 8887      		std Y+8,r24
 465:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 858               		.loc 1 465 0
 859 0080 60E0      		ldi r22,0
 860 0082 70E0      		ldi r23,0
 861 0084 CE01      		movw r24,r28
 862 0086 0B96      		adiw r24,11
 863 0088 0E94 0000 		call chThdDequeueNextI
 864               	.LVL64:
 466:../../../os/oslib/src/chmboxes.c **** 
 865               		.loc 1 466 0
 866 008c 0E94 0000 		call chSchRescheduleS
 867               	.LVL65:
 868 0090 80E0      		ldi r24,0
 869 0092 90E0      		ldi r25,0
 870 0094 00C0      		rjmp .L42
 871               	.LBE127:
 872               	.LBE126:
 873               		.cfi_endproc
 874               	.LFE108:
 876               		.section	.text.chMBFetchTimeout,"ax",@progbits
 877               	.global	chMBFetchTimeout
 879               	chMBFetchTimeout:
 880               	.LFB107:
 415:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 881               		.loc 1 415 0
 882               		.cfi_startproc
 883               	.LVL66:
 884               	/* prologue: function */
 885               	/* frame size = 0 */
 886               	/* stack size = 0 */
 887               	.L__stack_usage = 0
 888               	.LBB128:
 889               	.LBB129:
 430:../../../os/common/ports/AVR/chcore.h **** }
 890               		.loc 2 430 0
 891               	/* #APP */
 892               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 893 0000 F894      		cli
 894               	 ;  0 "" 2
 895               	/* #NOAPP */
 896               	.LBE129:
 897               	.LBE128:
 419:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 898               		.loc 1 419 0
 899 0002 0E94 0000 		call chMBFetchTimeoutS
 900               	.LVL67:
 901               	.LBB130:
 902               	.LBB131:
 903               		.loc 2 440 0
 904               	/* #APP */
 905               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 906 0006 7894      		sei
 907               	 ;  0 "" 2
 908               	/* #NOAPP */
 909               	.LBE131:
 910               	.LBE130:
 423:../../../os/oslib/src/chmboxes.c **** 
 911               		.loc 1 423 0
 912 0008 0895      		ret
 913               		.cfi_endproc
 914               	.LFE107:
 916               		.section	.text.chMBFetchI,"ax",@progbits
 917               	.global	chMBFetchI
 919               	chMBFetchI:
 920               	.LFB109:
 477:../../../os/oslib/src/chmboxes.c **** 
 478:../../../os/oslib/src/chmboxes.c **** /**
 479:../../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 480:../../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 481:../../../os/oslib/src/chmboxes.c ****  *          condition if the queue is empty.
 482:../../../os/oslib/src/chmboxes.c ****  *
 483:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 484:../../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 485:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 486:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 487:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 488:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 489:../../../os/oslib/src/chmboxes.c ****  *                      fetched.
 490:../../../os/oslib/src/chmboxes.c ****  *
 491:../../../os/oslib/src/chmboxes.c ****  * @iclass
 492:../../../os/oslib/src/chmboxes.c ****  */
 493:../../../os/oslib/src/chmboxes.c **** msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 921               		.loc 1 493 0
 922               		.cfi_startproc
 923               	.LVL68:
 924               	/* prologue: function */
 925               	/* frame size = 0 */
 926               	/* stack size = 0 */
 927               	.L__stack_usage = 0
 928 0000 FC01      		movw r30,r24
 494:../../../os/oslib/src/chmboxes.c **** 
 495:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 496:../../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 497:../../../os/oslib/src/chmboxes.c **** 
 498:../../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 499:../../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 929               		.loc 1 499 0
 930 0002 8285      		ldd r24,Z+10
 931               	.LVL69:
 932 0004 8111      		cpse r24,__zero_reg__
 933 0006 00C0      		rjmp .L55
 500:../../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 501:../../../os/oslib/src/chmboxes.c ****   }
 502:../../../os/oslib/src/chmboxes.c **** 
 503:../../../os/oslib/src/chmboxes.c ****   /* Is there a message in queue? if so then fetch.*/
 504:../../../os/oslib/src/chmboxes.c ****   if (chMBGetUsedCountI(mbp) > (size_t)0) {
 934               		.loc 1 504 0
 935 0008 8085      		ldd r24,Z+8
 936 000a 9185      		ldd r25,Z+9
 937 000c 892B      		or r24,r25
 938 000e 01F0      		breq .L56
 505:../../../os/oslib/src/chmboxes.c ****     *msgp = *mbp->rdptr++;
 939               		.loc 1 505 0
 940 0010 A681      		ldd r26,Z+6
 941 0012 B781      		ldd r27,Z+7
 942 0014 CD01      		movw r24,r26
 943 0016 0296      		adiw r24,2
 944 0018 9783      		std Z+7,r25
 945 001a 8683      		std Z+6,r24
 946 001c 2D91      		ld r18,X+
 947 001e 3C91      		ld r19,X
 948 0020 DB01      		movw r26,r22
 949 0022 2D93      		st X+,r18
 950 0024 3C93      		st X,r19
 506:../../../os/oslib/src/chmboxes.c ****     if (mbp->rdptr >= mbp->top) {
 951               		.loc 1 506 0
 952 0026 2281      		ldd r18,Z+2
 953 0028 3381      		ldd r19,Z+3
 954 002a 8217      		cp r24,r18
 955 002c 9307      		cpc r25,r19
 956 002e 00F0      		brlo .L54
 507:../../../os/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->buffer;
 957               		.loc 1 507 0
 958 0030 8081      		ld r24,Z
 959 0032 9181      		ldd r25,Z+1
 960 0034 9783      		std Z+7,r25
 961 0036 8683      		std Z+6,r24
 962               	.L54:
 508:../../../os/oslib/src/chmboxes.c ****     }
 509:../../../os/oslib/src/chmboxes.c ****     mbp->cnt--;
 963               		.loc 1 509 0
 964 0038 8085      		ldd r24,Z+8
 965 003a 9185      		ldd r25,Z+9
 966 003c 0197      		sbiw r24,1
 967 003e 9187      		std Z+9,r25
 968 0040 8087      		std Z+8,r24
 510:../../../os/oslib/src/chmboxes.c **** 
 511:../../../os/oslib/src/chmboxes.c ****     /* If there is a writer waiting then makes it ready.*/
 512:../../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qw, MSG_OK);
 969               		.loc 1 512 0
 970 0042 60E0      		ldi r22,0
 971 0044 70E0      		ldi r23,0
 972               	.LVL70:
 973 0046 CF01      		movw r24,r30
 974 0048 0B96      		adiw r24,11
 975 004a 0E94 0000 		call chThdDequeueNextI
 976               	.LVL71:
 513:../../../os/oslib/src/chmboxes.c **** 
 514:../../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 977               		.loc 1 514 0
 978 004e 80E0      		ldi r24,0
 979 0050 90E0      		ldi r25,0
 980 0052 0895      		ret
 981               	.LVL72:
 982               	.L55:
 500:../../../os/oslib/src/chmboxes.c ****   }
 983               		.loc 1 500 0
 984 0054 8EEF      		ldi r24,lo8(-2)
 985 0056 9FEF      		ldi r25,lo8(-1)
 986 0058 0895      		ret
 987               	.L56:
 515:../../../os/oslib/src/chmboxes.c ****   }
 516:../../../os/oslib/src/chmboxes.c **** 
 517:../../../os/oslib/src/chmboxes.c ****   /* No message, immediate timeout.*/
 518:../../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 988               		.loc 1 518 0
 989 005a 8FEF      		ldi r24,lo8(-1)
 990 005c 9FEF      		ldi r25,lo8(-1)
 519:../../../os/oslib/src/chmboxes.c **** }
 991               		.loc 1 519 0
 992 005e 0895      		ret
 993               		.cfi_endproc
 994               	.LFE109:
 996               		.text
 997               	.Letext0:
 998               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 999               		.file 5 "/usr/lib/avr/include/stdint.h"
 1000               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1001               		.file 7 "../../../os/nil/include/ch.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmboxes.c
     /tmp/ccjconlT.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccjconlT.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccjconlT.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccjconlT.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccjconlT.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccjconlT.s:13     .text.chMBObjectInit:0000000000000000 chMBObjectInit
     /tmp/ccjconlT.s:58     .text.chMBResetI:0000000000000000 chMBResetI
     /tmp/ccjconlT.s:117    .text.chMBReset:0000000000000000 chMBReset
     /tmp/ccjconlT.s:160    .text.chMBPostTimeoutS:0000000000000000 chMBPostTimeoutS
     /tmp/ccjconlT.s:317    .text.chMBPostTimeout:0000000000000000 chMBPostTimeout
     /tmp/ccjconlT.s:357    .text.chMBPostI:0000000000000000 chMBPostI
     /tmp/ccjconlT.s:449    .text.chMBPostAheadTimeoutS:0000000000000000 chMBPostAheadTimeoutS
     /tmp/ccjconlT.s:604    .text.chMBPostAheadTimeout:0000000000000000 chMBPostAheadTimeout
     /tmp/ccjconlT.s:644    .text.chMBPostAheadI:0000000000000000 chMBPostAheadI
     /tmp/ccjconlT.s:735    .text.chMBFetchTimeoutS:0000000000000000 chMBFetchTimeoutS
     /tmp/ccjconlT.s:879    .text.chMBFetchTimeout:0000000000000000 chMBFetchTimeout
     /tmp/ccjconlT.s:919    .text.chMBFetchI:0000000000000000 chMBFetchI

UNDEFINED SYMBOLS
chThdDequeueAllI
chSchRescheduleS
chThdEnqueueTimeoutS
chThdDequeueNextI
