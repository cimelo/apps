   1               		.file	"ch.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.nil_find_thread,"ax",@progbits
  11               	.global	nil_find_thread
  13               	nil_find_thread:
  14               	.LFB98:
  15               		.file 1 "../../../os/nil/src/ch.c"
   1:../../../os/nil/src/ch.c **** /*
   2:../../../os/nil/src/ch.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/nil/src/ch.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/nil/src/ch.c **** 
   5:../../../os/nil/src/ch.c ****     This file is part of ChibiOS.
   6:../../../os/nil/src/ch.c **** 
   7:../../../os/nil/src/ch.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/nil/src/ch.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/nil/src/ch.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/nil/src/ch.c **** 
  11:../../../os/nil/src/ch.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/nil/src/ch.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/nil/src/ch.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/nil/src/ch.c ****     GNU General Public License for more details.
  15:../../../os/nil/src/ch.c **** 
  16:../../../os/nil/src/ch.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/nil/src/ch.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/nil/src/ch.c **** */
  19:../../../os/nil/src/ch.c **** 
  20:../../../os/nil/src/ch.c **** /**
  21:../../../os/nil/src/ch.c ****  * @file    nil/src/ch.c
  22:../../../os/nil/src/ch.c ****  * @brief   Nil RTOS main source file.
  23:../../../os/nil/src/ch.c ****  *
  24:../../../os/nil/src/ch.c ****  * @addtogroup NIL_KERNEL
  25:../../../os/nil/src/ch.c ****  * @{
  26:../../../os/nil/src/ch.c ****  */
  27:../../../os/nil/src/ch.c **** 
  28:../../../os/nil/src/ch.c **** #include "ch.h"
  29:../../../os/nil/src/ch.c **** 
  30:../../../os/nil/src/ch.c **** /*===========================================================================*/
  31:../../../os/nil/src/ch.c **** /* Module local definitions.                                                 */
  32:../../../os/nil/src/ch.c **** /*===========================================================================*/
  33:../../../os/nil/src/ch.c **** 
  34:../../../os/nil/src/ch.c **** /*===========================================================================*/
  35:../../../os/nil/src/ch.c **** /* Module exported variables.                                                */
  36:../../../os/nil/src/ch.c **** /*===========================================================================*/
  37:../../../os/nil/src/ch.c **** 
  38:../../../os/nil/src/ch.c **** /**
  39:../../../os/nil/src/ch.c ****  * @brief   System data structures.
  40:../../../os/nil/src/ch.c ****  */
  41:../../../os/nil/src/ch.c **** os_instance_t nil;
  42:../../../os/nil/src/ch.c **** 
  43:../../../os/nil/src/ch.c **** /*===========================================================================*/
  44:../../../os/nil/src/ch.c **** /* Module local variables.                                                   */
  45:../../../os/nil/src/ch.c **** /*===========================================================================*/
  46:../../../os/nil/src/ch.c **** 
  47:../../../os/nil/src/ch.c **** /*===========================================================================*/
  48:../../../os/nil/src/ch.c **** /* Module local functions.                                                   */
  49:../../../os/nil/src/ch.c **** /*===========================================================================*/
  50:../../../os/nil/src/ch.c **** 
  51:../../../os/nil/src/ch.c **** /*===========================================================================*/
  52:../../../os/nil/src/ch.c **** /* Module interrupt handlers.                                                */
  53:../../../os/nil/src/ch.c **** /*===========================================================================*/
  54:../../../os/nil/src/ch.c **** 
  55:../../../os/nil/src/ch.c **** /*===========================================================================*/
  56:../../../os/nil/src/ch.c **** /* Module exported functions.                                                */
  57:../../../os/nil/src/ch.c **** /*===========================================================================*/
  58:../../../os/nil/src/ch.c **** 
  59:../../../os/nil/src/ch.c **** /**
  60:../../../os/nil/src/ch.c ****  * @brief   Retrieves the highest priority thread in the specified state and
  61:../../../os/nil/src/ch.c ****  *          associated to the specified object.
  62:../../../os/nil/src/ch.c ****  *
  63:../../../os/nil/src/ch.c ****  * @param[in] state     thread state
  64:../../../os/nil/src/ch.c ****  * @param[in] p         object pointer
  65:../../../os/nil/src/ch.c ****  * @return              The pointer to the found thread.
  66:../../../os/nil/src/ch.c ****  * @retval NULL         if the thread is not found.
  67:../../../os/nil/src/ch.c ****  *
  68:../../../os/nil/src/ch.c ****  * @notapi
  69:../../../os/nil/src/ch.c ****  */
  70:../../../os/nil/src/ch.c **** thread_t *nil_find_thread(tstate_t state, void *p) {
  16               		.loc 1 70 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  71:../../../os/nil/src/ch.c ****   thread_t *tp = nil.threads;
  23               		.loc 1 71 0
  24 0000 E0E0      		ldi r30,lo8(nil+8)
  25 0002 F0E0      		ldi r31,hi8(nil+8)
  26               	.LVL1:
  27               	.L4:
  72:../../../os/nil/src/ch.c **** 
  73:../../../os/nil/src/ch.c ****   while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
  74:../../../os/nil/src/ch.c ****     /* Is this thread matching?*/
  75:../../../os/nil/src/ch.c ****     if ((tp->state == state) && (tp->u1.p == p)) {
  28               		.loc 1 75 0
  29 0004 9281      		ldd r25,Z+2
  30 0006 9817      		cp r25,r24
  31 0008 01F0      		breq .L8
  32               	.L2:
  76:../../../os/nil/src/ch.c ****       return tp;
  77:../../../os/nil/src/ch.c ****     }
  78:../../../os/nil/src/ch.c ****     tp++;
  33               		.loc 1 78 0
  34 000a 3A96      		adiw r30,10
  35               	.LVL2:
  73:../../../os/nil/src/ch.c ****     /* Is this thread matching?*/
  36               		.loc 1 73 0
  37 000c 90E0      		ldi r25,hi8(nil+48)
  38 000e E030      		cpi r30,lo8(nil+48)
  39 0010 F907      		cpc r31,r25
  40 0012 01F4      		brne .L4
  79:../../../os/nil/src/ch.c ****   }
  80:../../../os/nil/src/ch.c ****   return NULL;
  41               		.loc 1 80 0
  42 0014 80E0      		ldi r24,0
  43               	.LVL3:
  44 0016 90E0      		ldi r25,0
  45 0018 0895      		ret
  46               	.LVL4:
  47               	.L8:
  75:../../../os/nil/src/ch.c ****       return tp;
  48               		.loc 1 75 0 discriminator 1
  49 001a 2381      		ldd r18,Z+3
  50 001c 3481      		ldd r19,Z+4
  51 001e 2617      		cp r18,r22
  52 0020 3707      		cpc r19,r23
  53 0022 01F4      		brne .L2
  54 0024 CF01      		movw r24,r30
  55               	.LVL5:
  81:../../../os/nil/src/ch.c **** }
  56               		.loc 1 81 0
  57 0026 0895      		ret
  58               		.cfi_endproc
  59               	.LFE98:
  61               		.section	.text.nil_ready_all,"ax",@progbits
  62               	.global	nil_ready_all
  64               	nil_ready_all:
  65               	.LFB99:
  82:../../../os/nil/src/ch.c **** 
  83:../../../os/nil/src/ch.c **** /**
  84:../../../os/nil/src/ch.c ****  * @brief   Puts in ready state all thread matching the specified status and
  85:../../../os/nil/src/ch.c ****  *          associated object.
  86:../../../os/nil/src/ch.c ****  *
  87:../../../os/nil/src/ch.c ****  * @param[in] p         object pointer
  88:../../../os/nil/src/ch.c ****  * @param[in] cnt       number of threads to be readied as a negative number,
  89:../../../os/nil/src/ch.c ****  *                      non negative numbers are ignored
  90:../../../os/nil/src/ch.c ****  * @param[in] msg       the wakeup message
  91:../../../os/nil/src/ch.c ****  * @return              The number of readied threads.
  92:../../../os/nil/src/ch.c ****  *
  93:../../../os/nil/src/ch.c ****  * @notapi
  94:../../../os/nil/src/ch.c ****  */
  95:../../../os/nil/src/ch.c **** cnt_t nil_ready_all(void *p, cnt_t cnt, msg_t msg) {
  66               		.loc 1 95 0
  67               		.cfi_startproc
  68               	.LVL6:
  69 0000 CF93      		push r28
  70               	.LCFI0:
  71               		.cfi_def_cfa_offset 3
  72               		.cfi_offset 28, -2
  73 0002 DF93      		push r29
  74               	.LCFI1:
  75               		.cfi_def_cfa_offset 4
  76               		.cfi_offset 29, -3
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 2 */
  80               	.L__stack_usage = 2
  81 0004 DC01      		movw r26,r24
  82               	.LVL7:
  96:../../../os/nil/src/ch.c ****   thread_t *tp = nil.threads;;
  97:../../../os/nil/src/ch.c **** 
  98:../../../os/nil/src/ch.c ****   while (cnt < (cnt_t)0) {
  83               		.loc 1 98 0
  84 0006 67FF      		sbrs r22,7
  85 0008 00C0      		rjmp .L15
  86 000a C091 0000 		lds r28,nil+2
  87 000e D091 0000 		lds r29,nil+2+1
  88 0012 E0E0      		ldi r30,lo8(nil+8)
  89 0014 F0E0      		ldi r31,hi8(nil+8)
  90               	.LVL8:
  91               	.LBB125:
  92               	.LBB126:
  99:../../../os/nil/src/ch.c **** 
 100:../../../os/nil/src/ch.c ****     chDbgAssert(tp < &nil.threads[CH_CFG_MAX_THREADS],
 101:../../../os/nil/src/ch.c ****                 "pointer out of range");
 102:../../../os/nil/src/ch.c **** 
 103:../../../os/nil/src/ch.c ****     /* Is this thread waiting on this queue?*/
 104:../../../os/nil/src/ch.c ****     if ((tp->state == NIL_STATE_WTQUEUE) && (tp->u1.p == p)) {
 105:../../../os/nil/src/ch.c ****       cnt++;
 106:../../../os/nil/src/ch.c ****       (void) chSchReadyI(tp, msg);
 107:../../../os/nil/src/ch.c ****     }
 108:../../../os/nil/src/ch.c ****     tp++;
 109:../../../os/nil/src/ch.c ****   }
 110:../../../os/nil/src/ch.c **** 
 111:../../../os/nil/src/ch.c ****   return cnt;
 112:../../../os/nil/src/ch.c **** }
 113:../../../os/nil/src/ch.c **** 
 114:../../../os/nil/src/ch.c **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 115:../../../os/nil/src/ch.c **** /**
 116:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysDisable().
 117:../../../os/nil/src/ch.c ****  *
 118:../../../os/nil/src/ch.c ****  * @notapi
 119:../../../os/nil/src/ch.c ****  */
 120:../../../os/nil/src/ch.c **** void __dbg_check_disable(void) {
 121:../../../os/nil/src/ch.c **** 
 122:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt != (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 123:../../../os/nil/src/ch.c ****     chSysHalt("SV#1");
 124:../../../os/nil/src/ch.c ****   }
 125:../../../os/nil/src/ch.c **** }
 126:../../../os/nil/src/ch.c **** 
 127:../../../os/nil/src/ch.c **** /**
 128:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysSuspend().
 129:../../../os/nil/src/ch.c ****  *
 130:../../../os/nil/src/ch.c ****  * @notapi
 131:../../../os/nil/src/ch.c ****  */
 132:../../../os/nil/src/ch.c **** void __dbg_check_suspend(void) {
 133:../../../os/nil/src/ch.c **** 
 134:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt != (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 135:../../../os/nil/src/ch.c ****     chSysHalt("SV#2");
 136:../../../os/nil/src/ch.c ****   }
 137:../../../os/nil/src/ch.c **** }
 138:../../../os/nil/src/ch.c **** 
 139:../../../os/nil/src/ch.c **** /**
 140:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysEnable().
 141:../../../os/nil/src/ch.c ****  *
 142:../../../os/nil/src/ch.c ****  * @notapi
 143:../../../os/nil/src/ch.c ****  */
 144:../../../os/nil/src/ch.c **** void __dbg_check_enable(void) {
 145:../../../os/nil/src/ch.c **** 
 146:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt != (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 147:../../../os/nil/src/ch.c ****     chSysHalt("SV#3");
 148:../../../os/nil/src/ch.c ****   }
 149:../../../os/nil/src/ch.c **** }
 150:../../../os/nil/src/ch.c **** 
 151:../../../os/nil/src/ch.c **** /**
 152:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysLock().
 153:../../../os/nil/src/ch.c ****  *
 154:../../../os/nil/src/ch.c ****  * @notapi
 155:../../../os/nil/src/ch.c ****  */
 156:../../../os/nil/src/ch.c **** void __dbg_check_lock(void) {
 157:../../../os/nil/src/ch.c **** 
 158:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt != (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 159:../../../os/nil/src/ch.c ****     chSysHalt("SV#4");
 160:../../../os/nil/src/ch.c ****   }
 161:../../../os/nil/src/ch.c ****   __dbg_enter_lock();
 162:../../../os/nil/src/ch.c **** }
 163:../../../os/nil/src/ch.c **** 
 164:../../../os/nil/src/ch.c **** /**
 165:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysUnlock().
 166:../../../os/nil/src/ch.c ****  *
 167:../../../os/nil/src/ch.c ****  * @notapi
 168:../../../os/nil/src/ch.c ****  */
 169:../../../os/nil/src/ch.c **** void __dbg_check_unlock(void) {
 170:../../../os/nil/src/ch.c **** 
 171:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt != (cnt_t)0) || (nil.lock_cnt <= (cnt_t)0)) {
 172:../../../os/nil/src/ch.c ****     chSysHalt("SV#5");
 173:../../../os/nil/src/ch.c ****   }
 174:../../../os/nil/src/ch.c ****   __dbg_leave_lock();
 175:../../../os/nil/src/ch.c **** }
 176:../../../os/nil/src/ch.c **** 
 177:../../../os/nil/src/ch.c **** /**
 178:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysLockFromIsr().
 179:../../../os/nil/src/ch.c ****  *
 180:../../../os/nil/src/ch.c ****  * @notapi
 181:../../../os/nil/src/ch.c ****  */
 182:../../../os/nil/src/ch.c **** void __dbg_check_lock_from_isr(void) {
 183:../../../os/nil/src/ch.c **** 
 184:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt <= (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 185:../../../os/nil/src/ch.c ****     chSysHalt("SV#6");
 186:../../../os/nil/src/ch.c ****   }
 187:../../../os/nil/src/ch.c ****   __dbg_enter_lock();
 188:../../../os/nil/src/ch.c **** }
 189:../../../os/nil/src/ch.c **** 
 190:../../../os/nil/src/ch.c **** /**
 191:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p chSysUnlockFromIsr().
 192:../../../os/nil/src/ch.c ****  *
 193:../../../os/nil/src/ch.c ****  * @notapi
 194:../../../os/nil/src/ch.c ****  */
 195:../../../os/nil/src/ch.c **** void __dbg_check_unlock_from_isr(void) {
 196:../../../os/nil/src/ch.c **** 
 197:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt <= (cnt_t)0) || (nil.lock_cnt <= (cnt_t)0)) {
 198:../../../os/nil/src/ch.c ****     chSysHalt("SV#7");
 199:../../../os/nil/src/ch.c ****   }
 200:../../../os/nil/src/ch.c ****   __dbg_leave_lock();
 201:../../../os/nil/src/ch.c **** }
 202:../../../os/nil/src/ch.c **** 
 203:../../../os/nil/src/ch.c **** /**
 204:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 205:../../../os/nil/src/ch.c ****  *
 206:../../../os/nil/src/ch.c ****  * @notapi
 207:../../../os/nil/src/ch.c ****  */
 208:../../../os/nil/src/ch.c **** void __dbg_check_enter_isr(void) {
 209:../../../os/nil/src/ch.c **** 
 210:../../../os/nil/src/ch.c ****   port_lock_from_isr();
 211:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt < (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 212:../../../os/nil/src/ch.c ****     chSysHalt("SV#8");
 213:../../../os/nil/src/ch.c ****   }
 214:../../../os/nil/src/ch.c ****   nil.isr_cnt++;
 215:../../../os/nil/src/ch.c ****   port_unlock_from_isr();
 216:../../../os/nil/src/ch.c **** }
 217:../../../os/nil/src/ch.c **** 
 218:../../../os/nil/src/ch.c **** /**
 219:../../../os/nil/src/ch.c ****  * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 220:../../../os/nil/src/ch.c ****  *
 221:../../../os/nil/src/ch.c ****  * @notapi
 222:../../../os/nil/src/ch.c ****  */
 223:../../../os/nil/src/ch.c **** void __dbg_check_leave_isr(void) {
 224:../../../os/nil/src/ch.c **** 
 225:../../../os/nil/src/ch.c ****   port_lock_from_isr();
 226:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt <= (cnt_t)0) || (nil.lock_cnt != (cnt_t)0)) {
 227:../../../os/nil/src/ch.c ****     chSysHalt("SV#9");
 228:../../../os/nil/src/ch.c ****   }
 229:../../../os/nil/src/ch.c ****   nil.isr_cnt--;
 230:../../../os/nil/src/ch.c ****   port_unlock_from_isr();
 231:../../../os/nil/src/ch.c **** }
 232:../../../os/nil/src/ch.c **** 
 233:../../../os/nil/src/ch.c **** /**
 234:../../../os/nil/src/ch.c ****  * @brief   I-class functions context check.
 235:../../../os/nil/src/ch.c ****  * @details Verifies that the system is in an appropriate state for invoking
 236:../../../os/nil/src/ch.c ****  *          an I-class API function. A panic is generated if the state is
 237:../../../os/nil/src/ch.c ****  *          not compatible.
 238:../../../os/nil/src/ch.c ****  *
 239:../../../os/nil/src/ch.c ****  * @api
 240:../../../os/nil/src/ch.c ****  */
 241:../../../os/nil/src/ch.c **** void chDbgCheckClassI(void) {
 242:../../../os/nil/src/ch.c **** 
 243:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt < (cnt_t)0) || (nil.lock_cnt <= (cnt_t)0)) {
 244:../../../os/nil/src/ch.c ****     chSysHalt("SV#10");
 245:../../../os/nil/src/ch.c ****   }
 246:../../../os/nil/src/ch.c **** }
 247:../../../os/nil/src/ch.c **** 
 248:../../../os/nil/src/ch.c **** /**
 249:../../../os/nil/src/ch.c ****  * @brief   S-class functions context check.
 250:../../../os/nil/src/ch.c ****  * @details Verifies that the system is in an appropriate state for invoking
 251:../../../os/nil/src/ch.c ****  *          an S-class API function. A panic is generated if the state is
 252:../../../os/nil/src/ch.c ****  *          not compatible.
 253:../../../os/nil/src/ch.c ****  *
 254:../../../os/nil/src/ch.c ****  * @api
 255:../../../os/nil/src/ch.c ****  */
 256:../../../os/nil/src/ch.c **** void chDbgCheckClassS(void) {
 257:../../../os/nil/src/ch.c **** 
 258:../../../os/nil/src/ch.c ****   if ((nil.isr_cnt != (cnt_t)0) || (nil.lock_cnt <= (cnt_t)0)) {
 259:../../../os/nil/src/ch.c ****     chSysHalt("SV#11");
 260:../../../os/nil/src/ch.c ****   }
 261:../../../os/nil/src/ch.c **** }
 262:../../../os/nil/src/ch.c **** #endif /* CH_DBG_SYSTEM_STATE_CHECK == TRUE */
 263:../../../os/nil/src/ch.c **** 
 264:../../../os/nil/src/ch.c **** /**
 265:../../../os/nil/src/ch.c ****  * @brief   Initializes the kernel.
 266:../../../os/nil/src/ch.c ****  * @details Initializes the kernel structures, the current instructions flow
 267:../../../os/nil/src/ch.c ****  *          becomes the idle thread upon return. The idle thread must not
 268:../../../os/nil/src/ch.c ****  *          invoke any kernel primitive able to change state to not runnable.
 269:../../../os/nil/src/ch.c ****  * @note    This function assumes that the @p nil global variable has been
 270:../../../os/nil/src/ch.c ****  *          zeroed by the runtime environment. If this is not the case then
 271:../../../os/nil/src/ch.c ****  *          make sure to clear it before calling this function.
 272:../../../os/nil/src/ch.c ****  *
 273:../../../os/nil/src/ch.c ****  * @special
 274:../../../os/nil/src/ch.c ****  */
 275:../../../os/nil/src/ch.c **** void chSysInit(void) {
 276:../../../os/nil/src/ch.c ****   const thread_descriptor_t *tdp;
 277:../../../os/nil/src/ch.c **** 
 278:../../../os/nil/src/ch.c ****   /* Optional library modules.*/
 279:../../../os/nil/src/ch.c ****   __oslib_init();
 280:../../../os/nil/src/ch.c **** 
 281:../../../os/nil/src/ch.c ****   /* Architecture layer initialization.*/
 282:../../../os/nil/src/ch.c ****   port_init(&nil);
 283:../../../os/nil/src/ch.c **** 
 284:../../../os/nil/src/ch.c ****   /* System initialization hook.*/
 285:../../../os/nil/src/ch.c ****   CH_CFG_SYSTEM_INIT_HOOK();
 286:../../../os/nil/src/ch.c **** 
 287:../../../os/nil/src/ch.c ****   /* Making idle the current thread, this may change after rescheduling.*/
 288:../../../os/nil/src/ch.c ****   nil.next = nil.current = &nil.threads[CH_CFG_MAX_THREADS];
 289:../../../os/nil/src/ch.c ****   nil.current->state = NIL_STATE_READY;
 290:../../../os/nil/src/ch.c **** 
 291:../../../os/nil/src/ch.c **** #if CH_DBG_ENABLE_STACK_CHECK == TRUE
 292:../../../os/nil/src/ch.c ****   /* The idle thread is a special case because its stack is set up by the
 293:../../../os/nil/src/ch.c ****      runtime environment.*/
 294:../../../os/nil/src/ch.c ****   nil.threads[CH_CFG_MAX_THREADS].wabase = THD_IDLE_BASE;
 295:../../../os/nil/src/ch.c **** #endif
 296:../../../os/nil/src/ch.c **** 
 297:../../../os/nil/src/ch.c ****   /* Interrupts partially enabled. It is equivalent to entering the
 298:../../../os/nil/src/ch.c ****      kernel critical zone.*/
 299:../../../os/nil/src/ch.c ****   chSysSuspend();
 300:../../../os/nil/src/ch.c **** #if CH_DBG_SYSTEM_STATE_CHECK == TRUE
 301:../../../os/nil/src/ch.c ****   nil.lock_cnt = (cnt_t)1;
 302:../../../os/nil/src/ch.c **** #endif
 303:../../../os/nil/src/ch.c **** 
 304:../../../os/nil/src/ch.c **** #if CH_CFG_AUTOSTART_THREADS == TRUE
 305:../../../os/nil/src/ch.c ****   /* Iterates through the list of threads to be auto-started.*/
 306:../../../os/nil/src/ch.c ****   tdp = nil_thd_configs;
 307:../../../os/nil/src/ch.c ****   do {
 308:../../../os/nil/src/ch.c ****     (void) chThdCreateI(tdp);
 309:../../../os/nil/src/ch.c ****     tdp++;
 310:../../../os/nil/src/ch.c ****   } while (tdp->funcp != NULL);
 311:../../../os/nil/src/ch.c **** #endif
 312:../../../os/nil/src/ch.c **** 
 313:../../../os/nil/src/ch.c ****   /* Starting the dance.*/
 314:../../../os/nil/src/ch.c ****   chSchRescheduleS();
 315:../../../os/nil/src/ch.c ****   chSysUnlock();
 316:../../../os/nil/src/ch.c **** }
 317:../../../os/nil/src/ch.c **** 
 318:../../../os/nil/src/ch.c **** /**
 319:../../../os/nil/src/ch.c ****  * @brief   Halts the system.
 320:../../../os/nil/src/ch.c ****  * @details This function is invoked by the operating system when an
 321:../../../os/nil/src/ch.c ****  *          unrecoverable error is detected, for example because a programming
 322:../../../os/nil/src/ch.c ****  *          error in the application code that triggers an assertion while
 323:../../../os/nil/src/ch.c ****  *          in debug mode.
 324:../../../os/nil/src/ch.c ****  * @note    Can be invoked from any system state.
 325:../../../os/nil/src/ch.c ****  *
 326:../../../os/nil/src/ch.c ****  * @param[in] reason        pointer to an error string
 327:../../../os/nil/src/ch.c ****  *
 328:../../../os/nil/src/ch.c ****  * @special
 329:../../../os/nil/src/ch.c ****  */
 330:../../../os/nil/src/ch.c **** void chSysHalt(const char *reason) {
 331:../../../os/nil/src/ch.c **** 
 332:../../../os/nil/src/ch.c ****   port_disable();
 333:../../../os/nil/src/ch.c **** 
 334:../../../os/nil/src/ch.c **** #if NIL_DBG_ENABLED
 335:../../../os/nil/src/ch.c ****   nil.dbg_panic_msg = reason;
 336:../../../os/nil/src/ch.c **** #else
 337:../../../os/nil/src/ch.c ****   (void)reason;
 338:../../../os/nil/src/ch.c **** #endif
 339:../../../os/nil/src/ch.c **** 
 340:../../../os/nil/src/ch.c ****   /* Halt hook code, usually empty.*/
 341:../../../os/nil/src/ch.c ****   CH_CFG_SYSTEM_HALT_HOOK(reason);
 342:../../../os/nil/src/ch.c **** 
 343:../../../os/nil/src/ch.c ****   /* Harmless infinite loop.*/
 344:../../../os/nil/src/ch.c ****   while (true) {
 345:../../../os/nil/src/ch.c ****   }
 346:../../../os/nil/src/ch.c **** }
 347:../../../os/nil/src/ch.c **** 
 348:../../../os/nil/src/ch.c **** /**
 349:../../../os/nil/src/ch.c ****  * @brief   Time management handler.
 350:../../../os/nil/src/ch.c ****  * @note    This handler has to be invoked by a periodic ISR in order to
 351:../../../os/nil/src/ch.c ****  *          reschedule the waiting threads.
 352:../../../os/nil/src/ch.c ****  *
 353:../../../os/nil/src/ch.c ****  * @iclass
 354:../../../os/nil/src/ch.c ****  */
 355:../../../os/nil/src/ch.c **** void chSysTimerHandlerI(void) {
 356:../../../os/nil/src/ch.c **** 
 357:../../../os/nil/src/ch.c ****   chDbgCheckClassI();
 358:../../../os/nil/src/ch.c **** 
 359:../../../os/nil/src/ch.c **** #if CH_CFG_ST_TIMEDELTA == 0
 360:../../../os/nil/src/ch.c ****   thread_t *tp = &nil.threads[0];
 361:../../../os/nil/src/ch.c ****   nil.systime++;
 362:../../../os/nil/src/ch.c ****   do {
 363:../../../os/nil/src/ch.c ****     /* Is the thread in a wait state with timeout?.*/
 364:../../../os/nil/src/ch.c ****     if (tp->timeout > (sysinterval_t)0) {
 365:../../../os/nil/src/ch.c **** 
 366:../../../os/nil/src/ch.c ****       chDbgAssert(!NIL_THD_IS_READY(tp), "is ready");
 367:../../../os/nil/src/ch.c **** 
 368:../../../os/nil/src/ch.c ****       /* Did the timer reach zero?*/
 369:../../../os/nil/src/ch.c ****       if (--tp->timeout == (sysinterval_t)0) {
 370:../../../os/nil/src/ch.c ****         /* Timeout on queues/semaphores requires a special handling because
 371:../../../os/nil/src/ch.c ****            the counter must be incremented.*/
 372:../../../os/nil/src/ch.c ****         /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 373:../../../os/nil/src/ch.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 374:../../../os/nil/src/ch.c ****         if (NIL_THD_IS_WTQUEUE(tp)) {
 375:../../../os/nil/src/ch.c ****           tp->u1.semp->cnt++;
 376:../../../os/nil/src/ch.c ****         }
 377:../../../os/nil/src/ch.c ****         else
 378:../../../os/nil/src/ch.c **** #endif
 379:../../../os/nil/src/ch.c ****         if (NIL_THD_IS_SUSPENDED(tp)) {
 380:../../../os/nil/src/ch.c ****           *tp->u1.trp = NULL;
 381:../../../os/nil/src/ch.c ****         }
 382:../../../os/nil/src/ch.c ****         /*lint -restore*/
 383:../../../os/nil/src/ch.c ****         (void) chSchReadyI(tp, MSG_TIMEOUT);
 384:../../../os/nil/src/ch.c ****       }
 385:../../../os/nil/src/ch.c ****     }
 386:../../../os/nil/src/ch.c ****     /* Lock released in order to give a preemption chance on those
 387:../../../os/nil/src/ch.c ****        architectures supporting IRQ preemption.*/
 388:../../../os/nil/src/ch.c ****     chSysUnlockFromISR();
 389:../../../os/nil/src/ch.c ****     tp++;
 390:../../../os/nil/src/ch.c ****     chSysLockFromISR();
 391:../../../os/nil/src/ch.c ****   } while (tp < &nil.threads[CH_CFG_MAX_THREADS]);
 392:../../../os/nil/src/ch.c **** #else
 393:../../../os/nil/src/ch.c ****   thread_t *tp = &nil.threads[0];
 394:../../../os/nil/src/ch.c ****   sysinterval_t next = (sysinterval_t)0;
 395:../../../os/nil/src/ch.c **** 
 396:../../../os/nil/src/ch.c ****   chDbgAssert(nil.nexttime == port_timer_get_alarm(), "time mismatch");
 397:../../../os/nil/src/ch.c **** 
 398:../../../os/nil/src/ch.c ****   do {
 399:../../../os/nil/src/ch.c ****     sysinterval_t timeout = tp->timeout;
 400:../../../os/nil/src/ch.c **** 
 401:../../../os/nil/src/ch.c ****     /* Is the thread in a wait state with timeout?.*/
 402:../../../os/nil/src/ch.c ****     if (timeout > (sysinterval_t)0) {
 403:../../../os/nil/src/ch.c **** 
 404:../../../os/nil/src/ch.c ****       chDbgAssert(!NIL_THD_IS_READY(tp), "is ready");
 405:../../../os/nil/src/ch.c ****       chDbgAssert(timeout >= chTimeDiffX(nil.lasttime, nil.nexttime),
 406:../../../os/nil/src/ch.c ****                   "skipped one");
 407:../../../os/nil/src/ch.c **** 
 408:../../../os/nil/src/ch.c ****       /* The volatile field is updated once, here.*/
 409:../../../os/nil/src/ch.c ****       timeout -= chTimeDiffX(nil.lasttime, nil.nexttime);
 410:../../../os/nil/src/ch.c ****       tp->timeout = timeout;
 411:../../../os/nil/src/ch.c **** 
 412:../../../os/nil/src/ch.c ****       if (timeout == (sysinterval_t)0) {
 413:../../../os/nil/src/ch.c ****         /* Timeout on thread queues requires a special handling because the
 414:../../../os/nil/src/ch.c ****            counter must be incremented.*/
 415:../../../os/nil/src/ch.c ****         if (NIL_THD_IS_WTQUEUE(tp)) {
 416:../../../os/nil/src/ch.c ****           tp->u1.tqp->cnt++;
 417:../../../os/nil/src/ch.c ****         }
 418:../../../os/nil/src/ch.c ****         else {
 419:../../../os/nil/src/ch.c ****           if (NIL_THD_IS_SUSPENDED(tp)) {
 420:../../../os/nil/src/ch.c ****             *tp->u1.trp = NULL;
 421:../../../os/nil/src/ch.c ****           }
 422:../../../os/nil/src/ch.c ****         }
 423:../../../os/nil/src/ch.c ****         (void) chSchReadyI(tp, MSG_TIMEOUT);
 424:../../../os/nil/src/ch.c ****       }
 425:../../../os/nil/src/ch.c ****       else {
 426:../../../os/nil/src/ch.c ****         if (timeout <= (sysinterval_t)(next - (sysinterval_t)1)) {
 427:../../../os/nil/src/ch.c ****           next = timeout;
 428:../../../os/nil/src/ch.c ****         }
 429:../../../os/nil/src/ch.c ****       }
 430:../../../os/nil/src/ch.c ****     }
 431:../../../os/nil/src/ch.c **** 
 432:../../../os/nil/src/ch.c ****     /* Lock released in order to give a preemption chance on those
 433:../../../os/nil/src/ch.c ****        architectures supporting IRQ preemption.*/
 434:../../../os/nil/src/ch.c ****     chSysUnlockFromISR();
 435:../../../os/nil/src/ch.c ****     tp++;
 436:../../../os/nil/src/ch.c ****     chSysLockFromISR();
 437:../../../os/nil/src/ch.c ****   } while (tp < &nil.threads[CH_CFG_MAX_THREADS]);
 438:../../../os/nil/src/ch.c **** 
 439:../../../os/nil/src/ch.c ****   nil.lasttime = nil.nexttime;
 440:../../../os/nil/src/ch.c ****   if (next > (sysinterval_t)0) {
 441:../../../os/nil/src/ch.c ****     nil.nexttime = chTimeAddX(nil.nexttime, next);
 442:../../../os/nil/src/ch.c ****     port_timer_set_alarm(nil.nexttime);
 443:../../../os/nil/src/ch.c ****   }
 444:../../../os/nil/src/ch.c ****   else {
 445:../../../os/nil/src/ch.c ****     /* No tick event needed.*/
 446:../../../os/nil/src/ch.c ****     port_timer_stop_alarm();
 447:../../../os/nil/src/ch.c ****   }
 448:../../../os/nil/src/ch.c **** #endif
 449:../../../os/nil/src/ch.c **** }
 450:../../../os/nil/src/ch.c **** 
 451:../../../os/nil/src/ch.c **** /**
 452:../../../os/nil/src/ch.c ****  * @brief   Unconditionally enters the kernel lock state.
 453:../../../os/nil/src/ch.c ****  * @note    Can be called without previous knowledge of the current lock state.
 454:../../../os/nil/src/ch.c ****  *          The final state is "s-locked".
 455:../../../os/nil/src/ch.c ****  *
 456:../../../os/nil/src/ch.c ****  * @special
 457:../../../os/nil/src/ch.c ****  */
 458:../../../os/nil/src/ch.c **** void chSysUnconditionalLock(void) {
 459:../../../os/nil/src/ch.c **** 
 460:../../../os/nil/src/ch.c ****   if (port_irq_enabled(port_get_irq_status())) {
 461:../../../os/nil/src/ch.c ****     chSysLock();
 462:../../../os/nil/src/ch.c ****   }
 463:../../../os/nil/src/ch.c **** }
 464:../../../os/nil/src/ch.c **** 
 465:../../../os/nil/src/ch.c **** /**
 466:../../../os/nil/src/ch.c ****  * @brief   Unconditionally leaves the kernel lock state.
 467:../../../os/nil/src/ch.c ****  * @note    Can be called without previous knowledge of the current lock state.
 468:../../../os/nil/src/ch.c ****  *          The final state is "normal".
 469:../../../os/nil/src/ch.c ****  *
 470:../../../os/nil/src/ch.c ****  * @special
 471:../../../os/nil/src/ch.c ****  */
 472:../../../os/nil/src/ch.c **** void chSysUnconditionalUnlock(void) {
 473:../../../os/nil/src/ch.c **** 
 474:../../../os/nil/src/ch.c ****   if (!port_irq_enabled(port_get_irq_status())) {
 475:../../../os/nil/src/ch.c ****     chSysUnlock();
 476:../../../os/nil/src/ch.c ****   }
 477:../../../os/nil/src/ch.c **** }
 478:../../../os/nil/src/ch.c **** 
 479:../../../os/nil/src/ch.c **** /**
 480:../../../os/nil/src/ch.c ****  * @brief   Returns the execution status and enters a critical zone.
 481:../../../os/nil/src/ch.c ****  * @details This functions enters into a critical zone and can be called
 482:../../../os/nil/src/ch.c ****  *          from any context. Because its flexibility it is less efficient
 483:../../../os/nil/src/ch.c ****  *          than @p chSysLock() which is preferable when the calling context
 484:../../../os/nil/src/ch.c ****  *          is known.
 485:../../../os/nil/src/ch.c ****  * @post    The system is in a critical zone.
 486:../../../os/nil/src/ch.c ****  *
 487:../../../os/nil/src/ch.c ****  * @return              The previous system status, the encoding of this
 488:../../../os/nil/src/ch.c ****  *                      status word is architecture-dependent and opaque.
 489:../../../os/nil/src/ch.c ****  *
 490:../../../os/nil/src/ch.c ****  * @xclass
 491:../../../os/nil/src/ch.c ****  */
 492:../../../os/nil/src/ch.c **** syssts_t chSysGetStatusAndLockX(void)  {
 493:../../../os/nil/src/ch.c **** 
 494:../../../os/nil/src/ch.c ****   syssts_t sts = port_get_irq_status();
 495:../../../os/nil/src/ch.c ****   if (port_irq_enabled(sts)) {
 496:../../../os/nil/src/ch.c ****     if (port_is_isr_context()) {
 497:../../../os/nil/src/ch.c ****       chSysLockFromISR();
 498:../../../os/nil/src/ch.c ****     }
 499:../../../os/nil/src/ch.c ****     else {
 500:../../../os/nil/src/ch.c ****       chSysLock();
 501:../../../os/nil/src/ch.c ****     }
 502:../../../os/nil/src/ch.c ****   }
 503:../../../os/nil/src/ch.c ****   return sts;
 504:../../../os/nil/src/ch.c **** }
 505:../../../os/nil/src/ch.c **** 
 506:../../../os/nil/src/ch.c **** /**
 507:../../../os/nil/src/ch.c ****  * @brief   Restores the specified execution status and leaves a critical zone.
 508:../../../os/nil/src/ch.c ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 509:../../../os/nil/src/ch.c ****  *          if exiting the critical zone and if not in ISR context.
 510:../../../os/nil/src/ch.c ****  *
 511:../../../os/nil/src/ch.c ****  * @param[in] sts       the system status to be restored.
 512:../../../os/nil/src/ch.c ****  *
 513:../../../os/nil/src/ch.c ****  * @xclass
 514:../../../os/nil/src/ch.c ****  */
 515:../../../os/nil/src/ch.c **** void chSysRestoreStatusX(syssts_t sts) {
 516:../../../os/nil/src/ch.c **** 
 517:../../../os/nil/src/ch.c ****   if (port_irq_enabled(sts)) {
 518:../../../os/nil/src/ch.c ****     if (port_is_isr_context()) {
 519:../../../os/nil/src/ch.c ****       chSysUnlockFromISR();
 520:../../../os/nil/src/ch.c ****     }
 521:../../../os/nil/src/ch.c ****     else {
 522:../../../os/nil/src/ch.c ****       chSchRescheduleS();
 523:../../../os/nil/src/ch.c ****       chSysUnlock();
 524:../../../os/nil/src/ch.c ****     }
 525:../../../os/nil/src/ch.c ****   }
 526:../../../os/nil/src/ch.c **** }
 527:../../../os/nil/src/ch.c **** 
 528:../../../os/nil/src/ch.c **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 529:../../../os/nil/src/ch.c **** /**
 530:../../../os/nil/src/ch.c ****  * @brief   Realtime window test.
 531:../../../os/nil/src/ch.c ****  * @details This function verifies if the current realtime counter value
 532:../../../os/nil/src/ch.c ****  *          lies within the specified range or not. The test takes care
 533:../../../os/nil/src/ch.c ****  *          of the realtime counter wrapping to zero on overflow.
 534:../../../os/nil/src/ch.c ****  * @note    When start==end then the function returns always false because a
 535:../../../os/nil/src/ch.c ****  *          null time range is specified.
 536:../../../os/nil/src/ch.c ****  * @note    This function is only available if the port layer supports the
 537:../../../os/nil/src/ch.c ****  *          option @p PORT_SUPPORTS_RT.
 538:../../../os/nil/src/ch.c ****  *
 539:../../../os/nil/src/ch.c ****  * @param[in] cnt       the counter value to be tested
 540:../../../os/nil/src/ch.c ****  * @param[in] start     the start of the time window (inclusive)
 541:../../../os/nil/src/ch.c ****  * @param[in] end       the end of the time window (non inclusive)
 542:../../../os/nil/src/ch.c ****  * @retval true         current time within the specified time window.
 543:../../../os/nil/src/ch.c ****  * @retval false        current time not within the specified time window.
 544:../../../os/nil/src/ch.c ****  *
 545:../../../os/nil/src/ch.c ****  * @xclass
 546:../../../os/nil/src/ch.c ****  */
 547:../../../os/nil/src/ch.c **** bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
 548:../../../os/nil/src/ch.c **** 
 549:../../../os/nil/src/ch.c ****   return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 550:../../../os/nil/src/ch.c ****                 ((rtcnt_t)end - (rtcnt_t)start));
 551:../../../os/nil/src/ch.c **** }
 552:../../../os/nil/src/ch.c **** 
 553:../../../os/nil/src/ch.c **** /**
 554:../../../os/nil/src/ch.c ****  * @brief   Polled delay.
 555:../../../os/nil/src/ch.c ****  * @note    The real delay is always few cycles in excess of the specified
 556:../../../os/nil/src/ch.c ****  *          value.
 557:../../../os/nil/src/ch.c ****  * @note    This function is only available if the port layer supports the
 558:../../../os/nil/src/ch.c ****  *          option @p PORT_SUPPORTS_RT.
 559:../../../os/nil/src/ch.c ****  *
 560:../../../os/nil/src/ch.c ****  * @param[in] cycles    number of cycles
 561:../../../os/nil/src/ch.c ****  *
 562:../../../os/nil/src/ch.c ****  * @xclass
 563:../../../os/nil/src/ch.c ****  */
 564:../../../os/nil/src/ch.c **** void chSysPolledDelayX(rtcnt_t cycles) {
 565:../../../os/nil/src/ch.c ****   rtcnt_t start = chSysGetRealtimeCounterX();
 566:../../../os/nil/src/ch.c ****   rtcnt_t end  = start + cycles;
 567:../../../os/nil/src/ch.c **** 
 568:../../../os/nil/src/ch.c ****   while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 569:../../../os/nil/src/ch.c ****   }
 570:../../../os/nil/src/ch.c **** }
 571:../../../os/nil/src/ch.c **** #endif /* PORT_SUPPORTS_RT == TRUE */
 572:../../../os/nil/src/ch.c **** 
 573:../../../os/nil/src/ch.c **** /**
 574:../../../os/nil/src/ch.c ****  * @brief   Makes the specified thread ready for execution.
 575:../../../os/nil/src/ch.c ****  *
 576:../../../os/nil/src/ch.c ****  * @param[in] tp        pointer to the @p thread_t object
 577:../../../os/nil/src/ch.c ****  * @param[in] msg       the wakeup message
 578:../../../os/nil/src/ch.c ****  *
 579:../../../os/nil/src/ch.c ****  * @return              The same reference passed as parameter.
 580:../../../os/nil/src/ch.c ****  */
 581:../../../os/nil/src/ch.c **** thread_t *chSchReadyI(thread_t *tp, msg_t msg) {
 582:../../../os/nil/src/ch.c **** 
 583:../../../os/nil/src/ch.c ****   chDbgCheckClassI();
 584:../../../os/nil/src/ch.c ****   chDbgCheck((tp >= nil.threads) && (tp < &nil.threads[CH_CFG_MAX_THREADS]));
 585:../../../os/nil/src/ch.c ****   chDbgAssert(!NIL_THD_IS_READY(tp), "already ready");
 586:../../../os/nil/src/ch.c ****   chDbgAssert(nil.next <= nil.current, "priority ordering");
 587:../../../os/nil/src/ch.c **** 
 588:../../../os/nil/src/ch.c ****   tp->u1.msg = msg;
 589:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
  93               		.loc 1 589 0
  94 0016 81E0      		ldi r24,lo8(1)
  95               	.LVL9:
  96               	.L11:
  97               	.LBE126:
  98               	.LBE125:
 104:../../../os/nil/src/ch.c ****       cnt++;
  99               		.loc 1 104 0
 100 0018 9281      		ldd r25,Z+2
 101 001a 9530      		cpi r25,lo8(5)
 102 001c 01F0      		breq .L16
 103               	.L12:
 108:../../../os/nil/src/ch.c ****   }
 104               		.loc 1 108 0
 105 001e 3A96      		adiw r30,10
 106               	.LVL10:
 104:../../../os/nil/src/ch.c ****       cnt++;
 107               		.loc 1 104 0
 108 0020 9281      		ldd r25,Z+2
 109 0022 9530      		cpi r25,lo8(5)
 110 0024 01F4      		brne .L12
 111               	.L16:
 104:../../../os/nil/src/ch.c ****       cnt++;
 112               		.loc 1 104 0 is_stmt 0 discriminator 1
 113 0026 2381      		ldd r18,Z+3
 114 0028 3481      		ldd r19,Z+4
 115 002a 2A17      		cp r18,r26
 116 002c 3B07      		cpc r19,r27
 117 002e 01F4      		brne .L12
 105:../../../os/nil/src/ch.c ****       (void) chSchReadyI(tp, msg);
 118               		.loc 1 105 0 is_stmt 1
 119 0030 6F5F      		subi r22,lo8(-(1))
 120               	.LVL11:
 121               	.LBB128:
 122               	.LBB127:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 123               		.loc 1 588 0
 124 0032 5483      		std Z+4,r21
 125 0034 4383      		std Z+3,r20
 126               		.loc 1 589 0
 127 0036 8283      		std Z+2,r24
 590:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 128               		.loc 1 590 0
 129 0038 1682      		std Z+6,__zero_reg__
 130 003a 1582      		std Z+5,__zero_reg__
 131 003c EC17      		cp r30,r28
 132 003e FD07      		cpc r31,r29
 133 0040 00F4      		brsh .L13
 134 0042 EF01      		movw r28,r30
 135               	.L13:
 136               	.LBE127:
 137               	.LBE128:
 108:../../../os/nil/src/ch.c ****   }
 138               		.loc 1 108 0
 139 0044 3A96      		adiw r30,10
 140               	.LVL12:
  98:../../../os/nil/src/ch.c **** 
 141               		.loc 1 98 0
 142 0046 6111      		cpse r22,__zero_reg__
 143 0048 00C0      		rjmp .L11
 144 004a D093 0000 		sts nil+2+1,r29
 145 004e C093 0000 		sts nil+2,r28
 146               	.LVL13:
 147               	.L15:
 112:../../../os/nil/src/ch.c **** 
 148               		.loc 1 112 0
 149 0052 862F      		mov r24,r22
 150               	/* epilogue start */
 151 0054 DF91      		pop r29
 152 0056 CF91      		pop r28
 153 0058 0895      		ret
 154               		.cfi_endproc
 155               	.LFE99:
 157               		.section	.text.chSysHalt,"ax",@progbits
 158               	.global	chSysHalt
 160               	chSysHalt:
 161               	.LFB101:
 330:../../../os/nil/src/ch.c **** 
 162               		.loc 1 330 0
 163               		.cfi_startproc
 164               	.LVL14:
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
 169               	.LBB129:
 170               	.LBB130:
 171               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 441:../../../os/common/ports/AVR/chcore.h **** }
 442:../../../os/common/ports/AVR/chcore.h **** 
 443:../../../os/common/ports/AVR/chcore.h **** /**
 444:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action from an interrupt handler.
 445:../../../os/common/ports/AVR/chcore.h ****  * @details This function is invoked before invoking I-class APIs from
 446:../../../os/common/ports/AVR/chcore.h ****  *          interrupt handlers. The implementation is architecture dependent,
 447:../../../os/common/ports/AVR/chcore.h ****  *          in its simplest form it is void.
 448:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 449:../../../os/common/ports/AVR/chcore.h ****  */
 450:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock_from_isr(void) {
 451:../../../os/common/ports/AVR/chcore.h **** 
 452:../../../os/common/ports/AVR/chcore.h **** }
 453:../../../os/common/ports/AVR/chcore.h **** 
 454:../../../os/common/ports/AVR/chcore.h **** /**
 455:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 456:../../../os/common/ports/AVR/chcore.h ****  * @details This function is invoked after invoking I-class APIs from interrupt
 457:../../../os/common/ports/AVR/chcore.h ****  *          handlers. The implementation is architecture dependent, in its
 458:../../../os/common/ports/AVR/chcore.h ****  *          simplest form it is void.
 459:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 460:../../../os/common/ports/AVR/chcore.h ****  */
 461:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock_from_isr(void) {
 462:../../../os/common/ports/AVR/chcore.h **** 
 463:../../../os/common/ports/AVR/chcore.h **** }
 464:../../../os/common/ports/AVR/chcore.h **** 
 465:../../../os/common/ports/AVR/chcore.h **** /**
 466:../../../os/common/ports/AVR/chcore.h ****  * @brief   Disables all the interrupt sources.
 467:../../../os/common/ports/AVR/chcore.h ****  * @note    Of course non-maskable interrupt sources are not included.
 468:../../../os/common/ports/AVR/chcore.h ****  */
 469:../../../os/common/ports/AVR/chcore.h **** static inline void port_disable(void) {
 470:../../../os/common/ports/AVR/chcore.h **** 
 471:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 172               		.loc 2 471 0
 173               	/* #APP */
 174               	 ;  471 "../../../os/common/ports/AVR/chcore.h" 1
 175 0000 F894      		cli
 176               	 ;  0 "" 2
 177               	/* #NOAPP */
 178               	.L18:
 179 0002 00C0      		rjmp .L18
 180               	.LBE130:
 181               	.LBE129:
 182               		.cfi_endproc
 183               	.LFE101:
 185               		.section	.text.chSysTimerHandlerI,"ax",@progbits
 186               	.global	chSysTimerHandlerI
 188               	chSysTimerHandlerI:
 189               	.LFB102:
 355:../../../os/nil/src/ch.c **** 
 190               		.loc 1 355 0
 191               		.cfi_startproc
 192 0000 FF92      		push r15
 193               	.LCFI2:
 194               		.cfi_def_cfa_offset 3
 195               		.cfi_offset 15, -2
 196 0002 0F93      		push r16
 197               	.LCFI3:
 198               		.cfi_def_cfa_offset 4
 199               		.cfi_offset 16, -3
 200 0004 1F93      		push r17
 201               	.LCFI4:
 202               		.cfi_def_cfa_offset 5
 203               		.cfi_offset 17, -4
 204 0006 CF93      		push r28
 205               	.LCFI5:
 206               		.cfi_def_cfa_offset 6
 207               		.cfi_offset 28, -5
 208 0008 DF93      		push r29
 209               	.LCFI6:
 210               		.cfi_def_cfa_offset 7
 211               		.cfi_offset 29, -6
 212               	/* prologue: function */
 213               	/* frame size = 0 */
 214               	/* stack size = 5 */
 215               	.L__stack_usage = 5
 216               	.LVL15:
 217 000a 8091 0000 		lds r24,nil+6
 218 000e 9091 0000 		lds r25,nil+6+1
 219               	.LBB131:
 409:../../../os/nil/src/ch.c ****       tp->timeout = timeout;
 220               		.loc 1 409 0
 221 0012 6091 0000 		lds r22,nil+4
 222 0016 7091 0000 		lds r23,nil+4+1
 223               	.LBE131:
 394:../../../os/nil/src/ch.c **** 
 224               		.loc 1 394 0
 225 001a 40E0      		ldi r20,0
 226 001c 50E0      		ldi r21,0
 393:../../../os/nil/src/ch.c ****   sysinterval_t next = (sysinterval_t)0;
 227               		.loc 1 393 0
 228 001e E0E0      		ldi r30,lo8(nil+8)
 229 0020 F0E0      		ldi r31,hi8(nil+8)
 230               	.LVL16:
 231               	.LBB136:
 232               	.LBB132:
 233               	.LBB133:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 234               		.loc 1 588 0
 235 0022 CFEF      		ldi r28,lo8(-1)
 236 0024 DFEF      		ldi r29,lo8(-1)
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 237               		.loc 1 589 0
 238 0026 FF24      		clr r15
 239 0028 F394      		inc r15
 240               	.LVL17:
 241               	.L24:
 242               	.LBE133:
 243               	.LBE132:
 399:../../../os/nil/src/ch.c **** 
 244               		.loc 1 399 0
 245 002a 2581      		ldd r18,Z+5
 246 002c 3681      		ldd r19,Z+6
 247               	.LVL18:
 402:../../../os/nil/src/ch.c **** 
 248               		.loc 1 402 0
 249 002e 2115      		cp r18,__zero_reg__
 250 0030 3105      		cpc r19,__zero_reg__
 251 0032 01F0      		breq .L20
 409:../../../os/nil/src/ch.c ****       tp->timeout = timeout;
 252               		.loc 1 409 0
 253 0034 260F      		add r18,r22
 254 0036 371F      		adc r19,r23
 255               	.LVL19:
 256 0038 281B      		sub r18,r24
 257 003a 390B      		sbc r19,r25
 258               	.LVL20:
 410:../../../os/nil/src/ch.c **** 
 259               		.loc 1 410 0
 260 003c 3683      		std Z+6,r19
 261 003e 2583      		std Z+5,r18
 412:../../../os/nil/src/ch.c ****         /* Timeout on thread queues requires a special handling because the
 262               		.loc 1 412 0
 263 0040 2115      		cp r18,__zero_reg__
 264 0042 3105      		cpc r19,__zero_reg__
 265 0044 01F4      		brne .L21
 415:../../../os/nil/src/ch.c ****           tp->u1.tqp->cnt++;
 266               		.loc 1 415 0
 267 0046 2281      		ldd r18,Z+2
 268               	.LVL21:
 269 0048 2530      		cpi r18,lo8(5)
 270 004a 01F0      		breq .L31
 419:../../../os/nil/src/ch.c ****             *tp->u1.trp = NULL;
 271               		.loc 1 419 0
 272 004c 2330      		cpi r18,lo8(3)
 273 004e 01F4      		brne .+2
 274 0050 00C0      		rjmp .L32
 275               	.LVL22:
 276               	.L23:
 277               	.LBB135:
 278               	.LBB134:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 279               		.loc 1 588 0
 280 0052 D483      		std Z+4,r29
 281 0054 C383      		std Z+3,r28
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 282               		.loc 1 589 0
 283 0056 F282      		std Z+2,r15
 284               		.loc 1 590 0
 285 0058 1682      		std Z+6,__zero_reg__
 286 005a 1582      		std Z+5,__zero_reg__
 591:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 287               		.loc 1 591 0
 288 005c 2091 0000 		lds r18,nil+2
 289 0060 3091 0000 		lds r19,nil+2+1
 290 0064 E217      		cp r30,r18
 291 0066 F307      		cpc r31,r19
 292 0068 00F4      		brsh .L20
 592:../../../os/nil/src/ch.c ****     nil.next = tp;
 293               		.loc 1 592 0
 294 006a F093 0000 		sts nil+2+1,r31
 295 006e E093 0000 		sts nil+2,r30
 296               	.LVL23:
 297               	.L20:
 298               	.LBE134:
 299               	.LBE135:
 435:../../../os/nil/src/ch.c ****     chSysLockFromISR();
 300               		.loc 1 435 0
 301 0072 3A96      		adiw r30,10
 302               	.LVL24:
 303               	.LBE136:
 437:../../../os/nil/src/ch.c **** 
 304               		.loc 1 437 0
 305 0074 B0E0      		ldi r27,hi8(nil+48)
 306 0076 E030      		cpi r30,lo8(nil+48)
 307 0078 FB07      		cpc r31,r27
 308 007a 01F4      		brne .L24
 439:../../../os/nil/src/ch.c ****   if (next > (sysinterval_t)0) {
 309               		.loc 1 439 0
 310 007c 9093 0000 		sts nil+4+1,r25
 311 0080 8093 0000 		sts nil+4,r24
 440:../../../os/nil/src/ch.c ****     nil.nexttime = chTimeAddX(nil.nexttime, next);
 312               		.loc 1 440 0
 313 0084 4115      		cp r20,__zero_reg__
 314 0086 5105      		cpc r21,__zero_reg__
 315 0088 01F4      		brne .L33
 316               	/* epilogue start */
 449:../../../os/nil/src/ch.c **** 
 317               		.loc 1 449 0
 318 008a DF91      		pop r29
 319 008c CF91      		pop r28
 320 008e 1F91      		pop r17
 321 0090 0F91      		pop r16
 322 0092 FF90      		pop r15
 323               	.LBB137:
 324               	.LBB138:
 325               		.file 3 "../../../os/hal/osal/rt-nil/chcore_timer.h"
   1:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*
   2:../../../os/hal/osal/rt-nil/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
   4:../../../os/hal/osal/rt-nil/chcore_timer.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/chcore_timer.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/chcore_timer.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
   8:../../../os/hal/osal/rt-nil/chcore_timer.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  10:../../../os/hal/osal/rt-nil/chcore_timer.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/chcore_timer.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/chcore_timer.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/chcore_timer.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/chcore_timer.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/chcore_timer.h **** */
  16:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  17:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  18:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @file    osal/rt-nil//chcore_timer.h
  19:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   System Timer bindings header file.
  20:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  21:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @addtogroup OSAL_CHCORE_TIMER
  22:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @{
  23:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  24:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  25:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  26:../../../os/hal/osal/rt-nil/chcore_timer.h **** #define CHCORE_TIMER_H
  27:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  28:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  29:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module constants.                                                         */
  30:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  31:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  32:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  33:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  34:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  36:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Derived constants and error checks.                                       */
  38:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  40:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module data structures and types.                                         */
  42:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  44:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module macros.                                                            */
  46:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  48:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* External declarations.                                                    */
  50:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  52:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  53:../../../os/hal/osal/rt-nil/chcore_timer.h **** extern "C" {
  54:../../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  55:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStartAlarm(systime_t time);
  56:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStopAlarm(void);
  57:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stSetAlarm(systime_t time);
  58:../../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetCounter(void);
  59:../../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetAlarm(void);
  60:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  61:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  62:../../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  63:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  64:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  65:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module inline functions.                                                  */
  66:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  67:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  68:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  69:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Starts the alarm.
  70:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  71:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *          this call.
  72:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  73:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  74:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  75:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  76:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  77:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  78:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  79:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stStartAlarm(time);
  80:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  81:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  82:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  83:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  84:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  85:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  86:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  87:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  88:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  89:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stStopAlarm();
 326               		.loc 3 89 0
 327 0094 0C94 0000 		jmp stStopAlarm
 328               	.LVL25:
 329               	.L21:
 330               	.LBE138:
 331               	.LBE137:
 332               	.LBB139:
 426:../../../os/nil/src/ch.c ****           next = timeout;
 333               		.loc 1 426 0
 334 0098 8A01      		movw r16,r20
 335 009a 0150      		subi r16,1
 336 009c 1109      		sbc r17,__zero_reg__
 337 009e 0217      		cp r16,r18
 338 00a0 1307      		cpc r17,r19
 339 00a2 00F0      		brlo .L20
 340 00a4 A901      		movw r20,r18
 341               	.LVL26:
 342 00a6 00C0      		rjmp .L20
 343               	.LVL27:
 344               	.L33:
 345               	.LBE139:
 441:../../../os/nil/src/ch.c ****     port_timer_set_alarm(nil.nexttime);
 346               		.loc 1 441 0
 347 00a8 840F      		add r24,r20
 348 00aa 951F      		adc r25,r21
 349 00ac 9093 0000 		sts nil+6+1,r25
 350 00b0 8093 0000 		sts nil+6,r24
 351               	.LVL28:
 352               	/* epilogue start */
 449:../../../os/nil/src/ch.c **** 
 353               		.loc 1 449 0
 354 00b4 DF91      		pop r29
 355 00b6 CF91      		pop r28
 356 00b8 1F91      		pop r17
 357 00ba 0F91      		pop r16
 358 00bc FF90      		pop r15
 359               	.LBB140:
 360               	.LBB141:
  90:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  91:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  92:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  93:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Sets the alarm time.
  94:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  95:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  96:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  97:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  98:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  99:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 100:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 101:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stSetAlarm(time);
 361               		.loc 3 101 0
 362 00be 0C94 0000 		jmp stSetAlarm
 363               	.LVL29:
 364               	.L31:
 365               	.LBE141:
 366               	.LBE140:
 367               	.LBB142:
 416:../../../os/nil/src/ch.c ****         }
 368               		.loc 1 416 0
 369 00c2 0381      		ldd r16,Z+3
 370 00c4 1481      		ldd r17,Z+4
 371 00c6 D801      		movw r26,r16
 372 00c8 2C91      		ld r18,X
 373 00ca 2F5F      		subi r18,lo8(-(1))
 374 00cc 2C93      		st X,r18
 375               	.LVL30:
 376 00ce 00C0      		rjmp .L23
 377               	.LVL31:
 378               	.L32:
 420:../../../os/nil/src/ch.c ****           }
 379               		.loc 1 420 0
 380 00d0 2381      		ldd r18,Z+3
 381 00d2 3481      		ldd r19,Z+4
 382 00d4 D901      		movw r26,r18
 383 00d6 1D92      		st X+,__zero_reg__
 384 00d8 1C92      		st X,__zero_reg__
 385 00da 00C0      		rjmp .L23
 386               	.LBE142:
 387               		.cfi_endproc
 388               	.LFE102:
 390               		.section	.text.chSysUnconditionalLock,"ax",@progbits
 391               	.global	chSysUnconditionalLock
 393               	chSysUnconditionalLock:
 394               	.LFB103:
 458:../../../os/nil/src/ch.c **** 
 395               		.loc 1 458 0
 396               		.cfi_startproc
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 399               	/* stack size = 0 */
 400               	.L__stack_usage = 0
 460:../../../os/nil/src/ch.c ****     chSysLock();
 401               		.loc 1 460 0
 402 0000 0FB6      		in __tmp_reg__,__SREG__
 403 0002 07FE      		sbrs __tmp_reg__,7
 404 0004 0895      		ret
 405               	.L36:
 406               	.LBB143:
 407               	.LBB144:
 430:../../../os/common/ports/AVR/chcore.h **** }
 408               		.loc 2 430 0
 409               	/* #APP */
 410               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 411 0006 F894      		cli
 412               	 ;  0 "" 2
 413               	/* #NOAPP */
 414 0008 0895      		ret
 415               	.LBE144:
 416               	.LBE143:
 417               		.cfi_endproc
 418               	.LFE103:
 420               		.section	.text.chSysUnconditionalUnlock,"ax",@progbits
 421               	.global	chSysUnconditionalUnlock
 423               	chSysUnconditionalUnlock:
 424               	.LFB104:
 472:../../../os/nil/src/ch.c **** 
 425               		.loc 1 472 0
 426               		.cfi_startproc
 427               	/* prologue: function */
 428               	/* frame size = 0 */
 429               	/* stack size = 0 */
 430               	.L__stack_usage = 0
 474:../../../os/nil/src/ch.c ****     chSysUnlock();
 431               		.loc 1 474 0
 432 0000 0FB6      		in __tmp_reg__,__SREG__
 433 0002 07FC      		sbrc __tmp_reg__,7
 434 0004 00C0      		rjmp .L37
 435               	.LBB145:
 436               	.LBB146:
 440:../../../os/common/ports/AVR/chcore.h **** }
 437               		.loc 2 440 0
 438               	/* #APP */
 439               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 440 0006 7894      		sei
 441               	 ;  0 "" 2
 442               	/* #NOAPP */
 443               	.L37:
 444 0008 0895      		ret
 445               	.LBE146:
 446               	.LBE145:
 447               		.cfi_endproc
 448               	.LFE104:
 450               		.section	.text.chSysGetStatusAndLockX,"ax",@progbits
 451               	.global	chSysGetStatusAndLockX
 453               	chSysGetStatusAndLockX:
 454               	.LFB105:
 492:../../../os/nil/src/ch.c **** 
 455               		.loc 1 492 0
 456               		.cfi_startproc
 457               	/* prologue: function */
 458               	/* frame size = 0 */
 459               	/* stack size = 0 */
 460               	.L__stack_usage = 0
 461               	.LBB147:
 462               	.LBB148:
 394:../../../os/common/ports/AVR/chcore.h **** }
 463               		.loc 2 394 0
 464 0000 8FB7      		in r24,__SREG__
 465               	.LBE148:
 466               	.LBE147:
 495:../../../os/nil/src/ch.c ****     if (port_is_isr_context()) {
 467               		.loc 1 495 0
 468 0002 87FF      		sbrs r24,7
 469               	.L40:
 504:../../../os/nil/src/ch.c **** 
 470               		.loc 1 504 0
 471 0004 0895      		ret
 472               	.L41:
 496:../../../os/nil/src/ch.c ****       chSysLockFromISR();
 473               		.loc 1 496 0
 474 0006 9091 0000 		lds r25,__avr_in_isr
 475 000a 9111      		cpse r25,__zero_reg__
 476 000c 00C0      		rjmp .L40
 477               	.LBB149:
 478               	.LBB150:
 430:../../../os/common/ports/AVR/chcore.h **** }
 479               		.loc 2 430 0
 480               	/* #APP */
 481               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 482 000e F894      		cli
 483               	 ;  0 "" 2
 484               	/* #NOAPP */
 485               	.LBE150:
 486               	.LBE149:
 504:../../../os/nil/src/ch.c **** 
 487               		.loc 1 504 0
 488 0010 0895      		ret
 489               		.cfi_endproc
 490               	.LFE105:
 492               		.section	.text.chSysRestoreStatusX,"ax",@progbits
 493               	.global	chSysRestoreStatusX
 495               	chSysRestoreStatusX:
 496               	.LFB106:
 515:../../../os/nil/src/ch.c **** 
 497               		.loc 1 515 0
 498               		.cfi_startproc
 499               	.LVL32:
 500               	/* prologue: function */
 501               	/* frame size = 0 */
 502               	/* stack size = 0 */
 503               	.L__stack_usage = 0
 517:../../../os/nil/src/ch.c ****     if (port_is_isr_context()) {
 504               		.loc 1 517 0
 505 0000 87FF      		sbrs r24,7
 506               	.LVL33:
 507               	.L42:
 508 0002 0895      		ret
 509               	.LVL34:
 510               	.L45:
 518:../../../os/nil/src/ch.c ****       chSysUnlockFromISR();
 511               		.loc 1 518 0
 512 0004 8091 0000 		lds r24,__avr_in_isr
 513               	.LVL35:
 514 0008 8111      		cpse r24,__zero_reg__
 515 000a 00C0      		rjmp .L42
 516               	.LBB151:
 517               	.LBB152:
 593:../../../os/nil/src/ch.c ****   }
 594:../../../os/nil/src/ch.c ****   return tp;
 595:../../../os/nil/src/ch.c **** }
 596:../../../os/nil/src/ch.c **** 
 597:../../../os/nil/src/ch.c **** /**
 598:../../../os/nil/src/ch.c ****  * @brief   Evaluates if preemption is required.
 599:../../../os/nil/src/ch.c ****  * @details The decision is taken by comparing the relative priorities and
 600:../../../os/nil/src/ch.c ****  *          depending on the state of the round robin timeout counter.
 601:../../../os/nil/src/ch.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 602:../../../os/nil/src/ch.c ****  *          itself or from within the port layer.
 603:../../../os/nil/src/ch.c ****  *
 604:../../../os/nil/src/ch.c ****  * @retval true         if there is a thread that must go in running state
 605:../../../os/nil/src/ch.c ****  *                      immediately.
 606:../../../os/nil/src/ch.c ****  * @retval false        if preemption is not required.
 607:../../../os/nil/src/ch.c ****  *
 608:../../../os/nil/src/ch.c ****  * @special
 609:../../../os/nil/src/ch.c ****  */
 610:../../../os/nil/src/ch.c **** bool chSchIsPreemptionRequired(void) {
 611:../../../os/nil/src/ch.c **** 
 612:../../../os/nil/src/ch.c ****   return chSchIsRescRequiredI();
 613:../../../os/nil/src/ch.c **** }
 614:../../../os/nil/src/ch.c **** 
 615:../../../os/nil/src/ch.c **** /**
 616:../../../os/nil/src/ch.c ****  * @brief   Switches to the first thread on the runnable queue.
 617:../../../os/nil/src/ch.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 618:../../../os/nil/src/ch.c ****  *          itself or from within the port layer.
 619:../../../os/nil/src/ch.c ****  *
 620:../../../os/nil/src/ch.c ****  * @special
 621:../../../os/nil/src/ch.c ****  */
 622:../../../os/nil/src/ch.c **** void chSchDoPreemption(void) {
 623:../../../os/nil/src/ch.c ****   thread_t *otp = nil.current;
 624:../../../os/nil/src/ch.c **** 
 625:../../../os/nil/src/ch.c ****   nil.current = nil.next;
 626:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 627:../../../os/nil/src/ch.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 628:../../../os/nil/src/ch.c ****   }
 629:../../../os/nil/src/ch.c ****   port_switch(nil.next, otp);
 630:../../../os/nil/src/ch.c **** }
 631:../../../os/nil/src/ch.c **** 
 632:../../../os/nil/src/ch.c **** /**
 633:../../../os/nil/src/ch.c ****  * @brief   Reschedules if needed.
 634:../../../os/nil/src/ch.c ****  *
 635:../../../os/nil/src/ch.c ****  * @sclass
 636:../../../os/nil/src/ch.c ****  */
 637:../../../os/nil/src/ch.c **** void chSchRescheduleS(void) {
 638:../../../os/nil/src/ch.c **** 
 639:../../../os/nil/src/ch.c ****   chDbgCheckClassS();
 640:../../../os/nil/src/ch.c **** 
 641:../../../os/nil/src/ch.c ****   if (chSchIsRescRequiredI()) {
 518               		.loc 1 641 0
 519 000c 6091 0000 		lds r22,nil
 520 0010 7091 0000 		lds r23,nil+1
 521 0014 8091 0000 		lds r24,nil+2
 522 0018 9091 0000 		lds r25,nil+2+1
 523 001c 6817      		cp r22,r24
 524 001e 7907      		cpc r23,r25
 525 0020 01F0      		breq .L44
 526               	.LVL36:
 527               	.LBB153:
 528               	.LBB154:
 625:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 529               		.loc 1 625 0
 530 0022 9093 0000 		sts nil+1,r25
 531 0026 8093 0000 		sts nil,r24
 629:../../../os/nil/src/ch.c **** }
 532               		.loc 1 629 0
 533 002a 0E94 0000 		call _port_switch
 534               	.LVL37:
 535               	.L44:
 536               	.LBE154:
 537               	.LBE153:
 538               	.LBE152:
 539               	.LBE151:
 540               	.LBB155:
 541               	.LBB156:
 440:../../../os/common/ports/AVR/chcore.h **** }
 542               		.loc 2 440 0
 543               	/* #APP */
 544               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 545 002e 7894      		sei
 546               	 ;  0 "" 2
 547               	/* #NOAPP */
 548 0030 0895      		ret
 549               	.LBE156:
 550               	.LBE155:
 551               		.cfi_endproc
 552               	.LFE106:
 554               		.section	.text.chSchReadyI,"ax",@progbits
 555               	.global	chSchReadyI
 557               	chSchReadyI:
 558               	.LFB107:
 581:../../../os/nil/src/ch.c **** 
 559               		.loc 1 581 0
 560               		.cfi_startproc
 561               	.LVL38:
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 566               		.loc 1 588 0
 567 0000 FC01      		movw r30,r24
 568 0002 7483      		std Z+4,r23
 569 0004 6383      		std Z+3,r22
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 570               		.loc 1 589 0
 571 0006 21E0      		ldi r18,lo8(1)
 572 0008 2283      		std Z+2,r18
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 573               		.loc 1 590 0
 574 000a 1682      		std Z+6,__zero_reg__
 575 000c 1582      		std Z+5,__zero_reg__
 591:../../../os/nil/src/ch.c ****     nil.next = tp;
 576               		.loc 1 591 0
 577 000e 2091 0000 		lds r18,nil+2
 578 0012 3091 0000 		lds r19,nil+2+1
 579 0016 8217      		cp r24,r18
 580 0018 9307      		cpc r25,r19
 581 001a 00F4      		brsh .L47
 592:../../../os/nil/src/ch.c ****   }
 582               		.loc 1 592 0
 583 001c 9093 0000 		sts nil+2+1,r25
 584 0020 8093 0000 		sts nil+2,r24
 585               	.L47:
 595:../../../os/nil/src/ch.c **** 
 586               		.loc 1 595 0
 587 0024 0895      		ret
 588               		.cfi_endproc
 589               	.LFE107:
 591               		.section	.text.chSchIsPreemptionRequired,"ax",@progbits
 592               	.global	chSchIsPreemptionRequired
 594               	chSchIsPreemptionRequired:
 595               	.LFB108:
 610:../../../os/nil/src/ch.c **** 
 596               		.loc 1 610 0
 597               		.cfi_startproc
 598               	/* prologue: function */
 599               	/* frame size = 0 */
 600               	/* stack size = 0 */
 601               	.L__stack_usage = 0
 612:../../../os/nil/src/ch.c **** }
 602               		.loc 1 612 0
 603 0000 81E0      		ldi r24,lo8(1)
 604 0002 4091 0000 		lds r20,nil
 605 0006 5091 0000 		lds r21,nil+1
 606 000a 2091 0000 		lds r18,nil+2
 607 000e 3091 0000 		lds r19,nil+2+1
 608 0012 4217      		cp r20,r18
 609 0014 5307      		cpc r21,r19
 610 0016 01F0      		breq .L50
 613:../../../os/nil/src/ch.c **** 
 611               		.loc 1 613 0
 612 0018 0895      		ret
 613               	.L50:
 612:../../../os/nil/src/ch.c **** }
 614               		.loc 1 612 0
 615 001a 80E0      		ldi r24,0
 613:../../../os/nil/src/ch.c **** 
 616               		.loc 1 613 0
 617 001c 0895      		ret
 618               		.cfi_endproc
 619               	.LFE108:
 621               		.section	.text.chSchDoPreemption,"ax",@progbits
 622               	.global	chSchDoPreemption
 624               	chSchDoPreemption:
 625               	.LFB109:
 622:../../../os/nil/src/ch.c ****   thread_t *otp = nil.current;
 626               		.loc 1 622 0
 627               		.cfi_startproc
 628               	/* prologue: function */
 629               	/* frame size = 0 */
 630               	/* stack size = 0 */
 631               	.L__stack_usage = 0
 623:../../../os/nil/src/ch.c **** 
 632               		.loc 1 623 0
 633 0000 E0E0      		ldi r30,lo8(nil)
 634 0002 F0E0      		ldi r31,hi8(nil)
 635 0004 6081      		ld r22,Z
 636 0006 7181      		ldd r23,Z+1
 637               	.LVL39:
 625:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 638               		.loc 1 625 0
 639 0008 8281      		ldd r24,Z+2
 640 000a 9381      		ldd r25,Z+3
 641 000c 9183      		std Z+1,r25
 642 000e 8083      		st Z,r24
 629:../../../os/nil/src/ch.c **** }
 643               		.loc 1 629 0
 644 0010 0E94 0000 		call _port_switch
 645               	.LVL40:
 646 0014 0895      		ret
 647               		.cfi_endproc
 648               	.LFE109:
 650               		.section	.text.chSchRescheduleS,"ax",@progbits
 651               	.global	chSchRescheduleS
 653               	chSchRescheduleS:
 654               	.LFB110:
 637:../../../os/nil/src/ch.c **** 
 655               		.loc 1 637 0
 656               		.cfi_startproc
 657               	/* prologue: function */
 658               	/* frame size = 0 */
 659               	/* stack size = 0 */
 660               	.L__stack_usage = 0
 661               		.loc 1 641 0
 662 0000 6091 0000 		lds r22,nil
 663 0004 7091 0000 		lds r23,nil+1
 664 0008 8091 0000 		lds r24,nil+2
 665 000c 9091 0000 		lds r25,nil+2+1
 666 0010 6817      		cp r22,r24
 667 0012 7907      		cpc r23,r25
 668 0014 01F0      		breq .L52
 669               	.LVL41:
 670               	.LBB157:
 671               	.LBB158:
 625:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 672               		.loc 1 625 0
 673 0016 9093 0000 		sts nil+1,r25
 674 001a 8093 0000 		sts nil,r24
 629:../../../os/nil/src/ch.c **** }
 675               		.loc 1 629 0
 676 001e 0E94 0000 		call _port_switch
 677               	.LVL42:
 678               	.L52:
 679 0022 0895      		ret
 680               	.LBE158:
 681               	.LBE157:
 682               		.cfi_endproc
 683               	.LFE110:
 685               		.section	.text.chSchGoSleepTimeoutS,"ax",@progbits
 686               	.global	chSchGoSleepTimeoutS
 688               	chSchGoSleepTimeoutS:
 689               	.LFB111:
 642:../../../os/nil/src/ch.c ****     chSchDoPreemption();
 643:../../../os/nil/src/ch.c ****   }
 644:../../../os/nil/src/ch.c **** }
 645:../../../os/nil/src/ch.c **** 
 646:../../../os/nil/src/ch.c **** /**
 647:../../../os/nil/src/ch.c ****  * @brief   Puts the current thread to sleep into the specified state with
 648:../../../os/nil/src/ch.c ****  *          timeout specification.
 649:../../../os/nil/src/ch.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 650:../../../os/nil/src/ch.c ****  *          explicitly within the specified system time then it is forcibly
 651:../../../os/nil/src/ch.c ****  *          awakened with a @p MSG_TIMEOUT low level message.
 652:../../../os/nil/src/ch.c ****  *
 653:../../../os/nil/src/ch.c ****  * @param[in] newstate  the new thread state or a semaphore pointer
 654:../../../os/nil/src/ch.c ****  * @param[in] timeout   the number of ticks before the operation timeouts.
 655:../../../os/nil/src/ch.c ****  *                      the following special values are allowed:
 656:../../../os/nil/src/ch.c ****  *                      - @a TIME_INFINITE no timeout.
 657:../../../os/nil/src/ch.c ****  *                      .
 658:../../../os/nil/src/ch.c ****  * @return              The wakeup message.
 659:../../../os/nil/src/ch.c ****  * @retval MSG_TIMEOUT  if a timeout occurred.
 660:../../../os/nil/src/ch.c ****  *
 661:../../../os/nil/src/ch.c ****  * @sclass
 662:../../../os/nil/src/ch.c ****  */
 663:../../../os/nil/src/ch.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 690               		.loc 1 663 0
 691               		.cfi_startproc
 692               	.LVL43:
 693 0000 0F93      		push r16
 694               	.LCFI7:
 695               		.cfi_def_cfa_offset 3
 696               		.cfi_offset 16, -2
 697 0002 1F93      		push r17
 698               	.LCFI8:
 699               		.cfi_def_cfa_offset 4
 700               		.cfi_offset 17, -3
 701 0004 CF93      		push r28
 702               	.LCFI9:
 703               		.cfi_def_cfa_offset 5
 704               		.cfi_offset 28, -4
 705 0006 DF93      		push r29
 706               	.LCFI10:
 707               		.cfi_def_cfa_offset 6
 708               		.cfi_offset 29, -5
 709               	/* prologue: function */
 710               	/* frame size = 0 */
 711               	/* stack size = 4 */
 712               	.L__stack_usage = 4
 713 0008 EB01      		movw r28,r22
 664:../../../os/nil/src/ch.c ****   thread_t *ntp, *otp = nil.current;
 714               		.loc 1 664 0
 715 000a 0091 0000 		lds r16,nil
 716 000e 1091 0000 		lds r17,nil+1
 717               	.LVL44:
 665:../../../os/nil/src/ch.c **** 
 666:../../../os/nil/src/ch.c ****   chDbgCheckClassS();
 667:../../../os/nil/src/ch.c **** 
 668:../../../os/nil/src/ch.c ****   chDbgAssert(otp != &nil.threads[CH_CFG_MAX_THREADS],
 669:../../../os/nil/src/ch.c ****                "idle cannot sleep");
 670:../../../os/nil/src/ch.c **** 
 671:../../../os/nil/src/ch.c ****   /* Storing the wait object for the current thread.*/
 672:../../../os/nil/src/ch.c ****   otp->state = newstate;
 718               		.loc 1 672 0
 719 0012 F801      		movw r30,r16
 720 0014 8283      		std Z+2,r24
 673:../../../os/nil/src/ch.c **** 
 674:../../../os/nil/src/ch.c **** #if CH_CFG_ST_TIMEDELTA > 0
 675:../../../os/nil/src/ch.c ****   if (timeout != TIME_INFINITE) {
 721               		.loc 1 675 0
 722 0016 2097      		sbiw r28,0
 723 0018 01F0      		breq .L55
 724               	.LBB159:
 676:../../../os/nil/src/ch.c ****     systime_t abstime;
 677:../../../os/nil/src/ch.c **** 
 678:../../../os/nil/src/ch.c ****     /* TIMEDELTA makes sure to have enough time to reprogram the timer
 679:../../../os/nil/src/ch.c ****        before the free-running timer counter reaches the selected timeout.*/
 680:../../../os/nil/src/ch.c ****     if (timeout < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 725               		.loc 1 680 0
 726 001a 6230      		cpi r22,2
 727 001c 7105      		cpc r23,__zero_reg__
 728 001e 00F0      		brlo .L70
 729               	.L56:
 730               	.LVL45:
 731               	.LBB160:
 732               	.LBB161:
 102:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 103:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 104:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
 105:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Returns the system time.
 106:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 107:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @return              The system time.
 108:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 109:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
 110:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
 111:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 112:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 113:../../../os/hal/osal/rt-nil/chcore_timer.h ****   return stGetCounter();
 733               		.loc 3 113 0
 734 0020 0E94 0000 		call stGetCounter
 735               	.LVL46:
 736               	.LBE161:
 737               	.LBE160:
 681:../../../os/nil/src/ch.c ****       timeout = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 682:../../../os/nil/src/ch.c ****     }
 683:../../../os/nil/src/ch.c **** 
 684:../../../os/nil/src/ch.c ****     /* Absolute time of the timeout event.*/
 685:../../../os/nil/src/ch.c ****     abstime = chTimeAddX(chVTGetSystemTimeX(), timeout);
 738               		.loc 1 685 0
 739 0024 C80F      		add r28,r24
 740 0026 D91F      		adc r29,r25
 741               	.LVL47:
 686:../../../os/nil/src/ch.c **** 
 687:../../../os/nil/src/ch.c ****     if (nil.lasttime == nil.nexttime) {
 742               		.loc 1 687 0
 743 0028 2091 0000 		lds r18,nil+4
 744 002c 3091 0000 		lds r19,nil+4+1
 745 0030 8091 0000 		lds r24,nil+6
 746 0034 9091 0000 		lds r25,nil+6+1
 747 0038 2817      		cp r18,r24
 748 003a 3907      		cpc r19,r25
 749 003c 01F0      		breq .L71
 750               	.LVL48:
 751               	.LBB162:
 752               	.LBB163:
 688:../../../os/nil/src/ch.c ****       /* Special case, first thread asking for a timeout.*/
 689:../../../os/nil/src/ch.c ****       port_timer_start_alarm(abstime);
 690:../../../os/nil/src/ch.c ****       nil.nexttime = abstime;
 691:../../../os/nil/src/ch.c ****     }
 692:../../../os/nil/src/ch.c ****     else {
 693:../../../os/nil/src/ch.c ****       /* Special case, there are already other threads with a timeout
 694:../../../os/nil/src/ch.c ****          activated, evaluating the order.*/
 695:../../../os/nil/src/ch.c ****       if (chTimeIsInRangeX(abstime, nil.lasttime, nil.nexttime)) {
 696:../../../os/nil/src/ch.c ****         port_timer_set_alarm(abstime);
 697:../../../os/nil/src/ch.c ****         nil.nexttime = abstime;
 698:../../../os/nil/src/ch.c ****       }
 699:../../../os/nil/src/ch.c ****     }
 700:../../../os/nil/src/ch.c **** 
 701:../../../os/nil/src/ch.c ****     /* Timeout settings.*/
 702:../../../os/nil/src/ch.c ****     otp->timeout = abstime - nil.lasttime;
 703:../../../os/nil/src/ch.c ****   }
 704:../../../os/nil/src/ch.c **** #else
 705:../../../os/nil/src/ch.c **** 
 706:../../../os/nil/src/ch.c ****   /* Timeout settings.*/
 707:../../../os/nil/src/ch.c ****   otp->timeout = timeout;
 708:../../../os/nil/src/ch.c **** #endif
 709:../../../os/nil/src/ch.c **** 
 710:../../../os/nil/src/ch.c ****   /* Scanning the whole threads array.*/
 711:../../../os/nil/src/ch.c ****   ntp = nil.threads;
 712:../../../os/nil/src/ch.c ****   while (true) {
 713:../../../os/nil/src/ch.c ****     /* Is this thread ready to execute?*/
 714:../../../os/nil/src/ch.c ****     if (NIL_THD_IS_READY(ntp)) {
 715:../../../os/nil/src/ch.c ****       nil.current = nil.next = ntp;
 716:../../../os/nil/src/ch.c ****       if (ntp == &nil.threads[CH_CFG_MAX_THREADS]) {
 717:../../../os/nil/src/ch.c ****         CH_CFG_IDLE_ENTER_HOOK();
 718:../../../os/nil/src/ch.c ****       }
 719:../../../os/nil/src/ch.c ****       port_switch(ntp, otp);
 720:../../../os/nil/src/ch.c ****       return nil.current->u1.msg;
 721:../../../os/nil/src/ch.c ****     }
 722:../../../os/nil/src/ch.c **** 
 723:../../../os/nil/src/ch.c ****     /* Points to the next thread in lowering priority order.*/
 724:../../../os/nil/src/ch.c ****     ntp++;
 725:../../../os/nil/src/ch.c ****     chDbgAssert(ntp <= &nil.threads[CH_CFG_MAX_THREADS],
 726:../../../os/nil/src/ch.c ****                 "pointer out of range");
 727:../../../os/nil/src/ch.c ****   }
 728:../../../os/nil/src/ch.c **** }
 729:../../../os/nil/src/ch.c **** 
 730:../../../os/nil/src/ch.c **** /**
 731:../../../os/nil/src/ch.c ****  * @brief   Checks if the specified time is within the specified time range.
 732:../../../os/nil/src/ch.c ****  * @note    When start==end then the function returns always false because the
 733:../../../os/nil/src/ch.c ****  *          time window has zero size.
 734:../../../os/nil/src/ch.c ****  *
 735:../../../os/nil/src/ch.c ****  * @param[in] time      the time to be verified
 736:../../../os/nil/src/ch.c ****  * @param[in] start     the start of the time window (inclusive)
 737:../../../os/nil/src/ch.c ****  * @param[in] end       the end of the time window (non inclusive)
 738:../../../os/nil/src/ch.c ****  * @retval true         current time within the specified time window.
 739:../../../os/nil/src/ch.c ****  * @retval false        current time not within the specified time window.
 740:../../../os/nil/src/ch.c ****  *
 741:../../../os/nil/src/ch.c ****  * @xclass
 742:../../../os/nil/src/ch.c ****  */
 743:../../../os/nil/src/ch.c **** bool chTimeIsInRangeX(systime_t time, systime_t start, systime_t end) {
 744:../../../os/nil/src/ch.c **** 
 745:../../../os/nil/src/ch.c ****   return (bool)((systime_t)((systime_t)(time) - (systime_t)(start)) <
 753               		.loc 1 745 0
 754 003e AE01      		movw r20,r28
 755 0040 421B      		sub r20,r18
 756 0042 530B      		sbc r21,r19
 757               	.LVL49:
 758               	.LBE163:
 759               	.LBE162:
 695:../../../os/nil/src/ch.c ****         port_timer_set_alarm(abstime);
 760               		.loc 1 695 0
 761 0044 821B      		sub r24,r18
 762 0046 930B      		sbc r25,r19
 763 0048 4817      		cp r20,r24
 764 004a 5907      		cpc r21,r25
 765 004c 00F0      		brlo .L72
 766               	.L58:
 702:../../../os/nil/src/ch.c ****   }
 767               		.loc 1 702 0
 768 004e F801      		movw r30,r16
 769 0050 5683      		std Z+6,r21
 770 0052 4583      		std Z+5,r20
 771               	.LVL50:
 772               	.L55:
 773               	.LBE159:
 714:../../../os/nil/src/ch.c ****       nil.current = nil.next = ntp;
 774               		.loc 1 714 0
 775 0054 8091 0000 		lds r24,nil+10
 711:../../../os/nil/src/ch.c ****   while (true) {
 776               		.loc 1 711 0
 777 0058 E0E0      		ldi r30,lo8(nil+8)
 778 005a F0E0      		ldi r31,hi8(nil+8)
 779               	.LVL51:
 714:../../../os/nil/src/ch.c ****       nil.current = nil.next = ntp;
 780               		.loc 1 714 0
 781 005c 8130      		cpi r24,lo8(1)
 782 005e 01F0      		breq .L60
 783               	.L61:
 724:../../../os/nil/src/ch.c ****     chDbgAssert(ntp <= &nil.threads[CH_CFG_MAX_THREADS],
 784               		.loc 1 724 0
 785 0060 3A96      		adiw r30,10
 786               	.LVL52:
 714:../../../os/nil/src/ch.c ****       nil.current = nil.next = ntp;
 787               		.loc 1 714 0
 788 0062 8281      		ldd r24,Z+2
 789 0064 8130      		cpi r24,lo8(1)
 790 0066 01F4      		brne .L61
 791               	.L60:
 715:../../../os/nil/src/ch.c ****       if (ntp == &nil.threads[CH_CFG_MAX_THREADS]) {
 792               		.loc 1 715 0
 793 0068 F093 0000 		sts nil+2+1,r31
 794 006c E093 0000 		sts nil+2,r30
 795 0070 F093 0000 		sts nil+1,r31
 796 0074 E093 0000 		sts nil,r30
 719:../../../os/nil/src/ch.c ****       return nil.current->u1.msg;
 797               		.loc 1 719 0
 798 0078 B801      		movw r22,r16
 799 007a CF01      		movw r24,r30
 800 007c 0E94 0000 		call _port_switch
 801               	.LVL53:
 720:../../../os/nil/src/ch.c ****     }
 802               		.loc 1 720 0
 803 0080 E091 0000 		lds r30,nil
 804 0084 F091 0000 		lds r31,nil+1
 805 0088 8381      		ldd r24,Z+3
 806 008a 9481      		ldd r25,Z+4
 807               	/* epilogue start */
 728:../../../os/nil/src/ch.c **** 
 808               		.loc 1 728 0
 809 008c DF91      		pop r29
 810 008e CF91      		pop r28
 811 0090 1F91      		pop r17
 812 0092 0F91      		pop r16
 813               	.LVL54:
 814 0094 0895      		ret
 815               	.LVL55:
 816               	.L70:
 817               	.LBB168:
 681:../../../os/nil/src/ch.c ****     }
 818               		.loc 1 681 0
 819 0096 C2E0      		ldi r28,lo8(2)
 820 0098 D0E0      		ldi r29,0
 821 009a 00C0      		rjmp .L56
 822               	.LVL56:
 823               	.L71:
 824               	.LBB164:
 825               	.LBB165:
  79:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 826               		.loc 3 79 0
 827 009c CE01      		movw r24,r28
 828 009e 0E94 0000 		call stStartAlarm
 829               	.LVL57:
 830               	.LBE165:
 831               	.LBE164:
 690:../../../os/nil/src/ch.c ****     }
 832               		.loc 1 690 0
 833 00a2 D093 0000 		sts nil+6+1,r29
 834 00a6 C093 0000 		sts nil+6,r28
 835 00aa 8091 0000 		lds r24,nil+4
 836 00ae 9091 0000 		lds r25,nil+4+1
 837 00b2 AE01      		movw r20,r28
 838 00b4 481B      		sub r20,r24
 839 00b6 590B      		sbc r21,r25
 840 00b8 00C0      		rjmp .L58
 841               	.L72:
 842               	.LVL58:
 843               	.LBB166:
 844               	.LBB167:
 101:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 845               		.loc 3 101 0
 846 00ba CE01      		movw r24,r28
 847 00bc 0E94 0000 		call stSetAlarm
 848               	.LVL59:
 849               	.LBE167:
 850               	.LBE166:
 697:../../../os/nil/src/ch.c ****       }
 851               		.loc 1 697 0
 852 00c0 D093 0000 		sts nil+6+1,r29
 853 00c4 C093 0000 		sts nil+6,r28
 854 00c8 8091 0000 		lds r24,nil+4
 855 00cc 9091 0000 		lds r25,nil+4+1
 856 00d0 AE01      		movw r20,r28
 857 00d2 481B      		sub r20,r24
 858 00d4 590B      		sbc r21,r25
 859 00d6 00C0      		rjmp .L58
 860               	.LBE168:
 861               		.cfi_endproc
 862               	.LFE111:
 864               		.section	.text.chTimeIsInRangeX,"ax",@progbits
 865               	.global	chTimeIsInRangeX
 867               	chTimeIsInRangeX:
 868               	.LFB112:
 743:../../../os/nil/src/ch.c **** 
 869               		.loc 1 743 0
 870               		.cfi_startproc
 871               	.LVL60:
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 0 */
 875               	.L__stack_usage = 0
 876               		.loc 1 745 0
 877 0000 9C01      		movw r18,r24
 878 0002 261B      		sub r18,r22
 879 0004 370B      		sbc r19,r23
 880 0006 461B      		sub r20,r22
 881 0008 570B      		sbc r21,r23
 882               	.LVL61:
 883 000a 81E0      		ldi r24,lo8(1)
 884               	.LVL62:
 885 000c 2417      		cp r18,r20
 886 000e 3507      		cpc r19,r21
 887 0010 00F0      		brlo .L74
 888 0012 80E0      		ldi r24,0
 889               	.L74:
 746:../../../os/nil/src/ch.c ****                 (systime_t)((systime_t)(end) - (systime_t)(start)));
 747:../../../os/nil/src/ch.c **** }
 890               		.loc 1 747 0
 891 0014 0895      		ret
 892               		.cfi_endproc
 893               	.LFE112:
 895               		.section	.text.chThdCreateI,"ax",@progbits
 896               	.global	chThdCreateI
 898               	chThdCreateI:
 899               	.LFB113:
 748:../../../os/nil/src/ch.c **** 
 749:../../../os/nil/src/ch.c **** /**
 750:../../../os/nil/src/ch.c ****  * @brief   Creates a new thread into a static memory area.
 751:../../../os/nil/src/ch.c ****  * @details The new thread is initialized and make ready to execute.
 752:../../../os/nil/src/ch.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 753:../../../os/nil/src/ch.c ****  *          returning from its main function.
 754:../../../os/nil/src/ch.c ****  *
 755:../../../os/nil/src/ch.c ****  * @param[out] tdp      pointer to the thread descriptor structure
 756:../../../os/nil/src/ch.c ****  * @return              The pointer to the @p thread_t structure allocated for
 757:../../../os/nil/src/ch.c ****  *                      the thread.
 758:../../../os/nil/src/ch.c ****  *
 759:../../../os/nil/src/ch.c ****  * @iclass
 760:../../../os/nil/src/ch.c ****  */
 761:../../../os/nil/src/ch.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 900               		.loc 1 761 0
 901               		.cfi_startproc
 902               	.LVL63:
 903 0000 CF93      		push r28
 904               	.LCFI11:
 905               		.cfi_def_cfa_offset 3
 906               		.cfi_offset 28, -2
 907 0002 DF93      		push r29
 908               	.LCFI12:
 909               		.cfi_def_cfa_offset 4
 910               		.cfi_offset 29, -3
 911               	/* prologue: function */
 912               	/* frame size = 0 */
 913               	/* stack size = 2 */
 914               	.L__stack_usage = 2
 915 0004 DC01      		movw r26,r24
 762:../../../os/nil/src/ch.c ****   thread_t *tp;
 763:../../../os/nil/src/ch.c **** 
 764:../../../os/nil/src/ch.c ****   chDbgCheck((tdp->prio < (tprio_t)CH_CFG_MAX_THREADS) &&
 765:../../../os/nil/src/ch.c ****              (tdp->wbase != NULL) &&
 766:../../../os/nil/src/ch.c ****              MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 767:../../../os/nil/src/ch.c ****              (tdp->wend > tdp->wbase) &&
 768:../../../os/nil/src/ch.c ****              MEM_IS_ALIGNED(tdp->wbase, PORT_STACK_ALIGN) &&
 769:../../../os/nil/src/ch.c ****              (tdp->funcp != NULL));
 770:../../../os/nil/src/ch.c **** 
 771:../../../os/nil/src/ch.c ****   chDbgCheckClassI();
 772:../../../os/nil/src/ch.c **** 
 773:../../../os/nil/src/ch.c ****   /* Pointer to the thread slot to be used.*/
 774:../../../os/nil/src/ch.c ****   tp = &nil.threads[tdp->prio];
 916               		.loc 1 774 0
 917 0006 1696      		adiw r26,6
 918 0008 2C91      		ld r18,X
 919 000a 1697      		sbiw r26,6
 920 000c 30E0      		ldi r19,0
 921 000e F901      		movw r30,r18
 922 0010 EE0F      		lsl r30
 923 0012 FF1F      		rol r31
 924               	.LVL64:
 925 0014 C901      		movw r24,r18
 926 0016 880F      		lsl r24
 927 0018 991F      		rol r25
 928 001a 880F      		lsl r24
 929 001c 991F      		rol r25
 930 001e 880F      		lsl r24
 931 0020 991F      		rol r25
 932 0022 E80F      		add r30,r24
 933 0024 F91F      		adc r31,r25
 934 0026 CF01      		movw r24,r30
 935 0028 8050      		subi r24,lo8(-(nil+8))
 936 002a 9040      		sbci r25,hi8(-(nil+8))
 937               	.LVL65:
 775:../../../os/nil/src/ch.c ****   chDbgAssert(NIL_THD_IS_WTSTART(tp) || NIL_THD_IS_FINAL(tp),
 776:../../../os/nil/src/ch.c ****               "priority slot taken");
 777:../../../os/nil/src/ch.c **** 
 778:../../../os/nil/src/ch.c **** #if CH_CFG_USE_EVENTS == TRUE
 779:../../../os/nil/src/ch.c ****   tp->epmask = (eventmask_t)0;
 938               		.loc 1 779 0
 939 002c E050      		subi r30,lo8(-(nil))
 940 002e F040      		sbci r31,hi8(-(nil))
 941 0030 1786      		std Z+15,__zero_reg__
 780:../../../os/nil/src/ch.c **** #endif
 781:../../../os/nil/src/ch.c **** #if CH_DBG_ENABLE_STACK_CHECK == TRUE
 782:../../../os/nil/src/ch.c ****   tp->wabase = (stkalign_t *)tdp->wbase;
 783:../../../os/nil/src/ch.c **** #endif
 784:../../../os/nil/src/ch.c **** 
 785:../../../os/nil/src/ch.c ****   /* Port dependent thread initialization.*/
 786:../../../os/nil/src/ch.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tdp->wend, tdp->funcp, tdp->arg);
 942               		.loc 1 786 0
 943 0032 1496      		adiw r26,4
 944 0034 CD91      		ld r28,X+
 945 0036 DC91      		ld r29,X
 946 0038 1597      		sbiw r26,4+1
 947 003a 6597      		sbiw r28,21
 948 003c D187      		std Z+9,r29
 949 003e C087      		std Z+8,r28
 950 0040 1796      		adiw r26,7
 951 0042 4C91      		ld r20,X
 952 0044 1797      		sbiw r26,7
 953 0046 4A8B      		std Y+18,r20
 954 0048 C085      		ldd r28,Z+8
 955 004a D185      		ldd r29,Z+9
 956 004c 1896      		adiw r26,8
 957 004e 4C91      		ld r20,X
 958 0050 1897      		sbiw r26,8
 959 0052 498B      		std Y+17,r20
 960 0054 C085      		ldd r28,Z+8
 961 0056 D185      		ldd r29,Z+9
 962 0058 1996      		adiw r26,9
 963 005a 4C91      		ld r20,X
 964 005c 1997      		sbiw r26,9
 965 005e 488B      		std Y+16,r20
 966 0060 C085      		ldd r28,Z+8
 967 0062 D185      		ldd r29,Z+9
 968 0064 1A96      		adiw r26,10
 969 0066 4C91      		ld r20,X
 970 0068 4F87      		std Y+15,r20
 971 006a A085      		ldd r26,Z+8
 972 006c B185      		ldd r27,Z+9
 973               	.LVL66:
 974 006e 40E0      		ldi r20,lo8(gs(_port_thread_start))
 975 0070 50E0      		ldi r21,hi8(gs(_port_thread_start))
 976 0072 5396      		adiw r26,19
 977 0074 5C93      		st X,r21
 978 0076 A085      		ldd r26,Z+8
 979 0078 B185      		ldd r27,Z+9
 980 007a 5496      		adiw r26,20
 981 007c 4C93      		st X,r20
 982               	.LVL67:
 983               	.LBB169:
 984               	.LBB170:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 985               		.loc 1 588 0
 986 007e 1486      		std Z+12,__zero_reg__
 987 0080 1386      		std Z+11,__zero_reg__
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 988               		.loc 1 589 0
 989 0082 2F5F      		subi r18,-1
 990 0084 3F4F      		sbci r19,-1
 991 0086 D901      		movw r26,r18
 992 0088 AA0F      		lsl r26
 993 008a BB1F      		rol r27
 994 008c 220F      		lsl r18
 995 008e 331F      		rol r19
 996 0090 220F      		lsl r18
 997 0092 331F      		rol r19
 998 0094 220F      		lsl r18
 999 0096 331F      		rol r19
 1000 0098 A20F      		add r26,r18
 1001 009a B31F      		adc r27,r19
 1002 009c A050      		subi r26,lo8(-(nil))
 1003 009e B040      		sbci r27,hi8(-(nil))
 1004 00a0 21E0      		ldi r18,lo8(1)
 1005 00a2 2C93      		st X,r18
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 1006               		.loc 1 590 0
 1007 00a4 1686      		std Z+14,__zero_reg__
 1008 00a6 1586      		std Z+13,__zero_reg__
 591:../../../os/nil/src/ch.c ****     nil.next = tp;
 1009               		.loc 1 591 0
 1010 00a8 2091 0000 		lds r18,nil+2
 1011 00ac 3091 0000 		lds r19,nil+2+1
 1012 00b0 8217      		cp r24,r18
 1013 00b2 9307      		cpc r25,r19
 1014 00b4 00F4      		brsh .L76
 592:../../../os/nil/src/ch.c ****   }
 1015               		.loc 1 592 0
 1016 00b6 9093 0000 		sts nil+2+1,r25
 1017 00ba 8093 0000 		sts nil+2,r24
 1018               	.L76:
 1019               	.LVL68:
 1020               	/* epilogue start */
 1021               	.LBE170:
 1022               	.LBE169:
 787:../../../os/nil/src/ch.c **** 
 788:../../../os/nil/src/ch.c ****   /* Initialization hook.*/
 789:../../../os/nil/src/ch.c ****   CH_CFG_THREAD_EXT_INIT_HOOK(tp);
 790:../../../os/nil/src/ch.c **** 
 791:../../../os/nil/src/ch.c ****   /* Readying up thread.*/
 792:../../../os/nil/src/ch.c ****   return chSchReadyI(tp, MSG_OK);
 793:../../../os/nil/src/ch.c **** }
 1023               		.loc 1 793 0
 1024 00be DF91      		pop r29
 1025 00c0 CF91      		pop r28
 1026 00c2 0895      		ret
 1027               		.cfi_endproc
 1028               	.LFE113:
 1030               		.section	.text.chSysInit,"ax",@progbits
 1031               	.global	chSysInit
 1033               	chSysInit:
 1034               	.LFB100:
 275:../../../os/nil/src/ch.c ****   const thread_descriptor_t *tdp;
 1035               		.loc 1 275 0
 1036               		.cfi_startproc
 1037 0000 CF93      		push r28
 1038               	.LCFI13:
 1039               		.cfi_def_cfa_offset 3
 1040               		.cfi_offset 28, -2
 1041 0002 DF93      		push r29
 1042               	.LCFI14:
 1043               		.cfi_def_cfa_offset 4
 1044               		.cfi_offset 29, -3
 1045               	/* prologue: function */
 1046               	/* frame size = 0 */
 1047               	/* stack size = 2 */
 1048               	.L__stack_usage = 2
 1049               	.LBB171:
 1050               	.LBB172:
 1051               		.file 4 "../../../os/oslib/include/chlib.h"
   1:../../../os/oslib/include/chlib.h **** /*
   2:../../../os/oslib/include/chlib.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/include/chlib.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/include/chlib.h **** 
   5:../../../os/oslib/include/chlib.h ****     This file is part of ChibiOS.
   6:../../../os/oslib/include/chlib.h **** 
   7:../../../os/oslib/include/chlib.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/include/chlib.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/include/chlib.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/include/chlib.h **** 
  11:../../../os/oslib/include/chlib.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/include/chlib.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/include/chlib.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/include/chlib.h ****     GNU General Public License for more details.
  15:../../../os/oslib/include/chlib.h **** 
  16:../../../os/oslib/include/chlib.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/include/chlib.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/include/chlib.h **** */
  19:../../../os/oslib/include/chlib.h **** 
  20:../../../os/oslib/include/chlib.h **** /**
  21:../../../os/oslib/include/chlib.h ****  * @file    oslib/include/chlib.h
  22:../../../os/oslib/include/chlib.h ****  * @brief   ChibiOS/LIB main include file.
  23:../../../os/oslib/include/chlib.h ****  * @details This header includes all the required library headers. This file
  24:../../../os/oslib/include/chlib.h ****  *          is meant do be included by @p ch.h not directly by user.
  25:../../../os/oslib/include/chlib.h ****  *
  26:../../../os/oslib/include/chlib.h ****  * @addtogroup oslib_info
  27:../../../os/oslib/include/chlib.h ****  * @details OS Library related info.
  28:../../../os/oslib/include/chlib.h ****  * @{
  29:../../../os/oslib/include/chlib.h ****  */
  30:../../../os/oslib/include/chlib.h **** 
  31:../../../os/oslib/include/chlib.h **** #ifndef CHLIB_H
  32:../../../os/oslib/include/chlib.h **** #define CHLIB_H
  33:../../../os/oslib/include/chlib.h **** 
  34:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
  35:../../../os/oslib/include/chlib.h **** /* Module constants.                                                         */
  36:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
  37:../../../os/oslib/include/chlib.h **** 
  38:../../../os/oslib/include/chlib.h **** /**
  39:../../../os/oslib/include/chlib.h ****  * @brief   ChibiOS/LIB identification macro.
  40:../../../os/oslib/include/chlib.h ****  */
  41:../../../os/oslib/include/chlib.h **** #define __CHIBIOS_OSLIB__
  42:../../../os/oslib/include/chlib.h **** 
  43:../../../os/oslib/include/chlib.h **** /**
  44:../../../os/oslib/include/chlib.h ****  * @brief   Stable release flag.
  45:../../../os/oslib/include/chlib.h ****  */
  46:../../../os/oslib/include/chlib.h **** #define CH_OSLIB_STABLE         1
  47:../../../os/oslib/include/chlib.h **** 
  48:../../../os/oslib/include/chlib.h **** /**
  49:../../../os/oslib/include/chlib.h ****  * @name    ChibiOS/LIB version identification
  50:../../../os/oslib/include/chlib.h ****  * @{
  51:../../../os/oslib/include/chlib.h ****  */
  52:../../../os/oslib/include/chlib.h **** /**
  53:../../../os/oslib/include/chlib.h ****  * @brief   OS Library version string.
  54:../../../os/oslib/include/chlib.h ****  */
  55:../../../os/oslib/include/chlib.h **** #define CH_OSLIB_VERSION        "1.3.1"
  56:../../../os/oslib/include/chlib.h **** 
  57:../../../os/oslib/include/chlib.h **** /**
  58:../../../os/oslib/include/chlib.h ****  * @brief   OS Library version major number.
  59:../../../os/oslib/include/chlib.h ****  */
  60:../../../os/oslib/include/chlib.h **** #define CH_OSLIB_MAJOR          1
  61:../../../os/oslib/include/chlib.h **** 
  62:../../../os/oslib/include/chlib.h **** /**
  63:../../../os/oslib/include/chlib.h ****  * @brief   OS Library version minor number.
  64:../../../os/oslib/include/chlib.h ****  */
  65:../../../os/oslib/include/chlib.h **** #define CH_OSLIB_MINOR          3
  66:../../../os/oslib/include/chlib.h **** 
  67:../../../os/oslib/include/chlib.h **** /**
  68:../../../os/oslib/include/chlib.h ****  * @brief   OS Library version patch number.
  69:../../../os/oslib/include/chlib.h ****  */
  70:../../../os/oslib/include/chlib.h **** #define CH_OSLIB_PATCH          1
  71:../../../os/oslib/include/chlib.h **** /** @} */
  72:../../../os/oslib/include/chlib.h **** 
  73:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
  74:../../../os/oslib/include/chlib.h **** /* Module pre-compile time settings.                                         */
  75:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
  76:../../../os/oslib/include/chlib.h **** 
  77:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
  78:../../../os/oslib/include/chlib.h **** /* Derived constants and error checks.                                       */
  79:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
  80:../../../os/oslib/include/chlib.h **** 
  81:../../../os/oslib/include/chlib.h **** /* Host OS checks.*/
  82:../../../os/oslib/include/chlib.h **** #if !defined(__CHIBIOS_RT__) && !defined(__CHIBIOS_NIL__)
  83:../../../os/oslib/include/chlib.h **** #error "OS check failed, must be included after ch.h"
  84:../../../os/oslib/include/chlib.h **** #endif
  85:../../../os/oslib/include/chlib.h **** 
  86:../../../os/oslib/include/chlib.h **** /* Configuration file checks.*/
  87:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_MAILBOXES)
  88:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_MAILBOXES not defined in chconf.h"
  89:../../../os/oslib/include/chlib.h **** #endif
  90:../../../os/oslib/include/chlib.h **** 
  91:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_MEMCORE)
  92:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_MEMCORE not defined in chconf.h"
  93:../../../os/oslib/include/chlib.h **** #endif
  94:../../../os/oslib/include/chlib.h **** 
  95:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_HEAP)
  96:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_HEAP not defined in chconf.h"
  97:../../../os/oslib/include/chlib.h **** #endif
  98:../../../os/oslib/include/chlib.h **** 
  99:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_MEMPOOLS)
 100:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_MEMPOOLS not defined in chconf.h"
 101:../../../os/oslib/include/chlib.h **** #endif
 102:../../../os/oslib/include/chlib.h **** 
 103:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_OBJ_FIFOS)
 104:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_OBJ_FIFOS not defined in chconf.h"
 105:../../../os/oslib/include/chlib.h **** #endif
 106:../../../os/oslib/include/chlib.h **** 
 107:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_PIPES)
 108:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_PIPES not defined in chconf.h"
 109:../../../os/oslib/include/chlib.h **** #endif
 110:../../../os/oslib/include/chlib.h **** 
 111:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_OBJ_CACHES)
 112:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_OBJ_CACHES not defined in chconf.h"
 113:../../../os/oslib/include/chlib.h **** #endif
 114:../../../os/oslib/include/chlib.h **** 
 115:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_DELEGATES)
 116:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_DELEGATES not defined in chconf.h"
 117:../../../os/oslib/include/chlib.h **** #endif
 118:../../../os/oslib/include/chlib.h **** 
 119:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_JOBS)
 120:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_JOBS not defined in chconf.h"
 121:../../../os/oslib/include/chlib.h **** #endif
 122:../../../os/oslib/include/chlib.h **** 
 123:../../../os/oslib/include/chlib.h **** /* Objects factory options checks.*/
 124:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_USE_FACTORY)
 125:../../../os/oslib/include/chlib.h **** #error "CH_CFG_USE_FACTORY not defined in chconf.h"
 126:../../../os/oslib/include/chlib.h **** #endif
 127:../../../os/oslib/include/chlib.h **** 
 128:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_MAX_NAMES_LENGTH)
 129:../../../os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_MAX_NAMES_LENGTH not defined in chconf.h"
 130:../../../os/oslib/include/chlib.h **** #endif
 131:../../../os/oslib/include/chlib.h **** 
 132:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_OBJECTS_REGISTRY)
 133:../../../os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_OBJECTS_REGISTRY not defined in chconf.h"
 134:../../../os/oslib/include/chlib.h **** #endif
 135:../../../os/oslib/include/chlib.h **** 
 136:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_GENERIC_BUFFERS)
 137:../../../os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_GENERIC_BUFFERS not defined in chconf.h"
 138:../../../os/oslib/include/chlib.h **** #endif
 139:../../../os/oslib/include/chlib.h **** 
 140:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_SEMAPHORES)
 141:../../../os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_SEMAPHORES not defined in chconf.h"
 142:../../../os/oslib/include/chlib.h **** #endif
 143:../../../os/oslib/include/chlib.h **** 
 144:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_MAILBOXES)
 145:../../../os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_MAILBOXES not defined in chconf.h"
 146:../../../os/oslib/include/chlib.h **** #endif
 147:../../../os/oslib/include/chlib.h **** 
 148:../../../os/oslib/include/chlib.h **** #if !defined(CH_CFG_FACTORY_OBJ_FIFOS)
 149:../../../os/oslib/include/chlib.h **** #error "CH_CFG_FACTORY_OBJ_FIFOS not defined in chconf.h"
 150:../../../os/oslib/include/chlib.h **** #endif
 151:../../../os/oslib/include/chlib.h **** 
 152:../../../os/oslib/include/chlib.h **** /* License checks.*/
 153:../../../os/oslib/include/chlib.h **** #if !defined(CH_CUSTOMER_LIC_OSLIB) || !defined(CH_LICENSE_FEATURES)
 154:../../../os/oslib/include/chlib.h **** #error "malformed chlicense.h"
 155:../../../os/oslib/include/chlib.h **** #endif
 156:../../../os/oslib/include/chlib.h **** 
 157:../../../os/oslib/include/chlib.h **** #if (CH_LICENSE_FEATURES != CH_FEATURES_FULL) &&                            \
 158:../../../os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES != CH_FEATURES_INTERMEDIATE) &&                    \
 159:../../../os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES != CH_FEATURES_BASIC)
 160:../../../os/oslib/include/chlib.h **** #error "invalid CH_LICENSE_FEATURES setting"
 161:../../../os/oslib/include/chlib.h **** #endif
 162:../../../os/oslib/include/chlib.h **** 
 163:../../../os/oslib/include/chlib.h **** /* Restrictions in basic and intermediate modes.*/
 164:../../../os/oslib/include/chlib.h **** #if (CH_CUSTOMER_LIC_OSLIB == FALSE) ||                                     \
 165:../../../os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES == CH_FEATURES_INTERMEDIATE) ||                    \
 166:../../../os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES == CH_FEATURES_BASIC)
 167:../../../os/oslib/include/chlib.h **** 
 168:../../../os/oslib/include/chlib.h **** /* Restricted subsystems.*/
 169:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_FACTORY
 170:../../../os/oslib/include/chlib.h **** 
 171:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_FACTORY                  FALSE
 172:../../../os/oslib/include/chlib.h **** 
 173:../../../os/oslib/include/chlib.h **** #endif /* (CH_CUSTOMER_LIC_OSLIB == FALSE) ||
 174:../../../os/oslib/include/chlib.h ****           (CH_LICENSE_FEATURES == CH_FEATURES_INTERMEDIATE) ||
 175:../../../os/oslib/include/chlib.h ****           (CH_LICENSE_FEATURES == CH_FEATURES_BASIC) */
 176:../../../os/oslib/include/chlib.h **** 
 177:../../../os/oslib/include/chlib.h **** /* Restrictions in basic mode.*/
 178:../../../os/oslib/include/chlib.h **** #if (CH_CUSTOMER_LIC_OSLIB == FALSE) ||                                     \
 179:../../../os/oslib/include/chlib.h ****     (CH_LICENSE_FEATURES == CH_FEATURES_BASIC)
 180:../../../os/oslib/include/chlib.h **** 
 181:../../../os/oslib/include/chlib.h **** /* Restricted subsystems.*/
 182:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_HEAP
 183:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_MEMPOOLS
 184:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_OBJ_FIFOS
 185:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_PIPES
 186:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_OBJ_CACHES
 187:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_DELEGATES
 188:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_JOBS
 189:../../../os/oslib/include/chlib.h **** 
 190:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_HEAP                     FALSE
 191:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_MEMPOOLS                 FALSE
 192:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_OBJ_FIFOS                FALSE
 193:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_PIPES                    FALSE
 194:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_OBJ_CACHES               FALSE
 195:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_DELEGATES                FALSE
 196:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_JOBS                     FALSE
 197:../../../os/oslib/include/chlib.h **** 
 198:../../../os/oslib/include/chlib.h **** #endif /* (CH_CUSTOMER_LIC_OSLIB == FALSE) ||
 199:../../../os/oslib/include/chlib.h ****           (CH_LICENSE_FEATURES == CH_FEATURES_BASIC) */
 200:../../../os/oslib/include/chlib.h **** 
 201:../../../os/oslib/include/chlib.h **** /* Restrictions in unlicensed mode.*/
 202:../../../os/oslib/include/chlib.h **** #if (CH_CUSTOMER_LIC_OSLIB == FALSE)
 203:../../../os/oslib/include/chlib.h **** 
 204:../../../os/oslib/include/chlib.h **** /* Restricted subsystems.*/
 205:../../../os/oslib/include/chlib.h **** #undef CH_CFG_USE_MAILBOXES
 206:../../../os/oslib/include/chlib.h **** 
 207:../../../os/oslib/include/chlib.h **** #define CH_CFG_USE_MAILBOXES                FALSE
 208:../../../os/oslib/include/chlib.h **** 
 209:../../../os/oslib/include/chlib.h **** #endif /* CH_CUSTOMER_LIC_OSLIB == FALSE */
 210:../../../os/oslib/include/chlib.h **** 
 211:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 212:../../../os/oslib/include/chlib.h **** /* Module data structures and types.                                         */
 213:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 214:../../../os/oslib/include/chlib.h **** 
 215:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 216:../../../os/oslib/include/chlib.h **** /* Module macros.                                                            */
 217:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 218:../../../os/oslib/include/chlib.h **** 
 219:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 220:../../../os/oslib/include/chlib.h **** /* External declarations.                                                    */
 221:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 222:../../../os/oslib/include/chlib.h **** 
 223:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 224:../../../os/oslib/include/chlib.h **** /* Late inclusions.                                                          */
 225:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 226:../../../os/oslib/include/chlib.h **** 
 227:../../../os/oslib/include/chlib.h **** /* OS Library headers.*/
 228:../../../os/oslib/include/chlib.h **** #include "chbsem.h"
 229:../../../os/oslib/include/chlib.h **** #include "chmboxes.h"
 230:../../../os/oslib/include/chlib.h **** #include "chmemcore.h"
 231:../../../os/oslib/include/chlib.h **** #include "chmemheaps.h"
 232:../../../os/oslib/include/chlib.h **** #include "chmempools.h"
 233:../../../os/oslib/include/chlib.h **** #include "chobjfifos.h"
 234:../../../os/oslib/include/chlib.h **** #include "chpipes.h"
 235:../../../os/oslib/include/chlib.h **** #include "chobjcaches.h"
 236:../../../os/oslib/include/chlib.h **** #include "chdelegates.h"
 237:../../../os/oslib/include/chlib.h **** #include "chjobs.h"
 238:../../../os/oslib/include/chlib.h **** #include "chfactory.h"
 239:../../../os/oslib/include/chlib.h **** 
 240:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 241:../../../os/oslib/include/chlib.h **** /* Module inline functions.                                                  */
 242:../../../os/oslib/include/chlib.h **** /*===========================================================================*/
 243:../../../os/oslib/include/chlib.h **** 
 244:../../../os/oslib/include/chlib.h **** /**
 245:../../../os/oslib/include/chlib.h ****  * @brief   Initialization of all library modules.
 246:../../../os/oslib/include/chlib.h ****  *
 247:../../../os/oslib/include/chlib.h ****  * @notapi
 248:../../../os/oslib/include/chlib.h ****  */
 249:../../../os/oslib/include/chlib.h **** static inline void __oslib_init(void) {
 250:../../../os/oslib/include/chlib.h **** 
 251:../../../os/oslib/include/chlib.h **** #if CH_CFG_USE_MEMCORE == TRUE
 252:../../../os/oslib/include/chlib.h ****   __core_init();
 1052               		.loc 4 252 0
 1053 0004 0E94 0000 		call __core_init
 1054               	.LVL69:
 253:../../../os/oslib/include/chlib.h **** #endif
 254:../../../os/oslib/include/chlib.h **** #if CH_CFG_USE_HEAP == TRUE
 255:../../../os/oslib/include/chlib.h ****   __heap_init();
 1055               		.loc 4 255 0
 1056 0008 0E94 0000 		call __heap_init
 1057               	.LVL70:
 256:../../../os/oslib/include/chlib.h **** #endif
 257:../../../os/oslib/include/chlib.h **** #if CH_CFG_USE_FACTORY == TRUE
 258:../../../os/oslib/include/chlib.h ****   __factory_init();
 1058               		.loc 4 258 0
 1059 000c 0E94 0000 		call __factory_init
 1060               	.LVL71:
 1061               	.LBE172:
 1062               	.LBE171:
 282:../../../os/nil/src/ch.c **** 
 1063               		.loc 1 282 0
 1064 0010 81E0      		ldi r24,lo8(1)
 1065 0012 8093 0000 		sts __avr_in_isr,r24
 288:../../../os/nil/src/ch.c ****   nil.current->state = NIL_STATE_READY;
 1066               		.loc 1 288 0
 1067 0016 20E0      		ldi r18,lo8(nil+48)
 1068 0018 30E0      		ldi r19,hi8(nil+48)
 1069 001a 3093 0000 		sts nil+1,r19
 1070 001e 2093 0000 		sts nil,r18
 1071 0022 3093 0000 		sts nil+2+1,r19
 1072 0026 2093 0000 		sts nil+2,r18
 289:../../../os/nil/src/ch.c **** 
 1073               		.loc 1 289 0
 1074 002a 8093 0000 		sts nil+50,r24
 1075               	.LBB173:
 1076               	.LBB174:
 472:../../../os/common/ports/AVR/chcore.h **** }
 473:../../../os/common/ports/AVR/chcore.h **** 
 474:../../../os/common/ports/AVR/chcore.h **** /**
 475:../../../os/common/ports/AVR/chcore.h ****  * @brief   Disables the interrupt sources below kernel-level priority.
 476:../../../os/common/ports/AVR/chcore.h ****  * @note    Interrupt sources above kernel level remains enabled.
 477:../../../os/common/ports/AVR/chcore.h ****  */
 478:../../../os/common/ports/AVR/chcore.h **** static inline void port_suspend(void) {
 479:../../../os/common/ports/AVR/chcore.h **** 
 480:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 1077               		.loc 2 480 0
 1078               	/* #APP */
 1079               	 ;  480 "../../../os/common/ports/AVR/chcore.h" 1
 1080 002e F894      		cli
 1081               	 ;  0 "" 2
 1082               	.LVL72:
 1083               	/* #NOAPP */
 1084               	.LBE174:
 1085               	.LBE173:
 306:../../../os/nil/src/ch.c ****   do {
 1086               		.loc 1 306 0
 1087 0030 C0E0      		ldi r28,lo8(nil_thd_configs)
 1088 0032 D0E0      		ldi r29,hi8(nil_thd_configs)
 1089               	.LVL73:
 1090               	.L78:
 308:../../../os/nil/src/ch.c ****     tdp++;
 1091               		.loc 1 308 0 discriminator 1
 1092 0034 CE01      		movw r24,r28
 1093 0036 0E94 0000 		call chThdCreateI
 1094               	.LVL74:
 309:../../../os/nil/src/ch.c ****   } while (tdp->funcp != NULL);
 1095               		.loc 1 309 0 discriminator 1
 1096 003a 2B96      		adiw r28,11
 1097               	.LVL75:
 310:../../../os/nil/src/ch.c **** #endif
 1098               		.loc 1 310 0 discriminator 1
 1099 003c 8F81      		ldd r24,Y+7
 1100 003e 9885      		ldd r25,Y+8
 1101 0040 892B      		or r24,r25
 1102 0042 01F4      		brne .L78
 1103               	.LBB175:
 1104               	.LBB176:
 641:../../../os/nil/src/ch.c ****     chSchDoPreemption();
 1105               		.loc 1 641 0
 1106 0044 6091 0000 		lds r22,nil
 1107 0048 7091 0000 		lds r23,nil+1
 1108 004c 8091 0000 		lds r24,nil+2
 1109 0050 9091 0000 		lds r25,nil+2+1
 1110 0054 8617      		cp r24,r22
 1111 0056 9707      		cpc r25,r23
 1112 0058 01F0      		breq .L79
 1113               	.LVL76:
 1114               	.LBB177:
 1115               	.LBB178:
 625:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 1116               		.loc 1 625 0
 1117 005a 9093 0000 		sts nil+1,r25
 1118 005e 8093 0000 		sts nil,r24
 629:../../../os/nil/src/ch.c **** }
 1119               		.loc 1 629 0
 1120 0062 0E94 0000 		call _port_switch
 1121               	.LVL77:
 1122               	.L79:
 1123               	.LBE178:
 1124               	.LBE177:
 1125               	.LBE176:
 1126               	.LBE175:
 1127               	.LBB179:
 1128               	.LBB180:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1129               		.loc 2 440 0
 1130               	/* #APP */
 1131               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1132 0066 7894      		sei
 1133               	 ;  0 "" 2
 1134               	/* epilogue start */
 1135               	/* #NOAPP */
 1136               	.LBE180:
 1137               	.LBE179:
 316:../../../os/nil/src/ch.c **** 
 1138               		.loc 1 316 0
 1139 0068 DF91      		pop r29
 1140 006a CF91      		pop r28
 1141               	.LVL78:
 1142 006c 0895      		ret
 1143               		.cfi_endproc
 1144               	.LFE100:
 1146               		.section	.text.chThdCreate,"ax",@progbits
 1147               	.global	chThdCreate
 1149               	chThdCreate:
 1150               	.LFB114:
 794:../../../os/nil/src/ch.c **** 
 795:../../../os/nil/src/ch.c **** /**
 796:../../../os/nil/src/ch.c ****  * @brief   Creates a new thread into a static memory area.
 797:../../../os/nil/src/ch.c ****  * @details The new thread is initialized and make ready to execute.
 798:../../../os/nil/src/ch.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 799:../../../os/nil/src/ch.c ****  *          returning from its main function.
 800:../../../os/nil/src/ch.c ****  *
 801:../../../os/nil/src/ch.c ****  * @param[out] tdp      pointer to the thread descriptor structure
 802:../../../os/nil/src/ch.c ****  * @return              The pointer to the @p thread_t structure allocated for
 803:../../../os/nil/src/ch.c ****  *                      the thread.
 804:../../../os/nil/src/ch.c ****  *
 805:../../../os/nil/src/ch.c ****  * @api
 806:../../../os/nil/src/ch.c ****  */
 807:../../../os/nil/src/ch.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 1151               		.loc 1 807 0
 1152               		.cfi_startproc
 1153               	.LVL79:
 1154 0000 CF93      		push r28
 1155               	.LCFI15:
 1156               		.cfi_def_cfa_offset 3
 1157               		.cfi_offset 28, -2
 1158 0002 DF93      		push r29
 1159               	.LCFI16:
 1160               		.cfi_def_cfa_offset 4
 1161               		.cfi_offset 29, -3
 1162               	/* prologue: function */
 1163               	/* frame size = 0 */
 1164               	/* stack size = 2 */
 1165               	.L__stack_usage = 2
 1166               	.LBB181:
 1167               	.LBB182:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1168               		.loc 2 430 0
 1169               	/* #APP */
 1170               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1171 0004 F894      		cli
 1172               	 ;  0 "" 2
 1173               	/* #NOAPP */
 1174               	.LBE182:
 1175               	.LBE181:
 808:../../../os/nil/src/ch.c ****   thread_t *tp;
 809:../../../os/nil/src/ch.c **** 
 810:../../../os/nil/src/ch.c ****   chSysLock();
 811:../../../os/nil/src/ch.c ****   tp = chThdCreateI(tdp);
 1176               		.loc 1 811 0
 1177 0006 0E94 0000 		call chThdCreateI
 1178               	.LVL80:
 1179 000a EC01      		movw r28,r24
 1180               	.LVL81:
 1181               	.LBB183:
 1182               	.LBB184:
 641:../../../os/nil/src/ch.c ****     chSchDoPreemption();
 1183               		.loc 1 641 0
 1184 000c 6091 0000 		lds r22,nil
 1185 0010 7091 0000 		lds r23,nil+1
 1186 0014 8091 0000 		lds r24,nil+2
 1187 0018 9091 0000 		lds r25,nil+2+1
 1188               	.LVL82:
 1189 001c 6817      		cp r22,r24
 1190 001e 7907      		cpc r23,r25
 1191 0020 01F0      		breq .L82
 1192               	.LVL83:
 1193               	.LBB185:
 1194               	.LBB186:
 625:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 1195               		.loc 1 625 0
 1196 0022 9093 0000 		sts nil+1,r25
 1197 0026 8093 0000 		sts nil,r24
 629:../../../os/nil/src/ch.c **** }
 1198               		.loc 1 629 0
 1199 002a 0E94 0000 		call _port_switch
 1200               	.LVL84:
 1201               	.L82:
 1202               	.LBE186:
 1203               	.LBE185:
 1204               	.LBE184:
 1205               	.LBE183:
 1206               	.LBB187:
 1207               	.LBB188:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1208               		.loc 2 440 0
 1209               	/* #APP */
 1210               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1211 002e 7894      		sei
 1212               	 ;  0 "" 2
 1213               	/* #NOAPP */
 1214               	.LBE188:
 1215               	.LBE187:
 812:../../../os/nil/src/ch.c ****   chSchRescheduleS();
 813:../../../os/nil/src/ch.c ****   chSysUnlock();
 814:../../../os/nil/src/ch.c **** 
 815:../../../os/nil/src/ch.c ****   return tp;
 816:../../../os/nil/src/ch.c **** }
 1216               		.loc 1 816 0
 1217 0030 CE01      		movw r24,r28
 1218               	/* epilogue start */
 1219 0032 DF91      		pop r29
 1220 0034 CF91      		pop r28
 1221               	.LVL85:
 1222 0036 0895      		ret
 1223               		.cfi_endproc
 1224               	.LFE114:
 1226               		.section	.text.chThdExit,"ax",@progbits
 1227               	.global	chThdExit
 1229               	chThdExit:
 1230               	.LFB115:
 817:../../../os/nil/src/ch.c **** 
 818:../../../os/nil/src/ch.c **** /**
 819:../../../os/nil/src/ch.c ****  * @brief   Terminates the current thread.
 820:../../../os/nil/src/ch.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 821:../../../os/nil/src/ch.c ****  *          specified exit status code, other threads can retrieve the
 822:../../../os/nil/src/ch.c ****  *          exit status code by invoking the function @p chThdWait().
 823:../../../os/nil/src/ch.c ****  * @post    Exiting a non-static thread that does not have references
 824:../../../os/nil/src/ch.c ****  *          (detached) causes the thread to remain in the registry.
 825:../../../os/nil/src/ch.c ****  *          It can only be removed by performing a registry scan operation.
 826:../../../os/nil/src/ch.c ****  * @post    Eventual code after this function will never be executed,
 827:../../../os/nil/src/ch.c ****  *          this function never returns. The compiler has no way to
 828:../../../os/nil/src/ch.c ****  *          know this so do not assume that the compiler would remove
 829:../../../os/nil/src/ch.c ****  *          the dead code.
 830:../../../os/nil/src/ch.c ****  *
 831:../../../os/nil/src/ch.c ****  * @param[in] msg       thread exit code
 832:../../../os/nil/src/ch.c ****  *
 833:../../../os/nil/src/ch.c ****  * @api
 834:../../../os/nil/src/ch.c ****  */
 835:../../../os/nil/src/ch.c **** void chThdExit(msg_t msg) {
 1231               		.loc 1 835 0
 1232               		.cfi_startproc
 1233               	.LVL86:
 1234               	/* prologue: function */
 1235               	/* frame size = 0 */
 1236               	/* stack size = 0 */
 1237               	.L__stack_usage = 0
 1238 0000 BC01      		movw r22,r24
 1239               	.LBB189:
 1240               	.LBB190:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1241               		.loc 2 430 0
 1242               	/* #APP */
 1243               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1244 0002 F894      		cli
 1245               	 ;  0 "" 2
 1246               	.LVL87:
 1247               	/* #NOAPP */
 1248 0004 A091 0000 		lds r26,nil
 1249 0008 B091 0000 		lds r27,nil+1
 1250 000c 2091 0000 		lds r18,nil+2
 1251 0010 3091 0000 		lds r19,nil+2+1
 1252               	.LBE190:
 1253               	.LBE189:
 1254               	.LBB191:
 836:../../../os/nil/src/ch.c **** 
 837:../../../os/nil/src/ch.c ****   chSysLock();
 838:../../../os/nil/src/ch.c **** 
 839:../../../os/nil/src/ch.c ****   /* Exit handler hook.*/
 840:../../../os/nil/src/ch.c ****   CH_CFG_THREAD_EXIT_HOOK(tp);
 841:../../../os/nil/src/ch.c **** 
 842:../../../os/nil/src/ch.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 843:../../../os/nil/src/ch.c ****   {
 844:../../../os/nil/src/ch.c ****     /* Waking up any waiting thread.*/
 845:../../../os/nil/src/ch.c ****     thread_t *tp = nil.threads;
 1255               		.loc 1 845 0
 1256 0014 E0E0      		ldi r30,lo8(nil+8)
 1257 0016 F0E0      		ldi r31,hi8(nil+8)
 1258               	.LVL88:
 1259               	.LBB192:
 1260               	.LBB193:
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1261               		.loc 1 589 0
 1262 0018 81E0      		ldi r24,lo8(1)
 1263               	.LVL89:
 1264               	.L87:
 1265               	.LBE193:
 1266               	.LBE192:
 846:../../../os/nil/src/ch.c ****     while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
 847:../../../os/nil/src/ch.c ****       /* Is this thread waiting for current thread termination?*/
 848:../../../os/nil/src/ch.c ****       if ((tp->state == NIL_STATE_WTEXIT) && (tp->u1.tp == nil.current)) {
 1267               		.loc 1 848 0
 1268 001a 9281      		ldd r25,Z+2
 1269 001c 9430      		cpi r25,lo8(4)
 1270 001e 01F0      		breq .L89
 1271               	.L85:
 849:../../../os/nil/src/ch.c ****         (void) chSchReadyI(tp, msg);
 850:../../../os/nil/src/ch.c ****       }
 851:../../../os/nil/src/ch.c ****       tp++;
 1272               		.loc 1 851 0
 1273 0020 3A96      		adiw r30,10
 1274               	.LVL90:
 846:../../../os/nil/src/ch.c ****     while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
 1275               		.loc 1 846 0
 1276 0022 90E0      		ldi r25,hi8(nil+48)
 1277 0024 E030      		cpi r30,lo8(nil+48)
 1278 0026 F907      		cpc r31,r25
 1279 0028 01F4      		brne .L87
 1280 002a 3093 0000 		sts nil+2+1,r19
 1281 002e 2093 0000 		sts nil+2,r18
 1282               	.LBE191:
 852:../../../os/nil/src/ch.c ****     }
 853:../../../os/nil/src/ch.c ****   }
 854:../../../os/nil/src/ch.c **** #endif
 855:../../../os/nil/src/ch.c **** 
 856:../../../os/nil/src/ch.c ****   /* Going into final state with exit message stored.*/
 857:../../../os/nil/src/ch.c ****   nil.current->u1.msg = msg;
 1283               		.loc 1 857 0
 1284 0032 1496      		adiw r26,3+1
 1285 0034 7C93      		st X,r23
 1286 0036 6E93      		st -X,r22
 1287 0038 1397      		sbiw r26,3
 858:../../../os/nil/src/ch.c ****   (void) chSchGoSleepTimeoutS(NIL_STATE_FINAL, TIME_INFINITE);
 1288               		.loc 1 858 0
 1289 003a 60E0      		ldi r22,0
 1290 003c 70E0      		ldi r23,0
 1291               	.LVL91:
 1292 003e 8BE0      		ldi r24,lo8(11)
 1293 0040 0C94 0000 		jmp chSchGoSleepTimeoutS
 1294               	.LVL92:
 1295               	.L89:
 1296               	.LBB196:
 848:../../../os/nil/src/ch.c ****         (void) chSchReadyI(tp, msg);
 1297               		.loc 1 848 0 discriminator 1
 1298 0044 4381      		ldd r20,Z+3
 1299 0046 5481      		ldd r21,Z+4
 1300 0048 4A17      		cp r20,r26
 1301 004a 5B07      		cpc r21,r27
 1302 004c 01F4      		brne .L85
 1303               	.LVL93:
 1304               	.LBB195:
 1305               	.LBB194:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 1306               		.loc 1 588 0
 1307 004e 7483      		std Z+4,r23
 1308 0050 6383      		std Z+3,r22
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1309               		.loc 1 589 0
 1310 0052 8283      		std Z+2,r24
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 1311               		.loc 1 590 0
 1312 0054 1682      		std Z+6,__zero_reg__
 1313 0056 1582      		std Z+5,__zero_reg__
 591:../../../os/nil/src/ch.c ****     nil.next = tp;
 1314               		.loc 1 591 0
 1315 0058 E217      		cp r30,r18
 1316 005a F307      		cpc r31,r19
 1317 005c 00F4      		brsh .L85
 1318 005e 9F01      		movw r18,r30
 1319 0060 00C0      		rjmp .L85
 1320               	.LBE194:
 1321               	.LBE195:
 1322               	.LBE196:
 1323               		.cfi_endproc
 1324               	.LFE115:
 1326               		.section	.text.chThdWait,"ax",@progbits
 1327               	.global	chThdWait
 1329               	chThdWait:
 1330               	.LFB116:
 859:../../../os/nil/src/ch.c **** 
 860:../../../os/nil/src/ch.c ****   /* The thread never returns here.*/
 861:../../../os/nil/src/ch.c ****   chDbgAssert(false, "zombies apocalypse");
 862:../../../os/nil/src/ch.c **** }
 863:../../../os/nil/src/ch.c **** 
 864:../../../os/nil/src/ch.c **** /**
 865:../../../os/nil/src/ch.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 866:../../../os/nil/src/ch.c ****  *          thread terminates then the exit code is returned.
 867:../../../os/nil/src/ch.c ****  *
 868:../../../os/nil/src/ch.c ****  * @param[in] tp        pointer to the thread
 869:../../../os/nil/src/ch.c ****  * @return              The exit code from the terminated thread.
 870:../../../os/nil/src/ch.c ****  *
 871:../../../os/nil/src/ch.c ****  * @api
 872:../../../os/nil/src/ch.c ****  */
 873:../../../os/nil/src/ch.c **** msg_t chThdWait(thread_t *tp) {
 1331               		.loc 1 873 0
 1332               		.cfi_startproc
 1333               	.LVL94:
 1334               	/* prologue: function */
 1335               	/* frame size = 0 */
 1336               	/* stack size = 0 */
 1337               	.L__stack_usage = 0
 1338               	.LBB197:
 1339               	.LBB198:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1340               		.loc 2 430 0
 1341               	/* #APP */
 1342               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1343 0000 F894      		cli
 1344               	 ;  0 "" 2
 1345               	/* #NOAPP */
 1346               	.LBE198:
 1347               	.LBE197:
 874:../../../os/nil/src/ch.c ****   msg_t msg;
 875:../../../os/nil/src/ch.c **** 
 876:../../../os/nil/src/ch.c ****   chSysLock();
 877:../../../os/nil/src/ch.c ****   if (NIL_THD_IS_FINAL(tp)) {
 1348               		.loc 1 877 0
 1349 0002 FC01      		movw r30,r24
 1350 0004 2281      		ldd r18,Z+2
 1351 0006 2B30      		cpi r18,lo8(11)
 1352 0008 01F0      		breq .L93
 878:../../../os/nil/src/ch.c ****     msg = tp->u1.msg;
 879:../../../os/nil/src/ch.c ****   }
 880:../../../os/nil/src/ch.c ****   else {
 881:../../../os/nil/src/ch.c ****     nil.current->u1.tp = tp;
 1353               		.loc 1 881 0
 1354 000a E091 0000 		lds r30,nil
 1355 000e F091 0000 		lds r31,nil+1
 1356 0012 9483      		std Z+4,r25
 1357 0014 8383      		std Z+3,r24
 882:../../../os/nil/src/ch.c ****     msg = chSchGoSleepTimeoutS(NIL_STATE_WTEXIT, TIME_INFINITE);
 1358               		.loc 1 882 0
 1359 0016 60E0      		ldi r22,0
 1360 0018 70E0      		ldi r23,0
 1361 001a 84E0      		ldi r24,lo8(4)
 1362               	.LVL95:
 1363 001c 0E94 0000 		call chSchGoSleepTimeoutS
 1364               	.LVL96:
 1365               	.LBB199:
 1366               	.LBB200:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1367               		.loc 2 440 0
 1368               	/* #APP */
 1369               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1370 0020 7894      		sei
 1371               	 ;  0 "" 2
 1372               	/* #NOAPP */
 1373               	.LBE200:
 1374               	.LBE199:
 883:../../../os/nil/src/ch.c ****   }
 884:../../../os/nil/src/ch.c ****   chSysUnlock();
 885:../../../os/nil/src/ch.c **** 
 886:../../../os/nil/src/ch.c ****   return msg;
 887:../../../os/nil/src/ch.c **** }
 1375               		.loc 1 887 0
 1376 0022 0895      		ret
 1377               	.LVL97:
 1378               	.L93:
 878:../../../os/nil/src/ch.c ****   }
 1379               		.loc 1 878 0
 1380 0024 8381      		ldd r24,Z+3
 1381 0026 9481      		ldd r25,Z+4
 1382               	.LVL98:
 1383               	.LBB202:
 1384               	.LBB201:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1385               		.loc 2 440 0
 1386               	/* #APP */
 1387               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1388 0028 7894      		sei
 1389               	 ;  0 "" 2
 1390               	/* #NOAPP */
 1391               	.LBE201:
 1392               	.LBE202:
 1393               		.loc 1 887 0
 1394 002a 0895      		ret
 1395               		.cfi_endproc
 1396               	.LFE116:
 1398               		.section	.text.chThdSuspendTimeoutS,"ax",@progbits
 1399               	.global	chThdSuspendTimeoutS
 1401               	chThdSuspendTimeoutS:
 1402               	.LFB117:
 888:../../../os/nil/src/ch.c **** 
 889:../../../os/nil/src/ch.c **** /**
 890:../../../os/nil/src/ch.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 891:../../../os/nil/src/ch.c ****  * @note    This function must reschedule, it can only be called from thread
 892:../../../os/nil/src/ch.c ****  *          context.
 893:../../../os/nil/src/ch.c ****  *
 894:../../../os/nil/src/ch.c ****  * @param[in] trp       a pointer to a thread reference object
 895:../../../os/nil/src/ch.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 896:../../../os/nil/src/ch.c ****  *                      the following special values are allowed:
 897:../../../os/nil/src/ch.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 898:../../../os/nil/src/ch.c ****  *                      - @a TIME_INFINITE no timeout.
 899:../../../os/nil/src/ch.c ****  *                      .
 900:../../../os/nil/src/ch.c ****  * @return              The wake up message.
 901:../../../os/nil/src/ch.c ****  *
 902:../../../os/nil/src/ch.c ****  * @sclass
 903:../../../os/nil/src/ch.c ****  */
 904:../../../os/nil/src/ch.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 1403               		.loc 1 904 0
 1404               		.cfi_startproc
 1405               	.LVL99:
 1406               	/* prologue: function */
 1407               	/* frame size = 0 */
 1408               	/* stack size = 0 */
 1409               	.L__stack_usage = 0
 905:../../../os/nil/src/ch.c **** 
 906:../../../os/nil/src/ch.c ****   chDbgAssert(*trp == NULL, "not NULL");
 907:../../../os/nil/src/ch.c **** 
 908:../../../os/nil/src/ch.c ****   if (TIME_IMMEDIATE == timeout) {
 1410               		.loc 1 908 0
 1411 0000 6F3F      		cpi r22,-1
 1412 0002 2FEF      		ldi r18,-1
 1413 0004 7207      		cpc r23,r18
 1414 0006 01F0      		breq .L95
 909:../../../os/nil/src/ch.c ****     return MSG_TIMEOUT;
 910:../../../os/nil/src/ch.c ****   }
 911:../../../os/nil/src/ch.c **** 
 912:../../../os/nil/src/ch.c ****   *trp = nil.current;
 1415               		.loc 1 912 0
 1416 0008 2091 0000 		lds r18,nil
 1417 000c 3091 0000 		lds r19,nil+1
 1418 0010 FC01      		movw r30,r24
 1419 0012 3183      		std Z+1,r19
 1420 0014 2083      		st Z,r18
 913:../../../os/nil/src/ch.c ****   nil.current->u1.trp = trp;
 1421               		.loc 1 913 0
 1422 0016 E091 0000 		lds r30,nil
 1423 001a F091 0000 		lds r31,nil+1
 1424 001e 9483      		std Z+4,r25
 1425 0020 8383      		std Z+3,r24
 914:../../../os/nil/src/ch.c ****   return chSchGoSleepTimeoutS(NIL_STATE_SUSPENDED, timeout);
 1426               		.loc 1 914 0
 1427 0022 83E0      		ldi r24,lo8(3)
 1428               	.LVL100:
 1429 0024 0C94 0000 		jmp chSchGoSleepTimeoutS
 1430               	.LVL101:
 1431               	.L95:
 915:../../../os/nil/src/ch.c **** }
 1432               		.loc 1 915 0
 1433 0028 8FEF      		ldi r24,lo8(-1)
 1434 002a 9FEF      		ldi r25,lo8(-1)
 1435               	.LVL102:
 1436 002c 0895      		ret
 1437               		.cfi_endproc
 1438               	.LFE117:
 1440               		.section	.text.chThdResumeI,"ax",@progbits
 1441               	.global	chThdResumeI
 1443               	chThdResumeI:
 1444               	.LFB118:
 916:../../../os/nil/src/ch.c **** 
 917:../../../os/nil/src/ch.c **** /**
 918:../../../os/nil/src/ch.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 919:../../../os/nil/src/ch.c ****  * @note    This function must not reschedule because it can be called from
 920:../../../os/nil/src/ch.c ****  *          ISR context.
 921:../../../os/nil/src/ch.c ****  *
 922:../../../os/nil/src/ch.c ****  * @param[in] trp       a pointer to a thread reference object
 923:../../../os/nil/src/ch.c ****  * @param[in] msg       the message code
 924:../../../os/nil/src/ch.c ****  *
 925:../../../os/nil/src/ch.c ****  * @iclass
 926:../../../os/nil/src/ch.c ****  */
 927:../../../os/nil/src/ch.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1445               		.loc 1 927 0
 1446               		.cfi_startproc
 1447               	.LVL103:
 1448               	/* prologue: function */
 1449               	/* frame size = 0 */
 1450               	/* stack size = 0 */
 1451               	.L__stack_usage = 0
 928:../../../os/nil/src/ch.c **** 
 929:../../../os/nil/src/ch.c ****   if (*trp != NULL) {
 1452               		.loc 1 929 0
 1453 0000 DC01      		movw r26,r24
 1454 0002 ED91      		ld r30,X+
 1455 0004 FC91      		ld r31,X
 1456 0006 1197      		sbiw r26,1
 1457 0008 3097      		sbiw r30,0
 1458 000a 01F0      		breq .L96
 1459               	.LVL104:
 1460               	.LBB203:
 930:../../../os/nil/src/ch.c ****     thread_reference_t tr = *trp;
 931:../../../os/nil/src/ch.c **** 
 932:../../../os/nil/src/ch.c ****     chDbgAssert(NIL_THD_IS_SUSPENDED(tr), "not suspended");
 933:../../../os/nil/src/ch.c **** 
 934:../../../os/nil/src/ch.c ****     *trp = NULL;
 1461               		.loc 1 934 0
 1462 000c 1D92      		st X+,__zero_reg__
 1463 000e 1C92      		st X,__zero_reg__
 1464               	.LVL105:
 1465               	.LBB204:
 1466               	.LBB205:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 1467               		.loc 1 588 0
 1468 0010 7483      		std Z+4,r23
 1469 0012 6383      		std Z+3,r22
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1470               		.loc 1 589 0
 1471 0014 81E0      		ldi r24,lo8(1)
 1472               	.LVL106:
 1473 0016 8283      		std Z+2,r24
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 1474               		.loc 1 590 0
 1475 0018 1682      		std Z+6,__zero_reg__
 1476 001a 1582      		std Z+5,__zero_reg__
 591:../../../os/nil/src/ch.c ****     nil.next = tp;
 1477               		.loc 1 591 0
 1478 001c 8091 0000 		lds r24,nil+2
 1479 0020 9091 0000 		lds r25,nil+2+1
 1480 0024 E817      		cp r30,r24
 1481 0026 F907      		cpc r31,r25
 1482 0028 00F4      		brsh .L96
 592:../../../os/nil/src/ch.c ****   }
 1483               		.loc 1 592 0
 1484 002a F093 0000 		sts nil+2+1,r31
 1485 002e E093 0000 		sts nil+2,r30
 1486               	.LVL107:
 1487               	.L96:
 1488 0032 0895      		ret
 1489               	.LBE205:
 1490               	.LBE204:
 1491               	.LBE203:
 1492               		.cfi_endproc
 1493               	.LFE118:
 1495               		.section	.text.chThdResume,"ax",@progbits
 1496               	.global	chThdResume
 1498               	chThdResume:
 1499               	.LFB119:
 935:../../../os/nil/src/ch.c ****     (void) chSchReadyI(tr, msg);
 936:../../../os/nil/src/ch.c ****   }
 937:../../../os/nil/src/ch.c **** }
 938:../../../os/nil/src/ch.c **** 
 939:../../../os/nil/src/ch.c **** /**
 940:../../../os/nil/src/ch.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 941:../../../os/nil/src/ch.c ****  * @note    This function must reschedule, it can only be called from thread
 942:../../../os/nil/src/ch.c ****  *          context.
 943:../../../os/nil/src/ch.c ****  *
 944:../../../os/nil/src/ch.c ****  * @param[in] trp       a pointer to a thread reference object
 945:../../../os/nil/src/ch.c ****  * @param[in] msg       the message code
 946:../../../os/nil/src/ch.c ****  *
 947:../../../os/nil/src/ch.c ****  * @api
 948:../../../os/nil/src/ch.c ****  */
 949:../../../os/nil/src/ch.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1500               		.loc 1 949 0
 1501               		.cfi_startproc
 1502               	.LVL108:
 1503               	/* prologue: function */
 1504               	/* frame size = 0 */
 1505               	/* stack size = 0 */
 1506               	.L__stack_usage = 0
 1507               	.LBB206:
 1508               	.LBB207:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1509               		.loc 2 430 0
 1510               	/* #APP */
 1511               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1512 0000 F894      		cli
 1513               	 ;  0 "" 2
 1514               	.LVL109:
 1515               	/* #NOAPP */
 1516               	.LBE207:
 1517               	.LBE206:
 1518               	.LBB208:
 1519               	.LBB209:
 929:../../../os/nil/src/ch.c ****     thread_reference_t tr = *trp;
 1520               		.loc 1 929 0
 1521 0002 DC01      		movw r26,r24
 1522 0004 ED91      		ld r30,X+
 1523 0006 FC91      		ld r31,X
 1524 0008 3097      		sbiw r30,0
 1525 000a 01F0      		breq .L104
 1526               	.LVL110:
 1527               	.LBB210:
 934:../../../os/nil/src/ch.c ****     (void) chSchReadyI(tr, msg);
 1528               		.loc 1 934 0
 1529 000c DC01      		movw r26,r24
 1530 000e 1D92      		st X+,__zero_reg__
 1531 0010 1C92      		st X,__zero_reg__
 1532               	.LVL111:
 1533               	.LBB211:
 1534               	.LBB212:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 1535               		.loc 1 588 0
 1536 0012 7483      		std Z+4,r23
 1537 0014 6383      		std Z+3,r22
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1538               		.loc 1 589 0
 1539 0016 81E0      		ldi r24,lo8(1)
 1540               	.LVL112:
 1541 0018 8283      		std Z+2,r24
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 1542               		.loc 1 590 0
 1543 001a 1682      		std Z+6,__zero_reg__
 1544 001c 1582      		std Z+5,__zero_reg__
 591:../../../os/nil/src/ch.c ****     nil.next = tp;
 1545               		.loc 1 591 0
 1546 001e 8091 0000 		lds r24,nil+2
 1547 0022 9091 0000 		lds r25,nil+2+1
 1548 0026 E817      		cp r30,r24
 1549 0028 F907      		cpc r31,r25
 1550 002a 00F0      		brlo .L105
 1551               	.LVL113:
 1552               	.L102:
 1553               	.LBE212:
 1554               	.LBE211:
 1555               	.LBE210:
 1556               	.LBE209:
 1557               	.LBE208:
 1558               	.LBB217:
 1559               	.LBB218:
 641:../../../os/nil/src/ch.c ****     chSchDoPreemption();
 1560               		.loc 1 641 0
 1561 002c 6091 0000 		lds r22,nil
 1562 0030 7091 0000 		lds r23,nil+1
 1563               	.LVL114:
 1564 0034 6817      		cp r22,r24
 1565 0036 7907      		cpc r23,r25
 1566 0038 01F0      		breq .L103
 1567               	.LVL115:
 1568               	.LBB219:
 1569               	.LBB220:
 625:../../../os/nil/src/ch.c ****   if (otp == &nil.threads[CH_CFG_MAX_THREADS]) {
 1570               		.loc 1 625 0
 1571 003a 9093 0000 		sts nil+1,r25
 1572 003e 8093 0000 		sts nil,r24
 629:../../../os/nil/src/ch.c **** }
 1573               		.loc 1 629 0
 1574 0042 0E94 0000 		call _port_switch
 1575               	.LVL116:
 1576               	.L103:
 1577               	.LBE220:
 1578               	.LBE219:
 1579               	.LBE218:
 1580               	.LBE217:
 1581               	.LBB221:
 1582               	.LBB222:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1583               		.loc 2 440 0
 1584               	/* #APP */
 1585               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1586 0046 7894      		sei
 1587               	 ;  0 "" 2
 1588               	/* #NOAPP */
 1589 0048 0895      		ret
 1590               	.LVL117:
 1591               	.L105:
 1592               	.LBE222:
 1593               	.LBE221:
 1594               	.LBB223:
 1595               	.LBB216:
 1596               	.LBB215:
 1597               	.LBB214:
 1598               	.LBB213:
 592:../../../os/nil/src/ch.c ****   }
 1599               		.loc 1 592 0
 1600 004a F093 0000 		sts nil+2+1,r31
 1601 004e E093 0000 		sts nil+2,r30
 1602 0052 CF01      		movw r24,r30
 1603 0054 00C0      		rjmp .L102
 1604               	.LVL118:
 1605               	.L104:
 1606 0056 8091 0000 		lds r24,nil+2
 1607 005a 9091 0000 		lds r25,nil+2+1
 1608               	.LVL119:
 1609 005e 00C0      		rjmp .L102
 1610               	.LBE213:
 1611               	.LBE214:
 1612               	.LBE215:
 1613               	.LBE216:
 1614               	.LBE223:
 1615               		.cfi_endproc
 1616               	.LFE119:
 1618               		.section	.text.chThdSleep,"ax",@progbits
 1619               	.global	chThdSleep
 1621               	chThdSleep:
 1622               	.LFB120:
 950:../../../os/nil/src/ch.c **** 
 951:../../../os/nil/src/ch.c ****   chSysLock();
 952:../../../os/nil/src/ch.c ****   chThdResumeS(trp, msg);
 953:../../../os/nil/src/ch.c ****   chSysUnlock();
 954:../../../os/nil/src/ch.c **** }
 955:../../../os/nil/src/ch.c **** 
 956:../../../os/nil/src/ch.c **** /**
 957:../../../os/nil/src/ch.c ****  * @brief   Suspends the invoking thread for the specified time.
 958:../../../os/nil/src/ch.c ****  *
 959:../../../os/nil/src/ch.c ****  * @param[in] timeout   the delay in system ticks
 960:../../../os/nil/src/ch.c ****  *
 961:../../../os/nil/src/ch.c ****  * @api
 962:../../../os/nil/src/ch.c ****  */
 963:../../../os/nil/src/ch.c **** void chThdSleep(sysinterval_t timeout) {
 1623               		.loc 1 963 0
 1624               		.cfi_startproc
 1625               	.LVL120:
 1626               	/* prologue: function */
 1627               	/* frame size = 0 */
 1628               	/* stack size = 0 */
 1629               	.L__stack_usage = 0
 1630               	.LBB224:
 1631               	.LBB225:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1632               		.loc 2 430 0
 1633               	/* #APP */
 1634               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1635 0000 F894      		cli
 1636               	 ;  0 "" 2
 1637               	/* #NOAPP */
 1638               	.LBE225:
 1639               	.LBE224:
 964:../../../os/nil/src/ch.c **** 
 965:../../../os/nil/src/ch.c ****   chSysLock();
 966:../../../os/nil/src/ch.c ****   chThdSleepS(timeout);
 1640               		.loc 1 966 0
 1641 0002 BC01      		movw r22,r24
 1642 0004 82E0      		ldi r24,lo8(2)
 1643               	.LVL121:
 1644 0006 0E94 0000 		call chSchGoSleepTimeoutS
 1645               	.LVL122:
 1646               	.LBB226:
 1647               	.LBB227:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1648               		.loc 2 440 0
 1649               	/* #APP */
 1650               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1651 000a 7894      		sei
 1652               	 ;  0 "" 2
 1653               	/* #NOAPP */
 1654 000c 0895      		ret
 1655               	.LBE227:
 1656               	.LBE226:
 1657               		.cfi_endproc
 1658               	.LFE120:
 1660               		.section	.text.chThdSleepUntil,"ax",@progbits
 1661               	.global	chThdSleepUntil
 1663               	chThdSleepUntil:
 1664               	.LFB121:
 967:../../../os/nil/src/ch.c ****   chSysUnlock();
 968:../../../os/nil/src/ch.c **** }
 969:../../../os/nil/src/ch.c **** 
 970:../../../os/nil/src/ch.c **** /**
 971:../../../os/nil/src/ch.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 972:../../../os/nil/src/ch.c ****  *          specified value.
 973:../../../os/nil/src/ch.c ****  *
 974:../../../os/nil/src/ch.c ****  * @param[in] abstime   absolute system time
 975:../../../os/nil/src/ch.c ****  *
 976:../../../os/nil/src/ch.c ****  * @api
 977:../../../os/nil/src/ch.c ****  */
 978:../../../os/nil/src/ch.c **** void chThdSleepUntil(systime_t abstime) {
 1665               		.loc 1 978 0
 1666               		.cfi_startproc
 1667               	.LVL123:
 1668 0000 CF93      		push r28
 1669               	.LCFI17:
 1670               		.cfi_def_cfa_offset 3
 1671               		.cfi_offset 28, -2
 1672 0002 DF93      		push r29
 1673               	.LCFI18:
 1674               		.cfi_def_cfa_offset 4
 1675               		.cfi_offset 29, -3
 1676               	/* prologue: function */
 1677               	/* frame size = 0 */
 1678               	/* stack size = 2 */
 1679               	.L__stack_usage = 2
 1680 0004 EC01      		movw r28,r24
 1681               	.LBB228:
 1682               	.LBB229:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1683               		.loc 2 430 0
 1684               	/* #APP */
 1685               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1686 0006 F894      		cli
 1687               	 ;  0 "" 2
 1688               	/* #NOAPP */
 1689               	.LBE229:
 1690               	.LBE228:
 1691               	.LBB230:
 1692               	.LBB231:
 1693               		.loc 3 113 0
 1694 0008 0E94 0000 		call stGetCounter
 1695               	.LVL124:
 1696               	.LBE231:
 1697               	.LBE230:
 979:../../../os/nil/src/ch.c **** 
 980:../../../os/nil/src/ch.c ****   chSysLock();
 981:../../../os/nil/src/ch.c ****   chThdSleepUntilS(abstime);
 1698               		.loc 1 981 0
 1699 000c BE01      		movw r22,r28
 1700 000e 681B      		sub r22,r24
 1701 0010 790B      		sbc r23,r25
 1702 0012 82E0      		ldi r24,lo8(2)
 1703 0014 0E94 0000 		call chSchGoSleepTimeoutS
 1704               	.LVL125:
 1705               	.LBB232:
 1706               	.LBB233:
 440:../../../os/common/ports/AVR/chcore.h **** }
 1707               		.loc 2 440 0
 1708               	/* #APP */
 1709               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1710 0018 7894      		sei
 1711               	 ;  0 "" 2
 1712               	/* epilogue start */
 1713               	/* #NOAPP */
 1714               	.LBE233:
 1715               	.LBE232:
 982:../../../os/nil/src/ch.c ****   chSysUnlock();
 983:../../../os/nil/src/ch.c **** }
 1716               		.loc 1 983 0
 1717 001a DF91      		pop r29
 1718 001c CF91      		pop r28
 1719               	.LVL126:
 1720 001e 0895      		ret
 1721               		.cfi_endproc
 1722               	.LFE121:
 1724               		.section	.text.chThdEnqueueTimeoutS,"ax",@progbits
 1725               	.global	chThdEnqueueTimeoutS
 1727               	chThdEnqueueTimeoutS:
 1728               	.LFB122:
 984:../../../os/nil/src/ch.c **** 
 985:../../../os/nil/src/ch.c **** /**
 986:../../../os/nil/src/ch.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 987:../../../os/nil/src/ch.c ****  * @details The caller thread is enqueued and put to sleep until it is
 988:../../../os/nil/src/ch.c ****  *          dequeued or the specified timeouts expires.
 989:../../../os/nil/src/ch.c ****  *
 990:../../../os/nil/src/ch.c ****  * @param[in] tqp       pointer to the threads queue object
 991:../../../os/nil/src/ch.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 992:../../../os/nil/src/ch.c ****  *                      handled as follow:
 993:../../../os/nil/src/ch.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 994:../../../os/nil/src/ch.c ****  *                      - @a TIME_INFINITE no timeout.
 995:../../../os/nil/src/ch.c ****  *                      .
 996:../../../os/nil/src/ch.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 997:../../../os/nil/src/ch.c ****  *                      @p osalQueueWakeupAllI() functions.
 998:../../../os/nil/src/ch.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 999:../../../os/nil/src/ch.c ****  *                      specified timeout or if the function has been
1000:../../../os/nil/src/ch.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
1001:../../../os/nil/src/ch.c ****  *                      specification.
1002:../../../os/nil/src/ch.c ****  *
1003:../../../os/nil/src/ch.c ****  * @sclass
1004:../../../os/nil/src/ch.c ****  */
1005:../../../os/nil/src/ch.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 1729               		.loc 1 1005 0
 1730               		.cfi_startproc
 1731               	.LVL127:
 1732               	/* prologue: function */
 1733               	/* frame size = 0 */
 1734               	/* stack size = 0 */
 1735               	.L__stack_usage = 0
1006:../../../os/nil/src/ch.c **** 
1007:../../../os/nil/src/ch.c ****   chDbgCheckClassS();
1008:../../../os/nil/src/ch.c ****   chDbgCheck(tqp != NULL);
1009:../../../os/nil/src/ch.c **** 
1010:../../../os/nil/src/ch.c ****   chDbgAssert(tqp->cnt <= (cnt_t)0, "invalid counter");
1011:../../../os/nil/src/ch.c **** 
1012:../../../os/nil/src/ch.c ****   if (TIME_IMMEDIATE == timeout) {
 1736               		.loc 1 1012 0
 1737 0000 6F3F      		cpi r22,-1
 1738 0002 2FEF      		ldi r18,-1
 1739 0004 7207      		cpc r23,r18
 1740 0006 01F0      		breq .L109
1013:../../../os/nil/src/ch.c ****     return MSG_TIMEOUT;
1014:../../../os/nil/src/ch.c ****   }
1015:../../../os/nil/src/ch.c **** 
1016:../../../os/nil/src/ch.c ****   tqp->cnt--;
 1741               		.loc 1 1016 0
 1742 0008 FC01      		movw r30,r24
 1743 000a 2081      		ld r18,Z
 1744 000c 2150      		subi r18,lo8(-(-1))
 1745 000e 2083      		st Z,r18
1017:../../../os/nil/src/ch.c ****   nil.current->u1.tqp = tqp;
 1746               		.loc 1 1017 0
 1747 0010 E091 0000 		lds r30,nil
 1748 0014 F091 0000 		lds r31,nil+1
 1749 0018 9483      		std Z+4,r25
 1750 001a 8383      		std Z+3,r24
1018:../../../os/nil/src/ch.c ****   return chSchGoSleepTimeoutS(NIL_STATE_WTQUEUE, timeout);
 1751               		.loc 1 1018 0
 1752 001c 85E0      		ldi r24,lo8(5)
 1753               	.LVL128:
 1754 001e 0C94 0000 		jmp chSchGoSleepTimeoutS
 1755               	.LVL129:
 1756               	.L109:
1019:../../../os/nil/src/ch.c **** }
 1757               		.loc 1 1019 0
 1758 0022 8FEF      		ldi r24,lo8(-1)
 1759 0024 9FEF      		ldi r25,lo8(-1)
 1760               	.LVL130:
 1761 0026 0895      		ret
 1762               		.cfi_endproc
 1763               	.LFE122:
 1765               		.section	.text.chThdDoDequeueNextI,"ax",@progbits
 1766               	.global	chThdDoDequeueNextI
 1768               	chThdDoDequeueNextI:
 1769               	.LFB123:
1020:../../../os/nil/src/ch.c **** 
1021:../../../os/nil/src/ch.c **** /**
1022:../../../os/nil/src/ch.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
1023:../../../os/nil/src/ch.c ****  * @details Dequeues one thread from the queue without checking if the queue
1024:../../../os/nil/src/ch.c ****  *          is empty.
1025:../../../os/nil/src/ch.c ****  * @pre     The queue must contain at least an object.
1026:../../../os/nil/src/ch.c ****  *
1027:../../../os/nil/src/ch.c ****  * @param[in] tqp       pointer to the threads queue object
1028:../../../os/nil/src/ch.c ****  * @param[in] msg       the message code
1029:../../../os/nil/src/ch.c ****  *
1030:../../../os/nil/src/ch.c ****  * @iclass
1031:../../../os/nil/src/ch.c ****  */
1032:../../../os/nil/src/ch.c **** void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1770               		.loc 1 1032 0
 1771               		.cfi_startproc
 1772               	.LVL131:
 1773               	/* prologue: function */
 1774               	/* frame size = 0 */
 1775               	/* stack size = 0 */
 1776               	.L__stack_usage = 0
 1777 0000 DC01      		movw r26,r24
1033:../../../os/nil/src/ch.c ****   thread_t *tp;
1034:../../../os/nil/src/ch.c **** 
1035:../../../os/nil/src/ch.c ****   chDbgAssert(tqp->cnt < (cnt_t)0, "empty queue");
1036:../../../os/nil/src/ch.c **** 
1037:../../../os/nil/src/ch.c ****   tqp->cnt++;
 1778               		.loc 1 1037 0
 1779 0002 8C91      		ld r24,X
 1780               	.LVL132:
 1781 0004 8F5F      		subi r24,lo8(-(1))
 1782 0006 8C93      		st X,r24
 1783               	.LVL133:
 1784               	.LBB234:
 1785               	.LBB235:
  71:../../../os/nil/src/ch.c **** 
 1786               		.loc 1 71 0
 1787 0008 E0E0      		ldi r30,lo8(nil+8)
 1788 000a F0E0      		ldi r31,hi8(nil+8)
 1789               	.LVL134:
 1790               	.L113:
  75:../../../os/nil/src/ch.c ****       return tp;
 1791               		.loc 1 75 0
 1792 000c 9281      		ldd r25,Z+2
 1793 000e 9530      		cpi r25,lo8(5)
 1794 0010 01F0      		breq .L117
 1795               	.L111:
  78:../../../os/nil/src/ch.c ****   }
 1796               		.loc 1 78 0
 1797 0012 3A96      		adiw r30,10
 1798               	.LVL135:
  73:../../../os/nil/src/ch.c ****     /* Is this thread matching?*/
 1799               		.loc 1 73 0
 1800 0014 80E0      		ldi r24,hi8(nil+48)
 1801 0016 E030      		cpi r30,lo8(nil+48)
 1802 0018 F807      		cpc r31,r24
 1803 001a 01F4      		brne .L113
  80:../../../os/nil/src/ch.c **** }
 1804               		.loc 1 80 0
 1805 001c E0E0      		ldi r30,0
 1806 001e F0E0      		ldi r31,0
 1807               	.LVL136:
 1808               	.L112:
 1809               	.LBE235:
 1810               	.LBE234:
 1811               	.LBB237:
 1812               	.LBB238:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 1813               		.loc 1 588 0
 1814 0020 7483      		std Z+4,r23
 1815 0022 6383      		std Z+3,r22
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1816               		.loc 1 589 0
 1817 0024 81E0      		ldi r24,lo8(1)
 1818 0026 8283      		std Z+2,r24
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 1819               		.loc 1 590 0
 1820 0028 1682      		std Z+6,__zero_reg__
 1821 002a 1582      		std Z+5,__zero_reg__
 591:../../../os/nil/src/ch.c ****     nil.next = tp;
 1822               		.loc 1 591 0
 1823 002c 8091 0000 		lds r24,nil+2
 1824 0030 9091 0000 		lds r25,nil+2+1
 1825 0034 E817      		cp r30,r24
 1826 0036 F907      		cpc r31,r25
 1827 0038 00F4      		brsh .L110
 592:../../../os/nil/src/ch.c ****   }
 1828               		.loc 1 592 0
 1829 003a F093 0000 		sts nil+2+1,r31
 1830 003e E093 0000 		sts nil+2,r30
 1831               	.LVL137:
 1832               	.L110:
 1833 0042 0895      		ret
 1834               	.LVL138:
 1835               	.L117:
 1836               	.LBE238:
 1837               	.LBE237:
 1838               	.LBB239:
 1839               	.LBB236:
  75:../../../os/nil/src/ch.c ****       return tp;
 1840               		.loc 1 75 0
 1841 0044 8381      		ldd r24,Z+3
 1842 0046 9481      		ldd r25,Z+4
 1843 0048 A817      		cp r26,r24
 1844 004a B907      		cpc r27,r25
 1845 004c 01F4      		brne .L111
 1846 004e 00C0      		rjmp .L112
 1847               	.LBE236:
 1848               	.LBE239:
 1849               		.cfi_endproc
 1850               	.LFE123:
 1852               		.section	.text.chThdDequeueNextI,"ax",@progbits
 1853               	.global	chThdDequeueNextI
 1855               	chThdDequeueNextI:
 1856               	.LFB124:
1038:../../../os/nil/src/ch.c ****   tp = nil_find_thread(NIL_STATE_WTQUEUE, (void *)tqp);
1039:../../../os/nil/src/ch.c **** 
1040:../../../os/nil/src/ch.c ****   chDbgAssert(tp != NULL, "thread not found");
1041:../../../os/nil/src/ch.c **** 
1042:../../../os/nil/src/ch.c ****   (void) chSchReadyI(tp, msg);
1043:../../../os/nil/src/ch.c **** }
1044:../../../os/nil/src/ch.c **** 
1045:../../../os/nil/src/ch.c **** /**
1046:../../../os/nil/src/ch.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
1047:../../../os/nil/src/ch.c ****  *          if any.
1048:../../../os/nil/src/ch.c ****  *
1049:../../../os/nil/src/ch.c ****  * @param[in] tqp       pointer to the threads queue object
1050:../../../os/nil/src/ch.c ****  * @param[in] msg       the message code
1051:../../../os/nil/src/ch.c ****  *
1052:../../../os/nil/src/ch.c ****  * @iclass
1053:../../../os/nil/src/ch.c ****  */
1054:../../../os/nil/src/ch.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1857               		.loc 1 1054 0
 1858               		.cfi_startproc
 1859               	.LVL139:
 1860               	/* prologue: function */
 1861               	/* frame size = 0 */
 1862               	/* stack size = 0 */
 1863               	.L__stack_usage = 0
1055:../../../os/nil/src/ch.c **** 
1056:../../../os/nil/src/ch.c ****   chDbgCheckClassI();
1057:../../../os/nil/src/ch.c ****   chDbgCheck(tqp != NULL);
1058:../../../os/nil/src/ch.c **** 
1059:../../../os/nil/src/ch.c ****   if (tqp->cnt < (cnt_t)0) {
 1864               		.loc 1 1059 0
 1865 0000 FC01      		movw r30,r24
 1866 0002 2081      		ld r18,Z
 1867 0004 27FF      		sbrs r18,7
 1868 0006 0895      		ret
 1869               	.L120:
1060:../../../os/nil/src/ch.c ****     chThdDoDequeueNextI(tqp, msg);
 1870               		.loc 1 1060 0
 1871 0008 0C94 0000 		jmp chThdDoDequeueNextI
 1872               	.LVL140:
 1873               		.cfi_endproc
 1874               	.LFE124:
 1876               		.section	.text.chThdDequeueAllI,"ax",@progbits
 1877               	.global	chThdDequeueAllI
 1879               	chThdDequeueAllI:
 1880               	.LFB125:
1061:../../../os/nil/src/ch.c ****   }
1062:../../../os/nil/src/ch.c **** }
1063:../../../os/nil/src/ch.c **** 
1064:../../../os/nil/src/ch.c **** /**
1065:../../../os/nil/src/ch.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
1066:../../../os/nil/src/ch.c ****  *
1067:../../../os/nil/src/ch.c ****  * @param[in] tqp       pointer to the threads queue object
1068:../../../os/nil/src/ch.c ****  * @param[in] msg       the message code
1069:../../../os/nil/src/ch.c ****  *
1070:../../../os/nil/src/ch.c ****  * @iclass
1071:../../../os/nil/src/ch.c ****  */
1072:../../../os/nil/src/ch.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 1881               		.loc 1 1072 0
 1882               		.cfi_startproc
 1883               	.LVL141:
 1884               	/* prologue: function */
 1885               	/* frame size = 0 */
 1886               	/* stack size = 0 */
 1887               	.L__stack_usage = 0
 1888 0000 DC01      		movw r26,r24
1073:../../../os/nil/src/ch.c **** 
1074:../../../os/nil/src/ch.c ****   chDbgCheckClassI();
1075:../../../os/nil/src/ch.c ****   chDbgCheck(tqp != NULL);
1076:../../../os/nil/src/ch.c **** 
1077:../../../os/nil/src/ch.c ****   tqp->cnt = nil_ready_all((void *)tqp, tqp->cnt, msg);
 1889               		.loc 1 1077 0
 1890 0002 2C91      		ld r18,X
 1891               	.LVL142:
 1892               	.LBB240:
 1893               	.LBB241:
  98:../../../os/nil/src/ch.c **** 
 1894               		.loc 1 98 0
 1895 0004 27FF      		sbrs r18,7
 1896 0006 00C0      		rjmp .L122
 1897 0008 4091 0000 		lds r20,nil+2
 1898 000c 5091 0000 		lds r21,nil+2+1
 1899 0010 E0E0      		ldi r30,lo8(nil+8)
 1900 0012 F0E0      		ldi r31,hi8(nil+8)
 1901               	.LVL143:
 1902               	.LBB242:
 1903               	.LBB243:
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1904               		.loc 1 589 0
 1905 0014 31E0      		ldi r19,lo8(1)
 1906               	.LVL144:
 1907               	.L123:
 1908               	.LBE243:
 1909               	.LBE242:
 104:../../../os/nil/src/ch.c ****       cnt++;
 1910               		.loc 1 104 0
 1911 0016 9281      		ldd r25,Z+2
 1912 0018 9530      		cpi r25,lo8(5)
 1913 001a 01F0      		breq .L128
 1914               	.L124:
 108:../../../os/nil/src/ch.c ****   }
 1915               		.loc 1 108 0
 1916 001c 3A96      		adiw r30,10
 1917               	.LVL145:
 104:../../../os/nil/src/ch.c ****       cnt++;
 1918               		.loc 1 104 0
 1919 001e 9281      		ldd r25,Z+2
 1920 0020 9530      		cpi r25,lo8(5)
 1921 0022 01F4      		brne .L124
 1922               	.L128:
 1923 0024 8381      		ldd r24,Z+3
 1924 0026 9481      		ldd r25,Z+4
 1925 0028 A817      		cp r26,r24
 1926 002a B907      		cpc r27,r25
 1927 002c 01F4      		brne .L124
 105:../../../os/nil/src/ch.c ****       (void) chSchReadyI(tp, msg);
 1928               		.loc 1 105 0
 1929 002e 2F5F      		subi r18,lo8(-(1))
 1930               	.LVL146:
 1931               	.LBB245:
 1932               	.LBB244:
 588:../../../os/nil/src/ch.c ****   tp->state = NIL_STATE_READY;
 1933               		.loc 1 588 0
 1934 0030 7483      		std Z+4,r23
 1935 0032 6383      		std Z+3,r22
 589:../../../os/nil/src/ch.c ****   tp->timeout = (sysinterval_t)0;
 1936               		.loc 1 589 0
 1937 0034 3283      		std Z+2,r19
 590:../../../os/nil/src/ch.c ****   if (tp < nil.next) {
 1938               		.loc 1 590 0
 1939 0036 1682      		std Z+6,__zero_reg__
 1940 0038 1582      		std Z+5,__zero_reg__
 1941 003a E417      		cp r30,r20
 1942 003c F507      		cpc r31,r21
 1943 003e 00F4      		brsh .L125
 1944 0040 AF01      		movw r20,r30
 1945               	.L125:
 1946               	.LBE244:
 1947               	.LBE245:
 108:../../../os/nil/src/ch.c ****   }
 1948               		.loc 1 108 0
 1949 0042 3A96      		adiw r30,10
 1950               	.LVL147:
  98:../../../os/nil/src/ch.c **** 
 1951               		.loc 1 98 0
 1952 0044 2111      		cpse r18,__zero_reg__
 1953 0046 00C0      		rjmp .L123
 1954 0048 5093 0000 		sts nil+2+1,r21
 1955 004c 4093 0000 		sts nil+2,r20
 1956               	.LVL148:
 1957               	.L122:
 1958               	.LBE241:
 1959               	.LBE240:
 1960               		.loc 1 1077 0
 1961 0050 2C93      		st X,r18
1078:../../../os/nil/src/ch.c **** }
 1962               		.loc 1 1078 0
 1963 0052 0895      		ret
 1964               		.cfi_endproc
 1965               	.LFE125:
 1967               		.comm	nil,58,1
 1968               		.text
 1969               	.Letext0:
 1970               		.file 5 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1971               		.file 6 "/usr/lib/avr/include/stdint.h"
 1972               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1973               		.file 8 "../../../os/nil/include/ch.h"
 1974               		.file 9 "../../../os/oslib/include/chmemcore.h"
 1975               		.file 10 "../../../os/oslib/include/chmemheaps.h"
 1976               		.file 11 "../../../os/oslib/include/chfactory.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ch.c
     /tmp/ccWexp2j.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccWexp2j.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccWexp2j.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccWexp2j.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccWexp2j.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccWexp2j.s:13     .text.nil_find_thread:0000000000000000 nil_find_thread
                            *COM*:000000000000003a nil
     /tmp/ccWexp2j.s:64     .text.nil_ready_all:0000000000000000 nil_ready_all
     /tmp/ccWexp2j.s:160    .text.chSysHalt:0000000000000000 chSysHalt
     /tmp/ccWexp2j.s:188    .text.chSysTimerHandlerI:0000000000000000 chSysTimerHandlerI
     /tmp/ccWexp2j.s:393    .text.chSysUnconditionalLock:0000000000000000 chSysUnconditionalLock
     /tmp/ccWexp2j.s:423    .text.chSysUnconditionalUnlock:0000000000000000 chSysUnconditionalUnlock
     /tmp/ccWexp2j.s:453    .text.chSysGetStatusAndLockX:0000000000000000 chSysGetStatusAndLockX
     /tmp/ccWexp2j.s:495    .text.chSysRestoreStatusX:0000000000000000 chSysRestoreStatusX
     /tmp/ccWexp2j.s:557    .text.chSchReadyI:0000000000000000 chSchReadyI
     /tmp/ccWexp2j.s:594    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsPreemptionRequired
     /tmp/ccWexp2j.s:624    .text.chSchDoPreemption:0000000000000000 chSchDoPreemption
     /tmp/ccWexp2j.s:653    .text.chSchRescheduleS:0000000000000000 chSchRescheduleS
     /tmp/ccWexp2j.s:688    .text.chSchGoSleepTimeoutS:0000000000000000 chSchGoSleepTimeoutS
     /tmp/ccWexp2j.s:867    .text.chTimeIsInRangeX:0000000000000000 chTimeIsInRangeX
     /tmp/ccWexp2j.s:898    .text.chThdCreateI:0000000000000000 chThdCreateI
     /tmp/ccWexp2j.s:1033   .text.chSysInit:0000000000000000 chSysInit
     /tmp/ccWexp2j.s:1149   .text.chThdCreate:0000000000000000 chThdCreate
     /tmp/ccWexp2j.s:1229   .text.chThdExit:0000000000000000 chThdExit
     /tmp/ccWexp2j.s:1329   .text.chThdWait:0000000000000000 chThdWait
     /tmp/ccWexp2j.s:1401   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
     /tmp/ccWexp2j.s:1443   .text.chThdResumeI:0000000000000000 chThdResumeI
     /tmp/ccWexp2j.s:1498   .text.chThdResume:0000000000000000 chThdResume
     /tmp/ccWexp2j.s:1621   .text.chThdSleep:0000000000000000 chThdSleep
     /tmp/ccWexp2j.s:1663   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
     /tmp/ccWexp2j.s:1727   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
     /tmp/ccWexp2j.s:1768   .text.chThdDoDequeueNextI:0000000000000000 chThdDoDequeueNextI
     /tmp/ccWexp2j.s:1855   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
     /tmp/ccWexp2j.s:1879   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
stStopAlarm
stSetAlarm
__avr_in_isr
_port_switch
stGetCounter
stStartAlarm
_port_thread_start
__core_init
__heap_init
__factory_init
nil_thd_configs
__do_clear_bss
