   1               		.file	"chevt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chEvtRegisterMaskWithFlags,"ax",@progbits
  11               	.global	chEvtRegisterMaskWithFlags
  13               	chEvtRegisterMaskWithFlags:
  14               	.LFB98:
  15               		.file 1 "../../../os/nil/src/chevt.c"
   1:../../../os/nil/src/chevt.c **** /*
   2:../../../os/nil/src/chevt.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/nil/src/chevt.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/nil/src/chevt.c **** 
   5:../../../os/nil/src/chevt.c ****     This file is part of ChibiOS.
   6:../../../os/nil/src/chevt.c **** 
   7:../../../os/nil/src/chevt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/nil/src/chevt.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/nil/src/chevt.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/nil/src/chevt.c **** 
  11:../../../os/nil/src/chevt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/nil/src/chevt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/nil/src/chevt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/nil/src/chevt.c ****     GNU General Public License for more details.
  15:../../../os/nil/src/chevt.c **** 
  16:../../../os/nil/src/chevt.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/nil/src/chevt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/nil/src/chevt.c **** */
  19:../../../os/nil/src/chevt.c **** 
  20:../../../os/nil/src/chevt.c **** /**
  21:../../../os/nil/src/chevt.c ****  * @file    nil/src/chevt.c
  22:../../../os/nil/src/chevt.c ****  * @brief   Nil RTOS events source file.
  23:../../../os/nil/src/chevt.c ****  *
  24:../../../os/nil/src/chevt.c ****  * @addtogroup NIL_EVENTS
  25:../../../os/nil/src/chevt.c ****  * @{
  26:../../../os/nil/src/chevt.c ****  */
  27:../../../os/nil/src/chevt.c **** 
  28:../../../os/nil/src/chevt.c **** #include "ch.h"
  29:../../../os/nil/src/chevt.c **** 
  30:../../../os/nil/src/chevt.c **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  31:../../../os/nil/src/chevt.c **** 
  32:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  33:../../../os/nil/src/chevt.c **** /* Module local definitions.                                                 */
  34:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  35:../../../os/nil/src/chevt.c **** 
  36:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  37:../../../os/nil/src/chevt.c **** /* Module exported variables.                                                */
  38:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  39:../../../os/nil/src/chevt.c **** 
  40:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  41:../../../os/nil/src/chevt.c **** /* Module local variables.                                                   */
  42:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  43:../../../os/nil/src/chevt.c **** 
  44:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  45:../../../os/nil/src/chevt.c **** /* Module local functions.                                                   */
  46:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  47:../../../os/nil/src/chevt.c **** 
  48:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  49:../../../os/nil/src/chevt.c **** /* Module interrupt handlers.                                                */
  50:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  51:../../../os/nil/src/chevt.c **** 
  52:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  53:../../../os/nil/src/chevt.c **** /* Module exported functions.                                                */
  54:../../../os/nil/src/chevt.c **** /*===========================================================================*/
  55:../../../os/nil/src/chevt.c **** 
  56:../../../os/nil/src/chevt.c **** /**
  57:../../../os/nil/src/chevt.c ****  * @brief   Registers an Event Listener on an Event Source.
  58:../../../os/nil/src/chevt.c ****  * @details Once a thread has registered as listener on an event source it
  59:../../../os/nil/src/chevt.c ****  *          will be notified of all events broadcasted there.
  60:../../../os/nil/src/chevt.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
  61:../../../os/nil/src/chevt.c ****  *          different threads.
  62:../../../os/nil/src/chevt.c ****  *
  63:../../../os/nil/src/chevt.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
  64:../../../os/nil/src/chevt.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
  65:../../../os/nil/src/chevt.c ****  * @param[in] events    events to be ORed to the thread when
  66:../../../os/nil/src/chevt.c ****  *                      the event source is broadcasted
  67:../../../os/nil/src/chevt.c ****  * @param[in] wflags    mask of flags the listening thread is interested in
  68:../../../os/nil/src/chevt.c ****  *
  69:../../../os/nil/src/chevt.c ****  * @api
  70:../../../os/nil/src/chevt.c ****  */
  71:../../../os/nil/src/chevt.c **** void chEvtRegisterMaskWithFlags(event_source_t *esp,
  72:../../../os/nil/src/chevt.c ****                                 event_listener_t *elp,
  73:../../../os/nil/src/chevt.c ****                                 eventmask_t events,
  74:../../../os/nil/src/chevt.c ****                                 eventflags_t wflags) {
  16               		.loc 1 74 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FB01      		movw r30,r22
  24               	.LBB56:
  25               	.LBB57:
  26               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  27               		.loc 2 430 0
  28               	/* #APP */
  29               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  30 0002 F894      		cli
  31               	 ;  0 "" 2
  32               	/* #NOAPP */
  33               	.LBE57:
  34               	.LBE56:
  75:../../../os/nil/src/chevt.c **** 
  76:../../../os/nil/src/chevt.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
  77:../../../os/nil/src/chevt.c **** 
  78:../../../os/nil/src/chevt.c ****   chSysLock();
  79:../../../os/nil/src/chevt.c ****   elp->next     = esp->next;
  35               		.loc 1 79 0
  36 0004 DC01      		movw r26,r24
  37 0006 6D91      		ld r22,X+
  38 0008 7C91      		ld r23,X
  39 000a 1197      		sbiw r26,1
  40               	.LVL1:
  41 000c 7183      		std Z+1,r23
  42 000e 6083      		st Z,r22
  80:../../../os/nil/src/chevt.c ****   esp->next     = elp;
  43               		.loc 1 80 0
  44 0010 ED93      		st X+,r30
  45 0012 FC93      		st X,r31
  81:../../../os/nil/src/chevt.c ****   elp->listener = chThdGetSelfX();
  46               		.loc 1 81 0
  47 0014 8091 0000 		lds r24,nil
  48 0018 9091 0000 		lds r25,nil+1
  49               	.LVL2:
  50 001c 9383      		std Z+3,r25
  51 001e 8283      		std Z+2,r24
  82:../../../os/nil/src/chevt.c ****   elp->events   = events;
  52               		.loc 1 82 0
  53 0020 4483      		std Z+4,r20
  83:../../../os/nil/src/chevt.c ****   elp->flags    = (eventflags_t)0;
  54               		.loc 1 83 0
  55 0022 1582      		std Z+5,__zero_reg__
  84:../../../os/nil/src/chevt.c ****   elp->wflags   = wflags;
  56               		.loc 1 84 0
  57 0024 2683      		std Z+6,r18
  58               	.LBB58:
  59               	.LBB59:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  60               		.loc 2 440 0
  61               	/* #APP */
  62               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
  63 0026 7894      		sei
  64               	 ;  0 "" 2
  65               	/* #NOAPP */
  66 0028 0895      		ret
  67               	.LBE59:
  68               	.LBE58:
  69               		.cfi_endproc
  70               	.LFE98:
  72               		.section	.text.chEvtUnregister,"ax",@progbits
  73               	.global	chEvtUnregister
  75               	chEvtUnregister:
  76               	.LFB99:
  85:../../../os/nil/src/chevt.c ****   chSysUnlock();
  86:../../../os/nil/src/chevt.c **** }
  87:../../../os/nil/src/chevt.c **** 
  88:../../../os/nil/src/chevt.c **** /**
  89:../../../os/nil/src/chevt.c ****  * @brief   Unregisters an Event Listener from its Event Source.
  90:../../../os/nil/src/chevt.c ****  * @note    If the event listener is not registered on the specified event
  91:../../../os/nil/src/chevt.c ****  *          source then the function does nothing.
  92:../../../os/nil/src/chevt.c ****  * @note    For optimal performance it is better to perform the unregister
  93:../../../os/nil/src/chevt.c ****  *          operations in inverse order of the register operations (elements
  94:../../../os/nil/src/chevt.c ****  *          are found on top of the list).
  95:../../../os/nil/src/chevt.c ****  *
  96:../../../os/nil/src/chevt.c ****  * @param[in] esp       pointer to the  @p event_source_t structure
  97:../../../os/nil/src/chevt.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
  98:../../../os/nil/src/chevt.c ****  *
  99:../../../os/nil/src/chevt.c ****  * @api
 100:../../../os/nil/src/chevt.c ****  */
 101:../../../os/nil/src/chevt.c **** void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  77               		.loc 1 101 0
  78               		.cfi_startproc
  79               	.LVL3:
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  84               	.LBB60:
  85               	.LBB61:
 430:../../../os/common/ports/AVR/chcore.h **** }
  86               		.loc 2 430 0
  87               	/* #APP */
  88               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  89 0000 F894      		cli
  90               	 ;  0 "" 2
  91               	/* #NOAPP */
  92               	.LBE61:
  93               	.LBE60:
 102:../../../os/nil/src/chevt.c ****   event_listener_t *p;
 103:../../../os/nil/src/chevt.c **** 
 104:../../../os/nil/src/chevt.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 105:../../../os/nil/src/chevt.c **** 
 106:../../../os/nil/src/chevt.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 107:../../../os/nil/src/chevt.c ****   p = (event_listener_t *)esp;
  94               		.loc 1 107 0
  95 0002 FC01      		movw r30,r24
  96 0004 00C0      		rjmp .L3
  97               	.LVL4:
  98               	.L5:
 108:../../../os/nil/src/chevt.c ****   /*lint -restore*/
 109:../../../os/nil/src/chevt.c ****   chSysLock();
 110:../../../os/nil/src/chevt.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 111:../../../os/nil/src/chevt.c ****   while (p->next != (event_listener_t *)esp) {
 112:../../../os/nil/src/chevt.c ****   /*lint -restore*/
 113:../../../os/nil/src/chevt.c ****     if (p->next == elp) {
  99               		.loc 1 113 0
 100 0006 2617      		cp r18,r22
 101 0008 3707      		cpc r19,r23
 102 000a 01F0      		breq .L8
 103 000c F901      		movw r30,r18
 104               	.LVL5:
 105               	.L3:
 111:../../../os/nil/src/chevt.c ****   /*lint -restore*/
 106               		.loc 1 111 0
 107 000e 2081      		ld r18,Z
 108 0010 3181      		ldd r19,Z+1
 109 0012 8217      		cp r24,r18
 110 0014 9307      		cpc r25,r19
 111 0016 01F4      		brne .L5
 112               	.LBB62:
 113               	.LBB63:
 114               		.loc 2 440 0
 115               	/* #APP */
 116               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 117 0018 7894      		sei
 118               	 ;  0 "" 2
 119               	/* #NOAPP */
 120 001a 0895      		ret
 121               	.L8:
 122               	.LBE63:
 123               	.LBE62:
 114:../../../os/nil/src/chevt.c ****       p->next = elp->next;
 124               		.loc 1 114 0
 125 001c DB01      		movw r26,r22
 126 001e 8D91      		ld r24,X+
 127 0020 9C91      		ld r25,X
 128               	.LVL6:
 129 0022 9183      		std Z+1,r25
 130 0024 8083      		st Z,r24
 131               	.LBB65:
 132               	.LBB64:
 133               		.loc 2 440 0
 134               	/* #APP */
 135               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 136 0026 7894      		sei
 137               	 ;  0 "" 2
 138               	/* #NOAPP */
 139 0028 0895      		ret
 140               	.LBE64:
 141               	.LBE65:
 142               		.cfi_endproc
 143               	.LFE99:
 145               		.section	.text.chEvtGetAndClearEventsI,"ax",@progbits
 146               	.global	chEvtGetAndClearEventsI
 148               	chEvtGetAndClearEventsI:
 149               	.LFB100:
 115:../../../os/nil/src/chevt.c ****       break;
 116:../../../os/nil/src/chevt.c ****     }
 117:../../../os/nil/src/chevt.c ****     p = p->next;
 118:../../../os/nil/src/chevt.c ****   }
 119:../../../os/nil/src/chevt.c ****   chSysUnlock();
 120:../../../os/nil/src/chevt.c **** }
 121:../../../os/nil/src/chevt.c **** 
 122:../../../os/nil/src/chevt.c **** /**
 123:../../../os/nil/src/chevt.c ****  * @brief   Clears the pending events specified in the events mask.
 124:../../../os/nil/src/chevt.c ****  *
 125:../../../os/nil/src/chevt.c ****  * @param[in] events    the events to be cleared
 126:../../../os/nil/src/chevt.c ****  * @return              The mask of pending events that were cleared.
 127:../../../os/nil/src/chevt.c ****  *
 128:../../../os/nil/src/chevt.c ****  * @iclass
 129:../../../os/nil/src/chevt.c ****  */
 130:../../../os/nil/src/chevt.c **** eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
 150               		.loc 1 130 0
 151               		.cfi_startproc
 152               	.LVL7:
 153               	/* prologue: function */
 154               	/* frame size = 0 */
 155               	/* stack size = 0 */
 156               	.L__stack_usage = 0
 131:../../../os/nil/src/chevt.c ****   eventmask_t m;
 132:../../../os/nil/src/chevt.c **** 
 133:../../../os/nil/src/chevt.c ****   m = chThdGetSelfX()->epmask & events;
 157               		.loc 1 133 0
 158 0000 E091 0000 		lds r30,nil
 159 0004 F091 0000 		lds r31,nil+1
 160 0008 2781      		ldd r18,Z+7
 161               	.LVL8:
 134:../../../os/nil/src/chevt.c ****   chThdGetSelfX()->epmask &= ~events;
 162               		.loc 1 134 0
 163 000a 982F      		mov r25,r24
 164 000c 9095      		com r25
 165 000e 9223      		and r25,r18
 166 0010 9783      		std Z+7,r25
 135:../../../os/nil/src/chevt.c **** 
 136:../../../os/nil/src/chevt.c ****   return m;
 137:../../../os/nil/src/chevt.c **** }
 167               		.loc 1 137 0
 168 0012 8223      		and r24,r18
 169               	.LVL9:
 170 0014 0895      		ret
 171               		.cfi_endproc
 172               	.LFE100:
 174               		.section	.text.chEvtGetAndClearEvents,"ax",@progbits
 175               	.global	chEvtGetAndClearEvents
 177               	chEvtGetAndClearEvents:
 178               	.LFB101:
 138:../../../os/nil/src/chevt.c **** 
 139:../../../os/nil/src/chevt.c **** /**
 140:../../../os/nil/src/chevt.c ****  * @brief   Clears the pending events specified in the events mask.
 141:../../../os/nil/src/chevt.c ****  *
 142:../../../os/nil/src/chevt.c ****  * @param[in] events    the events to be cleared
 143:../../../os/nil/src/chevt.c ****  * @return              The mask of pending events that were cleared.
 144:../../../os/nil/src/chevt.c ****  *
 145:../../../os/nil/src/chevt.c ****  * @api
 146:../../../os/nil/src/chevt.c ****  */
 147:../../../os/nil/src/chevt.c **** eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 179               		.loc 1 147 0
 180               		.cfi_startproc
 181               	.LVL10:
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
 186               	.LBB66:
 187               	.LBB67:
 430:../../../os/common/ports/AVR/chcore.h **** }
 188               		.loc 2 430 0
 189               	/* #APP */
 190               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 191 0000 F894      		cli
 192               	 ;  0 "" 2
 193               	.LVL11:
 194               	/* #NOAPP */
 195               	.LBE67:
 196               	.LBE66:
 197               	.LBB68:
 198               	.LBB69:
 133:../../../os/nil/src/chevt.c ****   chThdGetSelfX()->epmask &= ~events;
 199               		.loc 1 133 0
 200 0002 E091 0000 		lds r30,nil
 201 0006 F091 0000 		lds r31,nil+1
 202 000a 2781      		ldd r18,Z+7
 203               	.LVL12:
 134:../../../os/nil/src/chevt.c **** 
 204               		.loc 1 134 0
 205 000c 982F      		mov r25,r24
 206 000e 9095      		com r25
 207 0010 9223      		and r25,r18
 208 0012 9783      		std Z+7,r25
 209               	.LVL13:
 210               	.LBE69:
 211               	.LBE68:
 212               	.LBB70:
 213               	.LBB71:
 214               		.loc 2 440 0
 215               	/* #APP */
 216               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 217 0014 7894      		sei
 218               	 ;  0 "" 2
 219               	/* #NOAPP */
 220               	.LBE71:
 221               	.LBE70:
 148:../../../os/nil/src/chevt.c ****   eventmask_t m;
 149:../../../os/nil/src/chevt.c **** 
 150:../../../os/nil/src/chevt.c ****   chSysLock();
 151:../../../os/nil/src/chevt.c ****   m = chEvtGetAndClearEventsI(events);
 152:../../../os/nil/src/chevt.c ****   chSysUnlock();
 153:../../../os/nil/src/chevt.c **** 
 154:../../../os/nil/src/chevt.c ****   return m;
 155:../../../os/nil/src/chevt.c **** }
 222               		.loc 1 155 0
 223 0016 8223      		and r24,r18
 224               	.LVL14:
 225 0018 0895      		ret
 226               		.cfi_endproc
 227               	.LFE101:
 229               		.section	.text.chEvtAddEvents,"ax",@progbits
 230               	.global	chEvtAddEvents
 232               	chEvtAddEvents:
 233               	.LFB102:
 156:../../../os/nil/src/chevt.c **** 
 157:../../../os/nil/src/chevt.c **** /**
 158:../../../os/nil/src/chevt.c ****  * @brief   Adds (OR) a set of events to the current thread, this is
 159:../../../os/nil/src/chevt.c ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 160:../../../os/nil/src/chevt.c ****  *
 161:../../../os/nil/src/chevt.c ****  * @param[in] events    the events to be added
 162:../../../os/nil/src/chevt.c ****  * @return              The mask of currently pending events.
 163:../../../os/nil/src/chevt.c ****  *
 164:../../../os/nil/src/chevt.c ****  * @api
 165:../../../os/nil/src/chevt.c ****  */
 166:../../../os/nil/src/chevt.c **** eventmask_t chEvtAddEvents(eventmask_t events) {
 234               		.loc 1 166 0
 235               		.cfi_startproc
 236               	.LVL15:
 237               	/* prologue: function */
 238               	/* frame size = 0 */
 239               	/* stack size = 0 */
 240               	.L__stack_usage = 0
 241               	.LBB72:
 242               	.LBB73:
 430:../../../os/common/ports/AVR/chcore.h **** }
 243               		.loc 2 430 0
 244               	/* #APP */
 245               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 246 0000 F894      		cli
 247               	 ;  0 "" 2
 248               	/* #NOAPP */
 249               	.LBE73:
 250               	.LBE72:
 167:../../../os/nil/src/chevt.c ****   eventmask_t newevt;
 168:../../../os/nil/src/chevt.c **** 
 169:../../../os/nil/src/chevt.c ****   chSysLock();
 170:../../../os/nil/src/chevt.c ****   newevt = chEvtAddEventsI(events);
 251               		.loc 1 170 0
 252 0002 E091 0000 		lds r30,nil
 253 0006 F091 0000 		lds r31,nil+1
 254 000a 9781      		ldd r25,Z+7
 255 000c 892B      		or r24,r25
 256               	.LVL16:
 257 000e 8783      		std Z+7,r24
 258               	.LVL17:
 259               	.LBB74:
 260               	.LBB75:
 261               		.loc 2 440 0
 262               	/* #APP */
 263               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 264 0010 7894      		sei
 265               	 ;  0 "" 2
 266               	/* #NOAPP */
 267               	.LBE75:
 268               	.LBE74:
 171:../../../os/nil/src/chevt.c ****   chSysUnlock();
 172:../../../os/nil/src/chevt.c **** 
 173:../../../os/nil/src/chevt.c ****   return newevt;
 174:../../../os/nil/src/chevt.c **** }
 269               		.loc 1 174 0
 270 0012 0895      		ret
 271               		.cfi_endproc
 272               	.LFE102:
 274               		.section	.text.chEvtGetAndClearFlags,"ax",@progbits
 275               	.global	chEvtGetAndClearFlags
 277               	chEvtGetAndClearFlags:
 278               	.LFB104:
 175:../../../os/nil/src/chevt.c **** 
 176:../../../os/nil/src/chevt.c **** /**
 177:../../../os/nil/src/chevt.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 178:../../../os/nil/src/chevt.c ****  *          Source.
 179:../../../os/nil/src/chevt.c ****  * @details This function variants ORs the specified event flags to all the
 180:../../../os/nil/src/chevt.c ****  *          threads registered on the @p event_source_t in addition to the
 181:../../../os/nil/src/chevt.c ****  *          event flags specified by the threads themselves in the
 182:../../../os/nil/src/chevt.c ****  *          @p event_listener_t objects.
 183:../../../os/nil/src/chevt.c ****  * @post    This function does not reschedule so a call to a rescheduling
 184:../../../os/nil/src/chevt.c ****  *          function must be performed before unlocking the kernel. Note that
 185:../../../os/nil/src/chevt.c ****  *          interrupt handlers always reschedule on exit so an explicit
 186:../../../os/nil/src/chevt.c ****  *          reschedule must not be performed in ISRs.
 187:../../../os/nil/src/chevt.c ****  *
 188:../../../os/nil/src/chevt.c ****  * @param[in] esp       pointer to the @p event_source_t structure
 189:../../../os/nil/src/chevt.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 190:../../../os/nil/src/chevt.c ****  *
 191:../../../os/nil/src/chevt.c ****  * @iclass
 192:../../../os/nil/src/chevt.c ****  */
 193:../../../os/nil/src/chevt.c **** void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 194:../../../os/nil/src/chevt.c ****   event_listener_t *elp;
 195:../../../os/nil/src/chevt.c **** 
 196:../../../os/nil/src/chevt.c ****   chDbgCheckClassI();
 197:../../../os/nil/src/chevt.c ****   chDbgCheck(esp != NULL);
 198:../../../os/nil/src/chevt.c **** 
 199:../../../os/nil/src/chevt.c ****   elp = esp->next;
 200:../../../os/nil/src/chevt.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 201:../../../os/nil/src/chevt.c ****   while (elp != (event_listener_t *)esp) {
 202:../../../os/nil/src/chevt.c ****   /*lint -restore*/
 203:../../../os/nil/src/chevt.c ****     elp->flags |= flags;
 204:../../../os/nil/src/chevt.c ****     /* When flags == 0 the thread will always be signaled because the
 205:../../../os/nil/src/chevt.c ****        source does not emit any flag.*/
 206:../../../os/nil/src/chevt.c ****     if ((flags == (eventflags_t)0) ||
 207:../../../os/nil/src/chevt.c ****         ((flags & elp->wflags) != (eventflags_t)0)) {
 208:../../../os/nil/src/chevt.c ****       chEvtSignalI(elp->listener, elp->events);
 209:../../../os/nil/src/chevt.c ****     }
 210:../../../os/nil/src/chevt.c ****     elp = elp->next;
 211:../../../os/nil/src/chevt.c ****   }
 212:../../../os/nil/src/chevt.c **** }
 213:../../../os/nil/src/chevt.c **** 
 214:../../../os/nil/src/chevt.c **** /**
 215:../../../os/nil/src/chevt.c ****  * @brief   Returns the flags associated to an @p event_listener_t.
 216:../../../os/nil/src/chevt.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 217:../../../os/nil/src/chevt.c ****  *          cleared.
 218:../../../os/nil/src/chevt.c ****  *
 219:../../../os/nil/src/chevt.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 220:../../../os/nil/src/chevt.c ****  * @return              The flags added to the listener by the associated
 221:../../../os/nil/src/chevt.c ****  *                      event source.
 222:../../../os/nil/src/chevt.c ****  *
 223:../../../os/nil/src/chevt.c ****  * @api
 224:../../../os/nil/src/chevt.c ****  */
 225:../../../os/nil/src/chevt.c **** eventflags_t chEvtGetAndClearFlags(event_listener_t *elp) {
 279               		.loc 1 225 0
 280               		.cfi_startproc
 281               	.LVL18:
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 0 */
 285               	.L__stack_usage = 0
 286 0000 FC01      		movw r30,r24
 287               	.LBB76:
 288               	.LBB77:
 430:../../../os/common/ports/AVR/chcore.h **** }
 289               		.loc 2 430 0
 290               	/* #APP */
 291               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 292 0002 F894      		cli
 293               	 ;  0 "" 2
 294               	/* #NOAPP */
 295               	.LBE77:
 296               	.LBE76:
 226:../../../os/nil/src/chevt.c ****   eventflags_t flags;
 227:../../../os/nil/src/chevt.c **** 
 228:../../../os/nil/src/chevt.c ****   chSysLock();
 229:../../../os/nil/src/chevt.c ****   flags = elp->flags;
 297               		.loc 1 229 0
 298 0004 9581      		ldd r25,Z+5
 299               	.LVL19:
 230:../../../os/nil/src/chevt.c ****   elp->flags = (eventflags_t)0;
 300               		.loc 1 230 0
 301 0006 1582      		std Z+5,__zero_reg__
 302               	.LBB78:
 303               	.LBB79:
 304               		.loc 2 440 0
 305               	/* #APP */
 306               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 307 0008 7894      		sei
 308               	 ;  0 "" 2
 309               	/* #NOAPP */
 310               	.LBE79:
 311               	.LBE78:
 231:../../../os/nil/src/chevt.c ****   chSysUnlock();
 232:../../../os/nil/src/chevt.c **** 
 233:../../../os/nil/src/chevt.c ****   return flags & elp->wflags;
 312               		.loc 1 233 0
 313 000a 8681      		ldd r24,Z+6
 314               	.LVL20:
 234:../../../os/nil/src/chevt.c **** }
 315               		.loc 1 234 0
 316 000c 8923      		and r24,r25
 317 000e 0895      		ret
 318               		.cfi_endproc
 319               	.LFE104:
 321               		.section	.text.chEvtSignalI,"ax",@progbits
 322               	.global	chEvtSignalI
 324               	chEvtSignalI:
 325               	.LFB106:
 235:../../../os/nil/src/chevt.c **** 
 236:../../../os/nil/src/chevt.c **** /**
 237:../../../os/nil/src/chevt.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 238:../../../os/nil/src/chevt.c ****  *
 239:../../../os/nil/src/chevt.c ****  * @param[in] tp        the thread to be signaled
 240:../../../os/nil/src/chevt.c ****  * @param[in] events    the event flags set to be ORed
 241:../../../os/nil/src/chevt.c ****  *
 242:../../../os/nil/src/chevt.c ****  * @api
 243:../../../os/nil/src/chevt.c ****  */
 244:../../../os/nil/src/chevt.c **** void chEvtSignal(thread_t *tp, eventmask_t events) {
 245:../../../os/nil/src/chevt.c **** 
 246:../../../os/nil/src/chevt.c ****   chSysLock();
 247:../../../os/nil/src/chevt.c ****   chEvtSignalI(tp, events);
 248:../../../os/nil/src/chevt.c ****   chSchRescheduleS();
 249:../../../os/nil/src/chevt.c ****   chSysUnlock();
 250:../../../os/nil/src/chevt.c **** }
 251:../../../os/nil/src/chevt.c **** 
 252:../../../os/nil/src/chevt.c **** /**
 253:../../../os/nil/src/chevt.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 254:../../../os/nil/src/chevt.c ****  * @post    This function does not reschedule so a call to a rescheduling
 255:../../../os/nil/src/chevt.c ****  *          function must be performed before unlocking the kernel. Note that
 256:../../../os/nil/src/chevt.c ****  *          interrupt handlers always reschedule on exit so an explicit
 257:../../../os/nil/src/chevt.c ****  *          reschedule must not be performed in ISRs.
 258:../../../os/nil/src/chevt.c ****  *
 259:../../../os/nil/src/chevt.c ****  * @param[in] tp        the thread to be signaled
 260:../../../os/nil/src/chevt.c ****  * @param[in] events    the event flags set to be ORed
 261:../../../os/nil/src/chevt.c ****  *
 262:../../../os/nil/src/chevt.c ****  * @iclass
 263:../../../os/nil/src/chevt.c ****  */
 264:../../../os/nil/src/chevt.c **** void chEvtSignalI(thread_t *tp, eventmask_t events) {
 326               		.loc 1 264 0
 327               		.cfi_startproc
 328               	.LVL21:
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 0 */
 332               	.L__stack_usage = 0
 333 0000 FC01      		movw r30,r24
 265:../../../os/nil/src/chevt.c **** 
 266:../../../os/nil/src/chevt.c ****   chDbgCheckClassI();
 267:../../../os/nil/src/chevt.c ****   chDbgCheck(tp != NULL);
 268:../../../os/nil/src/chevt.c **** 
 269:../../../os/nil/src/chevt.c ****   tp->epmask |= events;
 334               		.loc 1 269 0
 335 0002 9781      		ldd r25,Z+7
 336 0004 692B      		or r22,r25
 337               	.LVL22:
 338 0006 6783      		std Z+7,r22
 270:../../../os/nil/src/chevt.c ****   if ((NIL_THD_IS_WTOREVT(tp) &&
 339               		.loc 1 270 0
 340 0008 8281      		ldd r24,Z+2
 341               	.LVL23:
 342 000a 8630      		cpi r24,lo8(6)
 343 000c 01F0      		breq .L17
 271:../../../os/nil/src/chevt.c ****        ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) ||
 344               		.loc 1 271 0
 345 000e 8730      		cpi r24,lo8(7)
 346 0010 01F0      		breq .L18
 347               	.L13:
 348 0012 0895      		ret
 349               	.L18:
 272:../../../os/nil/src/chevt.c ****       (NIL_THD_IS_WTANDEVT(tp) &&
 273:../../../os/nil/src/chevt.c ****        ((tp->epmask & tp->u1.ewmask) == tp->u1.ewmask))) {
 350               		.loc 1 273 0
 351 0014 8381      		ldd r24,Z+3
 272:../../../os/nil/src/chevt.c ****       (NIL_THD_IS_WTANDEVT(tp) &&
 352               		.loc 1 272 0
 353 0016 6823      		and r22,r24
 354 0018 8613      		cpse r24,r22
 355 001a 00C0      		rjmp .L13
 356               	.L15:
 274:../../../os/nil/src/chevt.c ****     (void) chSchReadyI(tp, MSG_OK);
 357               		.loc 1 274 0
 358 001c 60E0      		ldi r22,0
 359 001e 70E0      		ldi r23,0
 360 0020 CF01      		movw r24,r30
 361 0022 0C94 0000 		jmp chSchReadyI
 362               	.LVL24:
 363               	.L17:
 270:../../../os/nil/src/chevt.c ****        ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) ||
 364               		.loc 1 270 0 discriminator 1
 365 0026 8381      		ldd r24,Z+3
 366 0028 6823      		and r22,r24
 367 002a 01F4      		brne .L15
 368 002c 0895      		ret
 369               		.cfi_endproc
 370               	.LFE106:
 372               		.section	.text.chEvtBroadcastFlagsI,"ax",@progbits
 373               	.global	chEvtBroadcastFlagsI
 375               	chEvtBroadcastFlagsI:
 376               	.LFB103:
 193:../../../os/nil/src/chevt.c ****   event_listener_t *elp;
 377               		.loc 1 193 0
 378               		.cfi_startproc
 379               	.LVL25:
 380 0000 EF92      		push r14
 381               	.LCFI0:
 382               		.cfi_def_cfa_offset 3
 383               		.cfi_offset 14, -2
 384 0002 FF92      		push r15
 385               	.LCFI1:
 386               		.cfi_def_cfa_offset 4
 387               		.cfi_offset 15, -3
 388 0004 1F93      		push r17
 389               	.LCFI2:
 390               		.cfi_def_cfa_offset 5
 391               		.cfi_offset 17, -4
 392 0006 CF93      		push r28
 393               	.LCFI3:
 394               		.cfi_def_cfa_offset 6
 395               		.cfi_offset 28, -5
 396 0008 DF93      		push r29
 397               	.LCFI4:
 398               		.cfi_def_cfa_offset 7
 399               		.cfi_offset 29, -6
 400               	/* prologue: function */
 401               	/* frame size = 0 */
 402               	/* stack size = 5 */
 403               	.L__stack_usage = 5
 404 000a 7C01      		movw r14,r24
 405 000c 162F      		mov r17,r22
 199:../../../os/nil/src/chevt.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 406               		.loc 1 199 0
 407 000e FC01      		movw r30,r24
 408 0010 C081      		ld r28,Z
 409 0012 D181      		ldd r29,Z+1
 410               	.LVL26:
 201:../../../os/nil/src/chevt.c ****   /*lint -restore*/
 411               		.loc 1 201 0
 412 0014 8C17      		cp r24,r28
 413 0016 9D07      		cpc r25,r29
 414 0018 01F0      		breq .L19
 415               	.LVL27:
 416               	.L29:
 203:../../../os/nil/src/chevt.c ****     /* When flags == 0 the thread will always be signaled because the
 417               		.loc 1 203 0
 418 001a 8D81      		ldd r24,Y+5
 419 001c 812B      		or r24,r17
 420 001e 8D83      		std Y+5,r24
 206:../../../os/nil/src/chevt.c ****         ((flags & elp->wflags) != (eventflags_t)0)) {
 421               		.loc 1 206 0
 422 0020 1123      		tst r17
 423 0022 01F0      		breq .L21
 206:../../../os/nil/src/chevt.c ****         ((flags & elp->wflags) != (eventflags_t)0)) {
 424               		.loc 1 206 0 is_stmt 0 discriminator 1
 425 0024 8E81      		ldd r24,Y+6
 426 0026 8123      		and r24,r17
 427 0028 01F0      		breq .L22
 428               	.L21:
 208:../../../os/nil/src/chevt.c ****     }
 429               		.loc 1 208 0 is_stmt 1
 430 002a 6C81      		ldd r22,Y+4
 431 002c 8A81      		ldd r24,Y+2
 432 002e 9B81      		ldd r25,Y+3
 433 0030 0E94 0000 		call chEvtSignalI
 434               	.LVL28:
 435               	.L22:
 210:../../../os/nil/src/chevt.c ****   }
 436               		.loc 1 210 0
 437 0034 0990      		ld __tmp_reg__,Y+
 438 0036 D881      		ld r29,Y
 439 0038 C02D      		mov r28,__tmp_reg__
 440               	.LVL29:
 201:../../../os/nil/src/chevt.c ****   /*lint -restore*/
 441               		.loc 1 201 0
 442 003a EC16      		cp r14,r28
 443 003c FD06      		cpc r15,r29
 444 003e 01F4      		brne .L29
 445               	.L19:
 446               	/* epilogue start */
 212:../../../os/nil/src/chevt.c **** 
 447               		.loc 1 212 0
 448 0040 DF91      		pop r29
 449 0042 CF91      		pop r28
 450               	.LVL30:
 451 0044 1F91      		pop r17
 452               	.LVL31:
 453 0046 FF90      		pop r15
 454 0048 EF90      		pop r14
 455               	.LVL32:
 456 004a 0895      		ret
 457               		.cfi_endproc
 458               	.LFE103:
 460               		.section	.text.chEvtSignal,"ax",@progbits
 461               	.global	chEvtSignal
 463               	chEvtSignal:
 464               	.LFB105:
 244:../../../os/nil/src/chevt.c **** 
 465               		.loc 1 244 0
 466               		.cfi_startproc
 467               	.LVL33:
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 0 */
 471               	.L__stack_usage = 0
 472               	.LBB80:
 473               	.LBB81:
 430:../../../os/common/ports/AVR/chcore.h **** }
 474               		.loc 2 430 0
 475               	/* #APP */
 476               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 477 0000 F894      		cli
 478               	 ;  0 "" 2
 479               	/* #NOAPP */
 480               	.LBE81:
 481               	.LBE80:
 247:../../../os/nil/src/chevt.c ****   chSchRescheduleS();
 482               		.loc 1 247 0
 483 0002 0E94 0000 		call chEvtSignalI
 484               	.LVL34:
 248:../../../os/nil/src/chevt.c ****   chSysUnlock();
 485               		.loc 1 248 0
 486 0006 0E94 0000 		call chSchRescheduleS
 487               	.LVL35:
 488               	.LBB82:
 489               	.LBB83:
 490               		.loc 2 440 0
 491               	/* #APP */
 492               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 493 000a 7894      		sei
 494               	 ;  0 "" 2
 495               	/* #NOAPP */
 496 000c 0895      		ret
 497               	.LBE83:
 498               	.LBE82:
 499               		.cfi_endproc
 500               	.LFE105:
 502               		.section	.text.chEvtBroadcastFlags,"ax",@progbits
 503               	.global	chEvtBroadcastFlags
 505               	chEvtBroadcastFlags:
 506               	.LFB107:
 275:../../../os/nil/src/chevt.c ****   }
 276:../../../os/nil/src/chevt.c **** }
 277:../../../os/nil/src/chevt.c **** 
 278:../../../os/nil/src/chevt.c **** /**
 279:../../../os/nil/src/chevt.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 280:../../../os/nil/src/chevt.c ****  *          Source.
 281:../../../os/nil/src/chevt.c ****  * @details This function variants ORs the specified event flags to all the
 282:../../../os/nil/src/chevt.c ****  *          threads registered on the @p event_source_t in addition to the
 283:../../../os/nil/src/chevt.c ****  *          event flags specified by the threads themselves in the
 284:../../../os/nil/src/chevt.c ****  *          @p event_listener_t objects.
 285:../../../os/nil/src/chevt.c ****  *
 286:../../../os/nil/src/chevt.c ****  * @param[in] esp       pointer to the @p event_source_t structure
 287:../../../os/nil/src/chevt.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 288:../../../os/nil/src/chevt.c ****  *
 289:../../../os/nil/src/chevt.c ****  * @api
 290:../../../os/nil/src/chevt.c ****  */
 291:../../../os/nil/src/chevt.c **** void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 507               		.loc 1 291 0
 508               		.cfi_startproc
 509               	.LVL36:
 510               	/* prologue: function */
 511               	/* frame size = 0 */
 512               	/* stack size = 0 */
 513               	.L__stack_usage = 0
 514               	.LBB84:
 515               	.LBB85:
 430:../../../os/common/ports/AVR/chcore.h **** }
 516               		.loc 2 430 0
 517               	/* #APP */
 518               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 519 0000 F894      		cli
 520               	 ;  0 "" 2
 521               	/* #NOAPP */
 522               	.LBE85:
 523               	.LBE84:
 292:../../../os/nil/src/chevt.c **** 
 293:../../../os/nil/src/chevt.c ****   chSysLock();
 294:../../../os/nil/src/chevt.c ****   chEvtBroadcastFlagsI(esp, flags);
 524               		.loc 1 294 0
 525 0002 0E94 0000 		call chEvtBroadcastFlagsI
 526               	.LVL37:
 295:../../../os/nil/src/chevt.c ****   chSchRescheduleS();
 527               		.loc 1 295 0
 528 0006 0E94 0000 		call chSchRescheduleS
 529               	.LVL38:
 530               	.LBB86:
 531               	.LBB87:
 532               		.loc 2 440 0
 533               	/* #APP */
 534               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 535 000a 7894      		sei
 536               	 ;  0 "" 2
 537               	/* #NOAPP */
 538 000c 0895      		ret
 539               	.LBE87:
 540               	.LBE86:
 541               		.cfi_endproc
 542               	.LFE107:
 544               		.section	.text.chEvtGetAndClearFlagsI,"ax",@progbits
 545               	.global	chEvtGetAndClearFlagsI
 547               	chEvtGetAndClearFlagsI:
 548               	.LFB108:
 296:../../../os/nil/src/chevt.c ****   chSysUnlock();
 297:../../../os/nil/src/chevt.c **** }
 298:../../../os/nil/src/chevt.c **** 
 299:../../../os/nil/src/chevt.c **** /**
 300:../../../os/nil/src/chevt.c ****  * @brief   Returns the unmasked flags associated to an @p event_listener_t.
 301:../../../os/nil/src/chevt.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 302:../../../os/nil/src/chevt.c ****  *          cleared.
 303:../../../os/nil/src/chevt.c ****  *
 304:../../../os/nil/src/chevt.c ****  * @param[in] elp       pointer to the @p event_listener_t structure
 305:../../../os/nil/src/chevt.c ****  * @return              The flags added to the listener by the associated
 306:../../../os/nil/src/chevt.c ****  *                      event source.
 307:../../../os/nil/src/chevt.c ****  *
 308:../../../os/nil/src/chevt.c ****  * @iclass
 309:../../../os/nil/src/chevt.c ****  */
 310:../../../os/nil/src/chevt.c **** eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
 549               		.loc 1 310 0
 550               		.cfi_startproc
 551               	.LVL39:
 552               	/* prologue: function */
 553               	/* frame size = 0 */
 554               	/* stack size = 0 */
 555               	.L__stack_usage = 0
 556 0000 FC01      		movw r30,r24
 311:../../../os/nil/src/chevt.c ****   eventflags_t flags;
 312:../../../os/nil/src/chevt.c **** 
 313:../../../os/nil/src/chevt.c ****   flags = elp->flags;
 557               		.loc 1 313 0
 558 0002 9581      		ldd r25,Z+5
 559               	.LVL40:
 314:../../../os/nil/src/chevt.c ****   elp->flags = (eventflags_t)0;
 560               		.loc 1 314 0
 561 0004 1582      		std Z+5,__zero_reg__
 315:../../../os/nil/src/chevt.c **** 
 316:../../../os/nil/src/chevt.c ****   return flags & elp->wflags;
 562               		.loc 1 316 0
 563 0006 8681      		ldd r24,Z+6
 564               	.LVL41:
 317:../../../os/nil/src/chevt.c **** }
 565               		.loc 1 317 0
 566 0008 8923      		and r24,r25
 567 000a 0895      		ret
 568               		.cfi_endproc
 569               	.LFE108:
 571               		.section	.text.chEvtDispatch,"ax",@progbits
 572               	.global	chEvtDispatch
 574               	chEvtDispatch:
 575               	.LFB109:
 318:../../../os/nil/src/chevt.c **** 
 319:../../../os/nil/src/chevt.c **** /**
 320:../../../os/nil/src/chevt.c ****  * @brief   Invokes the event handlers associated to an event flags mask.
 321:../../../os/nil/src/chevt.c ****  *
 322:../../../os/nil/src/chevt.c ****  * @param[in] events    mask of events to be dispatched
 323:../../../os/nil/src/chevt.c ****  * @param[in] handlers  an array of @p evhandler_t. The array must have size
 324:../../../os/nil/src/chevt.c ****  *                      equal to the number of bits in eventmask_t.
 325:../../../os/nil/src/chevt.c ****  *
 326:../../../os/nil/src/chevt.c ****  * @api
 327:../../../os/nil/src/chevt.c ****  */
 328:../../../os/nil/src/chevt.c **** void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 576               		.loc 1 328 0
 577               		.cfi_startproc
 578               	.LVL42:
 579 0000 BF92      		push r11
 580               	.LCFI5:
 581               		.cfi_def_cfa_offset 3
 582               		.cfi_offset 11, -2
 583 0002 CF92      		push r12
 584               	.LCFI6:
 585               		.cfi_def_cfa_offset 4
 586               		.cfi_offset 12, -3
 587 0004 DF92      		push r13
 588               	.LCFI7:
 589               		.cfi_def_cfa_offset 5
 590               		.cfi_offset 13, -4
 591 0006 EF92      		push r14
 592               	.LCFI8:
 593               		.cfi_def_cfa_offset 6
 594               		.cfi_offset 14, -5
 595 0008 FF92      		push r15
 596               	.LCFI9:
 597               		.cfi_def_cfa_offset 7
 598               		.cfi_offset 15, -6
 599 000a 0F93      		push r16
 600               	.LCFI10:
 601               		.cfi_def_cfa_offset 8
 602               		.cfi_offset 16, -7
 603 000c 1F93      		push r17
 604               	.LCFI11:
 605               		.cfi_def_cfa_offset 9
 606               		.cfi_offset 17, -8
 607 000e CF93      		push r28
 608               	.LCFI12:
 609               		.cfi_def_cfa_offset 10
 610               		.cfi_offset 28, -9
 611 0010 DF93      		push r29
 612               	.LCFI13:
 613               		.cfi_def_cfa_offset 11
 614               		.cfi_offset 29, -10
 615               	/* prologue: function */
 616               	/* frame size = 0 */
 617               	/* stack size = 9 */
 618               	.L__stack_usage = 9
 619 0012 B62E      		mov r11,r22
 620               	.LVL43:
 329:../../../os/nil/src/chevt.c ****   eventid_t eid;
 330:../../../os/nil/src/chevt.c **** 
 331:../../../os/nil/src/chevt.c ****   chDbgCheck(handlers != NULL);
 332:../../../os/nil/src/chevt.c **** 
 333:../../../os/nil/src/chevt.c ****   eid = (eventid_t)0;
 334:../../../os/nil/src/chevt.c ****   while (events != (eventmask_t)0) {
 621               		.loc 1 334 0
 622 0014 6623      		tst r22
 623 0016 01F0      		breq .L36
 624 0018 EC01      		movw r28,r24
 625 001a C12C      		mov r12,__zero_reg__
 626 001c D12C      		mov r13,__zero_reg__
 627 001e 7601      		movw r14,r12
 628 0020 462F      		mov r20,r22
 629 0022 50E0      		ldi r21,0
 335:../../../os/nil/src/chevt.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 336:../../../os/nil/src/chevt.c ****       chDbgAssert(handlers[eid] != NULL, "null handler");
 337:../../../os/nil/src/chevt.c ****       events &= ~EVENT_MASK(eid);
 630               		.loc 1 337 0
 631 0024 01E0      		ldi r16,lo8(1)
 632 0026 10E0      		ldi r17,0
 633               	.LVL44:
 634               	.L38:
 335:../../../os/nil/src/chevt.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 635               		.loc 1 335 0
 636 0028 9A01      		movw r18,r20
 637 002a 0C2C      		mov r0,r12
 638 002c 00C0      		rjmp 2f
 639               		1:
 640 002e 3595      		asr r19
 641 0030 2795      		ror r18
 642               		2:
 643 0032 0A94      		dec r0
 644 0034 02F4      		brpl 1b
 645 0036 20FD      		sbrc r18,0
 646 0038 00C0      		rjmp .L43
 338:../../../os/nil/src/chevt.c ****       handlers[eid](eid);
 339:../../../os/nil/src/chevt.c ****     }
 340:../../../os/nil/src/chevt.c ****     eid++;
 647               		.loc 1 340 0
 648 003a 8FEF      		ldi r24,-1
 649 003c C81A      		sub r12,r24
 650 003e D80A      		sbc r13,r24
 651 0040 E80A      		sbc r14,r24
 652 0042 F80A      		sbc r15,r24
 653               	.LVL45:
 654 0044 2296      		adiw r28,2
 655 0046 00C0      		rjmp .L38
 656               	.L43:
 337:../../../os/nil/src/chevt.c ****       handlers[eid](eid);
 657               		.loc 1 337 0
 658 0048 9801      		movw r18,r16
 659 004a 0C2C      		mov r0,r12
 660 004c 00C0      		rjmp 2f
 661               		1:
 662 004e 220F      		lsl r18
 663 0050 331F      		rol r19
 664               		2:
 665 0052 0A94      		dec r0
 666 0054 02F4      		brpl 1b
 667 0056 C901      		movw r24,r18
 668 0058 8095      		com r24
 669 005a B822      		and r11,r24
 670               	.LVL46:
 338:../../../os/nil/src/chevt.c ****       handlers[eid](eid);
 671               		.loc 1 338 0
 672 005c E991      		ld r30,Y+
 673 005e F991      		ld r31,Y+
 674 0060 C701      		movw r24,r14
 675 0062 B601      		movw r22,r12
 676 0064 0995      		icall
 677               	.LVL47:
 678               		.loc 1 340 0
 679 0066 3FEF      		ldi r19,-1
 680 0068 C31A      		sub r12,r19
 681 006a D30A      		sbc r13,r19
 682 006c E30A      		sbc r14,r19
 683 006e F30A      		sbc r15,r19
 684               	.LVL48:
 334:../../../os/nil/src/chevt.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 685               		.loc 1 334 0
 686 0070 BB20      		tst r11
 687 0072 01F0      		breq .L36
 688 0074 4B2D      		mov r20,r11
 689 0076 50E0      		ldi r21,0
 690 0078 00C0      		rjmp .L38
 691               	.LVL49:
 692               	.L36:
 693               	/* epilogue start */
 341:../../../os/nil/src/chevt.c ****   }
 342:../../../os/nil/src/chevt.c **** }
 694               		.loc 1 342 0
 695 007a DF91      		pop r29
 696 007c CF91      		pop r28
 697 007e 1F91      		pop r17
 698 0080 0F91      		pop r16
 699 0082 FF90      		pop r15
 700 0084 EF90      		pop r14
 701 0086 DF90      		pop r13
 702 0088 CF90      		pop r12
 703 008a BF90      		pop r11
 704               	.LVL50:
 705 008c 0895      		ret
 706               		.cfi_endproc
 707               	.LFE109:
 709               		.section	.text.chEvtWaitOneTimeout,"ax",@progbits
 710               	.global	chEvtWaitOneTimeout
 712               	chEvtWaitOneTimeout:
 713               	.LFB110:
 343:../../../os/nil/src/chevt.c **** 
 344:../../../os/nil/src/chevt.c **** /**
 345:../../../os/nil/src/chevt.c ****  * @brief   Waits for exactly one of the specified events.
 346:../../../os/nil/src/chevt.c ****  * @details The function waits for one event among those specified in
 347:../../../os/nil/src/chevt.c ****  *          @p events to become pending then the event is cleared and returned.
 348:../../../os/nil/src/chevt.c ****  * @note    One and only one event is served in the function, the one with the
 349:../../../os/nil/src/chevt.c ****  *          lowest event id. The function is meant to be invoked into a loop
 350:../../../os/nil/src/chevt.c ****  *          in order to serve all the pending events.<br>
 351:../../../os/nil/src/chevt.c ****  *          This means that Event Listeners with a lower event identifier have
 352:../../../os/nil/src/chevt.c ****  *          an higher priority.
 353:../../../os/nil/src/chevt.c ****  *
 354:../../../os/nil/src/chevt.c ****  * @param[in] events    events that the function should wait
 355:../../../os/nil/src/chevt.c ****  *                      for, @p ALL_EVENTS enables all the events
 356:../../../os/nil/src/chevt.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 357:../../../os/nil/src/chevt.c ****  *                      the following special values are allowed:
 358:../../../os/nil/src/chevt.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 359:../../../os/nil/src/chevt.c ****  *                      - @a TIME_INFINITE no timeout.
 360:../../../os/nil/src/chevt.c ****  *                      .
 361:../../../os/nil/src/chevt.c ****  * @return              The mask of the lowest event id served and cleared.
 362:../../../os/nil/src/chevt.c ****  * @retval 0            if the operation has timed out.
 363:../../../os/nil/src/chevt.c ****  *
 364:../../../os/nil/src/chevt.c ****  * @api
 365:../../../os/nil/src/chevt.c ****  */
 366:../../../os/nil/src/chevt.c **** eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 714               		.loc 1 366 0
 715               		.cfi_startproc
 716               	.LVL51:
 717 0000 1F93      		push r17
 718               	.LCFI14:
 719               		.cfi_def_cfa_offset 3
 720               		.cfi_offset 17, -2
 721 0002 CF93      		push r28
 722               	.LCFI15:
 723               		.cfi_def_cfa_offset 4
 724               		.cfi_offset 28, -3
 725 0004 DF93      		push r29
 726               	.LCFI16:
 727               		.cfi_def_cfa_offset 5
 728               		.cfi_offset 29, -4
 729               	/* prologue: function */
 730               	/* frame size = 0 */
 731               	/* stack size = 3 */
 732               	.L__stack_usage = 3
 367:../../../os/nil/src/chevt.c ****   thread_t *ctp = nil.current;
 733               		.loc 1 367 0
 734 0006 C091 0000 		lds r28,nil
 735 000a D091 0000 		lds r29,nil+1
 736               	.LVL52:
 737               	.LBB88:
 738               	.LBB89:
 430:../../../os/common/ports/AVR/chcore.h **** }
 739               		.loc 2 430 0
 740               	/* #APP */
 741               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 742 000e F894      		cli
 743               	 ;  0 "" 2
 744               	/* #NOAPP */
 745               	.LBE89:
 746               	.LBE88:
 368:../../../os/nil/src/chevt.c ****   eventmask_t m;
 369:../../../os/nil/src/chevt.c **** 
 370:../../../os/nil/src/chevt.c ****   chSysLock();
 371:../../../os/nil/src/chevt.c ****   m = ctp->epmask & events;
 747               		.loc 1 371 0
 748 0010 2F81      		ldd r18,Y+7
 749 0012 922F      		mov r25,r18
 750 0014 9823      		and r25,r24
 751               	.LVL53:
 372:../../../os/nil/src/chevt.c ****   if (m == (eventmask_t)0) {
 752               		.loc 1 372 0
 753 0016 01F4      		brne .L45
 373:../../../os/nil/src/chevt.c ****     if (TIME_IMMEDIATE == timeout) {
 754               		.loc 1 373 0
 755 0018 6F3F      		cpi r22,-1
 756 001a 9FEF      		ldi r25,-1
 757 001c 7907      		cpc r23,r25
 758               	.LVL54:
 759 001e 01F0      		breq .L49
 760 0020 182F      		mov r17,r24
 374:../../../os/nil/src/chevt.c ****       chSysUnlock();
 375:../../../os/nil/src/chevt.c **** 
 376:../../../os/nil/src/chevt.c ****       return (eventmask_t)0;
 377:../../../os/nil/src/chevt.c ****     }
 378:../../../os/nil/src/chevt.c ****     ctp->u1.ewmask = events;
 761               		.loc 1 378 0
 762 0022 8B83      		std Y+3,r24
 379:../../../os/nil/src/chevt.c ****     if (chSchGoSleepTimeoutS(NIL_STATE_WTOREVT, timeout) < MSG_OK) {
 763               		.loc 1 379 0
 764 0024 86E0      		ldi r24,lo8(6)
 765               	.LVL55:
 766 0026 0E94 0000 		call chSchGoSleepTimeoutS
 767               	.LVL56:
 768 002a 97FD      		sbrc r25,7
 769 002c 00C0      		rjmp .L49
 380:../../../os/nil/src/chevt.c ****       chSysUnlock();
 381:../../../os/nil/src/chevt.c **** 
 382:../../../os/nil/src/chevt.c ****       return (eventmask_t)0;
 383:../../../os/nil/src/chevt.c ****     }
 384:../../../os/nil/src/chevt.c ****     m = ctp->epmask & events;
 770               		.loc 1 384 0
 771 002e 2F81      		ldd r18,Y+7
 772 0030 912F      		mov r25,r17
 773 0032 9223      		and r25,r18
 774               	.LVL57:
 775               	.L45:
 385:../../../os/nil/src/chevt.c ****   }
 386:../../../os/nil/src/chevt.c ****   m ^= m & (m - (eventmask_t)1);
 776               		.loc 1 386 0
 777 0034 892F      		mov r24,r25
 778 0036 8195      		neg r24
 779 0038 9823      		and r25,r24
 780               	.LVL58:
 387:../../../os/nil/src/chevt.c ****   ctp->epmask &= ~m;
 781               		.loc 1 387 0
 782 003a 892F      		mov r24,r25
 783 003c 8095      		com r24
 784 003e 2823      		and r18,r24
 785 0040 2F83      		std Y+7,r18
 786               	.LBB90:
 787               	.LBB91:
 788               		.loc 2 440 0
 789               	/* #APP */
 790               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 791 0042 7894      		sei
 792               	 ;  0 "" 2
 793               	/* #NOAPP */
 794               	.LBE91:
 795               	.LBE90:
 388:../../../os/nil/src/chevt.c ****   chSysUnlock();
 389:../../../os/nil/src/chevt.c **** 
 390:../../../os/nil/src/chevt.c ****   return m;
 796               		.loc 1 390 0
 797 0044 892F      		mov r24,r25
 798               	/* epilogue start */
 391:../../../os/nil/src/chevt.c **** }
 799               		.loc 1 391 0
 800 0046 DF91      		pop r29
 801 0048 CF91      		pop r28
 802               	.LVL59:
 803 004a 1F91      		pop r17
 804 004c 0895      		ret
 805               	.LVL60:
 806               	.L49:
 807               	.LBB92:
 808               	.LBB93:
 809               		.loc 2 440 0
 810               	/* #APP */
 811               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 812 004e 7894      		sei
 813               	 ;  0 "" 2
 814               	/* #NOAPP */
 815               	.LBE93:
 816               	.LBE92:
 382:../../../os/nil/src/chevt.c ****     }
 817               		.loc 1 382 0
 818 0050 80E0      		ldi r24,0
 819               	/* epilogue start */
 820               		.loc 1 391 0
 821 0052 DF91      		pop r29
 822 0054 CF91      		pop r28
 823               	.LVL61:
 824 0056 1F91      		pop r17
 825 0058 0895      		ret
 826               		.cfi_endproc
 827               	.LFE110:
 829               		.section	.text.chEvtWaitAnyTimeout,"ax",@progbits
 830               	.global	chEvtWaitAnyTimeout
 832               	chEvtWaitAnyTimeout:
 833               	.LFB111:
 392:../../../os/nil/src/chevt.c **** 
 393:../../../os/nil/src/chevt.c **** /**
 394:../../../os/nil/src/chevt.c ****  * @brief   Waits for any of the specified events.
 395:../../../os/nil/src/chevt.c ****  * @details The function waits for any event among those specified in
 396:../../../os/nil/src/chevt.c ****  *          @p mask to become pending then the events are cleared and
 397:../../../os/nil/src/chevt.c ****  *          returned.
 398:../../../os/nil/src/chevt.c ****  *
 399:../../../os/nil/src/chevt.c ****  * @param[in] mask      mask of the event flags that the function should wait
 400:../../../os/nil/src/chevt.c ****  *                      for, @p ALL_EVENTS enables all the events
 401:../../../os/nil/src/chevt.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 402:../../../os/nil/src/chevt.c ****  *                      the following special values are allowed:
 403:../../../os/nil/src/chevt.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 404:../../../os/nil/src/chevt.c ****  *                      - @a TIME_INFINITE no timeout.
 405:../../../os/nil/src/chevt.c ****  *                      .
 406:../../../os/nil/src/chevt.c ****  * @return              The mask of the served and cleared events.
 407:../../../os/nil/src/chevt.c ****  * @retval 0            if the operation has timed out.
 408:../../../os/nil/src/chevt.c ****  *
 409:../../../os/nil/src/chevt.c ****  * @api
 410:../../../os/nil/src/chevt.c ****  */
 411:../../../os/nil/src/chevt.c **** eventmask_t chEvtWaitAnyTimeout(eventmask_t mask, sysinterval_t timeout) {
 834               		.loc 1 411 0
 835               		.cfi_startproc
 836               	.LVL62:
 837 0000 1F93      		push r17
 838               	.LCFI17:
 839               		.cfi_def_cfa_offset 3
 840               		.cfi_offset 17, -2
 841 0002 CF93      		push r28
 842               	.LCFI18:
 843               		.cfi_def_cfa_offset 4
 844               		.cfi_offset 28, -3
 845 0004 DF93      		push r29
 846               	.LCFI19:
 847               		.cfi_def_cfa_offset 5
 848               		.cfi_offset 29, -4
 849               	/* prologue: function */
 850               	/* frame size = 0 */
 851               	/* stack size = 3 */
 852               	.L__stack_usage = 3
 412:../../../os/nil/src/chevt.c ****   thread_t *ctp = nil.current;
 853               		.loc 1 412 0
 854 0006 C091 0000 		lds r28,nil
 855 000a D091 0000 		lds r29,nil+1
 856               	.LVL63:
 857               	.LBB94:
 858               	.LBB95:
 430:../../../os/common/ports/AVR/chcore.h **** }
 859               		.loc 2 430 0
 860               	/* #APP */
 861               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 862 000e F894      		cli
 863               	 ;  0 "" 2
 864               	/* #NOAPP */
 865               	.LBE95:
 866               	.LBE94:
 413:../../../os/nil/src/chevt.c ****   eventmask_t m;
 414:../../../os/nil/src/chevt.c **** 
 415:../../../os/nil/src/chevt.c ****   chSysLock();
 416:../../../os/nil/src/chevt.c ****   if ((m = (ctp->epmask & mask)) == (eventmask_t)0) {
 867               		.loc 1 416 0
 868 0010 2F81      		ldd r18,Y+7
 869 0012 922F      		mov r25,r18
 870 0014 9823      		and r25,r24
 871               	.LVL64:
 872 0016 01F4      		brne .L51
 417:../../../os/nil/src/chevt.c ****     if (TIME_IMMEDIATE == timeout) {
 873               		.loc 1 417 0
 874 0018 6F3F      		cpi r22,-1
 875 001a 9FEF      		ldi r25,-1
 876 001c 7907      		cpc r23,r25
 877               	.LVL65:
 878 001e 01F0      		breq .L55
 879 0020 182F      		mov r17,r24
 418:../../../os/nil/src/chevt.c ****       chSysUnlock();
 419:../../../os/nil/src/chevt.c **** 
 420:../../../os/nil/src/chevt.c ****       return (eventmask_t)0;
 421:../../../os/nil/src/chevt.c ****     }
 422:../../../os/nil/src/chevt.c ****     ctp->u1.ewmask = mask;
 880               		.loc 1 422 0
 881 0022 8B83      		std Y+3,r24
 423:../../../os/nil/src/chevt.c ****     if (chSchGoSleepTimeoutS(NIL_STATE_WTOREVT, timeout) < MSG_OK) {
 882               		.loc 1 423 0
 883 0024 86E0      		ldi r24,lo8(6)
 884               	.LVL66:
 885 0026 0E94 0000 		call chSchGoSleepTimeoutS
 886               	.LVL67:
 887 002a 97FD      		sbrc r25,7
 888 002c 00C0      		rjmp .L55
 424:../../../os/nil/src/chevt.c ****       chSysUnlock();
 425:../../../os/nil/src/chevt.c **** 
 426:../../../os/nil/src/chevt.c ****       return (eventmask_t)0;
 427:../../../os/nil/src/chevt.c ****     }
 428:../../../os/nil/src/chevt.c ****     m = ctp->epmask & mask;
 889               		.loc 1 428 0
 890 002e 2F81      		ldd r18,Y+7
 891 0030 912F      		mov r25,r17
 892 0032 9223      		and r25,r18
 893               	.LVL68:
 894               	.L51:
 429:../../../os/nil/src/chevt.c ****   }
 430:../../../os/nil/src/chevt.c ****   ctp->epmask &= ~m;
 895               		.loc 1 430 0
 896 0034 892F      		mov r24,r25
 897 0036 8095      		com r24
 898 0038 2823      		and r18,r24
 899 003a 2F83      		std Y+7,r18
 900               	.LBB96:
 901               	.LBB97:
 902               		.loc 2 440 0
 903               	/* #APP */
 904               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 905 003c 7894      		sei
 906               	 ;  0 "" 2
 907               	/* #NOAPP */
 908               	.LBE97:
 909               	.LBE96:
 431:../../../os/nil/src/chevt.c ****   chSysUnlock();
 432:../../../os/nil/src/chevt.c **** 
 433:../../../os/nil/src/chevt.c ****   return m;
 910               		.loc 1 433 0
 911 003e 892F      		mov r24,r25
 912               	/* epilogue start */
 434:../../../os/nil/src/chevt.c **** }
 913               		.loc 1 434 0
 914 0040 DF91      		pop r29
 915 0042 CF91      		pop r28
 916               	.LVL69:
 917 0044 1F91      		pop r17
 918 0046 0895      		ret
 919               	.LVL70:
 920               	.L55:
 921               	.LBB98:
 922               	.LBB99:
 923               		.loc 2 440 0
 924               	/* #APP */
 925               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 926 0048 7894      		sei
 927               	 ;  0 "" 2
 928               	/* #NOAPP */
 929               	.LBE99:
 930               	.LBE98:
 426:../../../os/nil/src/chevt.c ****     }
 931               		.loc 1 426 0
 932 004a 80E0      		ldi r24,0
 933               	/* epilogue start */
 934               		.loc 1 434 0
 935 004c DF91      		pop r29
 936 004e CF91      		pop r28
 937               	.LVL71:
 938 0050 1F91      		pop r17
 939 0052 0895      		ret
 940               		.cfi_endproc
 941               	.LFE111:
 943               		.section	.text.chEvtWaitAllTimeout,"ax",@progbits
 944               	.global	chEvtWaitAllTimeout
 946               	chEvtWaitAllTimeout:
 947               	.LFB112:
 435:../../../os/nil/src/chevt.c **** 
 436:../../../os/nil/src/chevt.c **** /**
 437:../../../os/nil/src/chevt.c ****  * @brief   Waits for all the specified events.
 438:../../../os/nil/src/chevt.c ****  * @details The function waits for all the events specified in @p mask to
 439:../../../os/nil/src/chevt.c ****  *          become pending then the events are cleared and returned.
 440:../../../os/nil/src/chevt.c ****  *
 441:../../../os/nil/src/chevt.c ****  * @param[in] mask      mask of the event flags that the function should wait
 442:../../../os/nil/src/chevt.c ****  *                      for, @p ALL_EVENTS enables all the events
 443:../../../os/nil/src/chevt.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 444:../../../os/nil/src/chevt.c ****  *                      the following special values are allowed:
 445:../../../os/nil/src/chevt.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 446:../../../os/nil/src/chevt.c ****  *                      - @a TIME_INFINITE no timeout.
 447:../../../os/nil/src/chevt.c ****  *                      .
 448:../../../os/nil/src/chevt.c ****  * @return              The mask of the served and cleared events.
 449:../../../os/nil/src/chevt.c ****  * @retval 0            if the operation has timed out.
 450:../../../os/nil/src/chevt.c ****  *
 451:../../../os/nil/src/chevt.c ****  * @api
 452:../../../os/nil/src/chevt.c ****  */
 453:../../../os/nil/src/chevt.c **** eventmask_t chEvtWaitAllTimeout(eventmask_t mask, sysinterval_t timeout) {
 948               		.loc 1 453 0
 949               		.cfi_startproc
 950               	.LVL72:
 951 0000 0F93      		push r16
 952               	.LCFI20:
 953               		.cfi_def_cfa_offset 3
 954               		.cfi_offset 16, -2
 955 0002 1F93      		push r17
 956               	.LCFI21:
 957               		.cfi_def_cfa_offset 4
 958               		.cfi_offset 17, -3
 959 0004 CF93      		push r28
 960               	.LCFI22:
 961               		.cfi_def_cfa_offset 5
 962               		.cfi_offset 28, -4
 963               	/* prologue: function */
 964               	/* frame size = 0 */
 965               	/* stack size = 3 */
 966               	.L__stack_usage = 3
 967 0006 C82F      		mov r28,r24
 454:../../../os/nil/src/chevt.c ****   thread_t *ctp = nil.current;
 968               		.loc 1 454 0
 969 0008 0091 0000 		lds r16,nil
 970 000c 1091 0000 		lds r17,nil+1
 971               	.LVL73:
 972               	.LBB100:
 973               	.LBB101:
 430:../../../os/common/ports/AVR/chcore.h **** }
 974               		.loc 2 430 0
 975               	/* #APP */
 976               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 977 0010 F894      		cli
 978               	 ;  0 "" 2
 979               	/* #NOAPP */
 980               	.LBE101:
 981               	.LBE100:
 455:../../../os/nil/src/chevt.c **** 
 456:../../../os/nil/src/chevt.c ****   chSysLock();
 457:../../../os/nil/src/chevt.c ****   if ((ctp->epmask & mask) != mask) {
 982               		.loc 1 457 0
 983 0012 F801      		movw r30,r16
 984 0014 8781      		ldd r24,Z+7
 985               	.LVL74:
 986 0016 982F      		mov r25,r24
 987 0018 9C23      		and r25,r28
 988 001a C917      		cp r28,r25
 989 001c 01F0      		breq .L57
 458:../../../os/nil/src/chevt.c ****     if (TIME_IMMEDIATE == timeout) {
 990               		.loc 1 458 0
 991 001e 6F3F      		cpi r22,-1
 992 0020 FFEF      		ldi r31,-1
 993 0022 7F07      		cpc r23,r31
 994 0024 01F0      		breq .L60
 459:../../../os/nil/src/chevt.c ****       chSysUnlock();
 460:../../../os/nil/src/chevt.c **** 
 461:../../../os/nil/src/chevt.c ****       return (eventmask_t)0;
 462:../../../os/nil/src/chevt.c ****     }
 463:../../../os/nil/src/chevt.c ****     ctp->u1.ewmask = mask;
 995               		.loc 1 463 0
 996 0026 F801      		movw r30,r16
 997 0028 C383      		std Z+3,r28
 464:../../../os/nil/src/chevt.c ****     if (chSchGoSleepTimeoutS(NIL_STATE_WTANDEVT, timeout) < MSG_OK) {
 998               		.loc 1 464 0
 999 002a 87E0      		ldi r24,lo8(7)
 1000 002c 0E94 0000 		call chSchGoSleepTimeoutS
 1001               	.LVL75:
 1002 0030 97FD      		sbrc r25,7
 1003 0032 00C0      		rjmp .L60
 1004 0034 F801      		movw r30,r16
 1005 0036 8781      		ldd r24,Z+7
 1006               	.L57:
 465:../../../os/nil/src/chevt.c ****       chSysUnlock();
 466:../../../os/nil/src/chevt.c **** 
 467:../../../os/nil/src/chevt.c ****       return (eventmask_t)0;
 468:../../../os/nil/src/chevt.c ****     }
 469:../../../os/nil/src/chevt.c ****   }
 470:../../../os/nil/src/chevt.c ****   ctp->epmask &= ~mask;
 1007               		.loc 1 470 0
 1008 0038 9C2F      		mov r25,r28
 1009 003a 9095      		com r25
 1010 003c 8923      		and r24,r25
 1011 003e F801      		movw r30,r16
 1012 0040 8783      		std Z+7,r24
 1013               	.LBB102:
 1014               	.LBB103:
 1015               		.loc 2 440 0
 1016               	/* #APP */
 1017               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1018 0042 7894      		sei
 1019               	 ;  0 "" 2
 1020               	/* #NOAPP */
 1021               	.LBE103:
 1022               	.LBE102:
 471:../../../os/nil/src/chevt.c ****   chSysUnlock();
 472:../../../os/nil/src/chevt.c **** 
 473:../../../os/nil/src/chevt.c ****   return mask;
 1023               		.loc 1 473 0
 1024 0044 8C2F      		mov r24,r28
 1025               	/* epilogue start */
 474:../../../os/nil/src/chevt.c **** }
 1026               		.loc 1 474 0
 1027 0046 CF91      		pop r28
 1028               	.LVL76:
 1029 0048 1F91      		pop r17
 1030 004a 0F91      		pop r16
 1031               	.LVL77:
 1032 004c 0895      		ret
 1033               	.LVL78:
 1034               	.L60:
 1035               	.LBB104:
 1036               	.LBB105:
 1037               		.loc 2 440 0
 1038               	/* #APP */
 1039               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1040 004e 7894      		sei
 1041               	 ;  0 "" 2
 1042               	/* #NOAPP */
 1043               	.LBE105:
 1044               	.LBE104:
 467:../../../os/nil/src/chevt.c ****     }
 1045               		.loc 1 467 0
 1046 0050 80E0      		ldi r24,0
 1047               	/* epilogue start */
 1048               		.loc 1 474 0
 1049 0052 CF91      		pop r28
 1050               	.LVL79:
 1051 0054 1F91      		pop r17
 1052 0056 0F91      		pop r16
 1053               	.LVL80:
 1054 0058 0895      		ret
 1055               		.cfi_endproc
 1056               	.LFE112:
 1058               		.text
 1059               	.Letext0:
 1060               		.file 3 "/usr/lib/avr/include/stdint.h"
 1061               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1062               		.file 5 "../../../os/nil/include/ch.h"
 1063               		.file 6 "../../../os/nil/include/chevt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chevt.c
     /tmp/ccnGzVKz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnGzVKz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnGzVKz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnGzVKz.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnGzVKz.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnGzVKz.s:13     .text.chEvtRegisterMaskWithFlags:0000000000000000 chEvtRegisterMaskWithFlags
     /tmp/ccnGzVKz.s:75     .text.chEvtUnregister:0000000000000000 chEvtUnregister
     /tmp/ccnGzVKz.s:148    .text.chEvtGetAndClearEventsI:0000000000000000 chEvtGetAndClearEventsI
     /tmp/ccnGzVKz.s:177    .text.chEvtGetAndClearEvents:0000000000000000 chEvtGetAndClearEvents
     /tmp/ccnGzVKz.s:232    .text.chEvtAddEvents:0000000000000000 chEvtAddEvents
     /tmp/ccnGzVKz.s:277    .text.chEvtGetAndClearFlags:0000000000000000 chEvtGetAndClearFlags
     /tmp/ccnGzVKz.s:324    .text.chEvtSignalI:0000000000000000 chEvtSignalI
     /tmp/ccnGzVKz.s:375    .text.chEvtBroadcastFlagsI:0000000000000000 chEvtBroadcastFlagsI
     /tmp/ccnGzVKz.s:463    .text.chEvtSignal:0000000000000000 chEvtSignal
     /tmp/ccnGzVKz.s:505    .text.chEvtBroadcastFlags:0000000000000000 chEvtBroadcastFlags
     /tmp/ccnGzVKz.s:547    .text.chEvtGetAndClearFlagsI:0000000000000000 chEvtGetAndClearFlagsI
     /tmp/ccnGzVKz.s:574    .text.chEvtDispatch:0000000000000000 chEvtDispatch
     /tmp/ccnGzVKz.s:712    .text.chEvtWaitOneTimeout:0000000000000000 chEvtWaitOneTimeout
     /tmp/ccnGzVKz.s:832    .text.chEvtWaitAnyTimeout:0000000000000000 chEvtWaitAnyTimeout
     /tmp/ccnGzVKz.s:946    .text.chEvtWaitAllTimeout:0000000000000000 chEvtWaitAllTimeout

UNDEFINED SYMBOLS
nil
chSchReadyI
chSchRescheduleS
chSchGoSleepTimeoutS
