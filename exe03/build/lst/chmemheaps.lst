   1               		.file	"chmemheaps.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__heap_init,"ax",@progbits
  11               	.global	__heap_init
  13               	__heap_init:
  14               	.LFB98:
  15               		.file 1 "../../../os/oslib/src/chmemheaps.c"
   1:../../../os/oslib/src/chmemheaps.c **** /*
   2:../../../os/oslib/src/chmemheaps.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/src/chmemheaps.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/src/chmemheaps.c **** 
   5:../../../os/oslib/src/chmemheaps.c ****     This file is part of ChibiOS.
   6:../../../os/oslib/src/chmemheaps.c **** 
   7:../../../os/oslib/src/chmemheaps.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/src/chmemheaps.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/src/chmemheaps.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/src/chmemheaps.c **** 
  11:../../../os/oslib/src/chmemheaps.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/src/chmemheaps.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/src/chmemheaps.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/src/chmemheaps.c ****     GNU General Public License for more details.
  15:../../../os/oslib/src/chmemheaps.c **** 
  16:../../../os/oslib/src/chmemheaps.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/src/chmemheaps.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/src/chmemheaps.c **** */
  19:../../../os/oslib/src/chmemheaps.c **** 
  20:../../../os/oslib/src/chmemheaps.c **** /**
  21:../../../os/oslib/src/chmemheaps.c ****  * @file    oslib/src/chmemheaps.c
  22:../../../os/oslib/src/chmemheaps.c ****  * @brief   Memory heaps code.
  23:../../../os/oslib/src/chmemheaps.c ****  *
  24:../../../os/oslib/src/chmemheaps.c ****  * @addtogroup oslib_memheaps
  25:../../../os/oslib/src/chmemheaps.c ****  * @details Heap Allocator related APIs.
  26:../../../os/oslib/src/chmemheaps.c ****  *          <h2>Operation mode</h2>
  27:../../../os/oslib/src/chmemheaps.c ****  *          The heap allocator implements a first-fit strategy and its APIs
  28:../../../os/oslib/src/chmemheaps.c ****  *          are functionally equivalent to the usual @p malloc() and @p free()
  29:../../../os/oslib/src/chmemheaps.c ****  *          library functions. The main difference is that the OS heap APIs
  30:../../../os/oslib/src/chmemheaps.c ****  *          are guaranteed to be thread safe and there is the ability to
  31:../../../os/oslib/src/chmemheaps.c ****  *          return memory blocks aligned to arbitrary powers of two.<br>
  32:../../../os/oslib/src/chmemheaps.c ****  * @pre     In order to use the heap APIs the @p CH_CFG_USE_HEAP option must
  33:../../../os/oslib/src/chmemheaps.c ****  *          be enabled in @p chconf.h.
  34:../../../os/oslib/src/chmemheaps.c ****  * @note    Compatible with RT and NIL.
  35:../../../os/oslib/src/chmemheaps.c ****  * @{
  36:../../../os/oslib/src/chmemheaps.c ****  */
  37:../../../os/oslib/src/chmemheaps.c **** 
  38:../../../os/oslib/src/chmemheaps.c **** #include "ch.h"
  39:../../../os/oslib/src/chmemheaps.c **** 
  40:../../../os/oslib/src/chmemheaps.c **** #if (CH_CFG_USE_HEAP == TRUE) || defined(__DOXYGEN__)
  41:../../../os/oslib/src/chmemheaps.c **** 
  42:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  43:../../../os/oslib/src/chmemheaps.c **** /* Module local definitions.                                                 */
  44:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  45:../../../os/oslib/src/chmemheaps.c **** 
  46:../../../os/oslib/src/chmemheaps.c **** /*
  47:../../../os/oslib/src/chmemheaps.c ****  * Defaults on the best synchronization mechanism available.
  48:../../../os/oslib/src/chmemheaps.c ****  */
  49:../../../os/oslib/src/chmemheaps.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  50:../../../os/oslib/src/chmemheaps.c **** #define H_LOCK(h)       chMtxLock(&(h)->mtx)
  51:../../../os/oslib/src/chmemheaps.c **** #define H_UNLOCK(h)     chMtxUnlock(&(h)->mtx)
  52:../../../os/oslib/src/chmemheaps.c **** #else
  53:../../../os/oslib/src/chmemheaps.c **** #define H_LOCK(h)       (void) chSemWait(&(h)->sem)
  54:../../../os/oslib/src/chmemheaps.c **** #define H_UNLOCK(h)     chSemSignal(&(h)->sem)
  55:../../../os/oslib/src/chmemheaps.c **** #endif
  56:../../../os/oslib/src/chmemheaps.c **** 
  57:../../../os/oslib/src/chmemheaps.c **** #define H_BLOCK(hp)     ((hp) + 1U)
  58:../../../os/oslib/src/chmemheaps.c **** 
  59:../../../os/oslib/src/chmemheaps.c **** #define H_LIMIT(hp)     (H_BLOCK(hp) + H_PAGES(hp))
  60:../../../os/oslib/src/chmemheaps.c **** 
  61:../../../os/oslib/src/chmemheaps.c **** #define H_NEXT(hp)      ((hp)->free.next)
  62:../../../os/oslib/src/chmemheaps.c **** 
  63:../../../os/oslib/src/chmemheaps.c **** #define H_PAGES(hp)     ((hp)->free.pages)
  64:../../../os/oslib/src/chmemheaps.c **** 
  65:../../../os/oslib/src/chmemheaps.c **** #define H_HEAP(hp)      ((hp)->used.heap)
  66:../../../os/oslib/src/chmemheaps.c **** 
  67:../../../os/oslib/src/chmemheaps.c **** #define H_SIZE(hp)      ((hp)->used.size)
  68:../../../os/oslib/src/chmemheaps.c **** 
  69:../../../os/oslib/src/chmemheaps.c **** /*
  70:../../../os/oslib/src/chmemheaps.c ****  * Number of pages between two pointers in a MISRA-compatible way.
  71:../../../os/oslib/src/chmemheaps.c ****  */
  72:../../../os/oslib/src/chmemheaps.c **** #define NPAGES(p1, p2)                                                      \
  73:../../../os/oslib/src/chmemheaps.c ****   /*lint -save -e9033 [10.8] The cast is safe.*/                            \
  74:../../../os/oslib/src/chmemheaps.c ****   ((size_t)((p1) - (p2)))                                                   \
  75:../../../os/oslib/src/chmemheaps.c ****   /*lint -restore*/
  76:../../../os/oslib/src/chmemheaps.c **** 
  77:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  78:../../../os/oslib/src/chmemheaps.c **** /* Module exported variables.                                                */
  79:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  80:../../../os/oslib/src/chmemheaps.c **** 
  81:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  82:../../../os/oslib/src/chmemheaps.c **** /* Module local types.                                                       */
  83:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  84:../../../os/oslib/src/chmemheaps.c **** 
  85:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  86:../../../os/oslib/src/chmemheaps.c **** /* Module local variables.                                                   */
  87:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  88:../../../os/oslib/src/chmemheaps.c **** 
  89:../../../os/oslib/src/chmemheaps.c **** /**
  90:../../../os/oslib/src/chmemheaps.c ****  * @brief   Default heap descriptor.
  91:../../../os/oslib/src/chmemheaps.c ****  */
  92:../../../os/oslib/src/chmemheaps.c **** static memory_heap_t default_heap;
  93:../../../os/oslib/src/chmemheaps.c **** 
  94:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  95:../../../os/oslib/src/chmemheaps.c **** /* Module local functions.                                                   */
  96:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  97:../../../os/oslib/src/chmemheaps.c **** 
  98:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
  99:../../../os/oslib/src/chmemheaps.c **** /* Module exported functions.                                                */
 100:../../../os/oslib/src/chmemheaps.c **** /*===========================================================================*/
 101:../../../os/oslib/src/chmemheaps.c **** 
 102:../../../os/oslib/src/chmemheaps.c **** /**
 103:../../../os/oslib/src/chmemheaps.c ****  * @brief   Initializes the default heap.
 104:../../../os/oslib/src/chmemheaps.c ****  *
 105:../../../os/oslib/src/chmemheaps.c ****  * @notapi
 106:../../../os/oslib/src/chmemheaps.c ****  */
 107:../../../os/oslib/src/chmemheaps.c **** void __heap_init(void) {
  16               		.loc 1 107 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 108:../../../os/oslib/src/chmemheaps.c **** 
 109:../../../os/oslib/src/chmemheaps.c ****   default_heap.provider = chCoreAllocAlignedWithOffset;
  22               		.loc 1 109 0
  23 0000 E0E0      		ldi r30,lo8(default_heap)
  24 0002 F0E0      		ldi r31,hi8(default_heap)
  25 0004 80E0      		ldi r24,lo8(gs(chCoreAllocFromTop))
  26 0006 90E0      		ldi r25,hi8(gs(chCoreAllocFromTop))
  27 0008 9183      		std Z+1,r25
  28 000a 8083      		st Z,r24
 110:../../../os/oslib/src/chmemheaps.c ****   H_NEXT(&default_heap.header) = NULL;
  29               		.loc 1 110 0
  30 000c 1382      		std Z+3,__zero_reg__
  31 000e 1282      		std Z+2,__zero_reg__
 111:../../../os/oslib/src/chmemheaps.c ****   H_PAGES(&default_heap.header) = 0;
  32               		.loc 1 111 0
  33 0010 1582      		std Z+5,__zero_reg__
  34 0012 1482      		std Z+4,__zero_reg__
 112:../../../os/oslib/src/chmemheaps.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 113:../../../os/oslib/src/chmemheaps.c ****   chMtxObjectInit(&default_heap.mtx);
 114:../../../os/oslib/src/chmemheaps.c **** #else
 115:../../../os/oslib/src/chmemheaps.c ****   chSemObjectInit(&default_heap.sem, (cnt_t)1);
  35               		.loc 1 115 0
  36 0014 81E0      		ldi r24,lo8(1)
  37 0016 8683      		std Z+6,r24
  38 0018 0895      		ret
  39               		.cfi_endproc
  40               	.LFE98:
  42               		.section	.text.chHeapObjectInit,"ax",@progbits
  43               	.global	chHeapObjectInit
  45               	chHeapObjectInit:
  46               	.LFB99:
 116:../../../os/oslib/src/chmemheaps.c **** #endif
 117:../../../os/oslib/src/chmemheaps.c **** }
 118:../../../os/oslib/src/chmemheaps.c **** 
 119:../../../os/oslib/src/chmemheaps.c **** /**
 120:../../../os/oslib/src/chmemheaps.c ****  * @brief   Initializes a memory heap from a static memory area.
 121:../../../os/oslib/src/chmemheaps.c ****  * @note    The heap buffer base and size are adjusted if the passed buffer
 122:../../../os/oslib/src/chmemheaps.c ****  *          is not aligned to @p CH_HEAP_ALIGNMENT. This mean that the
 123:../../../os/oslib/src/chmemheaps.c ****  *          effective heap size can be less than @p size.
 124:../../../os/oslib/src/chmemheaps.c ****  *
 125:../../../os/oslib/src/chmemheaps.c ****  * @param[out] heapp    pointer to the memory heap descriptor to be initialized
 126:../../../os/oslib/src/chmemheaps.c ****  * @param[in] buf       heap buffer base
 127:../../../os/oslib/src/chmemheaps.c ****  * @param[in] size      heap size
 128:../../../os/oslib/src/chmemheaps.c ****  *
 129:../../../os/oslib/src/chmemheaps.c ****  * @init
 130:../../../os/oslib/src/chmemheaps.c ****  */
 131:../../../os/oslib/src/chmemheaps.c **** void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  47               		.loc 1 131 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54 0000 DC01      		movw r26,r24
 132:../../../os/oslib/src/chmemheaps.c ****   heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
  55               		.loc 1 132 0
  56 0002 FB01      		movw r30,r22
  57 0004 3396      		adiw r30,3
  58 0006 EC7F      		andi r30,252
  59               	.LVL1:
 133:../../../os/oslib/src/chmemheaps.c **** 
 134:../../../os/oslib/src/chmemheaps.c ****   chDbgCheck((heapp != NULL) && (size > 0U));
 135:../../../os/oslib/src/chmemheaps.c **** 
 136:../../../os/oslib/src/chmemheaps.c ****   /* Adjusting the size in case the initial block was not correctly
 137:../../../os/oslib/src/chmemheaps.c ****      aligned.*/
 138:../../../os/oslib/src/chmemheaps.c ****   /*lint -save -e9033 [10.8] Required cast operations.*/
 139:../../../os/oslib/src/chmemheaps.c ****   size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 140:../../../os/oslib/src/chmemheaps.c ****   /*lint restore*/
 141:../../../os/oslib/src/chmemheaps.c **** 
 142:../../../os/oslib/src/chmemheaps.c ****   /* Initializing the heap header.*/
 143:../../../os/oslib/src/chmemheaps.c ****   heapp->provider = NULL;
  60               		.loc 1 143 0
  61 0008 1196      		adiw r26,1
  62 000a 1C92      		st X,__zero_reg__
  63 000c 1E92      		st -X,__zero_reg__
 144:../../../os/oslib/src/chmemheaps.c ****   H_NEXT(&heapp->header) = hp;
  64               		.loc 1 144 0
  65 000e 1396      		adiw r26,2+1
  66 0010 FC93      		st X,r31
  67 0012 EE93      		st -X,r30
  68 0014 1297      		sbiw r26,2
 145:../../../os/oslib/src/chmemheaps.c ****   H_PAGES(&heapp->header) = 0;
  69               		.loc 1 145 0
  70 0016 1596      		adiw r26,4+1
  71 0018 1C92      		st X,__zero_reg__
  72 001a 1E92      		st -X,__zero_reg__
  73 001c 1497      		sbiw r26,4
 146:../../../os/oslib/src/chmemheaps.c ****   H_NEXT(hp) = NULL;
  74               		.loc 1 146 0
  75 001e 1182      		std Z+1,__zero_reg__
  76 0020 1082      		st Z,__zero_reg__
 147:../../../os/oslib/src/chmemheaps.c ****   H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
  77               		.loc 1 147 0
  78 0022 4450      		subi r20,4
  79 0024 5109      		sbc r21,__zero_reg__
  80               	.LVL2:
  81 0026 CF01      		movw r24,r30
  82               	.LVL3:
  83 0028 861B      		sub r24,r22
  84 002a 970B      		sbc r25,r23
  85 002c 481B      		sub r20,r24
  86 002e 590B      		sbc r21,r25
  87               	.LVL4:
  88 0030 5695      		lsr r21
  89 0032 4795      		ror r20
  90 0034 5695      		lsr r21
  91 0036 4795      		ror r20
  92 0038 5383      		std Z+3,r21
  93 003a 4283      		std Z+2,r20
 148:../../../os/oslib/src/chmemheaps.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 149:../../../os/oslib/src/chmemheaps.c ****   chMtxObjectInit(&heapp->mtx);
 150:../../../os/oslib/src/chmemheaps.c **** #else
 151:../../../os/oslib/src/chmemheaps.c ****   chSemObjectInit(&heapp->sem, (cnt_t)1);
  94               		.loc 1 151 0
  95 003c 81E0      		ldi r24,lo8(1)
  96 003e 1696      		adiw r26,6
  97 0040 8C93      		st X,r24
  98 0042 0895      		ret
  99               		.cfi_endproc
 100               	.LFE99:
 102               		.section	.text.chHeapAllocAligned,"ax",@progbits
 103               	.global	chHeapAllocAligned
 105               	chHeapAllocAligned:
 106               	.LFB100:
 152:../../../os/oslib/src/chmemheaps.c **** #endif
 153:../../../os/oslib/src/chmemheaps.c **** }
 154:../../../os/oslib/src/chmemheaps.c **** 
 155:../../../os/oslib/src/chmemheaps.c **** /**
 156:../../../os/oslib/src/chmemheaps.c ****  * @brief   Allocates a block of memory from the heap by using the first-fit
 157:../../../os/oslib/src/chmemheaps.c ****  *          algorithm.
 158:../../../os/oslib/src/chmemheaps.c ****  * @details The allocated block is guaranteed to be properly aligned to the
 159:../../../os/oslib/src/chmemheaps.c ****  *          specified alignment.
 160:../../../os/oslib/src/chmemheaps.c ****  *
 161:../../../os/oslib/src/chmemheaps.c ****  * @param[in] heapp     pointer to a heap descriptor or @p NULL in order to
 162:../../../os/oslib/src/chmemheaps.c ****  *                      access the default heap.
 163:../../../os/oslib/src/chmemheaps.c ****  * @param[in] size      the size of the block to be allocated. Note that the
 164:../../../os/oslib/src/chmemheaps.c ****  *                      allocated block may be a bit bigger than the requested
 165:../../../os/oslib/src/chmemheaps.c ****  *                      size for alignment and fragmentation reasons.
 166:../../../os/oslib/src/chmemheaps.c ****  * @param[in] align     desired memory alignment
 167:../../../os/oslib/src/chmemheaps.c ****  * @return              A pointer to the aligned allocated block.
 168:../../../os/oslib/src/chmemheaps.c ****  * @retval NULL         if the block cannot be allocated.
 169:../../../os/oslib/src/chmemheaps.c ****  *
 170:../../../os/oslib/src/chmemheaps.c ****  * @api
 171:../../../os/oslib/src/chmemheaps.c ****  */
 172:../../../os/oslib/src/chmemheaps.c **** void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 107               		.loc 1 172 0
 108               		.cfi_startproc
 109               	.LVL5:
 110 0000 4F92      		push r4
 111               	.LCFI0:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 4, -2
 114 0002 5F92      		push r5
 115               	.LCFI1:
 116               		.cfi_def_cfa_offset 4
 117               		.cfi_offset 5, -3
 118 0004 6F92      		push r6
 119               	.LCFI2:
 120               		.cfi_def_cfa_offset 5
 121               		.cfi_offset 6, -4
 122 0006 7F92      		push r7
 123               	.LCFI3:
 124               		.cfi_def_cfa_offset 6
 125               		.cfi_offset 7, -5
 126 0008 8F92      		push r8
 127               	.LCFI4:
 128               		.cfi_def_cfa_offset 7
 129               		.cfi_offset 8, -6
 130 000a 9F92      		push r9
 131               	.LCFI5:
 132               		.cfi_def_cfa_offset 8
 133               		.cfi_offset 9, -7
 134 000c AF92      		push r10
 135               	.LCFI6:
 136               		.cfi_def_cfa_offset 9
 137               		.cfi_offset 10, -8
 138 000e BF92      		push r11
 139               	.LCFI7:
 140               		.cfi_def_cfa_offset 10
 141               		.cfi_offset 11, -9
 142 0010 CF92      		push r12
 143               	.LCFI8:
 144               		.cfi_def_cfa_offset 11
 145               		.cfi_offset 12, -10
 146 0012 DF92      		push r13
 147               	.LCFI9:
 148               		.cfi_def_cfa_offset 12
 149               		.cfi_offset 13, -11
 150 0014 EF92      		push r14
 151               	.LCFI10:
 152               		.cfi_def_cfa_offset 13
 153               		.cfi_offset 14, -12
 154 0016 FF92      		push r15
 155               	.LCFI11:
 156               		.cfi_def_cfa_offset 14
 157               		.cfi_offset 15, -13
 158 0018 0F93      		push r16
 159               	.LCFI12:
 160               		.cfi_def_cfa_offset 15
 161               		.cfi_offset 16, -14
 162 001a 1F93      		push r17
 163               	.LCFI13:
 164               		.cfi_def_cfa_offset 16
 165               		.cfi_offset 17, -15
 166 001c CF93      		push r28
 167               	.LCFI14:
 168               		.cfi_def_cfa_offset 17
 169               		.cfi_offset 28, -16
 170 001e DF93      		push r29
 171               	.LCFI15:
 172               		.cfi_def_cfa_offset 18
 173               		.cfi_offset 29, -17
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 16 */
 177               	.L__stack_usage = 16
 178 0020 4C01      		movw r8,r24
 179 0022 2B01      		movw r4,r22
 180 0024 EA01      		movw r28,r20
 173:../../../os/oslib/src/chmemheaps.c ****   heap_header_t *qp, *hp, *ahp;
 174:../../../os/oslib/src/chmemheaps.c ****   size_t pages;
 175:../../../os/oslib/src/chmemheaps.c **** 
 176:../../../os/oslib/src/chmemheaps.c ****   chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 177:../../../os/oslib/src/chmemheaps.c **** 
 178:../../../os/oslib/src/chmemheaps.c ****   /* If an heap is not specified then the default system header is used.*/
 179:../../../os/oslib/src/chmemheaps.c ****   if (heapp == NULL) {
 181               		.loc 1 179 0
 182 0026 892B      		or r24,r25
 183 0028 01F4      		brne .+2
 184 002a 00C0      		rjmp .L20
 185               	.L4:
 186               	.LVL6:
 180:../../../os/oslib/src/chmemheaps.c ****     heapp = &default_heap;
 181:../../../os/oslib/src/chmemheaps.c ****   }
 182:../../../os/oslib/src/chmemheaps.c **** 
 183:../../../os/oslib/src/chmemheaps.c ****   /* Minimum alignment is constrained by the heap header structure size.*/
 184:../../../os/oslib/src/chmemheaps.c ****   if (align < CH_HEAP_ALIGNMENT) {
 187               		.loc 1 184 0
 188 002c C430      		cpi r28,4
 189 002e D105      		cpc r29,__zero_reg__
 190 0030 00F4      		brsh .L5
 185:../../../os/oslib/src/chmemheaps.c ****     align = CH_HEAP_ALIGNMENT;
 191               		.loc 1 185 0
 192 0032 C4E0      		ldi r28,lo8(4)
 193 0034 D0E0      		ldi r29,0
 194               	.L5:
 195               	.LVL7:
 186:../../../os/oslib/src/chmemheaps.c ****   }
 187:../../../os/oslib/src/chmemheaps.c **** 
 188:../../../os/oslib/src/chmemheaps.c ****   /* Size is converted in number of elementary allocation units.*/
 189:../../../os/oslib/src/chmemheaps.c ****   pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 196               		.loc 1 189 0
 197 0036 5201      		movw r10,r4
 198 0038 83E0      		ldi r24,3
 199 003a A80E      		add r10,r24
 200 003c B11C      		adc r11,__zero_reg__
 201 003e B694      		lsr r11
 202 0040 A794      		ror r10
 203 0042 B694      		lsr r11
 204 0044 A794      		ror r10
 205               	.LVL8:
 190:../../../os/oslib/src/chmemheaps.c **** 
 191:../../../os/oslib/src/chmemheaps.c ****   /* Taking heap mutex/semaphore.*/
 192:../../../os/oslib/src/chmemheaps.c ****   H_LOCK(heapp);
 206               		.loc 1 192 0
 207 0046 3401      		movw r6,r8
 208 0048 A6E0      		ldi r26,6
 209 004a 6A0E      		add r6,r26
 210 004c 711C      		adc r7,__zero_reg__
 211 004e 60E0      		ldi r22,0
 212 0050 70E0      		ldi r23,0
 213               	.LVL9:
 214 0052 C301      		movw r24,r6
 215 0054 0E94 0000 		call chSemWaitTimeout
 216               	.LVL10:
 193:../../../os/oslib/src/chmemheaps.c **** 
 194:../../../os/oslib/src/chmemheaps.c ****   /* Start of the free blocks list.*/
 195:../../../os/oslib/src/chmemheaps.c ****   qp = &heapp->header;
 217               		.loc 1 195 0
 218 0058 A401      		movw r20,r8
 219 005a 4E5F      		subi r20,-2
 220 005c 5F4F      		sbci r21,-1
 221               	.LVL11:
 196:../../../os/oslib/src/chmemheaps.c ****   while (H_NEXT(qp) != NULL) {
 197:../../../os/oslib/src/chmemheaps.c **** 
 198:../../../os/oslib/src/chmemheaps.c ****     /* Next free block.*/
 199:../../../os/oslib/src/chmemheaps.c ****     hp = H_NEXT(qp);
 200:../../../os/oslib/src/chmemheaps.c **** 
 201:../../../os/oslib/src/chmemheaps.c ****     /* Pointer aligned to the requested alignment.*/
 202:../../../os/oslib/src/chmemheaps.c ****     ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 222               		.loc 1 202 0
 223 005e EE24      		clr r14
 224 0060 FF24      		clr r15
 225 0062 EC1A      		sub r14,r28
 226 0064 FD0A      		sbc r15,r29
 196:../../../os/oslib/src/chmemheaps.c ****   while (H_NEXT(qp) != NULL) {
 227               		.loc 1 196 0
 228 0066 DA01      		movw r26,r20
 229 0068 ED91      		ld r30,X+
 230 006a FC91      		ld r31,X
 231 006c 3097      		sbiw r30,0
 232 006e 01F0      		breq .L21
 233               	.L13:
 234               	.LVL12:
 235               		.loc 1 202 0
 236 0070 8F01      		movw r16,r30
 237 0072 0C5F      		subi r16,-4
 238 0074 1F4F      		sbci r17,-1
 239 0076 CF01      		movw r24,r30
 240 0078 0396      		adiw r24,3
 241 007a 8C0F      		add r24,r28
 242 007c 9D1F      		adc r25,r29
 243 007e 8E21      		and r24,r14
 244 0080 9F21      		and r25,r15
 245 0082 DC01      		movw r26,r24
 246 0084 1497      		sbiw r26,4
 247               	.LVL13:
 203:../../../os/oslib/src/chmemheaps.c **** 
 204:../../../os/oslib/src/chmemheaps.c ****     if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 248               		.loc 1 204 0
 249 0086 6281      		ldd r22,Z+2
 250 0088 7381      		ldd r23,Z+3
 251 008a 9B01      		movw r18,r22
 252 008c 2F5F      		subi r18,-1
 253 008e 3F4F      		sbci r19,-1
 254 0090 220F      		lsl r18
 255 0092 331F      		rol r19
 256 0094 220F      		lsl r18
 257 0096 331F      		rol r19
 258 0098 6F01      		movw r12,r30
 259 009a C20E      		add r12,r18
 260 009c D31E      		adc r13,r19
 261 009e AC15      		cp r26,r12
 262 00a0 BD05      		cpc r27,r13
 263 00a2 00F4      		brsh .L7
 264               		.loc 1 204 0 is_stmt 0 discriminator 1
 265 00a4 2450      		subi r18,4
 266 00a6 3109      		sbc r19,__zero_reg__
 267 00a8 6F01      		movw r12,r30
 268 00aa CA1A      		sub r12,r26
 269 00ac DB0A      		sbc r13,r27
 270 00ae C20E      		add r12,r18
 271 00b0 D31E      		adc r13,r19
 272 00b2 D594      		asr r13
 273 00b4 C794      		ror r12
 274 00b6 D594      		asr r13
 275 00b8 C794      		ror r12
 276 00ba CA14      		cp r12,r10
 277 00bc DB04      		cpc r13,r11
 278 00be 00F4      		brsh .L22
 279               	.L7:
 280               	.LBB2:
 205:../../../os/oslib/src/chmemheaps.c ****       /* The block is large enough to contain a correctly aligned area
 206:../../../os/oslib/src/chmemheaps.c ****          of sufficient size.*/
 207:../../../os/oslib/src/chmemheaps.c **** 
 208:../../../os/oslib/src/chmemheaps.c ****       if (ahp > hp) {
 209:../../../os/oslib/src/chmemheaps.c ****         /* The block is not properly aligned, must split it.*/
 210:../../../os/oslib/src/chmemheaps.c ****         size_t bpages;
 211:../../../os/oslib/src/chmemheaps.c **** 
 212:../../../os/oslib/src/chmemheaps.c ****         bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
 213:../../../os/oslib/src/chmemheaps.c ****         H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 214:../../../os/oslib/src/chmemheaps.c ****         if (bpages > pages) {
 215:../../../os/oslib/src/chmemheaps.c ****           /* The block is bigger than required, must split the excess.*/
 216:../../../os/oslib/src/chmemheaps.c ****           heap_header_t *fp;
 217:../../../os/oslib/src/chmemheaps.c **** 
 218:../../../os/oslib/src/chmemheaps.c ****           /* Creating the excess block.*/
 219:../../../os/oslib/src/chmemheaps.c ****           fp = H_BLOCK(ahp) + pages;
 220:../../../os/oslib/src/chmemheaps.c ****           H_PAGES(fp) = (bpages - pages) - 1U;
 221:../../../os/oslib/src/chmemheaps.c **** 
 222:../../../os/oslib/src/chmemheaps.c ****           /* Linking the excess block.*/
 223:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(fp) = H_NEXT(hp);
 224:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(hp) = fp;
 225:../../../os/oslib/src/chmemheaps.c ****         }
 226:../../../os/oslib/src/chmemheaps.c **** 
 227:../../../os/oslib/src/chmemheaps.c ****         hp = ahp;
 228:../../../os/oslib/src/chmemheaps.c ****       }
 229:../../../os/oslib/src/chmemheaps.c ****       else {
 230:../../../os/oslib/src/chmemheaps.c ****         /* The block is already properly aligned.*/
 231:../../../os/oslib/src/chmemheaps.c **** 
 232:../../../os/oslib/src/chmemheaps.c ****         if (H_PAGES(hp) == pages) {
 233:../../../os/oslib/src/chmemheaps.c ****           /* Exact size, getting the whole block.*/
 234:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(qp) = H_NEXT(hp);
 235:../../../os/oslib/src/chmemheaps.c ****         }
 236:../../../os/oslib/src/chmemheaps.c ****         else {
 237:../../../os/oslib/src/chmemheaps.c ****           /* The block is bigger than required, must split the excess.*/
 238:../../../os/oslib/src/chmemheaps.c ****           heap_header_t *fp;
 239:../../../os/oslib/src/chmemheaps.c **** 
 240:../../../os/oslib/src/chmemheaps.c ****           fp = H_BLOCK(hp) + pages;
 241:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(fp) = H_NEXT(hp);
 242:../../../os/oslib/src/chmemheaps.c ****           H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 243:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(qp) = fp;
 281               		.loc 1 243 0 is_stmt 1
 282 00c0 AF01      		movw r20,r30
 283               	.LVL14:
 284               	.LBE2:
 196:../../../os/oslib/src/chmemheaps.c **** 
 285               		.loc 1 196 0
 286 00c2 DA01      		movw r26,r20
 287               	.LVL15:
 288 00c4 ED91      		ld r30,X+
 289 00c6 FC91      		ld r31,X
 290               	.LVL16:
 291 00c8 3097      		sbiw r30,0
 292 00ca 01F4      		brne .L13
 293               	.LVL17:
 294               	.L21:
 244:../../../os/oslib/src/chmemheaps.c ****         }
 245:../../../os/oslib/src/chmemheaps.c ****       }
 246:../../../os/oslib/src/chmemheaps.c **** 
 247:../../../os/oslib/src/chmemheaps.c ****       /* Setting in the block owner heap and size.*/
 248:../../../os/oslib/src/chmemheaps.c ****       H_SIZE(hp) = size;
 249:../../../os/oslib/src/chmemheaps.c ****       H_HEAP(hp) = heapp;
 250:../../../os/oslib/src/chmemheaps.c **** 
 251:../../../os/oslib/src/chmemheaps.c ****       /* Releasing heap mutex/semaphore.*/
 252:../../../os/oslib/src/chmemheaps.c ****       H_UNLOCK(heapp);
 253:../../../os/oslib/src/chmemheaps.c **** 
 254:../../../os/oslib/src/chmemheaps.c ****       /*lint -save -e9087 [11.3] Safe cast.*/
 255:../../../os/oslib/src/chmemheaps.c ****       return (void *)H_BLOCK(hp);
 256:../../../os/oslib/src/chmemheaps.c ****       /*lint -restore*/
 257:../../../os/oslib/src/chmemheaps.c ****     }
 258:../../../os/oslib/src/chmemheaps.c **** 
 259:../../../os/oslib/src/chmemheaps.c ****     /* Next in the free blocks list.*/
 260:../../../os/oslib/src/chmemheaps.c ****     qp = hp;
 261:../../../os/oslib/src/chmemheaps.c ****   }
 262:../../../os/oslib/src/chmemheaps.c **** 
 263:../../../os/oslib/src/chmemheaps.c ****   /* Releasing heap mutex/semaphore.*/
 264:../../../os/oslib/src/chmemheaps.c ****   H_UNLOCK(heapp);
 295               		.loc 1 264 0
 296 00cc C301      		movw r24,r6
 297 00ce 0E94 0000 		call chSemSignal
 298               	.LVL18:
 265:../../../os/oslib/src/chmemheaps.c **** 
 266:../../../os/oslib/src/chmemheaps.c ****   /* More memory is required, tries to get it from the associated provider
 267:../../../os/oslib/src/chmemheaps.c ****      else fails.*/
 268:../../../os/oslib/src/chmemheaps.c ****   if (heapp->provider != NULL) {
 299               		.loc 1 268 0
 300 00d2 D401      		movw r26,r8
 301 00d4 ED91      		ld r30,X+
 302 00d6 FC91      		ld r31,X
 303 00d8 3097      		sbiw r30,0
 304 00da 01F4      		brne .+2
 305 00dc 00C0      		rjmp .L17
 269:../../../os/oslib/src/chmemheaps.c ****     ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 306               		.loc 1 269 0
 307 00de 44E0      		ldi r20,lo8(4)
 308 00e0 50E0      		ldi r21,0
 309 00e2 BE01      		movw r22,r28
 310 00e4 C501      		movw r24,r10
 311 00e6 880F      		lsl r24
 312 00e8 991F      		rol r25
 313 00ea 880F      		lsl r24
 314 00ec 991F      		rol r25
 315 00ee 0995      		icall
 316               	.LVL19:
 270:../../../os/oslib/src/chmemheaps.c ****                           align,
 271:../../../os/oslib/src/chmemheaps.c ****                           sizeof (heap_header_t));
 272:../../../os/oslib/src/chmemheaps.c ****     if (ahp != NULL) {
 317               		.loc 1 272 0
 318 00f0 0097      		sbiw r24,0
 319 00f2 01F4      		brne .+2
 320 00f4 00C0      		rjmp .L17
 321               	.LVL20:
 273:../../../os/oslib/src/chmemheaps.c ****       hp = ahp - 1U;
 274:../../../os/oslib/src/chmemheaps.c ****       H_HEAP(hp) = heapp;
 322               		.loc 1 274 0
 323 00f6 FC01      		movw r30,r24
 324 00f8 3497      		sbiw r30,4
 325               	.LVL21:
 326 00fa 9182      		std Z+1,r9
 327 00fc 8082      		st Z,r8
 275:../../../os/oslib/src/chmemheaps.c ****       H_SIZE(hp) = size;
 328               		.loc 1 275 0
 329 00fe 5382      		std Z+3,r5
 330 0100 4282      		std Z+2,r4
 331               	.LVL22:
 332               	.L12:
 333               	/* epilogue start */
 276:../../../os/oslib/src/chmemheaps.c **** 
 277:../../../os/oslib/src/chmemheaps.c ****       /*lint -save -e9087 [11.3] Safe cast.*/
 278:../../../os/oslib/src/chmemheaps.c ****       return (void *)ahp;
 279:../../../os/oslib/src/chmemheaps.c ****       /*lint -restore*/
 280:../../../os/oslib/src/chmemheaps.c ****     }
 281:../../../os/oslib/src/chmemheaps.c ****   }
 282:../../../os/oslib/src/chmemheaps.c **** 
 283:../../../os/oslib/src/chmemheaps.c ****   return NULL;
 284:../../../os/oslib/src/chmemheaps.c **** }
 334               		.loc 1 284 0
 335 0102 DF91      		pop r29
 336 0104 CF91      		pop r28
 337 0106 1F91      		pop r17
 338 0108 0F91      		pop r16
 339 010a FF90      		pop r15
 340 010c EF90      		pop r14
 341               	.LVL23:
 342 010e DF90      		pop r13
 343 0110 CF90      		pop r12
 344 0112 BF90      		pop r11
 345 0114 AF90      		pop r10
 346 0116 9F90      		pop r9
 347 0118 8F90      		pop r8
 348               	.LVL24:
 349 011a 7F90      		pop r7
 350 011c 6F90      		pop r6
 351               	.LVL25:
 352 011e 5F90      		pop r5
 353 0120 4F90      		pop r4
 354               	.LVL26:
 355 0122 0895      		ret
 356               	.LVL27:
 357               	.L22:
 208:../../../os/oslib/src/chmemheaps.c ****         /* The block is not properly aligned, must split it.*/
 358               		.loc 1 208 0
 359 0124 EA17      		cp r30,r26
 360 0126 FB07      		cpc r31,r27
 361 0128 00F0      		brlo .L23
 232:../../../os/oslib/src/chmemheaps.c ****           /* Exact size, getting the whole block.*/
 362               		.loc 1 232 0
 363 012a A616      		cp r10,r22
 364 012c B706      		cpc r11,r23
 365 012e 01F4      		brne .+2
 366 0130 00C0      		rjmp .L24
 367               	.LBB3:
 240:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(fp) = H_NEXT(hp);
 368               		.loc 1 240 0
 369 0132 D501      		movw r26,r10
 370               	.LVL28:
 371 0134 1196      		adiw r26,1
 372 0136 AA0F      		lsl r26
 373 0138 BB1F      		rol r27
 374 013a AA0F      		lsl r26
 375 013c BB1F      		rol r27
 376 013e AE0F      		add r26,r30
 377 0140 BF1F      		adc r27,r31
 378               	.LVL29:
 241:../../../os/oslib/src/chmemheaps.c ****           H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 379               		.loc 1 241 0
 380 0142 8081      		ld r24,Z
 381 0144 9181      		ldd r25,Z+1
 382               	.LVL30:
 383 0146 1196      		adiw r26,1
 384 0148 9C93      		st X,r25
 385 014a 8E93      		st -X,r24
 242:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(qp) = fp;
 386               		.loc 1 242 0
 387 014c CF01      		movw r24,r30
 388 014e 8A1B      		sub r24,r26
 389 0150 9B0B      		sbc r25,r27
 390 0152 280F      		add r18,r24
 391 0154 391F      		adc r19,r25
 392 0156 3595      		asr r19
 393 0158 2795      		ror r18
 394 015a 3595      		asr r19
 395 015c 2795      		ror r18
 396 015e 1396      		adiw r26,2+1
 397 0160 3C93      		st X,r19
 398 0162 2E93      		st -X,r18
 399 0164 1297      		sbiw r26,2
 243:../../../os/oslib/src/chmemheaps.c ****         }
 400               		.loc 1 243 0
 401 0166 EA01      		movw r28,r20
 402               	.LVL31:
 403 0168 B983      		std Y+1,r27
 404 016a A883      		st Y,r26
 405 016c DF01      		movw r26,r30
 406               	.LVL32:
 407               	.L10:
 408               	.LBE3:
 248:../../../os/oslib/src/chmemheaps.c ****       H_HEAP(hp) = heapp;
 409               		.loc 1 248 0
 410 016e 1396      		adiw r26,2+1
 411 0170 5C92      		st X,r5
 412 0172 4E92      		st -X,r4
 413 0174 1297      		sbiw r26,2
 249:../../../os/oslib/src/chmemheaps.c **** 
 414               		.loc 1 249 0
 415 0176 8D92      		st X+,r8
 416 0178 9C92      		st X,r9
 252:../../../os/oslib/src/chmemheaps.c **** 
 417               		.loc 1 252 0
 418 017a C301      		movw r24,r6
 419 017c 0E94 0000 		call chSemSignal
 420               	.LVL33:
 255:../../../os/oslib/src/chmemheaps.c ****       /*lint -restore*/
 421               		.loc 1 255 0
 422 0180 C801      		movw r24,r16
 423 0182 00C0      		rjmp .L12
 424               	.LVL34:
 425               	.L23:
 426               	.LBB4:
 213:../../../os/oslib/src/chmemheaps.c ****         if (bpages > pages) {
 427               		.loc 1 213 0
 428 0184 9D01      		movw r18,r26
 429 0186 201B      		sub r18,r16
 430 0188 310B      		sbc r19,r17
 431 018a 3595      		asr r19
 432 018c 2795      		ror r18
 433 018e 3595      		asr r19
 434 0190 2795      		ror r18
 435 0192 3383      		std Z+3,r19
 436 0194 2283      		std Z+2,r18
 214:../../../os/oslib/src/chmemheaps.c ****           /* The block is bigger than required, must split the excess.*/
 437               		.loc 1 214 0
 438 0196 AC14      		cp r10,r12
 439 0198 BD04      		cpc r11,r13
 440 019a 00F4      		brsh .L18
 441               	.LBB5:
 219:../../../os/oslib/src/chmemheaps.c ****           H_PAGES(fp) = (bpages - pages) - 1U;
 442               		.loc 1 219 0
 443 019c E501      		movw r28,r10
 444               	.LVL35:
 445 019e 2196      		adiw r28,1
 446 01a0 CC0F      		lsl r28
 447 01a2 DD1F      		rol r29
 448 01a4 CC0F      		lsl r28
 449 01a6 DD1F      		rol r29
 450 01a8 CA0F      		add r28,r26
 451 01aa DB1F      		adc r29,r27
 452               	.LVL36:
 220:../../../os/oslib/src/chmemheaps.c **** 
 453               		.loc 1 220 0
 454 01ac A094      		com r10
 455 01ae B094      		com r11
 456               	.LVL37:
 457 01b0 CA0C      		add r12,r10
 458 01b2 DB1C      		adc r13,r11
 459               	.LVL38:
 460 01b4 DB82      		std Y+3,r13
 461 01b6 CA82      		std Y+2,r12
 223:../../../os/oslib/src/chmemheaps.c ****           H_NEXT(hp) = fp;
 462               		.loc 1 223 0
 463 01b8 2081      		ld r18,Z
 464 01ba 3181      		ldd r19,Z+1
 465 01bc 3983      		std Y+1,r19
 466 01be 2883      		st Y,r18
 224:../../../os/oslib/src/chmemheaps.c ****         }
 467               		.loc 1 224 0
 468 01c0 D183      		std Z+1,r29
 469 01c2 C083      		st Z,r28
 470               	.LVL39:
 471               	.L18:
 472 01c4 8C01      		movw r16,r24
 473 01c6 00C0      		rjmp .L10
 474               	.LVL40:
 475               	.L20:
 476               	.LBE5:
 477               	.LBE4:
 180:../../../os/oslib/src/chmemheaps.c ****   }
 478               		.loc 1 180 0
 479 01c8 90E0      		ldi r25,lo8(default_heap)
 480 01ca 892E      		mov r8,r25
 481 01cc 90E0      		ldi r25,hi8(default_heap)
 482 01ce 992E      		mov r9,r25
 483               	.LVL41:
 484 01d0 00C0      		rjmp .L4
 485               	.LVL42:
 486               	.L24:
 234:../../../os/oslib/src/chmemheaps.c ****         }
 487               		.loc 1 234 0
 488 01d2 8081      		ld r24,Z
 489 01d4 9181      		ldd r25,Z+1
 490 01d6 EA01      		movw r28,r20
 491               	.LVL43:
 492 01d8 9983      		std Y+1,r25
 493 01da 8883      		st Y,r24
 494 01dc DF01      		movw r26,r30
 495               	.LVL44:
 496 01de 00C0      		rjmp .L10
 497               	.LVL45:
 498               	.L17:
 283:../../../os/oslib/src/chmemheaps.c **** }
 499               		.loc 1 283 0
 500 01e0 80E0      		ldi r24,0
 501 01e2 90E0      		ldi r25,0
 502 01e4 00C0      		rjmp .L12
 503               		.cfi_endproc
 504               	.LFE100:
 506               		.section	.text.chHeapFree,"ax",@progbits
 507               	.global	chHeapFree
 509               	chHeapFree:
 510               	.LFB101:
 285:../../../os/oslib/src/chmemheaps.c **** 
 286:../../../os/oslib/src/chmemheaps.c **** /**
 287:../../../os/oslib/src/chmemheaps.c ****  * @brief   Frees a previously allocated memory block.
 288:../../../os/oslib/src/chmemheaps.c ****  *
 289:../../../os/oslib/src/chmemheaps.c ****  * @param[in] p         pointer to the memory block to be freed
 290:../../../os/oslib/src/chmemheaps.c ****  *
 291:../../../os/oslib/src/chmemheaps.c ****  * @api
 292:../../../os/oslib/src/chmemheaps.c ****  */
 293:../../../os/oslib/src/chmemheaps.c **** void chHeapFree(void *p) {
 511               		.loc 1 293 0
 512               		.cfi_startproc
 513               	.LVL46:
 514 0000 EF92      		push r14
 515               	.LCFI16:
 516               		.cfi_def_cfa_offset 3
 517               		.cfi_offset 14, -2
 518 0002 FF92      		push r15
 519               	.LCFI17:
 520               		.cfi_def_cfa_offset 4
 521               		.cfi_offset 15, -3
 522 0004 0F93      		push r16
 523               	.LCFI18:
 524               		.cfi_def_cfa_offset 5
 525               		.cfi_offset 16, -4
 526 0006 1F93      		push r17
 527               	.LCFI19:
 528               		.cfi_def_cfa_offset 6
 529               		.cfi_offset 17, -5
 530 0008 CF93      		push r28
 531               	.LCFI20:
 532               		.cfi_def_cfa_offset 7
 533               		.cfi_offset 28, -6
 534 000a DF93      		push r29
 535               	.LCFI21:
 536               		.cfi_def_cfa_offset 8
 537               		.cfi_offset 29, -7
 538               	/* prologue: function */
 539               	/* frame size = 0 */
 540               	/* stack size = 6 */
 541               	.L__stack_usage = 6
 294:../../../os/oslib/src/chmemheaps.c ****   heap_header_t *qp, *hp;
 295:../../../os/oslib/src/chmemheaps.c ****   memory_heap_t *heapp;
 296:../../../os/oslib/src/chmemheaps.c **** 
 297:../../../os/oslib/src/chmemheaps.c ****   chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 298:../../../os/oslib/src/chmemheaps.c **** 
 299:../../../os/oslib/src/chmemheaps.c ****   /*lint -save -e9087 [11.3] Safe cast.*/
 300:../../../os/oslib/src/chmemheaps.c ****   hp = (heap_header_t *)p - 1U;
 542               		.loc 1 300 0
 543 000c EC01      		movw r28,r24
 544 000e 2497      		sbiw r28,4
 545               	.LVL47:
 301:../../../os/oslib/src/chmemheaps.c ****   /*lint -restore*/
 302:../../../os/oslib/src/chmemheaps.c ****   heapp = H_HEAP(hp);
 546               		.loc 1 302 0
 547 0010 E880      		ld r14,Y
 548 0012 F980      		ldd r15,Y+1
 549               	.LVL48:
 303:../../../os/oslib/src/chmemheaps.c ****   qp = &heapp->header;
 550               		.loc 1 303 0
 551 0014 8701      		movw r16,r14
 552 0016 0E5F      		subi r16,-2
 553 0018 1F4F      		sbci r17,-1
 554               	.LVL49:
 304:../../../os/oslib/src/chmemheaps.c **** 
 305:../../../os/oslib/src/chmemheaps.c ****   /* Size is converted in number of elementary allocation units.*/
 306:../../../os/oslib/src/chmemheaps.c ****   H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 555               		.loc 1 306 0
 556 001a 8A81      		ldd r24,Y+2
 557 001c 9B81      		ldd r25,Y+3
 558               	.LVL50:
 559 001e 0396      		adiw r24,3
 560 0020 9695      		lsr r25
 561 0022 8795      		ror r24
 562 0024 9695      		lsr r25
 563 0026 8795      		ror r24
 564 0028 9B83      		std Y+3,r25
 565 002a 8A83      		std Y+2,r24
 307:../../../os/oslib/src/chmemheaps.c ****                                CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 308:../../../os/oslib/src/chmemheaps.c **** 
 309:../../../os/oslib/src/chmemheaps.c ****   /* Taking heap mutex/semaphore.*/
 310:../../../os/oslib/src/chmemheaps.c ****   H_LOCK(heapp);
 566               		.loc 1 310 0
 567 002c 86E0      		ldi r24,6
 568 002e E80E      		add r14,r24
 569 0030 F11C      		adc r15,__zero_reg__
 570               	.LVL51:
 571 0032 60E0      		ldi r22,0
 572 0034 70E0      		ldi r23,0
 573 0036 C701      		movw r24,r14
 574 0038 0E94 0000 		call chSemWaitTimeout
 575               	.LVL52:
 303:../../../os/oslib/src/chmemheaps.c **** 
 576               		.loc 1 303 0
 577 003c F801      		movw r30,r16
 578               	.LVL53:
 579               	.L32:
 311:../../../os/oslib/src/chmemheaps.c **** 
 312:../../../os/oslib/src/chmemheaps.c ****   while (true) {
 313:../../../os/oslib/src/chmemheaps.c ****     chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 314:../../../os/oslib/src/chmemheaps.c **** 
 315:../../../os/oslib/src/chmemheaps.c ****     if (((qp == &heapp->header) || (hp > qp)) &&
 580               		.loc 1 315 0
 581 003e E017      		cp r30,r16
 582 0040 F107      		cpc r31,r17
 583 0042 01F0      		breq .L26
 584               	.L37:
 585               		.loc 1 315 0 is_stmt 0 discriminator 2
 586 0044 EC17      		cp r30,r28
 587 0046 FD07      		cpc r31,r29
 588 0048 00F0      		brlo .L26
 589 004a 0190      		ld __tmp_reg__,Z+
 590 004c F081      		ld r31,Z
 591 004e E02D      		mov r30,__tmp_reg__
 592               	.LVL54:
 593               		.loc 1 315 0
 594 0050 E017      		cp r30,r16
 595 0052 F107      		cpc r31,r17
 596 0054 01F4      		brne .L37
 597               	.L26:
 316:../../../os/oslib/src/chmemheaps.c ****         ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 598               		.loc 1 316 0 is_stmt 1 discriminator 3
 599 0056 8081      		ld r24,Z
 600 0058 9181      		ldd r25,Z+1
 315:../../../os/oslib/src/chmemheaps.c ****         ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 601               		.loc 1 315 0 discriminator 3
 602 005a 0097      		sbiw r24,0
 603 005c 01F0      		breq .L28
 604               		.loc 1 316 0
 605 005e C817      		cp r28,r24
 606 0060 D907      		cpc r29,r25
 607 0062 00F0      		brlo .L28
 608 0064 FC01      		movw r30,r24
 609               	.LVL55:
 317:../../../os/oslib/src/chmemheaps.c ****       /* Insertion after qp.*/
 318:../../../os/oslib/src/chmemheaps.c ****       H_NEXT(hp) = H_NEXT(qp);
 319:../../../os/oslib/src/chmemheaps.c ****       H_NEXT(qp) = hp;
 320:../../../os/oslib/src/chmemheaps.c ****       /* Verifies if the newly inserted block should be merged.*/
 321:../../../os/oslib/src/chmemheaps.c ****       if (H_LIMIT(hp) == H_NEXT(hp)) {
 322:../../../os/oslib/src/chmemheaps.c ****         /* Merge with the next block.*/
 323:../../../os/oslib/src/chmemheaps.c ****         H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 324:../../../os/oslib/src/chmemheaps.c ****         H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 325:../../../os/oslib/src/chmemheaps.c ****       }
 326:../../../os/oslib/src/chmemheaps.c ****       if ((H_LIMIT(qp) == hp)) {
 327:../../../os/oslib/src/chmemheaps.c ****         /* Merge with the previous block.*/
 328:../../../os/oslib/src/chmemheaps.c ****         H_PAGES(qp) += H_PAGES(hp) + 1U;
 329:../../../os/oslib/src/chmemheaps.c ****         H_NEXT(qp) = H_NEXT(hp);
 330:../../../os/oslib/src/chmemheaps.c ****       }
 331:../../../os/oslib/src/chmemheaps.c ****       break;
 332:../../../os/oslib/src/chmemheaps.c ****     }
 333:../../../os/oslib/src/chmemheaps.c ****     qp = H_NEXT(qp);
 334:../../../os/oslib/src/chmemheaps.c ****   }
 610               		.loc 1 334 0
 611 0066 00C0      		rjmp .L32
 612               	.LVL56:
 613               	.L28:
 318:../../../os/oslib/src/chmemheaps.c ****       H_NEXT(qp) = hp;
 614               		.loc 1 318 0
 615 0068 9983      		std Y+1,r25
 616 006a 8883      		st Y,r24
 319:../../../os/oslib/src/chmemheaps.c ****       /* Verifies if the newly inserted block should be merged.*/
 617               		.loc 1 319 0
 618 006c D183      		std Z+1,r29
 619 006e C083      		st Z,r28
 321:../../../os/oslib/src/chmemheaps.c ****         /* Merge with the next block.*/
 620               		.loc 1 321 0
 621 0070 8A81      		ldd r24,Y+2
 622 0072 9B81      		ldd r25,Y+3
 623 0074 DC01      		movw r26,r24
 624 0076 1196      		adiw r26,1
 625 0078 AA0F      		lsl r26
 626 007a BB1F      		rol r27
 627 007c AA0F      		lsl r26
 628 007e BB1F      		rol r27
 629 0080 AC0F      		add r26,r28
 630 0082 BD1F      		adc r27,r29
 631 0084 2881      		ld r18,Y
 632 0086 3981      		ldd r19,Y+1
 633 0088 A217      		cp r26,r18
 634 008a B307      		cpc r27,r19
 635 008c 01F0      		breq .L38
 636               	.L30:
 326:../../../os/oslib/src/chmemheaps.c ****         /* Merge with the previous block.*/
 637               		.loc 1 326 0
 638 008e 2281      		ldd r18,Z+2
 639 0090 3381      		ldd r19,Z+3
 640 0092 C901      		movw r24,r18
 641 0094 0196      		adiw r24,1
 642 0096 880F      		lsl r24
 643 0098 991F      		rol r25
 644 009a 880F      		lsl r24
 645 009c 991F      		rol r25
 646 009e 8E0F      		add r24,r30
 647 00a0 9F1F      		adc r25,r31
 648 00a2 C817      		cp r28,r24
 649 00a4 D907      		cpc r29,r25
 650 00a6 01F0      		breq .L39
 651               	.L31:
 335:../../../os/oslib/src/chmemheaps.c **** 
 336:../../../os/oslib/src/chmemheaps.c ****   /* Releasing heap mutex/semaphore.*/
 337:../../../os/oslib/src/chmemheaps.c ****   H_UNLOCK(heapp);
 652               		.loc 1 337 0
 653 00a8 C701      		movw r24,r14
 654               	/* epilogue start */
 338:../../../os/oslib/src/chmemheaps.c **** 
 339:../../../os/oslib/src/chmemheaps.c ****   return;
 340:../../../os/oslib/src/chmemheaps.c **** }
 655               		.loc 1 340 0
 656 00aa DF91      		pop r29
 657 00ac CF91      		pop r28
 658               	.LVL57:
 659 00ae 1F91      		pop r17
 660 00b0 0F91      		pop r16
 661 00b2 FF90      		pop r15
 662 00b4 EF90      		pop r14
 663               	.LVL58:
 337:../../../os/oslib/src/chmemheaps.c **** 
 664               		.loc 1 337 0
 665 00b6 0C94 0000 		jmp chSemSignal
 666               	.LVL59:
 667               	.L38:
 323:../../../os/oslib/src/chmemheaps.c ****         H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 668               		.loc 1 323 0
 669 00ba 1296      		adiw r26,2
 670 00bc 2D91      		ld r18,X+
 671 00be 3C91      		ld r19,X
 672 00c0 1397      		sbiw r26,2+1
 673 00c2 820F      		add r24,r18
 674 00c4 931F      		adc r25,r19
 675 00c6 0196      		adiw r24,1
 676 00c8 9B83      		std Y+3,r25
 677 00ca 8A83      		std Y+2,r24
 324:../../../os/oslib/src/chmemheaps.c ****       }
 678               		.loc 1 324 0
 679 00cc 8D91      		ld r24,X+
 680 00ce 9C91      		ld r25,X
 681 00d0 9983      		std Y+1,r25
 682 00d2 8883      		st Y,r24
 683 00d4 00C0      		rjmp .L30
 684               	.L39:
 328:../../../os/oslib/src/chmemheaps.c ****         H_NEXT(qp) = H_NEXT(hp);
 685               		.loc 1 328 0
 686 00d6 8A81      		ldd r24,Y+2
 687 00d8 9B81      		ldd r25,Y+3
 688 00da 280F      		add r18,r24
 689 00dc 391F      		adc r19,r25
 690 00de 2F5F      		subi r18,-1
 691 00e0 3F4F      		sbci r19,-1
 692 00e2 3383      		std Z+3,r19
 693 00e4 2283      		std Z+2,r18
 329:../../../os/oslib/src/chmemheaps.c ****       }
 694               		.loc 1 329 0
 695 00e6 8881      		ld r24,Y
 696 00e8 9981      		ldd r25,Y+1
 697 00ea 9183      		std Z+1,r25
 698 00ec 8083      		st Z,r24
 699 00ee 00C0      		rjmp .L31
 700               		.cfi_endproc
 701               	.LFE101:
 703               		.section	.text.chHeapStatus,"ax",@progbits
 704               	.global	chHeapStatus
 706               	chHeapStatus:
 707               	.LFB102:
 341:../../../os/oslib/src/chmemheaps.c **** 
 342:../../../os/oslib/src/chmemheaps.c **** /**
 343:../../../os/oslib/src/chmemheaps.c ****  * @brief   Reports the heap status.
 344:../../../os/oslib/src/chmemheaps.c ****  * @note    This function is meant to be used in the test suite, it should
 345:../../../os/oslib/src/chmemheaps.c ****  *          not be really useful for the application code.
 346:../../../os/oslib/src/chmemheaps.c ****  *
 347:../../../os/oslib/src/chmemheaps.c ****  * @param[in] heapp     pointer to a heap descriptor or @p NULL in order to
 348:../../../os/oslib/src/chmemheaps.c ****  *                      access the default heap.
 349:../../../os/oslib/src/chmemheaps.c ****  * @param[in] totalp    pointer to a variable that will receive the total
 350:../../../os/oslib/src/chmemheaps.c ****  *                      fragmented free space or @p NULL
 351:../../../os/oslib/src/chmemheaps.c ****  * @param[in] largestp  pointer to a variable that will receive the largest
 352:../../../os/oslib/src/chmemheaps.c ****  *                      free free block found space or @p NULL
 353:../../../os/oslib/src/chmemheaps.c ****  * @return              The number of fragments in the heap.
 354:../../../os/oslib/src/chmemheaps.c ****  *
 355:../../../os/oslib/src/chmemheaps.c ****  * @api
 356:../../../os/oslib/src/chmemheaps.c ****  */
 357:../../../os/oslib/src/chmemheaps.c **** size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 708               		.loc 1 357 0
 709               		.cfi_startproc
 710               	.LVL60:
 711 0000 CF92      		push r12
 712               	.LCFI22:
 713               		.cfi_def_cfa_offset 3
 714               		.cfi_offset 12, -2
 715 0002 DF92      		push r13
 716               	.LCFI23:
 717               		.cfi_def_cfa_offset 4
 718               		.cfi_offset 13, -3
 719 0004 EF92      		push r14
 720               	.LCFI24:
 721               		.cfi_def_cfa_offset 5
 722               		.cfi_offset 14, -4
 723 0006 FF92      		push r15
 724               	.LCFI25:
 725               		.cfi_def_cfa_offset 6
 726               		.cfi_offset 15, -5
 727 0008 0F93      		push r16
 728               	.LCFI26:
 729               		.cfi_def_cfa_offset 7
 730               		.cfi_offset 16, -6
 731 000a 1F93      		push r17
 732               	.LCFI27:
 733               		.cfi_def_cfa_offset 8
 734               		.cfi_offset 17, -7
 735 000c CF93      		push r28
 736               	.LCFI28:
 737               		.cfi_def_cfa_offset 9
 738               		.cfi_offset 28, -8
 739 000e DF93      		push r29
 740               	.LCFI29:
 741               		.cfi_def_cfa_offset 10
 742               		.cfi_offset 29, -9
 743               	/* prologue: function */
 744               	/* frame size = 0 */
 745               	/* stack size = 8 */
 746               	.L__stack_usage = 8
 747 0010 EC01      		movw r28,r24
 748 0012 6B01      		movw r12,r22
 749 0014 7A01      		movw r14,r20
 358:../../../os/oslib/src/chmemheaps.c ****   heap_header_t *qp;
 359:../../../os/oslib/src/chmemheaps.c ****   size_t n, tpages, lpages;
 360:../../../os/oslib/src/chmemheaps.c **** 
 361:../../../os/oslib/src/chmemheaps.c ****   if (heapp == NULL) {
 750               		.loc 1 361 0
 751 0016 892B      		or r24,r25
 752 0018 01F4      		brne .+2
 753 001a 00C0      		rjmp .L55
 754               	.L41:
 755               	.LVL61:
 362:../../../os/oslib/src/chmemheaps.c ****     heapp = &default_heap;
 363:../../../os/oslib/src/chmemheaps.c ****   }
 364:../../../os/oslib/src/chmemheaps.c **** 
 365:../../../os/oslib/src/chmemheaps.c ****   H_LOCK(heapp);
 756               		.loc 1 365 0
 757 001c 8E01      		movw r16,r28
 758 001e 0A5F      		subi r16,-6
 759 0020 1F4F      		sbci r17,-1
 760 0022 60E0      		ldi r22,0
 761 0024 70E0      		ldi r23,0
 762               	.LVL62:
 763 0026 C801      		movw r24,r16
 764 0028 0E94 0000 		call chSemWaitTimeout
 765               	.LVL63:
 366:../../../os/oslib/src/chmemheaps.c ****   tpages = 0U;
 367:../../../os/oslib/src/chmemheaps.c ****   lpages = 0U;
 368:../../../os/oslib/src/chmemheaps.c ****   n = 0U;
 369:../../../os/oslib/src/chmemheaps.c ****   qp = &heapp->header;
 370:../../../os/oslib/src/chmemheaps.c ****   while (H_NEXT(qp) != NULL) {
 766               		.loc 1 370 0
 767 002c EA81      		ldd r30,Y+2
 768 002e FB81      		ldd r31,Y+3
 769 0030 40E0      		ldi r20,0
 770 0032 50E0      		ldi r21,0
 771 0034 20E0      		ldi r18,0
 772 0036 30E0      		ldi r19,0
 773 0038 C0E0      		ldi r28,0
 774 003a D0E0      		ldi r29,0
 775               	.LVL64:
 776 003c 3097      		sbiw r30,0
 777 003e 01F0      		breq .L42
 778               	.LVL65:
 779               	.L44:
 780               	.LBB6:
 371:../../../os/oslib/src/chmemheaps.c ****     size_t pages = H_PAGES(H_NEXT(qp));
 781               		.loc 1 371 0
 782 0040 8281      		ldd r24,Z+2
 783 0042 9381      		ldd r25,Z+3
 784               	.LVL66:
 372:../../../os/oslib/src/chmemheaps.c **** 
 373:../../../os/oslib/src/chmemheaps.c ****     /* Updating counters.*/
 374:../../../os/oslib/src/chmemheaps.c ****     n++;
 785               		.loc 1 374 0
 786 0044 2196      		adiw r28,1
 787               	.LVL67:
 375:../../../os/oslib/src/chmemheaps.c ****     tpages += pages;
 788               		.loc 1 375 0
 789 0046 280F      		add r18,r24
 790 0048 391F      		adc r19,r25
 791               	.LVL68:
 792 004a 4817      		cp r20,r24
 793 004c 5907      		cpc r21,r25
 794 004e 00F4      		brsh .L43
 795 0050 AC01      		movw r20,r24
 796               	.LVL69:
 797               	.L43:
 798               	.LBE6:
 370:../../../os/oslib/src/chmemheaps.c ****     size_t pages = H_PAGES(H_NEXT(qp));
 799               		.loc 1 370 0
 800 0052 0190      		ld __tmp_reg__,Z+
 801 0054 F081      		ld r31,Z
 802 0056 E02D      		mov r30,__tmp_reg__
 803               	.LVL70:
 804 0058 3097      		sbiw r30,0
 805 005a 01F4      		brne .L44
 806               	.LVL71:
 807               	.L42:
 376:../../../os/oslib/src/chmemheaps.c ****     if (pages > lpages) {
 377:../../../os/oslib/src/chmemheaps.c ****       lpages = pages;
 378:../../../os/oslib/src/chmemheaps.c ****     }
 379:../../../os/oslib/src/chmemheaps.c **** 
 380:../../../os/oslib/src/chmemheaps.c ****     qp = H_NEXT(qp);
 381:../../../os/oslib/src/chmemheaps.c ****   }
 382:../../../os/oslib/src/chmemheaps.c **** 
 383:../../../os/oslib/src/chmemheaps.c ****   /* Writing out fragmented free memory.*/
 384:../../../os/oslib/src/chmemheaps.c ****   if (totalp != NULL) {
 808               		.loc 1 384 0
 809 005c C114      		cp r12,__zero_reg__
 810 005e D104      		cpc r13,__zero_reg__
 811 0060 01F0      		breq .L45
 385:../../../os/oslib/src/chmemheaps.c ****     *totalp = tpages * CH_HEAP_ALIGNMENT;
 812               		.loc 1 385 0
 813 0062 220F      		lsl r18
 814 0064 331F      		rol r19
 815 0066 220F      		lsl r18
 816 0068 331F      		rol r19
 817 006a F601      		movw r30,r12
 818 006c 3183      		std Z+1,r19
 819 006e 2083      		st Z,r18
 820               	.L45:
 386:../../../os/oslib/src/chmemheaps.c ****   }
 387:../../../os/oslib/src/chmemheaps.c **** 
 388:../../../os/oslib/src/chmemheaps.c ****   /* Writing out unfragmented free memory.*/
 389:../../../os/oslib/src/chmemheaps.c ****   if (largestp != NULL) {
 821               		.loc 1 389 0
 822 0070 E114      		cp r14,__zero_reg__
 823 0072 F104      		cpc r15,__zero_reg__
 824 0074 01F0      		breq .L46
 390:../../../os/oslib/src/chmemheaps.c ****     *largestp = lpages * CH_HEAP_ALIGNMENT;
 825               		.loc 1 390 0
 826 0076 440F      		lsl r20
 827 0078 551F      		rol r21
 828 007a 440F      		lsl r20
 829 007c 551F      		rol r21
 830 007e F701      		movw r30,r14
 831 0080 5183      		std Z+1,r21
 832 0082 4083      		st Z,r20
 833               	.L46:
 391:../../../os/oslib/src/chmemheaps.c ****   }
 392:../../../os/oslib/src/chmemheaps.c ****   H_UNLOCK(heapp);
 834               		.loc 1 392 0
 835 0084 C801      		movw r24,r16
 836 0086 0E94 0000 		call chSemSignal
 837               	.LVL72:
 393:../../../os/oslib/src/chmemheaps.c **** 
 394:../../../os/oslib/src/chmemheaps.c ****   return n;
 395:../../../os/oslib/src/chmemheaps.c **** }
 838               		.loc 1 395 0
 839 008a CE01      		movw r24,r28
 840               	/* epilogue start */
 841 008c DF91      		pop r29
 842 008e CF91      		pop r28
 843 0090 1F91      		pop r17
 844 0092 0F91      		pop r16
 845               	.LVL73:
 846 0094 FF90      		pop r15
 847 0096 EF90      		pop r14
 848               	.LVL74:
 849 0098 DF90      		pop r13
 850 009a CF90      		pop r12
 851               	.LVL75:
 852 009c 0895      		ret
 853               	.LVL76:
 854               	.L55:
 362:../../../os/oslib/src/chmemheaps.c ****   }
 855               		.loc 1 362 0
 856 009e C0E0      		ldi r28,lo8(default_heap)
 857 00a0 D0E0      		ldi r29,hi8(default_heap)
 858 00a2 00C0      		rjmp .L41
 859               		.cfi_endproc
 860               	.LFE102:
 862               		.section	.bss.default_heap,"aw",@nobits
 865               	default_heap:
 866 0000 0000 0000 		.zero	7
 866      0000 00
 867               		.text
 868               	.Letext0:
 869               		.file 2 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 870               		.file 3 "/usr/lib/avr/include/stdint.h"
 871               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 872               		.file 5 "../../../os/nil/include/ch.h"
 873               		.file 6 "../../../os/oslib/include/chmemcore.h"
 874               		.file 7 "../../../os/oslib/include/chmemheaps.h"
 875               		.file 8 "../../../os/nil/include/chsem.h"
 876               		.file 9 "../../../os/common/ports/AVR/chcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmemheaps.c
     /tmp/ccasrWlc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccasrWlc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccasrWlc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccasrWlc.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccasrWlc.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccasrWlc.s:13     .text.__heap_init:0000000000000000 __heap_init
     /tmp/ccasrWlc.s:865    .bss.default_heap:0000000000000000 default_heap
     /tmp/ccasrWlc.s:45     .text.chHeapObjectInit:0000000000000000 chHeapObjectInit
     /tmp/ccasrWlc.s:105    .text.chHeapAllocAligned:0000000000000000 chHeapAllocAligned
     /tmp/ccasrWlc.s:509    .text.chHeapFree:0000000000000000 chHeapFree
     /tmp/ccasrWlc.s:706    .text.chHeapStatus:0000000000000000 chHeapStatus

UNDEFINED SYMBOLS
chCoreAllocFromTop
chSemWaitTimeout
chSemSignal
__do_clear_bss
