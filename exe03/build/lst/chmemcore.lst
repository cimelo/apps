   1               		.file	"chmemcore.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__core_init,"ax",@progbits
  11               	.global	__core_init
  13               	__core_init:
  14               	.LFB98:
  15               		.file 1 "../../../os/oslib/src/chmemcore.c"
   1:../../../os/oslib/src/chmemcore.c **** /*
   2:../../../os/oslib/src/chmemcore.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/src/chmemcore.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/src/chmemcore.c **** 
   5:../../../os/oslib/src/chmemcore.c ****     This file is part of ChibiOS.
   6:../../../os/oslib/src/chmemcore.c **** 
   7:../../../os/oslib/src/chmemcore.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/src/chmemcore.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/src/chmemcore.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/src/chmemcore.c **** 
  11:../../../os/oslib/src/chmemcore.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/src/chmemcore.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/src/chmemcore.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/src/chmemcore.c ****     GNU General Public License for more details.
  15:../../../os/oslib/src/chmemcore.c **** 
  16:../../../os/oslib/src/chmemcore.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/src/chmemcore.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/src/chmemcore.c **** */
  19:../../../os/oslib/src/chmemcore.c **** 
  20:../../../os/oslib/src/chmemcore.c **** /**
  21:../../../os/oslib/src/chmemcore.c ****  * @file    oslib/src/chmemcore.c
  22:../../../os/oslib/src/chmemcore.c ****  * @brief   Core memory manager code.
  23:../../../os/oslib/src/chmemcore.c ****  *
  24:../../../os/oslib/src/chmemcore.c ****  * @addtogroup oslib_memcore
  25:../../../os/oslib/src/chmemcore.c ****  * @details Core Memory Manager related APIs and services.
  26:../../../os/oslib/src/chmemcore.c ****  *          <h2>Operation mode</h2>
  27:../../../os/oslib/src/chmemcore.c ****  *          The core memory manager is a simplified allocator that only
  28:../../../os/oslib/src/chmemcore.c ****  *          allows to allocate memory blocks without the possibility to
  29:../../../os/oslib/src/chmemcore.c ****  *          free them.<br>
  30:../../../os/oslib/src/chmemcore.c ****  *          This allocator is meant as a memory blocks provider for the
  31:../../../os/oslib/src/chmemcore.c ****  *          other allocators such as:
  32:../../../os/oslib/src/chmemcore.c ****  *          - C-Runtime allocator (through a compiler specific adapter module).
  33:../../../os/oslib/src/chmemcore.c ****  *          - Heap allocator (see @ref oslib_memheaps).
  34:../../../os/oslib/src/chmemcore.c ****  *          - Memory pools allocator (see @ref oslib_mempools).
  35:../../../os/oslib/src/chmemcore.c ****  *          .
  36:../../../os/oslib/src/chmemcore.c ****  *          By having a centralized memory provider the various allocators
  37:../../../os/oslib/src/chmemcore.c ****  *          can coexist and share the main memory.<br>
  38:../../../os/oslib/src/chmemcore.c ****  *          This allocator, alone, is also useful for very simple
  39:../../../os/oslib/src/chmemcore.c ****  *          applications that just require a simple way to get memory
  40:../../../os/oslib/src/chmemcore.c ****  *          blocks.
  41:../../../os/oslib/src/chmemcore.c ****  * @pre     In order to use the core memory manager APIs the @p CH_CFG_USE_MEMCORE
  42:../../../os/oslib/src/chmemcore.c ****  *          option must be enabled in @p chconf.h.
  43:../../../os/oslib/src/chmemcore.c ****  * @note    Compatible with RT and NIL.
  44:../../../os/oslib/src/chmemcore.c ****  * @{
  45:../../../os/oslib/src/chmemcore.c ****  */
  46:../../../os/oslib/src/chmemcore.c **** 
  47:../../../os/oslib/src/chmemcore.c **** #include "ch.h"
  48:../../../os/oslib/src/chmemcore.c **** 
  49:../../../os/oslib/src/chmemcore.c **** #if (CH_CFG_USE_MEMCORE == TRUE) || defined(__DOXYGEN__)
  50:../../../os/oslib/src/chmemcore.c **** 
  51:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  52:../../../os/oslib/src/chmemcore.c **** /* Module exported variables.                                                */
  53:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  54:../../../os/oslib/src/chmemcore.c **** 
  55:../../../os/oslib/src/chmemcore.c **** /**
  56:../../../os/oslib/src/chmemcore.c ****  * @brief   Memory core descriptor.
  57:../../../os/oslib/src/chmemcore.c ****  */
  58:../../../os/oslib/src/chmemcore.c **** memcore_t ch_memcore;
  59:../../../os/oslib/src/chmemcore.c **** 
  60:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  61:../../../os/oslib/src/chmemcore.c **** /* Module local types.                                                       */
  62:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  63:../../../os/oslib/src/chmemcore.c **** 
  64:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  65:../../../os/oslib/src/chmemcore.c **** /* Module local variables.                                                   */
  66:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  67:../../../os/oslib/src/chmemcore.c **** 
  68:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  69:../../../os/oslib/src/chmemcore.c **** /* Module local functions.                                                   */
  70:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  71:../../../os/oslib/src/chmemcore.c **** 
  72:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  73:../../../os/oslib/src/chmemcore.c **** /* Module exported functions.                                                */
  74:../../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  75:../../../os/oslib/src/chmemcore.c **** 
  76:../../../os/oslib/src/chmemcore.c **** /**
  77:../../../os/oslib/src/chmemcore.c ****  * @brief   Low level memory manager initialization.
  78:../../../os/oslib/src/chmemcore.c ****  *
  79:../../../os/oslib/src/chmemcore.c ****  * @notapi
  80:../../../os/oslib/src/chmemcore.c ****  */
  81:../../../os/oslib/src/chmemcore.c **** void __core_init(void) {
  16               		.loc 1 81 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  82:../../../os/oslib/src/chmemcore.c **** #if CH_CFG_MEMCORE_SIZE == 0
  83:../../../os/oslib/src/chmemcore.c ****   extern uint8_t __heap_base__[];
  84:../../../os/oslib/src/chmemcore.c ****   extern uint8_t __heap_end__[];
  85:../../../os/oslib/src/chmemcore.c **** 
  86:../../../os/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] Required cast operations.*/
  87:../../../os/oslib/src/chmemcore.c ****   ch_memcore.basemem = __heap_base__;
  88:../../../os/oslib/src/chmemcore.c ****   ch_memcore.topmem  = __heap_end__;
  89:../../../os/oslib/src/chmemcore.c ****   /*lint restore*/
  90:../../../os/oslib/src/chmemcore.c **** #else
  91:../../../os/oslib/src/chmemcore.c ****   static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];
  92:../../../os/oslib/src/chmemcore.c **** 
  93:../../../os/oslib/src/chmemcore.c ****   ch_memcore.basemem = &static_heap[0];
  22               		.loc 1 93 0
  23 0000 E0E0      		ldi r30,lo8(ch_memcore)
  24 0002 F0E0      		ldi r31,hi8(ch_memcore)
  25 0004 80E0      		ldi r24,lo8(static_heap.2693)
  26 0006 90E0      		ldi r25,hi8(static_heap.2693)
  27 0008 9183      		std Z+1,r25
  28 000a 8083      		st Z,r24
  94:../../../os/oslib/src/chmemcore.c ****   ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
  29               		.loc 1 94 0
  30 000c 80E0      		ldi r24,lo8(static_heap.2693+128)
  31 000e 90E0      		ldi r25,hi8(static_heap.2693+128)
  32 0010 9383      		std Z+3,r25
  33 0012 8283      		std Z+2,r24
  34 0014 0895      		ret
  35               		.cfi_endproc
  36               	.LFE98:
  38               		.section	.text.chCoreAllocFromBaseI,"ax",@progbits
  39               	.global	chCoreAllocFromBaseI
  41               	chCoreAllocFromBaseI:
  42               	.LFB99:
  95:../../../os/oslib/src/chmemcore.c **** #endif
  96:../../../os/oslib/src/chmemcore.c **** }
  97:../../../os/oslib/src/chmemcore.c **** 
  98:../../../os/oslib/src/chmemcore.c **** /**
  99:../../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the lowest address upward.
 100:../../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 101:../../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 102:../../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 103:../../../os/oslib/src/chmemcore.c ****  *
 104:../../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 105:../../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 106:../../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 107:../../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 108:../../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 109:../../../os/oslib/src/chmemcore.c ****  *
 110:../../../os/oslib/src/chmemcore.c ****  * @iclass
 111:../../../os/oslib/src/chmemcore.c ****  */
 112:../../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromBaseI(size_t size, unsigned align, size_t offset) {
  43               		.loc 1 112 0
  44               		.cfi_startproc
  45               	.LVL0:
  46               	/* prologue: function */
  47               	/* frame size = 0 */
  48               	/* stack size = 0 */
  49               	.L__stack_usage = 0
 113:../../../os/oslib/src/chmemcore.c ****   uint8_t *p, *next;
 114:../../../os/oslib/src/chmemcore.c **** 
 115:../../../os/oslib/src/chmemcore.c ****   chDbgCheckClassI();
 116:../../../os/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 117:../../../os/oslib/src/chmemcore.c **** 
 118:../../../os/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
  50               		.loc 1 118 0
  51 0000 E091 0000 		lds r30,ch_memcore
  52 0004 F091 0000 		lds r31,ch_memcore+1
  53 0008 4E0F      		add r20,r30
  54 000a 5F1F      		adc r21,r31
  55               	.LVL1:
  56 000c 9B01      		movw r18,r22
  57 000e 2150      		subi r18,1
  58 0010 3109      		sbc r19,__zero_reg__
  59 0012 420F      		add r20,r18
  60 0014 531F      		adc r21,r19
  61 0016 7195      		neg r23
  62 0018 6195      		neg r22
  63 001a 7109      		sbc r23,__zero_reg__
  64               	.LVL2:
  65 001c 6423      		and r22,r20
  66 001e 7523      		and r23,r21
  67               	.LVL3:
 119:../../../os/oslib/src/chmemcore.c ****   next = p + size;
  68               		.loc 1 119 0
  69 0020 860F      		add r24,r22
  70 0022 971F      		adc r25,r23
  71               	.LVL4:
 120:../../../os/oslib/src/chmemcore.c **** 
 121:../../../os/oslib/src/chmemcore.c ****   /* Considering also the case where there is numeric overflow.*/
 122:../../../os/oslib/src/chmemcore.c ****   if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
  72               		.loc 1 122 0
  73 0024 2091 0000 		lds r18,ch_memcore+2
  74 0028 3091 0000 		lds r19,ch_memcore+2+1
  75               	.LVL5:
  76 002c 2817      		cp r18,r24
  77 002e 3907      		cpc r19,r25
  78 0030 00F0      		brlo .L5
  79               		.loc 1 122 0 is_stmt 0 discriminator 1
  80 0032 8E17      		cp r24,r30
  81 0034 9F07      		cpc r25,r31
  82 0036 00F0      		brlo .L5
 123:../../../os/oslib/src/chmemcore.c ****     return NULL;
 124:../../../os/oslib/src/chmemcore.c ****   }
 125:../../../os/oslib/src/chmemcore.c **** 
 126:../../../os/oslib/src/chmemcore.c ****   ch_memcore.basemem = next;
  83               		.loc 1 126 0 is_stmt 1
  84 0038 9093 0000 		sts ch_memcore+1,r25
  85 003c 8093 0000 		sts ch_memcore,r24
 127:../../../os/oslib/src/chmemcore.c **** 
 128:../../../os/oslib/src/chmemcore.c ****   return p;
  86               		.loc 1 128 0
  87 0040 CB01      		movw r24,r22
  88               	.LVL6:
  89 0042 0895      		ret
  90               	.LVL7:
  91               	.L5:
 123:../../../os/oslib/src/chmemcore.c ****     return NULL;
  92               		.loc 1 123 0
  93 0044 80E0      		ldi r24,0
  94               	.LVL8:
  95 0046 90E0      		ldi r25,0
 129:../../../os/oslib/src/chmemcore.c **** }
  96               		.loc 1 129 0
  97 0048 0895      		ret
  98               		.cfi_endproc
  99               	.LFE99:
 101               		.section	.text.chCoreAllocFromTopI,"ax",@progbits
 102               	.global	chCoreAllocFromTopI
 104               	chCoreAllocFromTopI:
 105               	.LFB100:
 130:../../../os/oslib/src/chmemcore.c **** 
 131:../../../os/oslib/src/chmemcore.c **** /**
 132:../../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the top address downward.
 133:../../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 134:../../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 135:../../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 136:../../../os/oslib/src/chmemcore.c ****  *
 137:../../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 138:../../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 139:../../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 140:../../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 141:../../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 142:../../../os/oslib/src/chmemcore.c ****  *
 143:../../../os/oslib/src/chmemcore.c ****  * @iclass
 144:../../../os/oslib/src/chmemcore.c ****  */
 145:../../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 106               		.loc 1 145 0
 107               		.cfi_startproc
 108               	.LVL9:
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
 146:../../../os/oslib/src/chmemcore.c ****   uint8_t *p, *prev;
 147:../../../os/oslib/src/chmemcore.c **** 
 148:../../../os/oslib/src/chmemcore.c ****   chDbgCheckClassI();
 149:../../../os/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 150:../../../os/oslib/src/chmemcore.c **** 
 151:../../../os/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 113               		.loc 1 151 0
 114 0000 2091 0000 		lds r18,ch_memcore+2
 115 0004 3091 0000 		lds r19,ch_memcore+2+1
 116 0008 F901      		movw r30,r18
 117 000a E81B      		sub r30,r24
 118 000c F90B      		sbc r31,r25
 119 000e 7195      		neg r23
 120 0010 6195      		neg r22
 121 0012 7109      		sbc r23,__zero_reg__
 122               	.LVL10:
 123 0014 6E23      		and r22,r30
 124 0016 7F23      		and r23,r31
 125               	.LVL11:
 152:../../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 126               		.loc 1 152 0
 127 0018 CB01      		movw r24,r22
 128               	.LVL12:
 129 001a 841B      		sub r24,r20
 130 001c 950B      		sbc r25,r21
 131               	.LVL13:
 153:../../../os/oslib/src/chmemcore.c **** 
 154:../../../os/oslib/src/chmemcore.c ****   /* Considering also the case where there is numeric overflow.*/
 155:../../../os/oslib/src/chmemcore.c ****   if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 132               		.loc 1 155 0
 133 001e 4091 0000 		lds r20,ch_memcore
 134 0022 5091 0000 		lds r21,ch_memcore+1
 135               	.LVL14:
 136 0026 8417      		cp r24,r20
 137 0028 9507      		cpc r25,r21
 138 002a 00F0      		brlo .L10
 139               		.loc 1 155 0 is_stmt 0 discriminator 1
 140 002c 2817      		cp r18,r24
 141 002e 3907      		cpc r19,r25
 142 0030 00F0      		brlo .L10
 156:../../../os/oslib/src/chmemcore.c ****     return NULL;
 157:../../../os/oslib/src/chmemcore.c ****   }
 158:../../../os/oslib/src/chmemcore.c **** 
 159:../../../os/oslib/src/chmemcore.c ****   ch_memcore.topmem = prev;
 143               		.loc 1 159 0 is_stmt 1
 144 0032 9093 0000 		sts ch_memcore+2+1,r25
 145 0036 8093 0000 		sts ch_memcore+2,r24
 160:../../../os/oslib/src/chmemcore.c **** 
 161:../../../os/oslib/src/chmemcore.c ****   return p;
 146               		.loc 1 161 0
 147 003a CB01      		movw r24,r22
 148               	.LVL15:
 149 003c 0895      		ret
 150               	.LVL16:
 151               	.L10:
 156:../../../os/oslib/src/chmemcore.c ****     return NULL;
 152               		.loc 1 156 0
 153 003e 80E0      		ldi r24,0
 154               	.LVL17:
 155 0040 90E0      		ldi r25,0
 162:../../../os/oslib/src/chmemcore.c **** }
 156               		.loc 1 162 0
 157 0042 0895      		ret
 158               		.cfi_endproc
 159               	.LFE100:
 161               		.section	.text.chCoreAllocFromBase,"ax",@progbits
 162               	.global	chCoreAllocFromBase
 164               	chCoreAllocFromBase:
 165               	.LFB101:
 163:../../../os/oslib/src/chmemcore.c **** 
 164:../../../os/oslib/src/chmemcore.c **** /**
 165:../../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the lowest address upward.
 166:../../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 167:../../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 168:../../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 169:../../../os/oslib/src/chmemcore.c ****  *
 170:../../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 171:../../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 172:../../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 173:../../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 174:../../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 175:../../../os/oslib/src/chmemcore.c ****  *
 176:../../../os/oslib/src/chmemcore.c ****  * @api
 177:../../../os/oslib/src/chmemcore.c ****  */
 178:../../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromBase(size_t size, unsigned align, size_t offset) {
 166               		.loc 1 178 0
 167               		.cfi_startproc
 168               	.LVL18:
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 173               	.LBB14:
 174               	.LBB15:
 175               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 176               		.loc 2 430 0
 177               	/* #APP */
 178               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 179 0000 F894      		cli
 180               	 ;  0 "" 2
 181               	.LVL19:
 182               	/* #NOAPP */
 183               	.LBE15:
 184               	.LBE14:
 185               	.LBB16:
 186               	.LBB17:
 118:../../../os/oslib/src/chmemcore.c ****   next = p + size;
 187               		.loc 1 118 0
 188 0002 E091 0000 		lds r30,ch_memcore
 189 0006 F091 0000 		lds r31,ch_memcore+1
 190 000a 4E0F      		add r20,r30
 191 000c 5F1F      		adc r21,r31
 192               	.LVL20:
 193 000e 9B01      		movw r18,r22
 194 0010 2150      		subi r18,1
 195 0012 3109      		sbc r19,__zero_reg__
 196 0014 420F      		add r20,r18
 197 0016 531F      		adc r21,r19
 198 0018 7195      		neg r23
 199 001a 6195      		neg r22
 200 001c 7109      		sbc r23,__zero_reg__
 201               	.LVL21:
 202 001e 6423      		and r22,r20
 203 0020 7523      		and r23,r21
 204               	.LVL22:
 119:../../../os/oslib/src/chmemcore.c **** 
 205               		.loc 1 119 0
 206 0022 860F      		add r24,r22
 207 0024 971F      		adc r25,r23
 208               	.LVL23:
 122:../../../os/oslib/src/chmemcore.c ****     return NULL;
 209               		.loc 1 122 0
 210 0026 2091 0000 		lds r18,ch_memcore+2
 211 002a 3091 0000 		lds r19,ch_memcore+2+1
 212               	.LVL24:
 213 002e 2817      		cp r18,r24
 214 0030 3907      		cpc r19,r25
 215 0032 00F0      		brlo .L14
 216 0034 8E17      		cp r24,r30
 217 0036 9F07      		cpc r25,r31
 218 0038 00F0      		brlo .L14
 126:../../../os/oslib/src/chmemcore.c **** 
 219               		.loc 1 126 0
 220 003a 9093 0000 		sts ch_memcore+1,r25
 221 003e 8093 0000 		sts ch_memcore,r24
 128:../../../os/oslib/src/chmemcore.c **** }
 222               		.loc 1 128 0
 223 0042 CB01      		movw r24,r22
 224               	.LVL25:
 225               	.LBE17:
 226               	.LBE16:
 227               	.LBB19:
 228               	.LBB20:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 229               		.loc 2 440 0
 230               	/* #APP */
 231               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 232 0044 7894      		sei
 233               	 ;  0 "" 2
 234               	/* #NOAPP */
 235               	.LBE20:
 236               	.LBE19:
 179:../../../os/oslib/src/chmemcore.c ****   void *p;
 180:../../../os/oslib/src/chmemcore.c **** 
 181:../../../os/oslib/src/chmemcore.c ****   chSysLock();
 182:../../../os/oslib/src/chmemcore.c ****   p = chCoreAllocFromBaseI(size, align, offset);
 183:../../../os/oslib/src/chmemcore.c ****   chSysUnlock();
 184:../../../os/oslib/src/chmemcore.c **** 
 185:../../../os/oslib/src/chmemcore.c ****   return p;
 186:../../../os/oslib/src/chmemcore.c **** }
 237               		.loc 1 186 0
 238 0046 0895      		ret
 239               	.LVL26:
 240               	.L14:
 241               	.LBB22:
 242               	.LBB18:
 123:../../../os/oslib/src/chmemcore.c ****   }
 243               		.loc 1 123 0
 244 0048 80E0      		ldi r24,0
 245               	.LVL27:
 246 004a 90E0      		ldi r25,0
 247               	.LVL28:
 248               	.LBE18:
 249               	.LBE22:
 250               	.LBB23:
 251               	.LBB21:
 252               		.loc 2 440 0
 253               	/* #APP */
 254               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 255 004c 7894      		sei
 256               	 ;  0 "" 2
 257               	/* #NOAPP */
 258               	.LBE21:
 259               	.LBE23:
 260               		.loc 1 186 0
 261 004e 0895      		ret
 262               		.cfi_endproc
 263               	.LFE101:
 265               		.section	.text.chCoreAllocFromTop,"ax",@progbits
 266               	.global	chCoreAllocFromTop
 268               	chCoreAllocFromTop:
 269               	.LFB102:
 187:../../../os/oslib/src/chmemcore.c **** 
 188:../../../os/oslib/src/chmemcore.c **** /**
 189:../../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the top address downward.
 190:../../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 191:../../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 192:../../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 193:../../../os/oslib/src/chmemcore.c ****  *
 194:../../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 195:../../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 196:../../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 197:../../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 198:../../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 199:../../../os/oslib/src/chmemcore.c ****  *
 200:../../../os/oslib/src/chmemcore.c ****  * @api
 201:../../../os/oslib/src/chmemcore.c ****  */
 202:../../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 270               		.loc 1 202 0
 271               		.cfi_startproc
 272               	.LVL29:
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 277               	.LBB24:
 278               	.LBB25:
 430:../../../os/common/ports/AVR/chcore.h **** }
 279               		.loc 2 430 0
 280               	/* #APP */
 281               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 282 0000 F894      		cli
 283               	 ;  0 "" 2
 284               	.LVL30:
 285               	/* #NOAPP */
 286               	.LBE25:
 287               	.LBE24:
 288               	.LBB26:
 289               	.LBB27:
 151:../../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 290               		.loc 1 151 0
 291 0002 2091 0000 		lds r18,ch_memcore+2
 292 0006 3091 0000 		lds r19,ch_memcore+2+1
 293 000a F901      		movw r30,r18
 294 000c E81B      		sub r30,r24
 295 000e F90B      		sbc r31,r25
 296 0010 7195      		neg r23
 297 0012 6195      		neg r22
 298 0014 7109      		sbc r23,__zero_reg__
 299               	.LVL31:
 300 0016 6E23      		and r22,r30
 301 0018 7F23      		and r23,r31
 302               	.LVL32:
 152:../../../os/oslib/src/chmemcore.c **** 
 303               		.loc 1 152 0
 304 001a CB01      		movw r24,r22
 305               	.LVL33:
 306 001c 841B      		sub r24,r20
 307 001e 950B      		sbc r25,r21
 308               	.LVL34:
 155:../../../os/oslib/src/chmemcore.c ****     return NULL;
 309               		.loc 1 155 0
 310 0020 4091 0000 		lds r20,ch_memcore
 311 0024 5091 0000 		lds r21,ch_memcore+1
 312               	.LVL35:
 313 0028 8417      		cp r24,r20
 314 002a 9507      		cpc r25,r21
 315 002c 00F0      		brlo .L18
 316 002e 2817      		cp r18,r24
 317 0030 3907      		cpc r19,r25
 318 0032 00F0      		brlo .L18
 159:../../../os/oslib/src/chmemcore.c **** 
 319               		.loc 1 159 0
 320 0034 9093 0000 		sts ch_memcore+2+1,r25
 321 0038 8093 0000 		sts ch_memcore+2,r24
 161:../../../os/oslib/src/chmemcore.c **** }
 322               		.loc 1 161 0
 323 003c CB01      		movw r24,r22
 324               	.LVL36:
 325               	.LBE27:
 326               	.LBE26:
 327               	.LBB29:
 328               	.LBB30:
 329               		.loc 2 440 0
 330               	/* #APP */
 331               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 332 003e 7894      		sei
 333               	 ;  0 "" 2
 334               	/* #NOAPP */
 335               	.LBE30:
 336               	.LBE29:
 203:../../../os/oslib/src/chmemcore.c ****   void *p;
 204:../../../os/oslib/src/chmemcore.c **** 
 205:../../../os/oslib/src/chmemcore.c ****   chSysLock();
 206:../../../os/oslib/src/chmemcore.c ****   p = chCoreAllocFromTopI(size, align, offset);
 207:../../../os/oslib/src/chmemcore.c ****   chSysUnlock();
 208:../../../os/oslib/src/chmemcore.c **** 
 209:../../../os/oslib/src/chmemcore.c ****   return p;
 210:../../../os/oslib/src/chmemcore.c **** }
 337               		.loc 1 210 0
 338 0040 0895      		ret
 339               	.LVL37:
 340               	.L18:
 341               	.LBB32:
 342               	.LBB28:
 156:../../../os/oslib/src/chmemcore.c ****   }
 343               		.loc 1 156 0
 344 0042 80E0      		ldi r24,0
 345               	.LVL38:
 346 0044 90E0      		ldi r25,0
 347               	.LVL39:
 348               	.LBE28:
 349               	.LBE32:
 350               	.LBB33:
 351               	.LBB31:
 352               		.loc 2 440 0
 353               	/* #APP */
 354               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 355 0046 7894      		sei
 356               	 ;  0 "" 2
 357               	/* #NOAPP */
 358               	.LBE31:
 359               	.LBE33:
 360               		.loc 1 210 0
 361 0048 0895      		ret
 362               		.cfi_endproc
 363               	.LFE102:
 365               		.section	.text.chCoreGetStatusX,"ax",@progbits
 366               	.global	chCoreGetStatusX
 368               	chCoreGetStatusX:
 369               	.LFB103:
 211:../../../os/oslib/src/chmemcore.c **** 
 212:../../../os/oslib/src/chmemcore.c **** /**
 213:../../../os/oslib/src/chmemcore.c ****  * @brief   Core memory status.
 214:../../../os/oslib/src/chmemcore.c ****  *
 215:../../../os/oslib/src/chmemcore.c ****  * @return              The size, in bytes, of the free core memory.
 216:../../../os/oslib/src/chmemcore.c ****  *
 217:../../../os/oslib/src/chmemcore.c ****  * @xclass
 218:../../../os/oslib/src/chmemcore.c ****  */
 219:../../../os/oslib/src/chmemcore.c **** size_t chCoreGetStatusX(void) {
 370               		.loc 1 219 0
 371               		.cfi_startproc
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 0 */
 375               	.L__stack_usage = 0
 220:../../../os/oslib/src/chmemcore.c **** 
 221:../../../os/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] The cast is safe.*/
 222:../../../os/oslib/src/chmemcore.c ****   return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 376               		.loc 1 222 0
 377 0000 E0E0      		ldi r30,lo8(ch_memcore)
 378 0002 F0E0      		ldi r31,hi8(ch_memcore)
 379 0004 8281      		ldd r24,Z+2
 380 0006 9381      		ldd r25,Z+3
 381 0008 2081      		ld r18,Z
 382 000a 3181      		ldd r19,Z+1
 223:../../../os/oslib/src/chmemcore.c ****   /*lint -restore*/
 224:../../../os/oslib/src/chmemcore.c **** }
 383               		.loc 1 224 0
 384 000c 821B      		sub r24,r18
 385 000e 930B      		sbc r25,r19
 386 0010 0895      		ret
 387               		.cfi_endproc
 388               	.LFE103:
 390               		.section	.bss.static_heap.2693,"aw",@nobits
 393               	static_heap.2693:
 394 0000 0000 0000 		.zero	128
 394      0000 0000 
 394      0000 0000 
 394      0000 0000 
 394      0000 0000 
 395               		.comm	ch_memcore,4,1
 396               		.text
 397               	.Letext0:
 398               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 399               		.file 4 "/usr/lib/avr/include/stdint.h"
 400               		.file 5 "../../../os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmemcore.c
     /tmp/ccwcF1TD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwcF1TD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwcF1TD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwcF1TD.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwcF1TD.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwcF1TD.s:13     .text.__core_init:0000000000000000 __core_init
                            *COM*:0000000000000004 ch_memcore
     /tmp/ccwcF1TD.s:393    .bss.static_heap.2693:0000000000000000 static_heap.2693
     /tmp/ccwcF1TD.s:41     .text.chCoreAllocFromBaseI:0000000000000000 chCoreAllocFromBaseI
     /tmp/ccwcF1TD.s:104    .text.chCoreAllocFromTopI:0000000000000000 chCoreAllocFromTopI
     /tmp/ccwcF1TD.s:164    .text.chCoreAllocFromBase:0000000000000000 chCoreAllocFromBase
     /tmp/ccwcF1TD.s:268    .text.chCoreAllocFromTop:0000000000000000 chCoreAllocFromTop
     /tmp/ccwcF1TD.s:368    .text.chCoreGetStatusX:0000000000000000 chCoreGetStatusX

UNDEFINED SYMBOLS
__do_clear_bss
