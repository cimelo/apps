   1               		.file	"hal_queues.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.iq_read,"ax",@progbits
  12               	iq_read:
  13               	.LFB146:
  14               		.file 1 "../../../os/hal/src/hal_queues.c"
   1:../../../os/hal/src/hal_queues.c **** /*
   2:../../../os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_queues.c **** 
   4:../../../os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_queues.c **** 
   8:../../../os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_queues.c **** 
  10:../../../os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_queues.c ****     limitations under the License.
  15:../../../os/hal/src/hal_queues.c **** */
  16:../../../os/hal/src/hal_queues.c **** 
  17:../../../os/hal/src/hal_queues.c **** /**
  18:../../../os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:../../../os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:../../../os/hal/src/hal_queues.c ****  *
  21:../../../os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:../../../os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:../../../os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:../../../os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:../../../os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:../../../os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:../../../os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:../../../os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:../../../os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:../../../os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:../../../os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:../../../os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:../../../os/hal/src/hal_queues.c ****  *            together.
  34:../../../os/hal/src/hal_queues.c ****  *          .
  35:../../../os/hal/src/hal_queues.c ****  * @{
  36:../../../os/hal/src/hal_queues.c ****  */
  37:../../../os/hal/src/hal_queues.c **** 
  38:../../../os/hal/src/hal_queues.c **** #include <string.h>
  39:../../../os/hal/src/hal_queues.c **** 
  40:../../../os/hal/src/hal_queues.c **** #include "hal.h"
  41:../../../os/hal/src/hal_queues.c **** 
  42:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  43:../../../os/hal/src/hal_queues.c **** /* Driver local definitions.                                                 */
  44:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  45:../../../os/hal/src/hal_queues.c **** 
  46:../../../os/hal/src/hal_queues.c **** /**
  47:../../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking input queue read.
  48:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
  49:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  50:../../../os/hal/src/hal_queues.c ****  *          transferred or when the input queue has been emptied.
  51:../../../os/hal/src/hal_queues.c ****  *
  52:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  53:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
  54:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
  55:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
  56:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
  57:../../../os/hal/src/hal_queues.c ****  *
  58:../../../os/hal/src/hal_queues.c ****  * @notapi
  59:../../../os/hal/src/hal_queues.c ****  */
  60:../../../os/hal/src/hal_queues.c **** static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
  15               		.loc 1 60 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54 0012 DF93      		push r29
  55               	.LCFI9:
  56               		.cfi_def_cfa_offset 12
  57               		.cfi_offset 29, -11
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 10 */
  61               	.L__stack_usage = 10
  62 0014 EC01      		movw r28,r24
  63 0016 6B01      		movw r12,r22
  64 0018 8A01      		movw r16,r20
  61:../../../os/hal/src/hal_queues.c ****   size_t s1, s2;
  62:../../../os/hal/src/hal_queues.c **** 
  63:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
  64:../../../os/hal/src/hal_queues.c **** 
  65:../../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be read in a single atomic operation.*/
  66:../../../os/hal/src/hal_queues.c ****   if (n > iqGetFullI(iqp)) {
  65               		.loc 1 66 0
  66 001a 8981      		ldd r24,Y+1
  67 001c 9A81      		ldd r25,Y+2
  68               	.LVL1:
  69 001e 8417      		cp r24,r20
  70 0020 9507      		cpc r25,r21
  71 0022 00F4      		brsh .L2
  67:../../../os/hal/src/hal_queues.c ****     n = iqGetFullI(iqp);
  72               		.loc 1 67 0
  73 0024 0981      		ldd r16,Y+1
  74 0026 1A81      		ldd r17,Y+2
  75               	.LVL2:
  76               	.L2:
  68:../../../os/hal/src/hal_queues.c ****   }
  69:../../../os/hal/src/hal_queues.c **** 
  70:../../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
  71:../../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
  72:../../../os/hal/src/hal_queues.c ****   s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  77               		.loc 1 72 0
  78 0028 6985      		ldd r22,Y+9
  79 002a 7A85      		ldd r23,Y+10
  80               	.LVL3:
  81 002c ED80      		ldd r14,Y+5
  82 002e FE80      		ldd r15,Y+6
  83 0030 E61A      		sub r14,r22
  84 0032 F70A      		sbc r15,r23
  85               	.LVL4:
  73:../../../os/hal/src/hal_queues.c ****   /*lint -restore*/
  74:../../../os/hal/src/hal_queues.c ****   if (n < s1) {
  86               		.loc 1 74 0
  87 0034 0E15      		cp r16,r14
  88 0036 1F05      		cpc r17,r15
  89 0038 00F0      		brlo .L7
  75:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  76:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
  77:../../../os/hal/src/hal_queues.c ****   }
  78:../../../os/hal/src/hal_queues.c ****   else if (n > s1) {
  90               		.loc 1 78 0
  91 003a E016      		cp r14,r16
  92 003c F106      		cpc r15,r17
  93 003e 00F0      		brlo .L8
  79:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  80:../../../os/hal/src/hal_queues.c ****     bp += s1;
  81:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
  82:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  83:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
  84:../../../os/hal/src/hal_queues.c ****   }
  85:../../../os/hal/src/hal_queues.c ****   else {
  86:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  94               		.loc 1 86 0
  95 0040 A801      		movw r20,r16
  96 0042 C601      		movw r24,r12
  97 0044 0E94 0000 		call memcpy
  98               	.LVL5:
  87:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
  99               		.loc 1 87 0
 100 0048 8B81      		ldd r24,Y+3
 101 004a 9C81      		ldd r25,Y+4
 102 004c 9A87      		std Y+10,r25
 103 004e 8987      		std Y+9,r24
 104               	.LVL6:
 105               	.L4:
  88:../../../os/hal/src/hal_queues.c ****   }
  89:../../../os/hal/src/hal_queues.c **** 
  90:../../../os/hal/src/hal_queues.c ****   iqp->q_counter -= n;
 106               		.loc 1 90 0
 107 0050 8981      		ldd r24,Y+1
 108 0052 9A81      		ldd r25,Y+2
 109 0054 801B      		sub r24,r16
 110 0056 910B      		sbc r25,r17
 111 0058 9A83      		std Y+2,r25
 112 005a 8983      		std Y+1,r24
  91:../../../os/hal/src/hal_queues.c ****   return n;
  92:../../../os/hal/src/hal_queues.c **** }
 113               		.loc 1 92 0
 114 005c C801      		movw r24,r16
 115               	/* epilogue start */
 116 005e DF91      		pop r29
 117 0060 CF91      		pop r28
 118               	.LVL7:
 119 0062 1F91      		pop r17
 120 0064 0F91      		pop r16
 121               	.LVL8:
 122 0066 FF90      		pop r15
 123 0068 EF90      		pop r14
 124               	.LVL9:
 125 006a DF90      		pop r13
 126 006c CF90      		pop r12
 127 006e BF90      		pop r11
 128 0070 AF90      		pop r10
 129 0072 0895      		ret
 130               	.LVL10:
 131               	.L8:
  79:../../../os/hal/src/hal_queues.c ****     bp += s1;
 132               		.loc 1 79 0
 133 0074 A701      		movw r20,r14
 134 0076 C601      		movw r24,r12
 135 0078 0E94 0000 		call memcpy
 136               	.LVL11:
  81:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 137               		.loc 1 81 0
 138 007c 5801      		movw r10,r16
 139 007e AE18      		sub r10,r14
 140 0080 BF08      		sbc r11,r15
 141               	.LVL12:
  82:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
 142               		.loc 1 82 0
 143 0082 6B81      		ldd r22,Y+3
 144 0084 7C81      		ldd r23,Y+4
 145 0086 A501      		movw r20,r10
 146 0088 C601      		movw r24,r12
 147 008a 8E0D      		add r24,r14
 148 008c 9F1D      		adc r25,r15
 149               	.LVL13:
 150 008e 0E94 0000 		call memcpy
 151               	.LVL14:
  83:../../../os/hal/src/hal_queues.c ****   }
 152               		.loc 1 83 0
 153 0092 8B81      		ldd r24,Y+3
 154 0094 9C81      		ldd r25,Y+4
 155 0096 A80E      		add r10,r24
 156 0098 B91E      		adc r11,r25
 157               	.LVL15:
 158 009a BA86      		std Y+10,r11
 159 009c A986      		std Y+9,r10
 160 009e 00C0      		rjmp .L4
 161               	.LVL16:
 162               	.L7:
  75:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
 163               		.loc 1 75 0
 164 00a0 A801      		movw r20,r16
 165 00a2 C601      		movw r24,r12
 166 00a4 0E94 0000 		call memcpy
 167               	.LVL17:
  76:../../../os/hal/src/hal_queues.c ****   }
 168               		.loc 1 76 0
 169 00a8 8985      		ldd r24,Y+9
 170 00aa 9A85      		ldd r25,Y+10
 171 00ac 800F      		add r24,r16
 172 00ae 911F      		adc r25,r17
 173 00b0 9A87      		std Y+10,r25
 174 00b2 8987      		std Y+9,r24
 175 00b4 00C0      		rjmp .L4
 176               		.cfi_endproc
 177               	.LFE146:
 179               		.section	.text.oq_write,"ax",@progbits
 181               	oq_write:
 182               	.LFB147:
  93:../../../os/hal/src/hal_queues.c **** 
  94:../../../os/hal/src/hal_queues.c **** /**
  95:../../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking output queue write.
  96:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
  97:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  98:../../../os/hal/src/hal_queues.c ****  *          transferred or when the output queue has been filled.
  99:../../../os/hal/src/hal_queues.c ****  *
 100:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 101:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 102:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 103:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 104:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 105:../../../os/hal/src/hal_queues.c ****  *
 106:../../../os/hal/src/hal_queues.c ****  * @notapi
 107:../../../os/hal/src/hal_queues.c ****  */
 108:../../../os/hal/src/hal_queues.c **** static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 183               		.loc 1 108 0
 184               		.cfi_startproc
 185               	.LVL18:
 186 0000 AF92      		push r10
 187               	.LCFI10:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 10, -2
 190 0002 BF92      		push r11
 191               	.LCFI11:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 11, -3
 194 0004 CF92      		push r12
 195               	.LCFI12:
 196               		.cfi_def_cfa_offset 5
 197               		.cfi_offset 12, -4
 198 0006 DF92      		push r13
 199               	.LCFI13:
 200               		.cfi_def_cfa_offset 6
 201               		.cfi_offset 13, -5
 202 0008 EF92      		push r14
 203               	.LCFI14:
 204               		.cfi_def_cfa_offset 7
 205               		.cfi_offset 14, -6
 206 000a FF92      		push r15
 207               	.LCFI15:
 208               		.cfi_def_cfa_offset 8
 209               		.cfi_offset 15, -7
 210 000c 0F93      		push r16
 211               	.LCFI16:
 212               		.cfi_def_cfa_offset 9
 213               		.cfi_offset 16, -8
 214 000e 1F93      		push r17
 215               	.LCFI17:
 216               		.cfi_def_cfa_offset 10
 217               		.cfi_offset 17, -9
 218 0010 CF93      		push r28
 219               	.LCFI18:
 220               		.cfi_def_cfa_offset 11
 221               		.cfi_offset 28, -10
 222 0012 DF93      		push r29
 223               	.LCFI19:
 224               		.cfi_def_cfa_offset 12
 225               		.cfi_offset 29, -11
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 10 */
 229               	.L__stack_usage = 10
 230 0014 EC01      		movw r28,r24
 231 0016 6B01      		movw r12,r22
 232 0018 8A01      		movw r16,r20
 109:../../../os/hal/src/hal_queues.c ****   size_t s1, s2;
 110:../../../os/hal/src/hal_queues.c **** 
 111:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 112:../../../os/hal/src/hal_queues.c **** 
 113:../../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be written in a single atomic operation.*/
 114:../../../os/hal/src/hal_queues.c ****   if (n > oqGetEmptyI(oqp)) {
 233               		.loc 1 114 0
 234 001a 8981      		ldd r24,Y+1
 235 001c 9A81      		ldd r25,Y+2
 236               	.LVL19:
 237 001e 8417      		cp r24,r20
 238 0020 9507      		cpc r25,r21
 239 0022 00F4      		brsh .L10
 115:../../../os/hal/src/hal_queues.c ****     n = oqGetEmptyI(oqp);
 240               		.loc 1 115 0
 241 0024 0981      		ldd r16,Y+1
 242 0026 1A81      		ldd r17,Y+2
 243               	.LVL20:
 244               	.L10:
 116:../../../os/hal/src/hal_queues.c ****   }
 117:../../../os/hal/src/hal_queues.c **** 
 118:../../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
 119:../../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
 120:../../../os/hal/src/hal_queues.c ****   s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 245               		.loc 1 120 0
 246 0028 8F81      		ldd r24,Y+7
 247 002a 9885      		ldd r25,Y+8
 248 002c ED80      		ldd r14,Y+5
 249 002e FE80      		ldd r15,Y+6
 250 0030 E81A      		sub r14,r24
 251 0032 F90A      		sbc r15,r25
 252               	.LVL21:
 121:../../../os/hal/src/hal_queues.c ****   /*lint -restore*/
 122:../../../os/hal/src/hal_queues.c ****   if (n < s1) {
 253               		.loc 1 122 0
 254 0034 0E15      		cp r16,r14
 255 0036 1F05      		cpc r17,r15
 256 0038 00F0      		brlo .L14
 123:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 124:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 125:../../../os/hal/src/hal_queues.c ****   }
 126:../../../os/hal/src/hal_queues.c ****   else if (n > s1) {
 257               		.loc 1 126 0
 258 003a E016      		cp r14,r16
 259 003c F106      		cpc r15,r17
 260 003e 00F0      		brlo .L15
 127:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 128:../../../os/hal/src/hal_queues.c ****     bp += s1;
 129:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
 130:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 131:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 132:../../../os/hal/src/hal_queues.c ****   }
 133:../../../os/hal/src/hal_queues.c ****   else {
 134:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 261               		.loc 1 134 0
 262 0040 A801      		movw r20,r16
 263 0042 B601      		movw r22,r12
 264               	.LVL22:
 265 0044 0E94 0000 		call memcpy
 266               	.LVL23:
 135:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 267               		.loc 1 135 0
 268 0048 8B81      		ldd r24,Y+3
 269 004a 9C81      		ldd r25,Y+4
 270 004c 9887      		std Y+8,r25
 271 004e 8F83      		std Y+7,r24
 272               	.LVL24:
 273               	.L12:
 136:../../../os/hal/src/hal_queues.c ****   }
 137:../../../os/hal/src/hal_queues.c **** 
 138:../../../os/hal/src/hal_queues.c ****   oqp->q_counter -= n;
 274               		.loc 1 138 0
 275 0050 8981      		ldd r24,Y+1
 276 0052 9A81      		ldd r25,Y+2
 277 0054 801B      		sub r24,r16
 278 0056 910B      		sbc r25,r17
 279 0058 9A83      		std Y+2,r25
 280 005a 8983      		std Y+1,r24
 139:../../../os/hal/src/hal_queues.c ****   return n;
 140:../../../os/hal/src/hal_queues.c **** }
 281               		.loc 1 140 0
 282 005c C801      		movw r24,r16
 283               	/* epilogue start */
 284 005e DF91      		pop r29
 285 0060 CF91      		pop r28
 286               	.LVL25:
 287 0062 1F91      		pop r17
 288 0064 0F91      		pop r16
 289               	.LVL26:
 290 0066 FF90      		pop r15
 291 0068 EF90      		pop r14
 292               	.LVL27:
 293 006a DF90      		pop r13
 294 006c CF90      		pop r12
 295 006e BF90      		pop r11
 296 0070 AF90      		pop r10
 297 0072 0895      		ret
 298               	.LVL28:
 299               	.L15:
 127:../../../os/hal/src/hal_queues.c ****     bp += s1;
 300               		.loc 1 127 0
 301 0074 A701      		movw r20,r14
 302 0076 B601      		movw r22,r12
 303 0078 0E94 0000 		call memcpy
 304               	.LVL29:
 129:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 305               		.loc 1 129 0
 306 007c 5801      		movw r10,r16
 307 007e AE18      		sub r10,r14
 308 0080 BF08      		sbc r11,r15
 309               	.LVL30:
 130:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 310               		.loc 1 130 0
 311 0082 B601      		movw r22,r12
 312 0084 6E0D      		add r22,r14
 313 0086 7F1D      		adc r23,r15
 314               	.LVL31:
 315 0088 A501      		movw r20,r10
 316 008a 8B81      		ldd r24,Y+3
 317 008c 9C81      		ldd r25,Y+4
 318 008e 0E94 0000 		call memcpy
 319               	.LVL32:
 131:../../../os/hal/src/hal_queues.c ****   }
 320               		.loc 1 131 0
 321 0092 8B81      		ldd r24,Y+3
 322 0094 9C81      		ldd r25,Y+4
 323 0096 A80E      		add r10,r24
 324 0098 B91E      		adc r11,r25
 325               	.LVL33:
 326 009a B886      		std Y+8,r11
 327 009c AF82      		std Y+7,r10
 328 009e 00C0      		rjmp .L12
 329               	.LVL34:
 330               	.L14:
 123:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 331               		.loc 1 123 0
 332 00a0 A801      		movw r20,r16
 333 00a2 B601      		movw r22,r12
 334 00a4 0E94 0000 		call memcpy
 335               	.LVL35:
 124:../../../os/hal/src/hal_queues.c ****   }
 336               		.loc 1 124 0
 337 00a8 8F81      		ldd r24,Y+7
 338 00aa 9885      		ldd r25,Y+8
 339 00ac 800F      		add r24,r16
 340 00ae 911F      		adc r25,r17
 341 00b0 9887      		std Y+8,r25
 342 00b2 8F83      		std Y+7,r24
 343 00b4 00C0      		rjmp .L12
 344               		.cfi_endproc
 345               	.LFE147:
 347               		.section	.text.iqObjectInit,"ax",@progbits
 348               	.global	iqObjectInit
 350               	iqObjectInit:
 351               	.LFB148:
 141:../../../os/hal/src/hal_queues.c **** 
 142:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 143:../../../os/hal/src/hal_queues.c **** /* Driver exported variables.                                                */
 144:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 145:../../../os/hal/src/hal_queues.c **** 
 146:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 147:../../../os/hal/src/hal_queues.c **** /* Driver local variables and types.                                         */
 148:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 149:../../../os/hal/src/hal_queues.c **** 
 150:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 151:../../../os/hal/src/hal_queues.c **** /* Driver local functions.                                                   */
 152:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 153:../../../os/hal/src/hal_queues.c **** 
 154:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 155:../../../os/hal/src/hal_queues.c **** /* Driver interrupt handlers.                                                */
 156:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 157:../../../os/hal/src/hal_queues.c **** 
 158:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 159:../../../os/hal/src/hal_queues.c **** /* Driver exported functions.                                                */
 160:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 161:../../../os/hal/src/hal_queues.c **** 
 162:../../../os/hal/src/hal_queues.c **** /**
 163:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
 164:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 165:../../../os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
 166:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 167:../../../os/hal/src/hal_queues.c ****  *
 168:../../../os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
 169:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 170:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 171:../../../os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
 172:../../../os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
 173:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 174:../../../os/hal/src/hal_queues.c ****  *
 175:../../../os/hal/src/hal_queues.c ****  * @init
 176:../../../os/hal/src/hal_queues.c ****  */
 177:../../../os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
 178:../../../os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
 352               		.loc 1 178 0
 353               		.cfi_startproc
 354               	.LVL36:
 355 0000 0F93      		push r16
 356               	.LCFI20:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 16, -2
 359 0002 1F93      		push r17
 360               	.LCFI21:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 17, -3
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 2 */
 366               	.L__stack_usage = 2
 367 0004 FC01      		movw r30,r24
 368               	.LVL37:
 369               	.LBB89:
 370               	.LBB90:
 371               		.file 2 "../../../os/hal/osal/rt-nil/osal.h"
   1:../../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/osal.h **** 
   4:../../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/osal.h **** 
   8:../../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/osal.h **** 
  10:../../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/osal.h **** */
  16:../../../os/hal/osal/rt-nil/osal.h **** 
  17:../../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../../os/hal/osal/rt-nil/osal.h **** 
  25:../../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt-nil/osal.h **** 
  28:../../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt-nil/osal.h **** 
  32:../../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt-nil/osal.h **** 
  34:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/osal.h **** 
  38:../../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../../os/hal/osal/rt-nil/osal.h **** 
  46:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../../os/hal/osal/rt-nil/osal.h **** 
  50:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../../os/hal/osal/rt-nil/osal.h **** 
  54:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../../os/hal/osal/rt-nil/osal.h **** 
  65:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../../os/hal/osal/rt-nil/osal.h **** 
  75:../../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../../os/hal/osal/rt-nil/osal.h **** 
  84:../../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt-nil/osal.h **** 
  93:../../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt-nil/osal.h **** 
  98:../../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../../os/hal/osal/rt-nil/osal.h **** 
 108:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt-nil/osal.h **** 
 112:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt-nil/osal.h **** 
 116:../../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../../os/hal/osal/rt-nil/osal.h **** 
 122:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../../os/hal/osal/rt-nil/osal.h **** 
 127:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../../os/hal/osal/rt-nil/osal.h **** 
 131:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../../os/hal/osal/rt-nil/osal.h **** 
 138:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../../os/hal/osal/rt-nil/osal.h **** 
 145:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../../os/hal/osal/rt-nil/osal.h **** 
 152:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../../os/hal/osal/rt-nil/osal.h **** 
 159:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../../os/hal/osal/rt-nil/osal.h **** 
 168:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../../os/hal/osal/rt-nil/osal.h **** 
 175:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../../os/hal/osal/rt-nil/osal.h **** 
 182:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../../os/hal/osal/rt-nil/osal.h **** 
 189:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../../os/hal/osal/rt-nil/osal.h **** 
 200:../../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../../os/hal/osal/rt-nil/osal.h **** 
 207:../../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../../os/hal/osal/rt-nil/osal.h **** };
 220:../../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../../os/hal/osal/rt-nil/osal.h **** 
 222:../../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../../os/hal/osal/rt-nil/osal.h **** 
 234:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../../os/hal/osal/rt-nil/osal.h **** 
 247:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../../os/hal/osal/rt-nil/osal.h **** 
 251:../../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../../os/hal/osal/rt-nil/osal.h **** 
 271:../../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../../os/hal/osal/rt-nil/osal.h **** 
 283:../../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../../os/hal/osal/rt-nil/osal.h **** 
 289:../../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../../os/hal/osal/rt-nil/osal.h **** 
 296:../../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../../os/hal/osal/rt-nil/osal.h **** 
 305:../../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../../os/hal/osal/rt-nil/osal.h **** 
 311:../../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../../os/hal/osal/rt-nil/osal.h **** 
 317:../../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../../os/hal/osal/rt-nil/osal.h **** 
 326:../../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../../os/hal/osal/rt-nil/osal.h **** 
 345:../../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../../os/hal/osal/rt-nil/osal.h **** 
 360:../../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../../os/hal/osal/rt-nil/osal.h **** 
 375:../../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../../os/hal/osal/rt-nil/osal.h **** 
 390:../../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../../os/hal/osal/rt-nil/osal.h **** 
 405:../../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../../os/hal/osal/rt-nil/osal.h **** 
 421:../../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../../os/hal/osal/rt-nil/osal.h **** 
 438:../../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../../os/hal/osal/rt-nil/osal.h **** 
 452:../../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../../os/hal/osal/rt-nil/osal.h **** 
 467:../../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../../os/hal/osal/rt-nil/osal.h **** 
 483:../../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../../os/hal/osal/rt-nil/osal.h **** 
 496:../../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../../os/hal/osal/rt-nil/osal.h **** 
 510:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../../os/hal/osal/rt-nil/osal.h **** 
 514:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../../os/hal/osal/rt-nil/osal.h **** 
 518:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../../os/hal/osal/rt-nil/osal.h **** }
 520:../../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../../os/hal/osal/rt-nil/osal.h **** 
 522:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../../os/hal/osal/rt-nil/osal.h **** 
 526:../../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../../os/hal/osal/rt-nil/osal.h **** 
 533:../../../os/hal/osal/rt-nil/osal.h **** }
 534:../../../os/hal/osal/rt-nil/osal.h **** 
 535:../../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../../os/hal/osal/rt-nil/osal.h **** 
 544:../../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../../os/hal/osal/rt-nil/osal.h **** }
 546:../../../os/hal/osal/rt-nil/osal.h **** 
 547:../../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../../os/hal/osal/rt-nil/osal.h **** 
 554:../../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../../os/hal/osal/rt-nil/osal.h **** }
 556:../../../os/hal/osal/rt-nil/osal.h **** 
 557:../../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../../os/hal/osal/rt-nil/osal.h **** 
 564:../../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../../os/hal/osal/rt-nil/osal.h **** }
 566:../../../os/hal/osal/rt-nil/osal.h **** 
 567:../../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../../os/hal/osal/rt-nil/osal.h **** 
 575:../../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../../os/hal/osal/rt-nil/osal.h **** }
 577:../../../os/hal/osal/rt-nil/osal.h **** 
 578:../../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../../os/hal/osal/rt-nil/osal.h **** 
 586:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../../os/hal/osal/rt-nil/osal.h **** }
 588:../../../os/hal/osal/rt-nil/osal.h **** 
 589:../../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../../os/hal/osal/rt-nil/osal.h **** 
 597:../../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../../os/hal/osal/rt-nil/osal.h **** }
 599:../../../os/hal/osal/rt-nil/osal.h **** 
 600:../../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../../os/hal/osal/rt-nil/osal.h **** 
 608:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../../os/hal/osal/rt-nil/osal.h **** }
 610:../../../os/hal/osal/rt-nil/osal.h **** 
 611:../../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../../os/hal/osal/rt-nil/osal.h **** 
 626:../../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../../os/hal/osal/rt-nil/osal.h **** }
 628:../../../os/hal/osal/rt-nil/osal.h **** 
 629:../../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../../os/hal/osal/rt-nil/osal.h **** 
 640:../../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../../os/hal/osal/rt-nil/osal.h **** }
 642:../../../os/hal/osal/rt-nil/osal.h **** 
 643:../../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../../os/hal/osal/rt-nil/osal.h **** 
 655:../../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../../os/hal/osal/rt-nil/osal.h **** }
 657:../../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../../os/hal/osal/rt-nil/osal.h **** 
 659:../../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../../os/hal/osal/rt-nil/osal.h **** 
 667:../../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../../os/hal/osal/rt-nil/osal.h **** }
 669:../../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../../os/hal/osal/rt-nil/osal.h **** 
 671:../../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../../os/hal/osal/rt-nil/osal.h **** 
 682:../../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../../os/hal/osal/rt-nil/osal.h **** }
 684:../../../os/hal/osal/rt-nil/osal.h **** 
 685:../../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../../os/hal/osal/rt-nil/osal.h **** 
 700:../../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../../os/hal/osal/rt-nil/osal.h **** }
 702:../../../os/hal/osal/rt-nil/osal.h **** 
 703:../../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../../os/hal/osal/rt-nil/osal.h **** 
 715:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../../os/hal/osal/rt-nil/osal.h **** }
 717:../../../os/hal/osal/rt-nil/osal.h **** 
 718:../../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../../os/hal/osal/rt-nil/osal.h **** 
 729:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../../os/hal/osal/rt-nil/osal.h **** }
 731:../../../os/hal/osal/rt-nil/osal.h **** 
 732:../../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../../os/hal/osal/rt-nil/osal.h **** 
 750:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../../os/hal/osal/rt-nil/osal.h **** }
 752:../../../os/hal/osal/rt-nil/osal.h **** 
 753:../../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../../os/hal/osal/rt-nil/osal.h **** 
 767:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../../os/hal/osal/rt-nil/osal.h **** }
 769:../../../os/hal/osal/rt-nil/osal.h **** 
 770:../../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../../os/hal/osal/rt-nil/osal.h **** 
 784:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../../os/hal/osal/rt-nil/osal.h **** }
 786:../../../os/hal/osal/rt-nil/osal.h **** 
 787:../../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../../os/hal/osal/rt-nil/osal.h **** 
 799:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../../os/hal/osal/rt-nil/osal.h **** }
 801:../../../os/hal/osal/rt-nil/osal.h **** 
 802:../../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../../os/hal/osal/rt-nil/osal.h **** 
 824:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../../os/hal/osal/rt-nil/osal.h **** }
 826:../../../os/hal/osal/rt-nil/osal.h **** 
 827:../../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../../os/hal/osal/rt-nil/osal.h **** 
 839:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../../os/hal/osal/rt-nil/osal.h **** }
 841:../../../os/hal/osal/rt-nil/osal.h **** 
 842:../../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../../os/hal/osal/rt-nil/osal.h **** 
 854:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../../os/hal/osal/rt-nil/osal.h **** }
 856:../../../os/hal/osal/rt-nil/osal.h **** 
 857:../../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../../os/hal/osal/rt-nil/osal.h **** 
 866:../../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 372               		.loc 2 866 0
 373 0006 1082      		st Z,__zero_reg__
 374               	.LVL38:
 375               	.LBE90:
 376               	.LBE89:
 179:../../../os/hal/src/hal_queues.c **** 
 180:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
 181:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 377               		.loc 1 181 0
 378 0008 1282      		std Z+2,__zero_reg__
 379 000a 1182      		std Z+1,__zero_reg__
 182:../../../os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
 380               		.loc 1 182 0
 381 000c 7483      		std Z+4,r23
 382 000e 6383      		std Z+3,r22
 183:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
 383               		.loc 1 183 0
 384 0010 7287      		std Z+10,r23
 385 0012 6187      		std Z+9,r22
 184:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
 386               		.loc 1 184 0
 387 0014 7087      		std Z+8,r23
 388 0016 6783      		std Z+7,r22
 185:../../../os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
 389               		.loc 1 185 0
 390 0018 640F      		add r22,r20
 391 001a 751F      		adc r23,r21
 392               	.LVL39:
 393 001c 7683      		std Z+6,r23
 394 001e 6583      		std Z+5,r22
 186:../../../os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
 395               		.loc 1 186 0
 396 0020 3487      		std Z+12,r19
 397 0022 2387      		std Z+11,r18
 187:../../../os/hal/src/hal_queues.c ****   iqp->q_link    = link;
 398               		.loc 1 187 0
 399 0024 1687      		std Z+14,r17
 400 0026 0587      		std Z+13,r16
 401               	/* epilogue start */
 188:../../../os/hal/src/hal_queues.c **** }
 402               		.loc 1 188 0
 403 0028 1F91      		pop r17
 404 002a 0F91      		pop r16
 405               	.LVL40:
 406 002c 0895      		ret
 407               		.cfi_endproc
 408               	.LFE148:
 410               		.section	.text.iqResetI,"ax",@progbits
 411               	.global	iqResetI
 413               	iqResetI:
 414               	.LFB149:
 189:../../../os/hal/src/hal_queues.c **** 
 190:../../../os/hal/src/hal_queues.c **** /**
 191:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
 192:../../../os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
 193:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 194:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 195:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 196:../../../os/hal/src/hal_queues.c ****  *
 197:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 198:../../../os/hal/src/hal_queues.c ****  *
 199:../../../os/hal/src/hal_queues.c ****  * @iclass
 200:../../../os/hal/src/hal_queues.c ****  */
 201:../../../os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
 415               		.loc 1 201 0
 416               		.cfi_startproc
 417               	.LVL41:
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 0 */
 421               	.L__stack_usage = 0
 202:../../../os/hal/src/hal_queues.c **** 
 203:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 204:../../../os/hal/src/hal_queues.c **** 
 205:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
 422               		.loc 1 205 0
 423 0000 FC01      		movw r30,r24
 424 0002 2381      		ldd r18,Z+3
 425 0004 3481      		ldd r19,Z+4
 426 0006 3287      		std Z+10,r19
 427 0008 2187      		std Z+9,r18
 206:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
 428               		.loc 1 206 0
 429 000a 3087      		std Z+8,r19
 430 000c 2783      		std Z+7,r18
 207:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 431               		.loc 1 207 0
 432 000e 1282      		std Z+2,__zero_reg__
 433 0010 1182      		std Z+1,__zero_reg__
 434               	.LVL42:
 435               	.LBB91:
 436               	.LBB92:
 867:../../../os/hal/osal/rt-nil/osal.h **** }
 868:../../../os/hal/osal/rt-nil/osal.h **** 
 869:../../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../../os/hal/osal/rt-nil/osal.h **** 
 895:../../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../../os/hal/osal/rt-nil/osal.h **** }
 897:../../../os/hal/osal/rt-nil/osal.h **** 
 898:../../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../../os/hal/osal/rt-nil/osal.h **** 
 908:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../../os/hal/osal/rt-nil/osal.h **** }
 910:../../../os/hal/osal/rt-nil/osal.h **** 
 911:../../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../../os/hal/osal/rt-nil/osal.h **** 
 921:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 437               		.loc 2 921 0
 438 0012 6EEF      		ldi r22,lo8(-2)
 439 0014 7FEF      		ldi r23,lo8(-1)
 440 0016 0C94 0000 		jmp chThdDequeueAllI
 441               	.LVL43:
 442               	.LBE92:
 443               	.LBE91:
 444               		.cfi_endproc
 445               	.LFE149:
 447               		.section	.text.iqPutI,"ax",@progbits
 448               	.global	iqPutI
 450               	iqPutI:
 451               	.LFB150:
 208:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
 209:../../../os/hal/src/hal_queues.c **** }
 210:../../../os/hal/src/hal_queues.c **** 
 211:../../../os/hal/src/hal_queues.c **** /**
 212:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue write.
 213:../../../os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue. The
 214:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 215:../../../os/hal/src/hal_queues.c ****  *
 216:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 217:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 218:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 219:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation has been completed with success.
 220:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 221:../../../os/hal/src/hal_queues.c ****  *
 222:../../../os/hal/src/hal_queues.c ****  * @iclass
 223:../../../os/hal/src/hal_queues.c ****  */
 224:../../../os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 452               		.loc 1 224 0
 453               		.cfi_startproc
 454               	.LVL44:
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 0 */
 458               	.L__stack_usage = 0
 459 0000 FC01      		movw r30,r24
 225:../../../os/hal/src/hal_queues.c **** 
 226:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 227:../../../os/hal/src/hal_queues.c **** 
 228:../../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 229:../../../os/hal/src/hal_queues.c ****   if (!iqIsFullI(iqp)) {
 460               		.loc 1 229 0
 461 0002 A781      		ldd r26,Z+7
 462 0004 B085      		ldd r27,Z+8
 463 0006 8185      		ldd r24,Z+9
 464 0008 9285      		ldd r25,Z+10
 465               	.LVL45:
 466 000a A817      		cp r26,r24
 467 000c B907      		cpc r27,r25
 468 000e 01F0      		breq .L25
 469               	.L19:
 230:../../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 470               		.loc 1 230 0
 471 0010 8181      		ldd r24,Z+1
 472 0012 9281      		ldd r25,Z+2
 473 0014 0196      		adiw r24,1
 474 0016 9283      		std Z+2,r25
 475 0018 8183      		std Z+1,r24
 231:../../../os/hal/src/hal_queues.c ****     *iqp->q_wrptr++ = b;
 476               		.loc 1 231 0
 477 001a CD01      		movw r24,r26
 478 001c 0196      		adiw r24,1
 479 001e 9087      		std Z+8,r25
 480 0020 8783      		std Z+7,r24
 481 0022 6C93      		st X,r22
 232:../../../os/hal/src/hal_queues.c ****     if (iqp->q_wrptr >= iqp->q_top) {
 482               		.loc 1 232 0
 483 0024 2781      		ldd r18,Z+7
 484 0026 3085      		ldd r19,Z+8
 485 0028 8581      		ldd r24,Z+5
 486 002a 9681      		ldd r25,Z+6
 487 002c 2817      		cp r18,r24
 488 002e 3907      		cpc r19,r25
 489 0030 00F0      		brlo .L22
 233:../../../os/hal/src/hal_queues.c ****       iqp->q_wrptr = iqp->q_buffer;
 490               		.loc 1 233 0
 491 0032 8381      		ldd r24,Z+3
 492 0034 9481      		ldd r25,Z+4
 493 0036 9087      		std Z+8,r25
 494 0038 8783      		std Z+7,r24
 495               	.L22:
 496 003a CF01      		movw r24,r30
 497               	.LVL46:
 498               	.LBB93:
 499               	.LBB94:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 500               		.loc 2 908 0
 501 003c 60E0      		ldi r22,0
 502 003e 70E0      		ldi r23,0
 503               	.LVL47:
 504 0040 0E94 0000 		call chThdDequeueNextI
 505               	.LVL48:
 506               	.LBE94:
 507               	.LBE93:
 234:../../../os/hal/src/hal_queues.c ****     }
 235:../../../os/hal/src/hal_queues.c **** 
 236:../../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 237:../../../os/hal/src/hal_queues.c **** 
 238:../../../os/hal/src/hal_queues.c ****     return MSG_OK;
 508               		.loc 1 238 0
 509 0044 80E0      		ldi r24,0
 510 0046 90E0      		ldi r25,0
 511 0048 0895      		ret
 512               	.LVL49:
 513               	.L25:
 229:../../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 514               		.loc 1 229 0 discriminator 1
 515 004a 8181      		ldd r24,Z+1
 516 004c 9281      		ldd r25,Z+2
 517 004e 892B      		or r24,r25
 518 0050 01F0      		breq .L19
 239:../../../os/hal/src/hal_queues.c ****   }
 240:../../../os/hal/src/hal_queues.c **** 
 241:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 519               		.loc 1 241 0
 520 0052 8FEF      		ldi r24,lo8(-1)
 521 0054 9FEF      		ldi r25,lo8(-1)
 522 0056 0895      		ret
 523               		.cfi_endproc
 524               	.LFE150:
 526               		.section	.text.iqGetI,"ax",@progbits
 527               	.global	iqGetI
 529               	iqGetI:
 530               	.LFB151:
 242:../../../os/hal/src/hal_queues.c **** }
 243:../../../os/hal/src/hal_queues.c **** 
 244:../../../os/hal/src/hal_queues.c **** /**
 245:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 246:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. The
 247:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 248:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 249:../../../os/hal/src/hal_queues.c ****  *          queue.
 250:../../../os/hal/src/hal_queues.c ****  *
 251:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 252:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 253:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 254:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 255:../../../os/hal/src/hal_queues.c ****  *
 256:../../../os/hal/src/hal_queues.c ****  * @iclass
 257:../../../os/hal/src/hal_queues.c ****  */
 258:../../../os/hal/src/hal_queues.c **** msg_t iqGetI(input_queue_t *iqp) {
 531               		.loc 1 258 0
 532               		.cfi_startproc
 533               	.LVL50:
 534 0000 CF93      		push r28
 535               	.LCFI22:
 536               		.cfi_def_cfa_offset 3
 537               		.cfi_offset 28, -2
 538               	/* prologue: function */
 539               	/* frame size = 0 */
 540               	/* stack size = 1 */
 541               	.L__stack_usage = 1
 542 0002 DC01      		movw r26,r24
 259:../../../os/hal/src/hal_queues.c **** 
 260:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 261:../../../os/hal/src/hal_queues.c **** 
 262:../../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 263:../../../os/hal/src/hal_queues.c ****   if (!iqIsEmptyI(iqp)) {
 543               		.loc 1 263 0
 544 0004 1196      		adiw r26,1
 545 0006 8D91      		ld r24,X+
 546 0008 9C91      		ld r25,X
 547 000a 1297      		sbiw r26,1+1
 548               	.LVL51:
 549 000c 892B      		or r24,r25
 550 000e 01F0      		breq .L30
 551               	.LBB95:
 264:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 265:../../../os/hal/src/hal_queues.c **** 
 266:../../../os/hal/src/hal_queues.c ****     /* Getting the character from the queue.*/
 267:../../../os/hal/src/hal_queues.c ****     iqp->q_counter--;
 552               		.loc 1 267 0
 553 0010 1196      		adiw r26,1
 554 0012 8D91      		ld r24,X+
 555 0014 9C91      		ld r25,X
 556 0016 1297      		sbiw r26,1+1
 557 0018 0197      		sbiw r24,1
 558 001a 1296      		adiw r26,1+1
 559 001c 9C93      		st X,r25
 560 001e 8E93      		st -X,r24
 561 0020 1197      		sbiw r26,1
 268:../../../os/hal/src/hal_queues.c ****     b = *iqp->q_rdptr++;
 562               		.loc 1 268 0
 563 0022 1996      		adiw r26,9
 564 0024 ED91      		ld r30,X+
 565 0026 FC91      		ld r31,X
 566 0028 1A97      		sbiw r26,9+1
 567 002a CF01      		movw r24,r30
 568 002c 0196      		adiw r24,1
 569 002e 1A96      		adiw r26,9+1
 570 0030 9C93      		st X,r25
 571 0032 8E93      		st -X,r24
 572 0034 1997      		sbiw r26,9
 573 0036 C081      		ld r28,Z
 574               	.LVL52:
 269:../../../os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 575               		.loc 1 269 0
 576 0038 1596      		adiw r26,5
 577 003a 2D91      		ld r18,X+
 578 003c 3C91      		ld r19,X
 579 003e 1697      		sbiw r26,5+1
 580 0040 8217      		cp r24,r18
 581 0042 9307      		cpc r25,r19
 582 0044 00F4      		brsh .L34
 583               	.L28:
 270:../../../os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 271:../../../os/hal/src/hal_queues.c ****     }
 272:../../../os/hal/src/hal_queues.c **** 
 273:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one slot available.*/
 274:../../../os/hal/src/hal_queues.c ****     if (iqp->q_notify != NULL) {
 584               		.loc 1 274 0
 585 0046 1B96      		adiw r26,11
 586 0048 ED91      		ld r30,X+
 587 004a FC91      		ld r31,X
 588 004c 1C97      		sbiw r26,11+1
 589 004e 3097      		sbiw r30,0
 590 0050 01F0      		breq .L29
 591 0052 CD01      		movw r24,r26
 275:../../../os/hal/src/hal_queues.c ****       iqp->q_notify(iqp);
 592               		.loc 1 275 0
 593 0054 0995      		icall
 594               	.LVL53:
 595               	.L29:
 276:../../../os/hal/src/hal_queues.c ****     }
 277:../../../os/hal/src/hal_queues.c **** 
 278:../../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 596               		.loc 1 278 0
 597 0056 8C2F      		mov r24,r28
 598 0058 90E0      		ldi r25,0
 599               	.LVL54:
 600               	.L27:
 601               	/* epilogue start */
 602               	.LBE95:
 279:../../../os/hal/src/hal_queues.c ****   }
 280:../../../os/hal/src/hal_queues.c **** 
 281:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 282:../../../os/hal/src/hal_queues.c **** }
 603               		.loc 1 282 0
 604 005a CF91      		pop r28
 605 005c 0895      		ret
 606               	.LVL55:
 607               	.L34:
 608               	.LBB96:
 270:../../../os/hal/src/hal_queues.c ****     }
 609               		.loc 1 270 0
 610 005e 1396      		adiw r26,3
 611 0060 8D91      		ld r24,X+
 612 0062 9C91      		ld r25,X
 613 0064 1497      		sbiw r26,3+1
 614 0066 1A96      		adiw r26,9+1
 615 0068 9C93      		st X,r25
 616 006a 8E93      		st -X,r24
 617 006c 1997      		sbiw r26,9
 618 006e 00C0      		rjmp .L28
 619               	.LVL56:
 620               	.L30:
 621               	.LBE96:
 281:../../../os/hal/src/hal_queues.c **** }
 622               		.loc 1 281 0
 623 0070 8FEF      		ldi r24,lo8(-1)
 624 0072 9FEF      		ldi r25,lo8(-1)
 625 0074 00C0      		rjmp .L27
 626               		.cfi_endproc
 627               	.LFE151:
 629               		.section	.text.iqGetTimeout,"ax",@progbits
 630               	.global	iqGetTimeout
 632               	iqGetTimeout:
 633               	.LFB152:
 283:../../../os/hal/src/hal_queues.c **** 
 284:../../../os/hal/src/hal_queues.c **** /**
 285:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 286:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 287:../../../os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 288:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 289:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 290:../../../os/hal/src/hal_queues.c ****  *          queue.
 291:../../../os/hal/src/hal_queues.c ****  *
 292:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 293:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 294:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 295:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 296:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 297:../../../os/hal/src/hal_queues.c ****  *                      .
 298:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 299:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 300:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 301:../../../os/hal/src/hal_queues.c ****  *
 302:../../../os/hal/src/hal_queues.c ****  * @api
 303:../../../os/hal/src/hal_queues.c ****  */
 304:../../../os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 634               		.loc 1 304 0
 635               		.cfi_startproc
 636               	.LVL57:
 637 0000 0F93      		push r16
 638               	.LCFI23:
 639               		.cfi_def_cfa_offset 3
 640               		.cfi_offset 16, -2
 641 0002 1F93      		push r17
 642               	.LCFI24:
 643               		.cfi_def_cfa_offset 4
 644               		.cfi_offset 17, -3
 645 0004 CF93      		push r28
 646               	.LCFI25:
 647               		.cfi_def_cfa_offset 5
 648               		.cfi_offset 28, -4
 649 0006 DF93      		push r29
 650               	.LCFI26:
 651               		.cfi_def_cfa_offset 6
 652               		.cfi_offset 29, -5
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 4 */
 656               	.L__stack_usage = 4
 657 0008 EC01      		movw r28,r24
 658 000a 8B01      		movw r16,r22
 659               	.LBB97:
 660               	.LBB98:
 661               	.LBB99:
 662               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 663               		.loc 3 430 0
 664               	/* #APP */
 665               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 666 000c F894      		cli
 667               	 ;  0 "" 2
 668               	/* #NOAPP */
 669 000e 00C0      		rjmp .L36
 670               	.LVL58:
 671               	.L38:
 672               	.LBE99:
 673               	.LBE98:
 674               	.LBE97:
 675               	.LBB100:
 676               	.LBB101:
 677               	.LBB102:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 678               		.loc 2 895 0
 679 0010 B801      		movw r22,r16
 680 0012 CE01      		movw r24,r28
 681 0014 0E94 0000 		call chThdEnqueueTimeoutS
 682               	.LVL59:
 683               	.LBE102:
 684               	.LBE101:
 305:../../../os/hal/src/hal_queues.c ****   uint8_t b;
 306:../../../os/hal/src/hal_queues.c **** 
 307:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 308:../../../os/hal/src/hal_queues.c **** 
 309:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a character available or a timeout occurs.*/
 310:../../../os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 311:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 312:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 685               		.loc 1 312 0
 686 0018 97FD      		sbrc r25,7
 687 001a 00C0      		rjmp .L45
 688               	.L36:
 689               	.LBE100:
 310:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 690               		.loc 1 310 0
 691 001c 8981      		ldd r24,Y+1
 692 001e 9A81      		ldd r25,Y+2
 693 0020 892B      		or r24,r25
 694 0022 01F0      		breq .L38
 313:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 314:../../../os/hal/src/hal_queues.c ****       return msg;
 315:../../../os/hal/src/hal_queues.c ****     }
 316:../../../os/hal/src/hal_queues.c ****   }
 317:../../../os/hal/src/hal_queues.c **** 
 318:../../../os/hal/src/hal_queues.c ****   /* Getting the character from the queue.*/
 319:../../../os/hal/src/hal_queues.c ****   iqp->q_counter--;
 695               		.loc 1 319 0
 696 0024 8981      		ldd r24,Y+1
 697 0026 9A81      		ldd r25,Y+2
 698 0028 0197      		sbiw r24,1
 699 002a 9A83      		std Y+2,r25
 700 002c 8983      		std Y+1,r24
 320:../../../os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 701               		.loc 1 320 0
 702 002e E985      		ldd r30,Y+9
 703 0030 FA85      		ldd r31,Y+10
 704 0032 CF01      		movw r24,r30
 705 0034 0196      		adiw r24,1
 706 0036 9A87      		std Y+10,r25
 707 0038 8987      		std Y+9,r24
 708 003a 1081      		ld r17,Z
 709               	.LVL60:
 321:../../../os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 710               		.loc 1 321 0
 711 003c 2D81      		ldd r18,Y+5
 712 003e 3E81      		ldd r19,Y+6
 713 0040 8217      		cp r24,r18
 714 0042 9307      		cpc r25,r19
 715 0044 00F0      		brlo .L39
 322:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 716               		.loc 1 322 0
 717 0046 8B81      		ldd r24,Y+3
 718 0048 9C81      		ldd r25,Y+4
 719 004a 9A87      		std Y+10,r25
 720 004c 8987      		std Y+9,r24
 721               	.L39:
 323:../../../os/hal/src/hal_queues.c ****   }
 324:../../../os/hal/src/hal_queues.c **** 
 325:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one slot available.*/
 326:../../../os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 722               		.loc 1 326 0
 723 004e EB85      		ldd r30,Y+11
 724 0050 FC85      		ldd r31,Y+12
 725 0052 3097      		sbiw r30,0
 726 0054 01F0      		breq .L40
 327:../../../os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 727               		.loc 1 327 0
 728 0056 CE01      		movw r24,r28
 729 0058 0995      		icall
 730               	.LVL61:
 731               	.L40:
 732               	.LBB106:
 733               	.LBB107:
 734               	.LBB108:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 735               		.loc 3 440 0
 736               	/* #APP */
 737               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 738 005a 7894      		sei
 739               	 ;  0 "" 2
 740               	/* #NOAPP */
 741               	.LBE108:
 742               	.LBE107:
 743               	.LBE106:
 328:../../../os/hal/src/hal_queues.c ****   }
 329:../../../os/hal/src/hal_queues.c **** 
 330:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 331:../../../os/hal/src/hal_queues.c **** 
 332:../../../os/hal/src/hal_queues.c ****   return (msg_t)b;
 744               		.loc 1 332 0
 745 005c 812F      		mov r24,r17
 746 005e 90E0      		ldi r25,0
 747               	/* epilogue start */
 333:../../../os/hal/src/hal_queues.c **** }
 748               		.loc 1 333 0
 749 0060 DF91      		pop r29
 750 0062 CF91      		pop r28
 751               	.LVL62:
 752 0064 1F91      		pop r17
 753               	.LVL63:
 754 0066 0F91      		pop r16
 755               	.LVL64:
 756 0068 0895      		ret
 757               	.LVL65:
 758               	.L45:
 759               	.LBB109:
 760               	.LBB103:
 761               	.LBB104:
 762               	.LBB105:
 763               		.loc 3 440 0
 764               	/* #APP */
 765               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 766 006a 7894      		sei
 767               	 ;  0 "" 2
 768               	/* epilogue start */
 769               	/* #NOAPP */
 770               	.LBE105:
 771               	.LBE104:
 772               	.LBE103:
 773               	.LBE109:
 774               		.loc 1 333 0
 775 006c DF91      		pop r29
 776 006e CF91      		pop r28
 777               	.LVL66:
 778 0070 1F91      		pop r17
 779 0072 0F91      		pop r16
 780               	.LVL67:
 781 0074 0895      		ret
 782               		.cfi_endproc
 783               	.LFE152:
 785               		.section	.text.iqReadI,"ax",@progbits
 786               	.global	iqReadI
 788               	iqReadI:
 789               	.LFB153:
 334:../../../os/hal/src/hal_queues.c **** 
 335:../../../os/hal/src/hal_queues.c **** /**
 336:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 337:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 338:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 339:../../../os/hal/src/hal_queues.c ****  *
 340:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 341:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 342:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 343:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 344:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 345:../../../os/hal/src/hal_queues.c ****  *
 346:../../../os/hal/src/hal_queues.c ****  * @iclass
 347:../../../os/hal/src/hal_queues.c ****  */
 348:../../../os/hal/src/hal_queues.c **** size_t iqReadI(input_queue_t *iqp, uint8_t *bp, size_t n) {
 790               		.loc 1 348 0
 791               		.cfi_startproc
 792               	.LVL68:
 793 0000 EF92      		push r14
 794               	.LCFI27:
 795               		.cfi_def_cfa_offset 3
 796               		.cfi_offset 14, -2
 797 0002 FF92      		push r15
 798               	.LCFI28:
 799               		.cfi_def_cfa_offset 4
 800               		.cfi_offset 15, -3
 801 0004 0F93      		push r16
 802               	.LCFI29:
 803               		.cfi_def_cfa_offset 5
 804               		.cfi_offset 16, -4
 805 0006 1F93      		push r17
 806               	.LCFI30:
 807               		.cfi_def_cfa_offset 6
 808               		.cfi_offset 17, -5
 809 0008 CF93      		push r28
 810               	.LCFI31:
 811               		.cfi_def_cfa_offset 7
 812               		.cfi_offset 28, -6
 813 000a DF93      		push r29
 814               	.LCFI32:
 815               		.cfi_def_cfa_offset 8
 816               		.cfi_offset 29, -7
 817               	/* prologue: function */
 818               	/* frame size = 0 */
 819               	/* stack size = 6 */
 820               	.L__stack_usage = 6
 821 000c EC01      		movw r28,r24
 349:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 822               		.loc 1 349 0
 823 000e EB84      		ldd r14,Y+11
 824 0010 FC84      		ldd r15,Y+12
 825               	.LVL69:
 350:../../../os/hal/src/hal_queues.c ****   size_t rd;
 351:../../../os/hal/src/hal_queues.c **** 
 352:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 353:../../../os/hal/src/hal_queues.c **** 
 354:../../../os/hal/src/hal_queues.c ****   rd = iq_read(iqp, bp, n);
 826               		.loc 1 354 0
 827 0012 0E94 0000 		call iq_read
 828               	.LVL70:
 829 0016 8C01      		movw r16,r24
 830               	.LVL71:
 355:../../../os/hal/src/hal_queues.c **** 
 356:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 357:../../../os/hal/src/hal_queues.c ****      available.*/
 358:../../../os/hal/src/hal_queues.c ****   if ((rd > (size_t)0) && (nfy != NULL)) {
 831               		.loc 1 358 0
 832 0018 892B      		or r24,r25
 833 001a 01F0      		breq .L47
 834               		.loc 1 358 0 is_stmt 0 discriminator 1
 835 001c E114      		cp r14,__zero_reg__
 836 001e F104      		cpc r15,__zero_reg__
 837 0020 01F0      		breq .L47
 359:../../../os/hal/src/hal_queues.c ****     nfy(iqp);
 838               		.loc 1 359 0 is_stmt 1
 839 0022 CE01      		movw r24,r28
 840 0024 F701      		movw r30,r14
 841 0026 0995      		icall
 842               	.LVL72:
 843               	.L47:
 360:../../../os/hal/src/hal_queues.c ****   }
 361:../../../os/hal/src/hal_queues.c **** 
 362:../../../os/hal/src/hal_queues.c ****   return rd;
 363:../../../os/hal/src/hal_queues.c **** }
 844               		.loc 1 363 0
 845 0028 C801      		movw r24,r16
 846               	/* epilogue start */
 847 002a DF91      		pop r29
 848 002c CF91      		pop r28
 849               	.LVL73:
 850 002e 1F91      		pop r17
 851 0030 0F91      		pop r16
 852               	.LVL74:
 853 0032 FF90      		pop r15
 854 0034 EF90      		pop r14
 855               	.LVL75:
 856 0036 0895      		ret
 857               		.cfi_endproc
 858               	.LFE153:
 860               		.section	.text.iqReadTimeout,"ax",@progbits
 861               	.global	iqReadTimeout
 863               	iqReadTimeout:
 864               	.LFB154:
 364:../../../os/hal/src/hal_queues.c **** 
 365:../../../os/hal/src/hal_queues.c **** /**
 366:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 367:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 368:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 369:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 370:../../../os/hal/src/hal_queues.c ****  *          been reset.
 371:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 372:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 373:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing each character from the
 374:../../../os/hal/src/hal_queues.c ****  *          queue.
 375:../../../os/hal/src/hal_queues.c ****  *
 376:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 377:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 378:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 379:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 380:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 381:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 382:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 383:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 384:../../../os/hal/src/hal_queues.c ****  *                      .
 385:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 386:../../../os/hal/src/hal_queues.c ****  *
 387:../../../os/hal/src/hal_queues.c ****  * @api
 388:../../../os/hal/src/hal_queues.c ****  */
 389:../../../os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 390:../../../os/hal/src/hal_queues.c ****                      size_t n, sysinterval_t timeout) {
 865               		.loc 1 390 0
 866               		.cfi_startproc
 867               	.LVL76:
 868 0000 6F92      		push r6
 869               	.LCFI33:
 870               		.cfi_def_cfa_offset 3
 871               		.cfi_offset 6, -2
 872 0002 7F92      		push r7
 873               	.LCFI34:
 874               		.cfi_def_cfa_offset 4
 875               		.cfi_offset 7, -3
 876 0004 8F92      		push r8
 877               	.LCFI35:
 878               		.cfi_def_cfa_offset 5
 879               		.cfi_offset 8, -4
 880 0006 9F92      		push r9
 881               	.LCFI36:
 882               		.cfi_def_cfa_offset 6
 883               		.cfi_offset 9, -5
 884 0008 AF92      		push r10
 885               	.LCFI37:
 886               		.cfi_def_cfa_offset 7
 887               		.cfi_offset 10, -6
 888 000a BF92      		push r11
 889               	.LCFI38:
 890               		.cfi_def_cfa_offset 8
 891               		.cfi_offset 11, -7
 892 000c CF92      		push r12
 893               	.LCFI39:
 894               		.cfi_def_cfa_offset 9
 895               		.cfi_offset 12, -8
 896 000e DF92      		push r13
 897               	.LCFI40:
 898               		.cfi_def_cfa_offset 10
 899               		.cfi_offset 13, -9
 900 0010 EF92      		push r14
 901               	.LCFI41:
 902               		.cfi_def_cfa_offset 11
 903               		.cfi_offset 14, -10
 904 0012 FF92      		push r15
 905               	.LCFI42:
 906               		.cfi_def_cfa_offset 12
 907               		.cfi_offset 15, -11
 908 0014 0F93      		push r16
 909               	.LCFI43:
 910               		.cfi_def_cfa_offset 13
 911               		.cfi_offset 16, -12
 912 0016 1F93      		push r17
 913               	.LCFI44:
 914               		.cfi_def_cfa_offset 14
 915               		.cfi_offset 17, -13
 916 0018 CF93      		push r28
 917               	.LCFI45:
 918               		.cfi_def_cfa_offset 15
 919               		.cfi_offset 28, -14
 920 001a DF93      		push r29
 921               	.LCFI46:
 922               		.cfi_def_cfa_offset 16
 923               		.cfi_offset 29, -15
 924               	/* prologue: function */
 925               	/* frame size = 0 */
 926               	/* stack size = 14 */
 927               	.L__stack_usage = 14
 928 001c 6C01      		movw r12,r24
 929 001e 7B01      		movw r14,r22
 930 0020 3A01      		movw r6,r20
 931 0022 4901      		movw r8,r18
 391:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 932               		.loc 1 391 0
 933 0024 FC01      		movw r30,r24
 934 0026 A384      		ldd r10,Z+11
 935 0028 B484      		ldd r11,Z+12
 936               	.LVL77:
 937               	.LBB110:
 938               	.LBB111:
 939               	.LBB112:
 430:../../../os/common/ports/AVR/chcore.h **** }
 940               		.loc 3 430 0
 941               	/* #APP */
 942               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 943 002a F894      		cli
 944               	 ;  0 "" 2
 945               	/* #NOAPP */
 946               	.LBE112:
 947               	.LBE111:
 948               	.LBE110:
 392:../../../os/hal/src/hal_queues.c ****   size_t max = n;
 393:../../../os/hal/src/hal_queues.c **** 
 394:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 395:../../../os/hal/src/hal_queues.c **** 
 396:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 397:../../../os/hal/src/hal_queues.c **** 
 398:../../../os/hal/src/hal_queues.c ****   while (n > 0U) {
 949               		.loc 1 398 0
 950 002c 4115      		cp r20,__zero_reg__
 951 002e 5105      		cpc r21,__zero_reg__
 952 0030 01F0      		breq .L55
 953 0032 8A01      		movw r16,r20
 954               	.LVL78:
 955               	.L56:
 956               	.LBB113:
 399:../../../os/hal/src/hal_queues.c ****     size_t done;
 400:../../../os/hal/src/hal_queues.c **** 
 401:../../../os/hal/src/hal_queues.c ****     done = iq_read(iqp, bp, n);
 957               		.loc 1 401 0
 958 0034 A801      		movw r20,r16
 959 0036 B701      		movw r22,r14
 960 0038 C601      		movw r24,r12
 961 003a 0E94 0000 		call iq_read
 962               	.LVL79:
 963 003e EC01      		movw r28,r24
 964               	.LVL80:
 402:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 965               		.loc 1 402 0
 966 0040 892B      		or r24,r25
 967 0042 01F0      		breq .L68
 403:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 404:../../../os/hal/src/hal_queues.c **** 
 405:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 406:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 407:../../../os/hal/src/hal_queues.c ****         break;
 408:../../../os/hal/src/hal_queues.c ****       }
 409:../../../os/hal/src/hal_queues.c ****     }
 410:../../../os/hal/src/hal_queues.c ****     else {
 411:../../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one empty slot
 412:../../../os/hal/src/hal_queues.c ****          available.*/
 413:../../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 968               		.loc 1 413 0
 969 0044 A114      		cp r10,__zero_reg__
 970 0046 B104      		cpc r11,__zero_reg__
 971 0048 01F0      		breq .L60
 414:../../../os/hal/src/hal_queues.c ****         nfy(iqp);
 972               		.loc 1 414 0
 973 004a C601      		movw r24,r12
 974               	.LVL81:
 975 004c F501      		movw r30,r10
 976 004e 0995      		icall
 977               	.LVL82:
 978               	.L60:
 979               	.LBB114:
 980               	.LBB115:
 981               	.LBB116:
 982               		.loc 3 440 0
 983               	/* #APP */
 984               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 985 0050 7894      		sei
 986               	 ;  0 "" 2
 987               	/* #NOAPP */
 988               	.LBE116:
 989               	.LBE115:
 990               	.LBE114:
 415:../../../os/hal/src/hal_queues.c ****       }
 416:../../../os/hal/src/hal_queues.c **** 
 417:../../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 418:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 419:../../../os/hal/src/hal_queues.c **** 
 420:../../../os/hal/src/hal_queues.c ****       n  -= done;
 991               		.loc 1 420 0
 992 0052 0C1B      		sub r16,r28
 993 0054 1D0B      		sbc r17,r29
 994               	.LVL83:
 421:../../../os/hal/src/hal_queues.c ****       bp += done;
 995               		.loc 1 421 0
 996 0056 EC0E      		add r14,r28
 997 0058 FD1E      		adc r15,r29
 998               	.LVL84:
 999               	.LBB117:
 1000               	.LBB118:
 1001               	.LBB119:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1002               		.loc 3 430 0
 1003               	/* #APP */
 1004               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1005 005a F894      		cli
 1006               	 ;  0 "" 2
 1007               	/* #NOAPP */
 1008               	.LBE119:
 1009               	.LBE118:
 1010               	.LBE117:
 1011               	.LBE113:
 398:../../../os/hal/src/hal_queues.c ****     size_t done;
 1012               		.loc 1 398 0
 1013 005c 0115      		cp r16,__zero_reg__
 1014 005e 1105      		cpc r17,__zero_reg__
 1015 0060 01F4      		brne .L56
 1016               	.LVL85:
 1017               	.L55:
 1018 0062 00E0      		ldi r16,0
 1019 0064 10E0      		ldi r17,0
 1020               	.L57:
 1021               	.LBB123:
 1022               	.LBB124:
 1023               	.LBB125:
 1024               		.loc 3 440 0
 1025               	/* #APP */
 1026               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1027 0066 7894      		sei
 1028               	 ;  0 "" 2
 1029               	/* #NOAPP */
 1030               	.LBE125:
 1031               	.LBE124:
 1032               	.LBE123:
 422:../../../os/hal/src/hal_queues.c **** 
 423:../../../os/hal/src/hal_queues.c ****       osalSysLock();
 424:../../../os/hal/src/hal_queues.c ****     }
 425:../../../os/hal/src/hal_queues.c ****   }
 426:../../../os/hal/src/hal_queues.c **** 
 427:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 428:../../../os/hal/src/hal_queues.c ****   return max - n;
 429:../../../os/hal/src/hal_queues.c **** }
 1033               		.loc 1 429 0
 1034 0068 C301      		movw r24,r6
 1035 006a 801B      		sub r24,r16
 1036 006c 910B      		sbc r25,r17
 1037               	/* epilogue start */
 1038 006e DF91      		pop r29
 1039 0070 CF91      		pop r28
 1040 0072 1F91      		pop r17
 1041 0074 0F91      		pop r16
 1042 0076 FF90      		pop r15
 1043 0078 EF90      		pop r14
 1044               	.LVL86:
 1045 007a DF90      		pop r13
 1046 007c CF90      		pop r12
 1047               	.LVL87:
 1048 007e BF90      		pop r11
 1049 0080 AF90      		pop r10
 1050               	.LVL88:
 1051 0082 9F90      		pop r9
 1052 0084 8F90      		pop r8
 1053               	.LVL89:
 1054 0086 7F90      		pop r7
 1055 0088 6F90      		pop r6
 1056               	.LVL90:
 1057 008a 0895      		ret
 1058               	.LVL91:
 1059               	.L68:
 1060               	.LBB126:
 1061               	.LBB120:
 1062               	.LBB121:
 1063               	.LBB122:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1064               		.loc 2 895 0
 1065 008c B401      		movw r22,r8
 1066 008e C601      		movw r24,r12
 1067               	.LVL92:
 1068 0090 0E94 0000 		call chThdEnqueueTimeoutS
 1069               	.LVL93:
 1070               	.LBE122:
 1071               	.LBE121:
 406:../../../os/hal/src/hal_queues.c ****         break;
 1072               		.loc 1 406 0
 1073 0094 892B      		or r24,r25
 1074 0096 01F0      		breq .L56
 1075 0098 00C0      		rjmp .L57
 1076               	.LBE120:
 1077               	.LBE126:
 1078               		.cfi_endproc
 1079               	.LFE154:
 1081               		.section	.text.oqObjectInit,"ax",@progbits
 1082               	.global	oqObjectInit
 1084               	oqObjectInit:
 1085               	.LFB155:
 430:../../../os/hal/src/hal_queues.c **** 
 431:../../../os/hal/src/hal_queues.c **** /**
 432:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 433:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 434:../../../os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 435:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 436:../../../os/hal/src/hal_queues.c ****  *
 437:../../../os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 438:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 439:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 440:../../../os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 441:../../../os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 442:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 443:../../../os/hal/src/hal_queues.c ****  *
 444:../../../os/hal/src/hal_queues.c ****  * @init
 445:../../../os/hal/src/hal_queues.c ****  */
 446:../../../os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 447:../../../os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 1086               		.loc 1 447 0
 1087               		.cfi_startproc
 1088               	.LVL94:
 1089 0000 0F93      		push r16
 1090               	.LCFI47:
 1091               		.cfi_def_cfa_offset 3
 1092               		.cfi_offset 16, -2
 1093 0002 1F93      		push r17
 1094               	.LCFI48:
 1095               		.cfi_def_cfa_offset 4
 1096               		.cfi_offset 17, -3
 1097               	/* prologue: function */
 1098               	/* frame size = 0 */
 1099               	/* stack size = 2 */
 1100               	.L__stack_usage = 2
 1101 0004 FC01      		movw r30,r24
 1102               	.LVL95:
 1103               	.LBB127:
 1104               	.LBB128:
 866:../../../os/hal/osal/rt-nil/osal.h **** }
 1105               		.loc 2 866 0
 1106 0006 1082      		st Z,__zero_reg__
 1107               	.LVL96:
 1108               	.LBE128:
 1109               	.LBE127:
 448:../../../os/hal/src/hal_queues.c **** 
 449:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 450:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 1110               		.loc 1 450 0
 1111 0008 5283      		std Z+2,r21
 1112 000a 4183      		std Z+1,r20
 451:../../../os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 1113               		.loc 1 451 0
 1114 000c 7483      		std Z+4,r23
 1115 000e 6383      		std Z+3,r22
 452:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 1116               		.loc 1 452 0
 1117 0010 7287      		std Z+10,r23
 1118 0012 6187      		std Z+9,r22
 453:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 1119               		.loc 1 453 0
 1120 0014 7087      		std Z+8,r23
 1121 0016 6783      		std Z+7,r22
 454:../../../os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 1122               		.loc 1 454 0
 1123 0018 460F      		add r20,r22
 1124 001a 571F      		adc r21,r23
 1125               	.LVL97:
 1126 001c 5683      		std Z+6,r21
 1127 001e 4583      		std Z+5,r20
 455:../../../os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 1128               		.loc 1 455 0
 1129 0020 3487      		std Z+12,r19
 1130 0022 2387      		std Z+11,r18
 456:../../../os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 1131               		.loc 1 456 0
 1132 0024 1687      		std Z+14,r17
 1133 0026 0587      		std Z+13,r16
 1134               	/* epilogue start */
 457:../../../os/hal/src/hal_queues.c **** }
 1135               		.loc 1 457 0
 1136 0028 1F91      		pop r17
 1137 002a 0F91      		pop r16
 1138               	.LVL98:
 1139 002c 0895      		ret
 1140               		.cfi_endproc
 1141               	.LFE155:
 1143               		.section	.text.oqResetI,"ax",@progbits
 1144               	.global	oqResetI
 1146               	oqResetI:
 1147               	.LFB156:
 458:../../../os/hal/src/hal_queues.c **** 
 459:../../../os/hal/src/hal_queues.c **** /**
 460:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 461:../../../os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 462:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 463:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 464:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 465:../../../os/hal/src/hal_queues.c ****  *
 466:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 467:../../../os/hal/src/hal_queues.c ****  *
 468:../../../os/hal/src/hal_queues.c ****  * @iclass
 469:../../../os/hal/src/hal_queues.c ****  */
 470:../../../os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 1148               		.loc 1 470 0
 1149               		.cfi_startproc
 1150               	.LVL99:
 1151               	/* prologue: function */
 1152               	/* frame size = 0 */
 1153               	/* stack size = 0 */
 1154               	.L__stack_usage = 0
 1155 0000 FC01      		movw r30,r24
 471:../../../os/hal/src/hal_queues.c **** 
 472:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 473:../../../os/hal/src/hal_queues.c **** 
 474:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 1156               		.loc 1 474 0
 1157 0002 2381      		ldd r18,Z+3
 1158 0004 3481      		ldd r19,Z+4
 1159 0006 3287      		std Z+10,r19
 1160 0008 2187      		std Z+9,r18
 475:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 1161               		.loc 1 475 0
 1162 000a 3087      		std Z+8,r19
 1163 000c 2783      		std Z+7,r18
 476:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 1164               		.loc 1 476 0
 1165 000e 8581      		ldd r24,Z+5
 1166 0010 9681      		ldd r25,Z+6
 1167               	.LVL100:
 1168 0012 821B      		sub r24,r18
 1169 0014 930B      		sbc r25,r19
 1170 0016 9283      		std Z+2,r25
 1171 0018 8183      		std Z+1,r24
 1172               	.LVL101:
 1173               	.LBB129:
 1174               	.LBB130:
 1175               		.loc 2 921 0
 1176 001a 6EEF      		ldi r22,lo8(-2)
 1177 001c 7FEF      		ldi r23,lo8(-1)
 1178 001e CF01      		movw r24,r30
 1179 0020 0C94 0000 		jmp chThdDequeueAllI
 1180               	.LVL102:
 1181               	.LBE130:
 1182               	.LBE129:
 1183               		.cfi_endproc
 1184               	.LFE156:
 1186               		.section	.text.oqPutI,"ax",@progbits
 1187               	.global	oqPutI
 1189               	oqPutI:
 1190               	.LFB157:
 477:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
 478:../../../os/hal/src/hal_queues.c **** }
 479:../../../os/hal/src/hal_queues.c **** 
 480:../../../os/hal/src/hal_queues.c **** /**
 481:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 482:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. The
 483:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 484:../../../os/hal/src/hal_queues.c ****  *
 485:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 486:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 487:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 488:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 489:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 490:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 491:../../../os/hal/src/hal_queues.c ****  *
 492:../../../os/hal/src/hal_queues.c ****  * @iclass
 493:../../../os/hal/src/hal_queues.c ****  */
 494:../../../os/hal/src/hal_queues.c **** msg_t oqPutI(output_queue_t *oqp, uint8_t b) {
 1191               		.loc 1 494 0
 1192               		.cfi_startproc
 1193               	.LVL103:
 1194               	/* prologue: function */
 1195               	/* frame size = 0 */
 1196               	/* stack size = 0 */
 1197               	.L__stack_usage = 0
 1198 0000 DC01      		movw r26,r24
 495:../../../os/hal/src/hal_queues.c **** 
 496:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 497:../../../os/hal/src/hal_queues.c **** 
 498:../../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 499:../../../os/hal/src/hal_queues.c ****   while (!oqIsFullI(oqp)) {
 1199               		.loc 1 499 0
 1200 0002 1196      		adiw r26,1
 1201 0004 8D91      		ld r24,X+
 1202 0006 9C91      		ld r25,X
 1203 0008 1297      		sbiw r26,1+1
 1204               	.LVL104:
 1205 000a 892B      		or r24,r25
 1206 000c 01F0      		breq .L74
 500:../../../os/hal/src/hal_queues.c ****     /* Putting the character into the queue.*/
 501:../../../os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1207               		.loc 1 501 0
 1208 000e 1196      		adiw r26,1
 1209 0010 8D91      		ld r24,X+
 1210 0012 9C91      		ld r25,X
 1211 0014 1297      		sbiw r26,1+1
 1212 0016 0197      		sbiw r24,1
 1213 0018 1296      		adiw r26,1+1
 1214 001a 9C93      		st X,r25
 1215 001c 8E93      		st -X,r24
 1216 001e 1197      		sbiw r26,1
 502:../../../os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = b;
 1217               		.loc 1 502 0
 1218 0020 1796      		adiw r26,7
 1219 0022 ED91      		ld r30,X+
 1220 0024 FC91      		ld r31,X
 1221 0026 1897      		sbiw r26,7+1
 1222 0028 CF01      		movw r24,r30
 1223 002a 0196      		adiw r24,1
 1224 002c 1896      		adiw r26,7+1
 1225 002e 9C93      		st X,r25
 1226 0030 8E93      		st -X,r24
 1227 0032 1797      		sbiw r26,7
 1228 0034 6083      		st Z,r22
 503:../../../os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1229               		.loc 1 503 0
 1230 0036 1796      		adiw r26,7
 1231 0038 2D91      		ld r18,X+
 1232 003a 3C91      		ld r19,X
 1233 003c 1897      		sbiw r26,7+1
 1234 003e 1596      		adiw r26,5
 1235 0040 8D91      		ld r24,X+
 1236 0042 9C91      		ld r25,X
 1237 0044 1697      		sbiw r26,5+1
 1238 0046 2817      		cp r18,r24
 1239 0048 3907      		cpc r19,r25
 1240 004a 00F4      		brsh .L76
 504:../../../os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 505:../../../os/hal/src/hal_queues.c ****     }
 506:../../../os/hal/src/hal_queues.c **** 
 507:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one character available.*/
 508:../../../os/hal/src/hal_queues.c ****     if (oqp->q_notify != NULL) {
 1241               		.loc 1 508 0
 1242 004c 1B96      		adiw r26,11
 1243 004e ED91      		ld r30,X+
 1244 0050 FC91      		ld r31,X
 1245 0052 1C97      		sbiw r26,11+1
 1246 0054 3097      		sbiw r30,0
 1247 0056 01F0      		breq .L75
 1248               	.L77:
 1249 0058 CD01      		movw r24,r26
 509:../../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1250               		.loc 1 509 0
 1251 005a 0995      		icall
 1252               	.LVL105:
 510:../../../os/hal/src/hal_queues.c ****     }
 511:../../../os/hal/src/hal_queues.c **** 
 512:../../../os/hal/src/hal_queues.c ****     return MSG_OK;
 1253               		.loc 1 512 0
 1254 005c 80E0      		ldi r24,0
 1255 005e 90E0      		ldi r25,0
 1256 0060 0895      		ret
 1257               	.LVL106:
 1258               	.L76:
 504:../../../os/hal/src/hal_queues.c ****     }
 1259               		.loc 1 504 0
 1260 0062 1396      		adiw r26,3
 1261 0064 8D91      		ld r24,X+
 1262 0066 9C91      		ld r25,X
 1263 0068 1497      		sbiw r26,3+1
 1264 006a 1896      		adiw r26,7+1
 1265 006c 9C93      		st X,r25
 1266 006e 8E93      		st -X,r24
 1267 0070 1797      		sbiw r26,7
 508:../../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1268               		.loc 1 508 0
 1269 0072 1B96      		adiw r26,11
 1270 0074 ED91      		ld r30,X+
 1271 0076 FC91      		ld r31,X
 1272 0078 1C97      		sbiw r26,11+1
 1273 007a 3097      		sbiw r30,0
 1274 007c 01F4      		brne .L77
 1275               	.L75:
 1276               		.loc 1 512 0
 1277 007e 80E0      		ldi r24,0
 1278 0080 90E0      		ldi r25,0
 513:../../../os/hal/src/hal_queues.c ****   }
 514:../../../os/hal/src/hal_queues.c **** 
 515:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 516:../../../os/hal/src/hal_queues.c **** }
 1279               		.loc 1 516 0
 1280 0082 0895      		ret
 1281               	.L74:
 515:../../../os/hal/src/hal_queues.c **** }
 1282               		.loc 1 515 0
 1283 0084 8FEF      		ldi r24,lo8(-1)
 1284 0086 9FEF      		ldi r25,lo8(-1)
 1285 0088 0895      		ret
 1286               		.cfi_endproc
 1287               	.LFE157:
 1289               		.section	.text.oqPutTimeout,"ax",@progbits
 1290               	.global	oqPutTimeout
 1292               	oqPutTimeout:
 1293               	.LFB158:
 517:../../../os/hal/src/hal_queues.c **** 
 518:../../../os/hal/src/hal_queues.c **** /**
 519:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 520:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 521:../../../os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 522:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 523:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting the character into the
 524:../../../os/hal/src/hal_queues.c ****  *          queue.
 525:../../../os/hal/src/hal_queues.c ****  *
 526:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 527:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 528:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 529:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 530:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 531:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 532:../../../os/hal/src/hal_queues.c ****  *                      .
 533:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 534:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 535:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 536:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 537:../../../os/hal/src/hal_queues.c ****  *
 538:../../../os/hal/src/hal_queues.c ****  * @api
 539:../../../os/hal/src/hal_queues.c ****  */
 540:../../../os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 1294               		.loc 1 540 0
 1295               		.cfi_startproc
 1296               	.LVL107:
 1297 0000 FF92      		push r15
 1298               	.LCFI49:
 1299               		.cfi_def_cfa_offset 3
 1300               		.cfi_offset 15, -2
 1301 0002 0F93      		push r16
 1302               	.LCFI50:
 1303               		.cfi_def_cfa_offset 4
 1304               		.cfi_offset 16, -3
 1305 0004 1F93      		push r17
 1306               	.LCFI51:
 1307               		.cfi_def_cfa_offset 5
 1308               		.cfi_offset 17, -4
 1309 0006 CF93      		push r28
 1310               	.LCFI52:
 1311               		.cfi_def_cfa_offset 6
 1312               		.cfi_offset 28, -5
 1313 0008 DF93      		push r29
 1314               	.LCFI53:
 1315               		.cfi_def_cfa_offset 7
 1316               		.cfi_offset 29, -6
 1317               	/* prologue: function */
 1318               	/* frame size = 0 */
 1319               	/* stack size = 5 */
 1320               	.L__stack_usage = 5
 1321 000a EC01      		movw r28,r24
 1322 000c F62E      		mov r15,r22
 1323 000e 8A01      		movw r16,r20
 1324               	.LBB131:
 1325               	.LBB132:
 1326               	.LBB133:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1327               		.loc 3 430 0
 1328               	/* #APP */
 1329               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1330 0010 F894      		cli
 1331               	 ;  0 "" 2
 1332               	/* #NOAPP */
 1333 0012 00C0      		rjmp .L79
 1334               	.LVL108:
 1335               	.L81:
 1336               	.LBE133:
 1337               	.LBE132:
 1338               	.LBE131:
 1339               	.LBB134:
 1340               	.LBB135:
 1341               	.LBB136:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1342               		.loc 2 895 0
 1343 0014 B801      		movw r22,r16
 1344 0016 CE01      		movw r24,r28
 1345 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1346               	.LVL109:
 1347               	.LBE136:
 1348               	.LBE135:
 541:../../../os/hal/src/hal_queues.c **** 
 542:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 543:../../../os/hal/src/hal_queues.c **** 
 544:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a slot available or a timeout occurs.*/
 545:../../../os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 546:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 547:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 1349               		.loc 1 547 0
 1350 001c 97FD      		sbrc r25,7
 1351 001e 00C0      		rjmp .L88
 1352               	.L79:
 1353               	.LBE134:
 545:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1354               		.loc 1 545 0
 1355 0020 8981      		ldd r24,Y+1
 1356 0022 9A81      		ldd r25,Y+2
 1357 0024 892B      		or r24,r25
 1358 0026 01F0      		breq .L81
 548:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 549:../../../os/hal/src/hal_queues.c ****       return msg;
 550:../../../os/hal/src/hal_queues.c ****     }
 551:../../../os/hal/src/hal_queues.c ****   }
 552:../../../os/hal/src/hal_queues.c **** 
 553:../../../os/hal/src/hal_queues.c ****   /* Putting the character into the queue.*/
 554:../../../os/hal/src/hal_queues.c ****   oqp->q_counter--;
 1359               		.loc 1 554 0
 1360 0028 8981      		ldd r24,Y+1
 1361 002a 9A81      		ldd r25,Y+2
 1362 002c 0197      		sbiw r24,1
 1363 002e 9A83      		std Y+2,r25
 1364 0030 8983      		std Y+1,r24
 555:../../../os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 1365               		.loc 1 555 0
 1366 0032 EF81      		ldd r30,Y+7
 1367 0034 F885      		ldd r31,Y+8
 1368 0036 CF01      		movw r24,r30
 1369 0038 0196      		adiw r24,1
 1370 003a 9887      		std Y+8,r25
 1371 003c 8F83      		std Y+7,r24
 1372 003e F082      		st Z,r15
 556:../../../os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 1373               		.loc 1 556 0
 1374 0040 2F81      		ldd r18,Y+7
 1375 0042 3885      		ldd r19,Y+8
 1376 0044 8D81      		ldd r24,Y+5
 1377 0046 9E81      		ldd r25,Y+6
 1378 0048 2817      		cp r18,r24
 1379 004a 3907      		cpc r19,r25
 1380 004c 00F0      		brlo .L82
 557:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 1381               		.loc 1 557 0
 1382 004e 8B81      		ldd r24,Y+3
 1383 0050 9C81      		ldd r25,Y+4
 1384 0052 9887      		std Y+8,r25
 1385 0054 8F83      		std Y+7,r24
 1386               	.L82:
 558:../../../os/hal/src/hal_queues.c ****   }
 559:../../../os/hal/src/hal_queues.c **** 
 560:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character available.*/
 561:../../../os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 1387               		.loc 1 561 0
 1388 0056 EB85      		ldd r30,Y+11
 1389 0058 FC85      		ldd r31,Y+12
 1390 005a 3097      		sbiw r30,0
 1391 005c 01F0      		breq .L83
 562:../../../os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 1392               		.loc 1 562 0
 1393 005e CE01      		movw r24,r28
 1394 0060 0995      		icall
 1395               	.LVL110:
 1396               	.L83:
 1397               	.LBB140:
 1398               	.LBB141:
 1399               	.LBB142:
 1400               		.loc 3 440 0
 1401               	/* #APP */
 1402               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1403 0062 7894      		sei
 1404               	 ;  0 "" 2
 1405               	/* #NOAPP */
 1406               	.LBE142:
 1407               	.LBE141:
 1408               	.LBE140:
 563:../../../os/hal/src/hal_queues.c ****   }
 564:../../../os/hal/src/hal_queues.c **** 
 565:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 566:../../../os/hal/src/hal_queues.c **** 
 567:../../../os/hal/src/hal_queues.c ****   return MSG_OK;
 1409               		.loc 1 567 0
 1410 0064 80E0      		ldi r24,0
 1411 0066 90E0      		ldi r25,0
 1412               	/* epilogue start */
 568:../../../os/hal/src/hal_queues.c **** }
 1413               		.loc 1 568 0
 1414 0068 DF91      		pop r29
 1415 006a CF91      		pop r28
 1416               	.LVL111:
 1417 006c 1F91      		pop r17
 1418 006e 0F91      		pop r16
 1419               	.LVL112:
 1420 0070 FF90      		pop r15
 1421               	.LVL113:
 1422 0072 0895      		ret
 1423               	.LVL114:
 1424               	.L88:
 1425               	.LBB143:
 1426               	.LBB137:
 1427               	.LBB138:
 1428               	.LBB139:
 1429               		.loc 3 440 0
 1430               	/* #APP */
 1431               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1432 0074 7894      		sei
 1433               	 ;  0 "" 2
 1434               	/* epilogue start */
 1435               	/* #NOAPP */
 1436               	.LBE139:
 1437               	.LBE138:
 1438               	.LBE137:
 1439               	.LBE143:
 1440               		.loc 1 568 0
 1441 0076 DF91      		pop r29
 1442 0078 CF91      		pop r28
 1443               	.LVL115:
 1444 007a 1F91      		pop r17
 1445 007c 0F91      		pop r16
 1446               	.LVL116:
 1447 007e FF90      		pop r15
 1448               	.LVL117:
 1449 0080 0895      		ret
 1450               		.cfi_endproc
 1451               	.LFE158:
 1453               		.section	.text.oqGetI,"ax",@progbits
 1454               	.global	oqGetI
 1456               	oqGetI:
 1457               	.LFB159:
 569:../../../os/hal/src/hal_queues.c **** 
 570:../../../os/hal/src/hal_queues.c **** /**
 571:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 572:../../../os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue. The
 573:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 574:../../../os/hal/src/hal_queues.c ****  *
 575:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 576:../../../os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 577:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 578:../../../os/hal/src/hal_queues.c ****  *
 579:../../../os/hal/src/hal_queues.c ****  * @iclass
 580:../../../os/hal/src/hal_queues.c ****  */
 581:../../../os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 1458               		.loc 1 581 0
 1459               		.cfi_startproc
 1460               	.LVL118:
 1461 0000 CF93      		push r28
 1462               	.LCFI54:
 1463               		.cfi_def_cfa_offset 3
 1464               		.cfi_offset 28, -2
 1465               	/* prologue: function */
 1466               	/* frame size = 0 */
 1467               	/* stack size = 1 */
 1468               	.L__stack_usage = 1
 1469 0002 FC01      		movw r30,r24
 582:../../../os/hal/src/hal_queues.c **** 
 583:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 584:../../../os/hal/src/hal_queues.c **** 
 585:../../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 586:../../../os/hal/src/hal_queues.c ****   if (!oqIsEmptyI(oqp)) {
 1470               		.loc 1 586 0
 1471 0004 A185      		ldd r26,Z+9
 1472 0006 B285      		ldd r27,Z+10
 1473 0008 8781      		ldd r24,Z+7
 1474 000a 9085      		ldd r25,Z+8
 1475               	.LVL119:
 1476 000c 8A17      		cp r24,r26
 1477 000e 9B07      		cpc r25,r27
 1478 0010 01F0      		breq .L96
 1479               	.L90:
 1480               	.LBB144:
 587:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 588:../../../os/hal/src/hal_queues.c **** 
 589:../../../os/hal/src/hal_queues.c ****     oqp->q_counter++;
 1481               		.loc 1 589 0
 1482 0012 8181      		ldd r24,Z+1
 1483 0014 9281      		ldd r25,Z+2
 1484 0016 0196      		adiw r24,1
 1485 0018 9283      		std Z+2,r25
 1486 001a 8183      		std Z+1,r24
 590:../../../os/hal/src/hal_queues.c ****     b = *oqp->q_rdptr++;
 1487               		.loc 1 590 0
 1488 001c CD01      		movw r24,r26
 1489 001e 0196      		adiw r24,1
 1490 0020 9287      		std Z+10,r25
 1491 0022 8187      		std Z+9,r24
 1492 0024 CC91      		ld r28,X
 1493               	.LVL120:
 591:../../../os/hal/src/hal_queues.c ****     if (oqp->q_rdptr >= oqp->q_top) {
 1494               		.loc 1 591 0
 1495 0026 2581      		ldd r18,Z+5
 1496 0028 3681      		ldd r19,Z+6
 1497 002a 8217      		cp r24,r18
 1498 002c 9307      		cpc r25,r19
 1499 002e 00F4      		brsh .L92
 1500               	.L93:
 1501 0030 CF01      		movw r24,r30
 1502               	.LVL121:
 1503               	.LBB145:
 1504               	.LBB146:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 1505               		.loc 2 908 0
 1506 0032 60E0      		ldi r22,0
 1507 0034 70E0      		ldi r23,0
 1508 0036 0E94 0000 		call chThdDequeueNextI
 1509               	.LVL122:
 1510               	.LBE146:
 1511               	.LBE145:
 592:../../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 593:../../../os/hal/src/hal_queues.c ****     }
 594:../../../os/hal/src/hal_queues.c **** 
 595:../../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 596:../../../os/hal/src/hal_queues.c **** 
 597:../../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 1512               		.loc 1 597 0
 1513 003a 8C2F      		mov r24,r28
 1514 003c 90E0      		ldi r25,0
 1515               	.LVL123:
 1516               	.L95:
 1517               	/* epilogue start */
 1518               	.LBE144:
 598:../../../os/hal/src/hal_queues.c ****   }
 599:../../../os/hal/src/hal_queues.c **** 
 600:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 601:../../../os/hal/src/hal_queues.c **** }
 1519               		.loc 1 601 0
 1520 003e CF91      		pop r28
 1521 0040 0895      		ret
 1522               	.LVL124:
 1523               	.L92:
 1524               	.LBB147:
 592:../../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 1525               		.loc 1 592 0
 1526 0042 8381      		ldd r24,Z+3
 1527 0044 9481      		ldd r25,Z+4
 1528 0046 9287      		std Z+10,r25
 1529 0048 8187      		std Z+9,r24
 1530 004a 00C0      		rjmp .L93
 1531               	.LVL125:
 1532               	.L96:
 1533               	.LBE147:
 586:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 1534               		.loc 1 586 0 discriminator 1
 1535 004c 8181      		ldd r24,Z+1
 1536 004e 9281      		ldd r25,Z+2
 1537 0050 892B      		or r24,r25
 1538 0052 01F0      		breq .L90
 600:../../../os/hal/src/hal_queues.c **** }
 1539               		.loc 1 600 0
 1540 0054 8FEF      		ldi r24,lo8(-1)
 1541 0056 9FEF      		ldi r25,lo8(-1)
 1542 0058 00C0      		rjmp .L95
 1543               		.cfi_endproc
 1544               	.LFE159:
 1546               		.section	.text.oqWriteI,"ax",@progbits
 1547               	.global	oqWriteI
 1549               	oqWriteI:
 1550               	.LFB160:
 602:../../../os/hal/src/hal_queues.c **** 
 603:../../../os/hal/src/hal_queues.c **** /**
 604:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 605:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 606:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 607:../../../os/hal/src/hal_queues.c ****  *
 608:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 609:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 610:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 611:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 612:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 613:../../../os/hal/src/hal_queues.c ****  *
 614:../../../os/hal/src/hal_queues.c ****  * @iclass
 615:../../../os/hal/src/hal_queues.c ****  */
 616:../../../os/hal/src/hal_queues.c **** size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 1551               		.loc 1 616 0
 1552               		.cfi_startproc
 1553               	.LVL126:
 1554 0000 EF92      		push r14
 1555               	.LCFI55:
 1556               		.cfi_def_cfa_offset 3
 1557               		.cfi_offset 14, -2
 1558 0002 FF92      		push r15
 1559               	.LCFI56:
 1560               		.cfi_def_cfa_offset 4
 1561               		.cfi_offset 15, -3
 1562 0004 0F93      		push r16
 1563               	.LCFI57:
 1564               		.cfi_def_cfa_offset 5
 1565               		.cfi_offset 16, -4
 1566 0006 1F93      		push r17
 1567               	.LCFI58:
 1568               		.cfi_def_cfa_offset 6
 1569               		.cfi_offset 17, -5
 1570 0008 CF93      		push r28
 1571               	.LCFI59:
 1572               		.cfi_def_cfa_offset 7
 1573               		.cfi_offset 28, -6
 1574 000a DF93      		push r29
 1575               	.LCFI60:
 1576               		.cfi_def_cfa_offset 8
 1577               		.cfi_offset 29, -7
 1578               	/* prologue: function */
 1579               	/* frame size = 0 */
 1580               	/* stack size = 6 */
 1581               	.L__stack_usage = 6
 1582 000c EC01      		movw r28,r24
 617:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1583               		.loc 1 617 0
 1584 000e EB84      		ldd r14,Y+11
 1585 0010 FC84      		ldd r15,Y+12
 1586               	.LVL127:
 618:../../../os/hal/src/hal_queues.c ****   size_t wr;
 619:../../../os/hal/src/hal_queues.c **** 
 620:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 621:../../../os/hal/src/hal_queues.c **** 
 622:../../../os/hal/src/hal_queues.c ****   wr = oq_write(oqp, bp, n);
 1587               		.loc 1 622 0
 1588 0012 0E94 0000 		call oq_write
 1589               	.LVL128:
 1590 0016 8C01      		movw r16,r24
 1591               	.LVL129:
 623:../../../os/hal/src/hal_queues.c **** 
 624:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 625:../../../os/hal/src/hal_queues.c ****      available.*/
 626:../../../os/hal/src/hal_queues.c ****   if ((wr > (size_t)0) && (nfy != NULL)) {
 1592               		.loc 1 626 0
 1593 0018 892B      		or r24,r25
 1594 001a 01F0      		breq .L98
 1595               		.loc 1 626 0 is_stmt 0 discriminator 1
 1596 001c E114      		cp r14,__zero_reg__
 1597 001e F104      		cpc r15,__zero_reg__
 1598 0020 01F0      		breq .L98
 627:../../../os/hal/src/hal_queues.c ****     nfy(oqp);
 1599               		.loc 1 627 0 is_stmt 1
 1600 0022 CE01      		movw r24,r28
 1601 0024 F701      		movw r30,r14
 1602 0026 0995      		icall
 1603               	.LVL130:
 1604               	.L98:
 628:../../../os/hal/src/hal_queues.c ****   }
 629:../../../os/hal/src/hal_queues.c **** 
 630:../../../os/hal/src/hal_queues.c ****   return wr;
 631:../../../os/hal/src/hal_queues.c **** }
 1605               		.loc 1 631 0
 1606 0028 C801      		movw r24,r16
 1607               	/* epilogue start */
 1608 002a DF91      		pop r29
 1609 002c CF91      		pop r28
 1610               	.LVL131:
 1611 002e 1F91      		pop r17
 1612 0030 0F91      		pop r16
 1613               	.LVL132:
 1614 0032 FF90      		pop r15
 1615 0034 EF90      		pop r14
 1616               	.LVL133:
 1617 0036 0895      		ret
 1618               		.cfi_endproc
 1619               	.LFE160:
 1621               		.section	.text.oqWriteTimeout,"ax",@progbits
 1622               	.global	oqWriteTimeout
 1624               	oqWriteTimeout:
 1625               	.LFB161:
 632:../../../os/hal/src/hal_queues.c **** 
 633:../../../os/hal/src/hal_queues.c **** /**
 634:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 635:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 636:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 637:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 638:../../../os/hal/src/hal_queues.c ****  *          been reset.
 639:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 640:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 641:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting each character into the
 642:../../../os/hal/src/hal_queues.c ****  *          queue.
 643:../../../os/hal/src/hal_queues.c ****  *
 644:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 645:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 646:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 647:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 648:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 649:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 650:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 651:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 652:../../../os/hal/src/hal_queues.c ****  *                      .
 653:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 654:../../../os/hal/src/hal_queues.c ****  *
 655:../../../os/hal/src/hal_queues.c ****  * @api
 656:../../../os/hal/src/hal_queues.c ****  */
 657:../../../os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 658:../../../os/hal/src/hal_queues.c ****                       size_t n, sysinterval_t timeout) {
 1626               		.loc 1 658 0
 1627               		.cfi_startproc
 1628               	.LVL134:
 1629 0000 6F92      		push r6
 1630               	.LCFI61:
 1631               		.cfi_def_cfa_offset 3
 1632               		.cfi_offset 6, -2
 1633 0002 7F92      		push r7
 1634               	.LCFI62:
 1635               		.cfi_def_cfa_offset 4
 1636               		.cfi_offset 7, -3
 1637 0004 8F92      		push r8
 1638               	.LCFI63:
 1639               		.cfi_def_cfa_offset 5
 1640               		.cfi_offset 8, -4
 1641 0006 9F92      		push r9
 1642               	.LCFI64:
 1643               		.cfi_def_cfa_offset 6
 1644               		.cfi_offset 9, -5
 1645 0008 AF92      		push r10
 1646               	.LCFI65:
 1647               		.cfi_def_cfa_offset 7
 1648               		.cfi_offset 10, -6
 1649 000a BF92      		push r11
 1650               	.LCFI66:
 1651               		.cfi_def_cfa_offset 8
 1652               		.cfi_offset 11, -7
 1653 000c CF92      		push r12
 1654               	.LCFI67:
 1655               		.cfi_def_cfa_offset 9
 1656               		.cfi_offset 12, -8
 1657 000e DF92      		push r13
 1658               	.LCFI68:
 1659               		.cfi_def_cfa_offset 10
 1660               		.cfi_offset 13, -9
 1661 0010 EF92      		push r14
 1662               	.LCFI69:
 1663               		.cfi_def_cfa_offset 11
 1664               		.cfi_offset 14, -10
 1665 0012 FF92      		push r15
 1666               	.LCFI70:
 1667               		.cfi_def_cfa_offset 12
 1668               		.cfi_offset 15, -11
 1669 0014 0F93      		push r16
 1670               	.LCFI71:
 1671               		.cfi_def_cfa_offset 13
 1672               		.cfi_offset 16, -12
 1673 0016 1F93      		push r17
 1674               	.LCFI72:
 1675               		.cfi_def_cfa_offset 14
 1676               		.cfi_offset 17, -13
 1677 0018 CF93      		push r28
 1678               	.LCFI73:
 1679               		.cfi_def_cfa_offset 15
 1680               		.cfi_offset 28, -14
 1681 001a DF93      		push r29
 1682               	.LCFI74:
 1683               		.cfi_def_cfa_offset 16
 1684               		.cfi_offset 29, -15
 1685               	/* prologue: function */
 1686               	/* frame size = 0 */
 1687               	/* stack size = 14 */
 1688               	.L__stack_usage = 14
 1689 001c 6C01      		movw r12,r24
 1690 001e 7B01      		movw r14,r22
 1691 0020 3A01      		movw r6,r20
 1692 0022 4901      		movw r8,r18
 659:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1693               		.loc 1 659 0
 1694 0024 FC01      		movw r30,r24
 1695 0026 A384      		ldd r10,Z+11
 1696 0028 B484      		ldd r11,Z+12
 1697               	.LVL135:
 1698               	.LBB148:
 1699               	.LBB149:
 1700               	.LBB150:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1701               		.loc 3 430 0
 1702               	/* #APP */
 1703               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1704 002a F894      		cli
 1705               	 ;  0 "" 2
 1706               	/* #NOAPP */
 1707               	.LBE150:
 1708               	.LBE149:
 1709               	.LBE148:
 660:../../../os/hal/src/hal_queues.c ****   size_t max = n;
 661:../../../os/hal/src/hal_queues.c **** 
 662:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 663:../../../os/hal/src/hal_queues.c **** 
 664:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 665:../../../os/hal/src/hal_queues.c **** 
 666:../../../os/hal/src/hal_queues.c ****   while (n > 0U) {
 1710               		.loc 1 666 0
 1711 002c 4115      		cp r20,__zero_reg__
 1712 002e 5105      		cpc r21,__zero_reg__
 1713 0030 01F0      		breq .L106
 1714 0032 8A01      		movw r16,r20
 1715               	.LVL136:
 1716               	.L107:
 1717               	.LBB151:
 667:../../../os/hal/src/hal_queues.c ****     size_t done;
 668:../../../os/hal/src/hal_queues.c **** 
 669:../../../os/hal/src/hal_queues.c ****     done = oq_write(oqp, bp, n);
 1718               		.loc 1 669 0
 1719 0034 A801      		movw r20,r16
 1720 0036 B701      		movw r22,r14
 1721 0038 C601      		movw r24,r12
 1722 003a 0E94 0000 		call oq_write
 1723               	.LVL137:
 1724 003e EC01      		movw r28,r24
 1725               	.LVL138:
 670:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1726               		.loc 1 670 0
 1727 0040 892B      		or r24,r25
 1728 0042 01F0      		breq .L119
 671:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 672:../../../os/hal/src/hal_queues.c **** 
 673:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 674:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 675:../../../os/hal/src/hal_queues.c ****         break;
 676:../../../os/hal/src/hal_queues.c ****       }
 677:../../../os/hal/src/hal_queues.c ****     }
 678:../../../os/hal/src/hal_queues.c ****     else {
 679:../../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one character
 680:../../../os/hal/src/hal_queues.c ****          available.*/
 681:../../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 1729               		.loc 1 681 0
 1730 0044 A114      		cp r10,__zero_reg__
 1731 0046 B104      		cpc r11,__zero_reg__
 1732 0048 01F0      		breq .L111
 682:../../../os/hal/src/hal_queues.c ****         nfy(oqp);
 1733               		.loc 1 682 0
 1734 004a C601      		movw r24,r12
 1735               	.LVL139:
 1736 004c F501      		movw r30,r10
 1737 004e 0995      		icall
 1738               	.LVL140:
 1739               	.L111:
 1740               	.LBB152:
 1741               	.LBB153:
 1742               	.LBB154:
 1743               		.loc 3 440 0
 1744               	/* #APP */
 1745               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1746 0050 7894      		sei
 1747               	 ;  0 "" 2
 1748               	/* #NOAPP */
 1749               	.LBE154:
 1750               	.LBE153:
 1751               	.LBE152:
 683:../../../os/hal/src/hal_queues.c ****       }
 684:../../../os/hal/src/hal_queues.c **** 
 685:../../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 686:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 687:../../../os/hal/src/hal_queues.c **** 
 688:../../../os/hal/src/hal_queues.c ****       n  -= done;
 1752               		.loc 1 688 0
 1753 0052 0C1B      		sub r16,r28
 1754 0054 1D0B      		sbc r17,r29
 1755               	.LVL141:
 689:../../../os/hal/src/hal_queues.c ****       bp += done;
 1756               		.loc 1 689 0
 1757 0056 EC0E      		add r14,r28
 1758 0058 FD1E      		adc r15,r29
 1759               	.LVL142:
 1760               	.LBB155:
 1761               	.LBB156:
 1762               	.LBB157:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1763               		.loc 3 430 0
 1764               	/* #APP */
 1765               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1766 005a F894      		cli
 1767               	 ;  0 "" 2
 1768               	/* #NOAPP */
 1769               	.LBE157:
 1770               	.LBE156:
 1771               	.LBE155:
 1772               	.LBE151:
 666:../../../os/hal/src/hal_queues.c ****     size_t done;
 1773               		.loc 1 666 0
 1774 005c 0115      		cp r16,__zero_reg__
 1775 005e 1105      		cpc r17,__zero_reg__
 1776 0060 01F4      		brne .L107
 1777               	.LVL143:
 1778               	.L106:
 1779 0062 00E0      		ldi r16,0
 1780 0064 10E0      		ldi r17,0
 1781               	.L108:
 1782               	.LBB161:
 1783               	.LBB162:
 1784               	.LBB163:
 1785               		.loc 3 440 0
 1786               	/* #APP */
 1787               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1788 0066 7894      		sei
 1789               	 ;  0 "" 2
 1790               	/* #NOAPP */
 1791               	.LBE163:
 1792               	.LBE162:
 1793               	.LBE161:
 690:../../../os/hal/src/hal_queues.c **** 
 691:../../../os/hal/src/hal_queues.c ****       osalSysLock();
 692:../../../os/hal/src/hal_queues.c ****     }
 693:../../../os/hal/src/hal_queues.c ****   }
 694:../../../os/hal/src/hal_queues.c **** 
 695:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 696:../../../os/hal/src/hal_queues.c ****   return max - n;
 697:../../../os/hal/src/hal_queues.c **** }
 1794               		.loc 1 697 0
 1795 0068 C301      		movw r24,r6
 1796 006a 801B      		sub r24,r16
 1797 006c 910B      		sbc r25,r17
 1798               	/* epilogue start */
 1799 006e DF91      		pop r29
 1800 0070 CF91      		pop r28
 1801 0072 1F91      		pop r17
 1802 0074 0F91      		pop r16
 1803 0076 FF90      		pop r15
 1804 0078 EF90      		pop r14
 1805               	.LVL144:
 1806 007a DF90      		pop r13
 1807 007c CF90      		pop r12
 1808               	.LVL145:
 1809 007e BF90      		pop r11
 1810 0080 AF90      		pop r10
 1811               	.LVL146:
 1812 0082 9F90      		pop r9
 1813 0084 8F90      		pop r8
 1814               	.LVL147:
 1815 0086 7F90      		pop r7
 1816 0088 6F90      		pop r6
 1817               	.LVL148:
 1818 008a 0895      		ret
 1819               	.LVL149:
 1820               	.L119:
 1821               	.LBB164:
 1822               	.LBB158:
 1823               	.LBB159:
 1824               	.LBB160:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1825               		.loc 2 895 0
 1826 008c B401      		movw r22,r8
 1827 008e C601      		movw r24,r12
 1828               	.LVL150:
 1829 0090 0E94 0000 		call chThdEnqueueTimeoutS
 1830               	.LVL151:
 1831               	.LBE160:
 1832               	.LBE159:
 674:../../../os/hal/src/hal_queues.c ****         break;
 1833               		.loc 1 674 0
 1834 0094 892B      		or r24,r25
 1835 0096 01F0      		breq .L107
 1836 0098 00C0      		rjmp .L108
 1837               	.LBE158:
 1838               	.LBE164:
 1839               		.cfi_endproc
 1840               	.LFE161:
 1842               		.text
 1843               	.Letext0:
 1844               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1845               		.file 5 "/usr/lib/avr/include/stdint.h"
 1846               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1847               		.file 7 "../../../os/nil/include/ch.h"
 1848               		.file 8 "../../../os/hal/include/hal_queues.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_queues.c
     /tmp/ccd4tweb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccd4tweb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccd4tweb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccd4tweb.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccd4tweb.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccd4tweb.s:12     .text.iq_read:0000000000000000 iq_read
     /tmp/ccd4tweb.s:181    .text.oq_write:0000000000000000 oq_write
     /tmp/ccd4tweb.s:350    .text.iqObjectInit:0000000000000000 iqObjectInit
     /tmp/ccd4tweb.s:413    .text.iqResetI:0000000000000000 iqResetI
     /tmp/ccd4tweb.s:450    .text.iqPutI:0000000000000000 iqPutI
     /tmp/ccd4tweb.s:529    .text.iqGetI:0000000000000000 iqGetI
     /tmp/ccd4tweb.s:632    .text.iqGetTimeout:0000000000000000 iqGetTimeout
     /tmp/ccd4tweb.s:788    .text.iqReadI:0000000000000000 iqReadI
     /tmp/ccd4tweb.s:863    .text.iqReadTimeout:0000000000000000 iqReadTimeout
     /tmp/ccd4tweb.s:1084   .text.oqObjectInit:0000000000000000 oqObjectInit
     /tmp/ccd4tweb.s:1146   .text.oqResetI:0000000000000000 oqResetI
     /tmp/ccd4tweb.s:1189   .text.oqPutI:0000000000000000 oqPutI
     /tmp/ccd4tweb.s:1292   .text.oqPutTimeout:0000000000000000 oqPutTimeout
     /tmp/ccd4tweb.s:1456   .text.oqGetI:0000000000000000 oqGetI
     /tmp/ccd4tweb.s:1549   .text.oqWriteI:0000000000000000 oqWriteI
     /tmp/ccd4tweb.s:1624   .text.oqWriteTimeout:0000000000000000 oqWriteTimeout

UNDEFINED SYMBOLS
memcpy
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
