   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB146:
  15               		.file 1 "../../../os/hal/src/hal_buffers.c"
   1:../../../os/hal/src/hal_buffers.c **** /*
   2:../../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_buffers.c **** 
   4:../../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_buffers.c **** 
   8:../../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_buffers.c **** 
  10:../../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../../os/hal/src/hal_buffers.c **** */
  16:../../../os/hal/src/hal_buffers.c **** 
  17:../../../os/hal/src/hal_buffers.c **** /**
  18:../../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../../os/hal/src/hal_buffers.c ****  *
  21:../../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../../os/hal/src/hal_buffers.c ****  *            thread side and the reader is the ISR side.
  32:../../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../../os/hal/src/hal_buffers.c ****  *          .
  36:../../../os/hal/src/hal_buffers.c ****  * @{
  37:../../../os/hal/src/hal_buffers.c ****  */
  38:../../../os/hal/src/hal_buffers.c **** 
  39:../../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../../os/hal/src/hal_buffers.c **** 
  41:../../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../../os/hal/src/hal_buffers.c **** 
  43:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_buffers.c **** 
  47:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../../os/hal/src/hal_buffers.c **** 
  51:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../../os/hal/src/hal_buffers.c **** 
  55:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../../os/hal/src/hal_buffers.c **** 
  59:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../../os/hal/src/hal_buffers.c **** 
  63:../../../os/hal/src/hal_buffers.c **** /**
  64:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../../os/hal/src/hal_buffers.c ****  *
  66:../../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../../os/hal/src/hal_buffers.c ****  *
  74:../../../os/hal/src/hal_buffers.c ****  * @init
  75:../../../os/hal/src/hal_buffers.c ****  */
  76:../../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c FC01      		movw r30,r24
  48               	.LVL1:
  49               	.LBB145:
  50               	.LBB146:
  51               		.file 2 "../../../os/hal/osal/rt-nil/osal.h"
   1:../../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/osal.h **** 
   4:../../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/osal.h **** 
   8:../../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/osal.h **** 
  10:../../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/osal.h **** */
  16:../../../os/hal/osal/rt-nil/osal.h **** 
  17:../../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../../os/hal/osal/rt-nil/osal.h **** 
  25:../../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt-nil/osal.h **** 
  28:../../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt-nil/osal.h **** 
  32:../../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt-nil/osal.h **** 
  34:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/osal.h **** 
  38:../../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../../os/hal/osal/rt-nil/osal.h **** 
  46:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../../os/hal/osal/rt-nil/osal.h **** 
  50:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../../os/hal/osal/rt-nil/osal.h **** 
  54:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../../os/hal/osal/rt-nil/osal.h **** 
  65:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../../os/hal/osal/rt-nil/osal.h **** 
  75:../../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../../os/hal/osal/rt-nil/osal.h **** 
  84:../../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt-nil/osal.h **** 
  93:../../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt-nil/osal.h **** 
  98:../../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../../os/hal/osal/rt-nil/osal.h **** 
 108:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt-nil/osal.h **** 
 112:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt-nil/osal.h **** 
 116:../../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../../os/hal/osal/rt-nil/osal.h **** 
 122:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../../os/hal/osal/rt-nil/osal.h **** 
 127:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../../os/hal/osal/rt-nil/osal.h **** 
 131:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../../os/hal/osal/rt-nil/osal.h **** 
 138:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../../os/hal/osal/rt-nil/osal.h **** 
 145:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../../os/hal/osal/rt-nil/osal.h **** 
 152:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../../os/hal/osal/rt-nil/osal.h **** 
 159:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../../os/hal/osal/rt-nil/osal.h **** 
 168:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../../os/hal/osal/rt-nil/osal.h **** 
 175:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../../os/hal/osal/rt-nil/osal.h **** 
 182:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../../os/hal/osal/rt-nil/osal.h **** 
 189:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../../os/hal/osal/rt-nil/osal.h **** 
 200:../../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../../os/hal/osal/rt-nil/osal.h **** 
 207:../../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../../os/hal/osal/rt-nil/osal.h **** };
 220:../../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../../os/hal/osal/rt-nil/osal.h **** 
 222:../../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../../os/hal/osal/rt-nil/osal.h **** 
 234:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../../os/hal/osal/rt-nil/osal.h **** 
 247:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../../os/hal/osal/rt-nil/osal.h **** 
 251:../../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../../os/hal/osal/rt-nil/osal.h **** 
 271:../../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../../os/hal/osal/rt-nil/osal.h **** 
 283:../../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../../os/hal/osal/rt-nil/osal.h **** 
 289:../../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../../os/hal/osal/rt-nil/osal.h **** 
 296:../../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../../os/hal/osal/rt-nil/osal.h **** 
 305:../../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../../os/hal/osal/rt-nil/osal.h **** 
 311:../../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../../os/hal/osal/rt-nil/osal.h **** 
 317:../../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../../os/hal/osal/rt-nil/osal.h **** 
 326:../../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../../os/hal/osal/rt-nil/osal.h **** 
 345:../../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../../os/hal/osal/rt-nil/osal.h **** 
 360:../../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../../os/hal/osal/rt-nil/osal.h **** 
 375:../../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../../os/hal/osal/rt-nil/osal.h **** 
 390:../../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../../os/hal/osal/rt-nil/osal.h **** 
 405:../../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../../os/hal/osal/rt-nil/osal.h **** 
 421:../../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../../os/hal/osal/rt-nil/osal.h **** 
 438:../../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../../os/hal/osal/rt-nil/osal.h **** 
 452:../../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../../os/hal/osal/rt-nil/osal.h **** 
 467:../../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../../os/hal/osal/rt-nil/osal.h **** 
 483:../../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../../os/hal/osal/rt-nil/osal.h **** 
 496:../../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../../os/hal/osal/rt-nil/osal.h **** 
 510:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../../os/hal/osal/rt-nil/osal.h **** 
 514:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../../os/hal/osal/rt-nil/osal.h **** 
 518:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../../os/hal/osal/rt-nil/osal.h **** }
 520:../../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../../os/hal/osal/rt-nil/osal.h **** 
 522:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../../os/hal/osal/rt-nil/osal.h **** 
 526:../../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../../os/hal/osal/rt-nil/osal.h **** 
 533:../../../os/hal/osal/rt-nil/osal.h **** }
 534:../../../os/hal/osal/rt-nil/osal.h **** 
 535:../../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../../os/hal/osal/rt-nil/osal.h **** 
 544:../../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../../os/hal/osal/rt-nil/osal.h **** }
 546:../../../os/hal/osal/rt-nil/osal.h **** 
 547:../../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../../os/hal/osal/rt-nil/osal.h **** 
 554:../../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../../os/hal/osal/rt-nil/osal.h **** }
 556:../../../os/hal/osal/rt-nil/osal.h **** 
 557:../../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../../os/hal/osal/rt-nil/osal.h **** 
 564:../../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../../os/hal/osal/rt-nil/osal.h **** }
 566:../../../os/hal/osal/rt-nil/osal.h **** 
 567:../../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../../os/hal/osal/rt-nil/osal.h **** 
 575:../../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../../os/hal/osal/rt-nil/osal.h **** }
 577:../../../os/hal/osal/rt-nil/osal.h **** 
 578:../../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../../os/hal/osal/rt-nil/osal.h **** 
 586:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../../os/hal/osal/rt-nil/osal.h **** }
 588:../../../os/hal/osal/rt-nil/osal.h **** 
 589:../../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../../os/hal/osal/rt-nil/osal.h **** 
 597:../../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../../os/hal/osal/rt-nil/osal.h **** }
 599:../../../os/hal/osal/rt-nil/osal.h **** 
 600:../../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../../os/hal/osal/rt-nil/osal.h **** 
 608:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../../os/hal/osal/rt-nil/osal.h **** }
 610:../../../os/hal/osal/rt-nil/osal.h **** 
 611:../../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../../os/hal/osal/rt-nil/osal.h **** 
 626:../../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../../os/hal/osal/rt-nil/osal.h **** }
 628:../../../os/hal/osal/rt-nil/osal.h **** 
 629:../../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../../os/hal/osal/rt-nil/osal.h **** 
 640:../../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../../os/hal/osal/rt-nil/osal.h **** }
 642:../../../os/hal/osal/rt-nil/osal.h **** 
 643:../../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../../os/hal/osal/rt-nil/osal.h **** 
 655:../../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../../os/hal/osal/rt-nil/osal.h **** }
 657:../../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../../os/hal/osal/rt-nil/osal.h **** 
 659:../../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../../os/hal/osal/rt-nil/osal.h **** 
 667:../../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../../os/hal/osal/rt-nil/osal.h **** }
 669:../../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../../os/hal/osal/rt-nil/osal.h **** 
 671:../../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../../os/hal/osal/rt-nil/osal.h **** 
 682:../../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../../os/hal/osal/rt-nil/osal.h **** }
 684:../../../os/hal/osal/rt-nil/osal.h **** 
 685:../../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../../os/hal/osal/rt-nil/osal.h **** 
 700:../../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../../os/hal/osal/rt-nil/osal.h **** }
 702:../../../os/hal/osal/rt-nil/osal.h **** 
 703:../../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../../os/hal/osal/rt-nil/osal.h **** 
 715:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../../os/hal/osal/rt-nil/osal.h **** }
 717:../../../os/hal/osal/rt-nil/osal.h **** 
 718:../../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../../os/hal/osal/rt-nil/osal.h **** 
 729:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../../os/hal/osal/rt-nil/osal.h **** }
 731:../../../os/hal/osal/rt-nil/osal.h **** 
 732:../../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../../os/hal/osal/rt-nil/osal.h **** 
 750:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../../os/hal/osal/rt-nil/osal.h **** }
 752:../../../os/hal/osal/rt-nil/osal.h **** 
 753:../../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../../os/hal/osal/rt-nil/osal.h **** 
 767:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../../os/hal/osal/rt-nil/osal.h **** }
 769:../../../os/hal/osal/rt-nil/osal.h **** 
 770:../../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../../os/hal/osal/rt-nil/osal.h **** 
 784:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../../os/hal/osal/rt-nil/osal.h **** }
 786:../../../os/hal/osal/rt-nil/osal.h **** 
 787:../../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../../os/hal/osal/rt-nil/osal.h **** 
 799:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../../os/hal/osal/rt-nil/osal.h **** }
 801:../../../os/hal/osal/rt-nil/osal.h **** 
 802:../../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../../os/hal/osal/rt-nil/osal.h **** 
 824:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../../os/hal/osal/rt-nil/osal.h **** }
 826:../../../os/hal/osal/rt-nil/osal.h **** 
 827:../../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../../os/hal/osal/rt-nil/osal.h **** 
 839:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../../os/hal/osal/rt-nil/osal.h **** }
 841:../../../os/hal/osal/rt-nil/osal.h **** 
 842:../../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../../os/hal/osal/rt-nil/osal.h **** 
 854:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../../os/hal/osal/rt-nil/osal.h **** }
 856:../../../os/hal/osal/rt-nil/osal.h **** 
 857:../../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../../os/hal/osal/rt-nil/osal.h **** 
 866:../../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
  52               		.loc 2 866 0
  53 000e 1082      		st Z,__zero_reg__
  54               	.LVL2:
  55               	.LBE146:
  56               	.LBE145:
  78:../../../os/hal/src/hal_buffers.c **** 
  79:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../../os/hal/src/hal_buffers.c **** 
  81:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  57               		.loc 1 82 0
  58 0010 6183      		std Z+1,r22
  83:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  59               		.loc 1 83 0
  60 0012 1382      		std Z+3,__zero_reg__
  61 0014 1282      		std Z+2,__zero_reg__
  84:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  62               		.loc 1 84 0
  63 0016 5783      		std Z+7,r21
  64 0018 4683      		std Z+6,r20
  85:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  65               		.loc 1 85 0
  66 001a 5583      		std Z+5,r21
  67 001c 4483      		std Z+4,r20
  86:../../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  68               		.loc 1 86 0
  69 001e 2E5F      		subi r18,-2
  70 0020 3F4F      		sbci r19,-1
  71               	.LVL3:
  72 0022 209F      		mul r18,r16
  73 0024 C001      		movw r24,r0
  74 0026 219F      		mul r18,r17
  75 0028 900D      		add r25,r0
  76 002a 309F      		mul r19,r16
  77 002c 900D      		add r25,r0
  78 002e 1124      		clr r1
  79               	.LVL4:
  80 0030 840F      		add r24,r20
  81 0032 951F      		adc r25,r21
  82 0034 9187      		std Z+9,r25
  83 0036 8087      		std Z+8,r24
  87:../../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  84               		.loc 1 87 0
  85 0038 3387      		std Z+11,r19
  86 003a 2287      		std Z+10,r18
  88:../../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  87               		.loc 1 88 0
  88 003c 1587      		std Z+13,r17
  89 003e 0487      		std Z+12,r16
  89:../../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
  90               		.loc 1 89 0
  91 0040 5787      		std Z+15,r21
  92 0042 4687      		std Z+14,r20
  90:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
  93               		.loc 1 90 0
  94 0044 118A      		std Z+17,__zero_reg__
  95 0046 108A      		std Z+16,__zero_reg__
  91:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
  96               		.loc 1 91 0
  97 0048 138A      		std Z+19,__zero_reg__
  98 004a 128A      		std Z+18,__zero_reg__
  92:../../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
  99               		.loc 1 92 0
 100 004c F58A      		std Z+21,r15
 101 004e E48A      		std Z+20,r14
  93:../../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 102               		.loc 1 93 0
 103 0050 D78A      		std Z+23,r13
 104 0052 C68A      		std Z+22,r12
 105               	/* epilogue start */
  94:../../../os/hal/src/hal_buffers.c **** }
 106               		.loc 1 94 0
 107 0054 1F91      		pop r17
 108 0056 0F91      		pop r16
 109               	.LVL5:
 110 0058 FF90      		pop r15
 111 005a EF90      		pop r14
 112               	.LVL6:
 113 005c DF90      		pop r13
 114 005e CF90      		pop r12
 115               	.LVL7:
 116 0060 0895      		ret
 117               		.cfi_endproc
 118               	.LFE146:
 120               		.section	.text.ibqResetI,"ax",@progbits
 121               	.global	ibqResetI
 123               	ibqResetI:
 124               	.LFB147:
  95:../../../os/hal/src/hal_buffers.c **** 
  96:../../../os/hal/src/hal_buffers.c **** /**
  97:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../../os/hal/src/hal_buffers.c ****  *
 103:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../../os/hal/src/hal_buffers.c ****  *
 105:../../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../../os/hal/src/hal_buffers.c ****  */
 107:../../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 125               		.loc 1 107 0
 126               		.cfi_startproc
 127               	.LVL8:
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
 132 0000 FC01      		movw r30,r24
 108:../../../os/hal/src/hal_buffers.c **** 
 109:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../../os/hal/src/hal_buffers.c **** 
 111:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 133               		.loc 1 111 0
 134 0002 1382      		std Z+3,__zero_reg__
 135 0004 1282      		std Z+2,__zero_reg__
 112:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 136               		.loc 1 112 0
 137 0006 8685      		ldd r24,Z+14
 138 0008 9785      		ldd r25,Z+15
 139               	.LVL9:
 140 000a 9783      		std Z+7,r25
 141 000c 8683      		std Z+6,r24
 113:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 142               		.loc 1 113 0
 143 000e 9583      		std Z+5,r25
 144 0010 8483      		std Z+4,r24
 114:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 145               		.loc 1 114 0
 146 0012 118A      		std Z+17,__zero_reg__
 147 0014 108A      		std Z+16,__zero_reg__
 115:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 148               		.loc 1 115 0
 149 0016 138A      		std Z+19,__zero_reg__
 150 0018 128A      		std Z+18,__zero_reg__
 151               	.LVL10:
 152               	.LBB147:
 153               	.LBB148:
 867:../../../os/hal/osal/rt-nil/osal.h **** }
 868:../../../os/hal/osal/rt-nil/osal.h **** 
 869:../../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../../os/hal/osal/rt-nil/osal.h **** 
 895:../../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../../os/hal/osal/rt-nil/osal.h **** }
 897:../../../os/hal/osal/rt-nil/osal.h **** 
 898:../../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../../os/hal/osal/rt-nil/osal.h **** 
 908:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../../os/hal/osal/rt-nil/osal.h **** }
 910:../../../os/hal/osal/rt-nil/osal.h **** 
 911:../../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../../os/hal/osal/rt-nil/osal.h **** 
 921:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 154               		.loc 2 921 0
 155 001a 6EEF      		ldi r22,lo8(-2)
 156 001c 7FEF      		ldi r23,lo8(-1)
 157 001e CF01      		movw r24,r30
 158 0020 0C94 0000 		jmp chThdDequeueAllI
 159               	.LVL11:
 160               	.LBE148:
 161               	.LBE147:
 162               		.cfi_endproc
 163               	.LFE147:
 165               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 166               	.global	ibqGetEmptyBufferI
 168               	ibqGetEmptyBufferI:
 169               	.LFB148:
 116:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../../os/hal/src/hal_buffers.c **** }
 118:../../../os/hal/src/hal_buffers.c **** 
 119:../../../os/hal/src/hal_buffers.c **** /**
 120:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../../os/hal/src/hal_buffers.c ****  *
 123:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../../os/hal/src/hal_buffers.c ****  *
 127:../../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../../os/hal/src/hal_buffers.c ****  */
 129:../../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 170               		.loc 1 129 0
 171               		.cfi_startproc
 172               	.LVL12:
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
 177 0000 FC01      		movw r30,r24
 130:../../../os/hal/src/hal_buffers.c **** 
 131:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../../os/hal/src/hal_buffers.c **** 
 133:../../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 178               		.loc 1 133 0
 179 0002 2481      		ldd r18,Z+4
 180 0004 3581      		ldd r19,Z+5
 181 0006 8681      		ldd r24,Z+6
 182 0008 9781      		ldd r25,Z+7
 183               	.LVL13:
 184 000a 2817      		cp r18,r24
 185 000c 3907      		cpc r19,r25
 186 000e 01F0      		breq .L11
 187               	.L4:
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../../os/hal/src/hal_buffers.c ****   }
 136:../../../os/hal/src/hal_buffers.c **** 
 137:../../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 188               		.loc 1 137 0
 189 0010 C901      		movw r24,r18
 190 0012 0296      		adiw r24,2
 138:../../../os/hal/src/hal_buffers.c **** }
 191               		.loc 1 138 0
 192 0014 0895      		ret
 193               	.L11:
 133:../../../os/hal/src/hal_buffers.c ****     return NULL;
 194               		.loc 1 133 0 discriminator 1
 195 0016 8281      		ldd r24,Z+2
 196 0018 9381      		ldd r25,Z+3
 197 001a 892B      		or r24,r25
 198 001c 01F0      		breq .L4
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 199               		.loc 1 134 0
 200 001e 80E0      		ldi r24,0
 201 0020 90E0      		ldi r25,0
 202 0022 0895      		ret
 203               		.cfi_endproc
 204               	.LFE148:
 206               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 207               	.global	ibqPostFullBufferI
 209               	ibqPostFullBufferI:
 210               	.LFB149:
 139:../../../os/hal/src/hal_buffers.c **** 
 140:../../../os/hal/src/hal_buffers.c **** /**
 141:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../../os/hal/src/hal_buffers.c ****  *
 143:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../../os/hal/src/hal_buffers.c ****  *
 146:../../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../../os/hal/src/hal_buffers.c ****  */
 148:../../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 211               		.loc 1 148 0
 212               		.cfi_startproc
 213               	.LVL14:
 214               	/* prologue: function */
 215               	/* frame size = 0 */
 216               	/* stack size = 0 */
 217               	.L__stack_usage = 0
 218 0000 FC01      		movw r30,r24
 149:../../../os/hal/src/hal_buffers.c **** 
 150:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../../os/hal/src/hal_buffers.c **** 
 152:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../../os/hal/src/hal_buffers.c **** 
 155:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)ibqp->bwrptr) = size;
 219               		.loc 1 156 0
 220 0002 A481      		ldd r26,Z+4
 221 0004 B581      		ldd r27,Z+5
 222 0006 1196      		adiw r26,1
 223 0008 7C93      		st X,r23
 224 000a 6E93      		st -X,r22
 157:../../../os/hal/src/hal_buffers.c **** 
 158:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 225               		.loc 1 159 0
 226 000c 2281      		ldd r18,Z+2
 227 000e 3381      		ldd r19,Z+3
 228 0010 2F5F      		subi r18,-1
 229 0012 3F4F      		sbci r19,-1
 230 0014 3383      		std Z+3,r19
 231 0016 2283      		std Z+2,r18
 160:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 232               		.loc 1 160 0
 233 0018 8285      		ldd r24,Z+10
 234 001a 9385      		ldd r25,Z+11
 235               	.LVL15:
 236 001c 8A0F      		add r24,r26
 237 001e 9B1F      		adc r25,r27
 238 0020 9583      		std Z+5,r25
 239 0022 8483      		std Z+4,r24
 161:../../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 240               		.loc 1 161 0
 241 0024 2085      		ldd r18,Z+8
 242 0026 3185      		ldd r19,Z+9
 243 0028 8217      		cp r24,r18
 244 002a 9307      		cpc r25,r19
 245 002c 00F0      		brlo .L13
 162:../../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 246               		.loc 1 162 0
 247 002e 8685      		ldd r24,Z+14
 248 0030 9785      		ldd r25,Z+15
 249 0032 9583      		std Z+5,r25
 250 0034 8483      		std Z+4,r24
 251               	.L13:
 252               	.LVL16:
 253               	.LBB149:
 254               	.LBB150:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 255               		.loc 2 908 0
 256 0036 60E0      		ldi r22,0
 257 0038 70E0      		ldi r23,0
 258               	.LVL17:
 259 003a CF01      		movw r24,r30
 260 003c 0C94 0000 		jmp chThdDequeueNextI
 261               	.LVL18:
 262               	.LBE150:
 263               	.LBE149:
 264               		.cfi_endproc
 265               	.LFE149:
 267               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 268               	.global	ibqGetFullBufferTimeoutS
 270               	ibqGetFullBufferTimeoutS:
 271               	.LFB151:
 163:../../../os/hal/src/hal_buffers.c ****   }
 164:../../../os/hal/src/hal_buffers.c **** 
 165:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../../os/hal/src/hal_buffers.c **** }
 168:../../../os/hal/src/hal_buffers.c **** 
 169:../../../os/hal/src/hal_buffers.c **** /**
 170:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../../os/hal/src/hal_buffers.c ****  *
 176:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../../os/hal/src/hal_buffers.c ****  *                      .
 182:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:../../../os/hal/src/hal_buffers.c ****  *
 188:../../../os/hal/src/hal_buffers.c ****  * @api
 189:../../../os/hal/src/hal_buffers.c ****  */
 190:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:../../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 192:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 193:../../../os/hal/src/hal_buffers.c **** 
 194:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 195:../../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:../../../os/hal/src/hal_buffers.c **** 
 198:../../../os/hal/src/hal_buffers.c ****   return msg;
 199:../../../os/hal/src/hal_buffers.c **** }
 200:../../../os/hal/src/hal_buffers.c **** 
 201:../../../os/hal/src/hal_buffers.c ****   /**
 202:../../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:../../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:../../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:../../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:../../../os/hal/src/hal_buffers.c ****    *          is empty.
 207:../../../os/hal/src/hal_buffers.c ****    *
 208:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:../../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:../../../os/hal/src/hal_buffers.c ****    *                      .
 214:../../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:../../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:../../../os/hal/src/hal_buffers.c ****    *
 220:../../../os/hal/src/hal_buffers.c ****    * @sclass
 221:../../../os/hal/src/hal_buffers.c ****    */
 222:../../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:../../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 272               		.loc 1 223 0
 273               		.cfi_startproc
 274               	.LVL19:
 275 0000 0F93      		push r16
 276               	.LCFI6:
 277               		.cfi_def_cfa_offset 3
 278               		.cfi_offset 16, -2
 279 0002 1F93      		push r17
 280               	.LCFI7:
 281               		.cfi_def_cfa_offset 4
 282               		.cfi_offset 17, -3
 283 0004 CF93      		push r28
 284               	.LCFI8:
 285               		.cfi_def_cfa_offset 5
 286               		.cfi_offset 28, -4
 287 0006 DF93      		push r29
 288               	.LCFI9:
 289               		.cfi_def_cfa_offset 6
 290               		.cfi_offset 29, -5
 291               	/* prologue: function */
 292               	/* frame size = 0 */
 293               	/* stack size = 4 */
 294               	.L__stack_usage = 4
 295 0008 EC01      		movw r28,r24
 296 000a 8B01      		movw r16,r22
 224:../../../os/hal/src/hal_buffers.c **** 
 225:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:../../../os/hal/src/hal_buffers.c **** 
 227:../../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 297               		.loc 1 227 0
 298 000c 00C0      		rjmp .L15
 299               	.LVL20:
 300               	.L17:
 301               	.LBB159:
 228:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 302               		.loc 1 228 0
 303 000e 8981      		ldd r24,Y+1
 304 0010 8111      		cpse r24,__zero_reg__
 305 0012 00C0      		rjmp .L18
 306               	.LVL21:
 307               	.LBB160:
 308               	.LBB161:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 309               		.loc 2 895 0
 310 0014 B801      		movw r22,r16
 311 0016 CE01      		movw r24,r28
 312 0018 0E94 0000 		call chThdEnqueueTimeoutS
 313               	.LVL22:
 314               	.LBE161:
 315               	.LBE160:
 229:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:../../../os/hal/src/hal_buffers.c ****     }
 231:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 316               		.loc 1 232 0
 317 001c 97FD      		sbrc r25,7
 318 001e 00C0      		rjmp .L16
 319               	.L15:
 320               	.LBE159:
 227:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 321               		.loc 1 227 0
 322 0020 8A81      		ldd r24,Y+2
 323 0022 9B81      		ldd r25,Y+3
 324 0024 892B      		or r24,r25
 325 0026 01F0      		breq .L17
 326               	.LVL23:
 327               	.LBB162:
 328               	.LBB163:
 233:../../../os/hal/src/hal_buffers.c ****        return msg;
 234:../../../os/hal/src/hal_buffers.c ****     }
 235:../../../os/hal/src/hal_buffers.c ****   }
 236:../../../os/hal/src/hal_buffers.c **** 
 237:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:../../../os/hal/src/hal_buffers.c **** 
 239:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 329               		.loc 1 240 0
 330 0028 EE81      		ldd r30,Y+6
 331 002a FF81      		ldd r31,Y+7
 332 002c 9F01      		movw r18,r30
 333 002e 2E5F      		subi r18,-2
 334 0030 3F4F      		sbci r19,-1
 335 0032 398B      		std Y+17,r19
 336 0034 288B      		std Y+16,r18
 241:../../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 337               		.loc 1 241 0
 338 0036 8081      		ld r24,Z
 339 0038 9181      		ldd r25,Z+1
 340 003a 820F      		add r24,r18
 341 003c 931F      		adc r25,r19
 342 003e 9B8B      		std Y+19,r25
 343 0040 8A8B      		std Y+18,r24
 344               	.LVL24:
 345 0042 80E0      		ldi r24,0
 346 0044 90E0      		ldi r25,0
 347               	.L16:
 348               	/* epilogue start */
 349               	.LBE163:
 350               	.LBE162:
 242:../../../os/hal/src/hal_buffers.c **** 
 243:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:../../../os/hal/src/hal_buffers.c **** }
 351               		.loc 1 244 0
 352 0046 DF91      		pop r29
 353 0048 CF91      		pop r28
 354               	.LVL25:
 355 004a 1F91      		pop r17
 356 004c 0F91      		pop r16
 357               	.LVL26:
 358 004e 0895      		ret
 359               	.LVL27:
 360               	.L18:
 361               	.LBB164:
 229:../../../os/hal/src/hal_buffers.c ****     }
 362               		.loc 1 229 0
 363 0050 8EEF      		ldi r24,lo8(-2)
 364 0052 9FEF      		ldi r25,lo8(-1)
 365               	/* epilogue start */
 366               	.LBE164:
 367               		.loc 1 244 0
 368 0054 DF91      		pop r29
 369 0056 CF91      		pop r28
 370               	.LVL28:
 371 0058 1F91      		pop r17
 372 005a 0F91      		pop r16
 373               	.LVL29:
 374 005c 0895      		ret
 375               		.cfi_endproc
 376               	.LFE151:
 378               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 379               	.global	ibqGetFullBufferTimeout
 381               	ibqGetFullBufferTimeout:
 382               	.LFB150:
 191:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 383               		.loc 1 191 0
 384               		.cfi_startproc
 385               	.LVL30:
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 0 */
 389               	.L__stack_usage = 0
 390               	.LBB165:
 391               	.LBB166:
 392               	.LBB167:
 393               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 394               		.loc 3 430 0
 395               	/* #APP */
 396               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 397 0000 F894      		cli
 398               	 ;  0 "" 2
 399               	/* #NOAPP */
 400               	.LBE167:
 401               	.LBE166:
 402               	.LBE165:
 195:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 403               		.loc 1 195 0
 404 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 405               	.LVL31:
 406               	.LBB168:
 407               	.LBB169:
 408               	.LBB170:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 409               		.loc 3 440 0
 410               	/* #APP */
 411               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 412 0006 7894      		sei
 413               	 ;  0 "" 2
 414               	/* #NOAPP */
 415               	.LBE170:
 416               	.LBE169:
 417               	.LBE168:
 199:../../../os/hal/src/hal_buffers.c **** 
 418               		.loc 1 199 0
 419 0008 0895      		ret
 420               		.cfi_endproc
 421               	.LFE150:
 423               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 424               	.global	ibqReleaseEmptyBuffer
 426               	ibqReleaseEmptyBuffer:
 427               	.LFB152:
 245:../../../os/hal/src/hal_buffers.c **** 
 246:../../../os/hal/src/hal_buffers.c **** /**
 247:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:../../../os/hal/src/hal_buffers.c ****  *
 250:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:../../../os/hal/src/hal_buffers.c ****  *
 252:../../../os/hal/src/hal_buffers.c ****  * @api
 253:../../../os/hal/src/hal_buffers.c ****  */
 254:../../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 428               		.loc 1 254 0
 429               		.cfi_startproc
 430               	.LVL32:
 431               	/* prologue: function */
 432               	/* frame size = 0 */
 433               	/* stack size = 0 */
 434               	.L__stack_usage = 0
 435 0000 DC01      		movw r26,r24
 436               	.LBB171:
 437               	.LBB172:
 438               	.LBB173:
 430:../../../os/common/ports/AVR/chcore.h **** }
 439               		.loc 3 430 0
 440               	/* #APP */
 441               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 442 0002 F894      		cli
 443               	 ;  0 "" 2
 444               	.LVL33:
 445               	/* #NOAPP */
 446               	.LBE173:
 447               	.LBE172:
 448               	.LBE171:
 449               	.LBB174:
 450               	.LBB175:
 255:../../../os/hal/src/hal_buffers.c **** 
 256:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 257:../../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:../../../os/hal/src/hal_buffers.c **** }
 260:../../../os/hal/src/hal_buffers.c **** 
 261:../../../os/hal/src/hal_buffers.c ****   /**
 262:../../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:../../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:../../../os/hal/src/hal_buffers.c ****    *
 265:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:../../../os/hal/src/hal_buffers.c ****    *
 267:../../../os/hal/src/hal_buffers.c ****    * @sclass
 268:../../../os/hal/src/hal_buffers.c ****    */
 269:../../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 270:../../../os/hal/src/hal_buffers.c **** 
 271:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:../../../os/hal/src/hal_buffers.c **** 
 274:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 451               		.loc 1 275 0
 452 0004 1296      		adiw r26,2
 453 0006 8D91      		ld r24,X+
 454 0008 9C91      		ld r25,X
 455 000a 1397      		sbiw r26,2+1
 456               	.LVL34:
 457 000c 0197      		sbiw r24,1
 458 000e 1396      		adiw r26,2+1
 459 0010 9C93      		st X,r25
 460 0012 8E93      		st -X,r24
 461 0014 1297      		sbiw r26,2
 276:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 462               		.loc 1 276 0
 463 0016 1696      		adiw r26,6
 464 0018 2D91      		ld r18,X+
 465 001a 3C91      		ld r19,X
 466 001c 1797      		sbiw r26,6+1
 467 001e 1A96      		adiw r26,10
 468 0020 8D91      		ld r24,X+
 469 0022 9C91      		ld r25,X
 470 0024 1B97      		sbiw r26,10+1
 471 0026 820F      		add r24,r18
 472 0028 931F      		adc r25,r19
 473 002a 1796      		adiw r26,6+1
 474 002c 9C93      		st X,r25
 475 002e 8E93      		st -X,r24
 476 0030 1697      		sbiw r26,6
 277:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 477               		.loc 1 277 0
 478 0032 1896      		adiw r26,8
 479 0034 2D91      		ld r18,X+
 480 0036 3C91      		ld r19,X
 481 0038 1997      		sbiw r26,8+1
 482 003a 8217      		cp r24,r18
 483 003c 9307      		cpc r25,r19
 484 003e 00F0      		brlo .L21
 278:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 485               		.loc 1 278 0
 486 0040 1E96      		adiw r26,14
 487 0042 8D91      		ld r24,X+
 488 0044 9C91      		ld r25,X
 489 0046 1F97      		sbiw r26,14+1
 490 0048 1796      		adiw r26,6+1
 491 004a 9C93      		st X,r25
 492 004c 8E93      		st -X,r24
 493 004e 1697      		sbiw r26,6
 494               	.L21:
 279:../../../os/hal/src/hal_buffers.c ****   }
 280:../../../os/hal/src/hal_buffers.c **** 
 281:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 495               		.loc 1 282 0
 496 0050 5196      		adiw r26,16+1
 497 0052 1C92      		st X,__zero_reg__
 498 0054 1E92      		st -X,__zero_reg__
 499 0056 5097      		sbiw r26,16
 283:../../../os/hal/src/hal_buffers.c **** 
 284:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:../../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 500               		.loc 1 285 0
 501 0058 5496      		adiw r26,20
 502 005a ED91      		ld r30,X+
 503 005c FC91      		ld r31,X
 504 005e 5597      		sbiw r26,20+1
 505 0060 3097      		sbiw r30,0
 506 0062 01F0      		breq .L22
 507 0064 CD01      		movw r24,r26
 286:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 508               		.loc 1 286 0
 509 0066 0995      		icall
 510               	.LVL35:
 511               	.L22:
 512               	.LBE175:
 513               	.LBE174:
 514               	.LBB176:
 515               	.LBB177:
 516               	.LBB178:
 517               		.loc 3 440 0
 518               	/* #APP */
 519               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 520 0068 7894      		sei
 521               	 ;  0 "" 2
 522               	/* #NOAPP */
 523 006a 0895      		ret
 524               	.LBE178:
 525               	.LBE177:
 526               	.LBE176:
 527               		.cfi_endproc
 528               	.LFE152:
 530               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 531               	.global	ibqReleaseEmptyBufferS
 533               	ibqReleaseEmptyBufferS:
 534               	.LFB153:
 269:../../../os/hal/src/hal_buffers.c **** 
 535               		.loc 1 269 0
 536               		.cfi_startproc
 537               	.LVL36:
 538               	/* prologue: function */
 539               	/* frame size = 0 */
 540               	/* stack size = 0 */
 541               	.L__stack_usage = 0
 542 0000 DC01      		movw r26,r24
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 543               		.loc 1 275 0
 544 0002 1296      		adiw r26,2
 545 0004 8D91      		ld r24,X+
 546 0006 9C91      		ld r25,X
 547 0008 1397      		sbiw r26,2+1
 548               	.LVL37:
 549 000a 0197      		sbiw r24,1
 550 000c 1396      		adiw r26,2+1
 551 000e 9C93      		st X,r25
 552 0010 8E93      		st -X,r24
 553 0012 1297      		sbiw r26,2
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 554               		.loc 1 276 0
 555 0014 1696      		adiw r26,6
 556 0016 2D91      		ld r18,X+
 557 0018 3C91      		ld r19,X
 558 001a 1797      		sbiw r26,6+1
 559 001c 1A96      		adiw r26,10
 560 001e 8D91      		ld r24,X+
 561 0020 9C91      		ld r25,X
 562 0022 1B97      		sbiw r26,10+1
 563 0024 820F      		add r24,r18
 564 0026 931F      		adc r25,r19
 565 0028 1796      		adiw r26,6+1
 566 002a 9C93      		st X,r25
 567 002c 8E93      		st -X,r24
 568 002e 1697      		sbiw r26,6
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 569               		.loc 1 277 0
 570 0030 1896      		adiw r26,8
 571 0032 2D91      		ld r18,X+
 572 0034 3C91      		ld r19,X
 573 0036 1997      		sbiw r26,8+1
 574 0038 8217      		cp r24,r18
 575 003a 9307      		cpc r25,r19
 576 003c 00F0      		brlo .L27
 278:../../../os/hal/src/hal_buffers.c ****   }
 577               		.loc 1 278 0
 578 003e 1E96      		adiw r26,14
 579 0040 8D91      		ld r24,X+
 580 0042 9C91      		ld r25,X
 581 0044 1F97      		sbiw r26,14+1
 582 0046 1796      		adiw r26,6+1
 583 0048 9C93      		st X,r25
 584 004a 8E93      		st -X,r24
 585 004c 1697      		sbiw r26,6
 586               	.L27:
 282:../../../os/hal/src/hal_buffers.c **** 
 587               		.loc 1 282 0
 588 004e 5196      		adiw r26,16+1
 589 0050 1C92      		st X,__zero_reg__
 590 0052 1E92      		st -X,__zero_reg__
 591 0054 5097      		sbiw r26,16
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 592               		.loc 1 285 0
 593 0056 5496      		adiw r26,20
 594 0058 ED91      		ld r30,X+
 595 005a FC91      		ld r31,X
 596 005c 5597      		sbiw r26,20+1
 597 005e 3097      		sbiw r30,0
 598 0060 01F0      		breq .L26
 599               		.loc 1 286 0
 600 0062 CD01      		movw r24,r26
 601 0064 0994      		ijmp
 602               	.LVL38:
 603               	.L26:
 604 0066 0895      		ret
 605               		.cfi_endproc
 606               	.LFE153:
 608               		.section	.text.ibqGetTimeout,"ax",@progbits
 609               	.global	ibqGetTimeout
 611               	ibqGetTimeout:
 612               	.LFB154:
 287:../../../os/hal/src/hal_buffers.c ****   }
 288:../../../os/hal/src/hal_buffers.c **** }
 289:../../../os/hal/src/hal_buffers.c **** 
 290:../../../os/hal/src/hal_buffers.c **** /**
 291:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:../../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:../../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:../../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:../../../os/hal/src/hal_buffers.c ****  *
 296:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:../../../os/hal/src/hal_buffers.c ****  *                      .
 302:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:../../../os/hal/src/hal_buffers.c ****  *
 307:../../../os/hal/src/hal_buffers.c ****  * @api
 308:../../../os/hal/src/hal_buffers.c ****  */
 309:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 613               		.loc 1 309 0
 614               		.cfi_startproc
 615               	.LVL39:
 616 0000 0F93      		push r16
 617               	.LCFI10:
 618               		.cfi_def_cfa_offset 3
 619               		.cfi_offset 16, -2
 620 0002 1F93      		push r17
 621               	.LCFI11:
 622               		.cfi_def_cfa_offset 4
 623               		.cfi_offset 17, -3
 624 0004 CF93      		push r28
 625               	.LCFI12:
 626               		.cfi_def_cfa_offset 5
 627               		.cfi_offset 28, -4
 628 0006 DF93      		push r29
 629               	.LCFI13:
 630               		.cfi_def_cfa_offset 6
 631               		.cfi_offset 29, -5
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 4 */
 635               	.L__stack_usage = 4
 636 0008 EC01      		movw r28,r24
 637               	.LBB179:
 638               	.LBB180:
 639               	.LBB181:
 430:../../../os/common/ports/AVR/chcore.h **** }
 640               		.loc 3 430 0
 641               	/* #APP */
 642               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 643 000a F894      		cli
 644               	 ;  0 "" 2
 645               	/* #NOAPP */
 646               	.LBE181:
 647               	.LBE180:
 648               	.LBE179:
 310:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 311:../../../os/hal/src/hal_buffers.c **** 
 312:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 313:../../../os/hal/src/hal_buffers.c **** 
 314:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 649               		.loc 1 315 0
 650 000c E889      		ldd r30,Y+16
 651 000e F989      		ldd r31,Y+17
 652 0010 3097      		sbiw r30,0
 653 0012 01F0      		breq .L40
 654               	.LVL40:
 655               	.L30:
 316:../../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 317:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 318:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:../../../os/hal/src/hal_buffers.c ****       return msg;
 320:../../../os/hal/src/hal_buffers.c ****     }
 321:../../../os/hal/src/hal_buffers.c ****   }
 322:../../../os/hal/src/hal_buffers.c **** 
 323:../../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:../../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 656               		.loc 1 324 0
 657 0014 0191      		ld r16,Z+
 658 0016 10E0      		ldi r17,0
 659               	.LVL41:
 325:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 660               		.loc 1 325 0
 661 0018 F98B      		std Y+17,r31
 662 001a E88B      		std Y+16,r30
 326:../../../os/hal/src/hal_buffers.c **** 
 327:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:../../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 663               		.loc 1 329 0
 664 001c 8A89      		ldd r24,Y+18
 665 001e 9B89      		ldd r25,Y+19
 666 0020 E817      		cp r30,r24
 667 0022 F907      		cpc r31,r25
 668 0024 00F0      		brlo .L34
 669               	.LVL42:
 670               	.LBB182:
 671               	.LBB183:
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 672               		.loc 1 275 0
 673 0026 8A81      		ldd r24,Y+2
 674 0028 9B81      		ldd r25,Y+3
 675 002a 0197      		sbiw r24,1
 676 002c 9B83      		std Y+3,r25
 677 002e 8A83      		std Y+2,r24
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 678               		.loc 1 276 0
 679 0030 2E81      		ldd r18,Y+6
 680 0032 3F81      		ldd r19,Y+7
 681 0034 8A85      		ldd r24,Y+10
 682 0036 9B85      		ldd r25,Y+11
 683 0038 820F      		add r24,r18
 684 003a 931F      		adc r25,r19
 685 003c 9F83      		std Y+7,r25
 686 003e 8E83      		std Y+6,r24
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 687               		.loc 1 277 0
 688 0040 2885      		ldd r18,Y+8
 689 0042 3985      		ldd r19,Y+9
 690 0044 8217      		cp r24,r18
 691 0046 9307      		cpc r25,r19
 692 0048 00F0      		brlo .L35
 278:../../../os/hal/src/hal_buffers.c ****   }
 693               		.loc 1 278 0
 694 004a 8E85      		ldd r24,Y+14
 695 004c 9F85      		ldd r25,Y+15
 696 004e 9F83      		std Y+7,r25
 697 0050 8E83      		std Y+6,r24
 698               	.L35:
 282:../../../os/hal/src/hal_buffers.c **** 
 699               		.loc 1 282 0
 700 0052 198A      		std Y+17,__zero_reg__
 701 0054 188A      		std Y+16,__zero_reg__
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 702               		.loc 1 285 0
 703 0056 EC89      		ldd r30,Y+20
 704 0058 FD89      		ldd r31,Y+21
 705 005a 3097      		sbiw r30,0
 706 005c 01F0      		breq .L34
 286:../../../os/hal/src/hal_buffers.c ****   }
 707               		.loc 1 286 0
 708 005e CE01      		movw r24,r28
 709 0060 0995      		icall
 710               	.LVL43:
 711               	.L34:
 712               	.LBE183:
 713               	.LBE182:
 714               	.LBB184:
 715               	.LBB185:
 716               	.LBB186:
 717               		.loc 3 440 0
 718               	/* #APP */
 719               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 720 0062 7894      		sei
 721               	 ;  0 "" 2
 722               	/* #NOAPP */
 723               	.LBE186:
 724               	.LBE185:
 725               	.LBE184:
 330:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:../../../os/hal/src/hal_buffers.c ****   }
 332:../../../os/hal/src/hal_buffers.c **** 
 333:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:../../../os/hal/src/hal_buffers.c ****   return msg;
 726               		.loc 1 334 0
 727 0064 C801      		movw r24,r16
 728               	.LVL44:
 729               	.L32:
 730               	/* epilogue start */
 335:../../../os/hal/src/hal_buffers.c **** }
 731               		.loc 1 335 0
 732 0066 DF91      		pop r29
 733 0068 CF91      		pop r28
 734               	.LVL45:
 735 006a 1F91      		pop r17
 736 006c 0F91      		pop r16
 737 006e 0895      		ret
 738               	.LVL46:
 739               	.L40:
 316:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 740               		.loc 1 316 0
 741 0070 0E94 0000 		call ibqGetFullBufferTimeoutS
 742               	.LVL47:
 317:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 743               		.loc 1 317 0
 744 0074 0097      		sbiw r24,0
 745 0076 01F4      		brne .L31
 746 0078 E889      		ldd r30,Y+16
 747 007a F989      		ldd r31,Y+17
 748 007c 00C0      		rjmp .L30
 749               	.L31:
 750               	.LBB187:
 751               	.LBB188:
 752               	.LBB189:
 753               		.loc 3 440 0
 754               	/* #APP */
 755               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 756 007e 7894      		sei
 757               	 ;  0 "" 2
 758               	/* #NOAPP */
 759               	.LBE189:
 760               	.LBE188:
 761               	.LBE187:
 319:../../../os/hal/src/hal_buffers.c ****     }
 762               		.loc 1 319 0
 763 0080 00C0      		rjmp .L32
 764               		.cfi_endproc
 765               	.LFE154:
 767               		.section	.text.ibqReadTimeout,"ax",@progbits
 768               	.global	ibqReadTimeout
 770               	ibqReadTimeout:
 771               	.LFB155:
 336:../../../os/hal/src/hal_buffers.c **** 
 337:../../../os/hal/src/hal_buffers.c **** /**
 338:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:../../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:../../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 343:../../../os/hal/src/hal_buffers.c ****  *
 344:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:../../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:../../../os/hal/src/hal_buffers.c ****  *                      .
 353:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:../../../os/hal/src/hal_buffers.c ****  *
 356:../../../os/hal/src/hal_buffers.c ****  * @api
 357:../../../os/hal/src/hal_buffers.c ****  */
 358:../../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:../../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 772               		.loc 1 359 0
 773               		.cfi_startproc
 774               	.LVL48:
 775 0000 8F92      		push r8
 776               	.LCFI14:
 777               		.cfi_def_cfa_offset 3
 778               		.cfi_offset 8, -2
 779 0002 9F92      		push r9
 780               	.LCFI15:
 781               		.cfi_def_cfa_offset 4
 782               		.cfi_offset 9, -3
 783 0004 AF92      		push r10
 784               	.LCFI16:
 785               		.cfi_def_cfa_offset 5
 786               		.cfi_offset 10, -4
 787 0006 BF92      		push r11
 788               	.LCFI17:
 789               		.cfi_def_cfa_offset 6
 790               		.cfi_offset 11, -5
 791 0008 CF92      		push r12
 792               	.LCFI18:
 793               		.cfi_def_cfa_offset 7
 794               		.cfi_offset 12, -6
 795 000a DF92      		push r13
 796               	.LCFI19:
 797               		.cfi_def_cfa_offset 8
 798               		.cfi_offset 13, -7
 799 000c EF92      		push r14
 800               	.LCFI20:
 801               		.cfi_def_cfa_offset 9
 802               		.cfi_offset 14, -8
 803 000e FF92      		push r15
 804               	.LCFI21:
 805               		.cfi_def_cfa_offset 10
 806               		.cfi_offset 15, -9
 807 0010 0F93      		push r16
 808               	.LCFI22:
 809               		.cfi_def_cfa_offset 11
 810               		.cfi_offset 16, -10
 811 0012 1F93      		push r17
 812               	.LCFI23:
 813               		.cfi_def_cfa_offset 12
 814               		.cfi_offset 17, -11
 815 0014 CF93      		push r28
 816               	.LCFI24:
 817               		.cfi_def_cfa_offset 13
 818               		.cfi_offset 28, -12
 819 0016 DF93      		push r29
 820               	.LCFI25:
 821               		.cfi_def_cfa_offset 14
 822               		.cfi_offset 29, -13
 823               	/* prologue: function */
 824               	/* frame size = 0 */
 825               	/* stack size = 12 */
 826               	.L__stack_usage = 12
 827 0018 EC01      		movw r28,r24
 828 001a 6B01      		movw r12,r22
 829 001c 5A01      		movw r10,r20
 830 001e 4901      		movw r8,r18
 831               	.LVL49:
 832               	.LBB190:
 833               	.LBB191:
 834               	.LBB192:
 430:../../../os/common/ports/AVR/chcore.h **** }
 835               		.loc 3 430 0
 836               	/* #APP */
 837               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 838 0020 F894      		cli
 839               	 ;  0 "" 2
 840               	/* #NOAPP */
 841               	.LBE192:
 842               	.LBE191:
 843               	.LBE190:
 360:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 844               		.loc 1 360 0
 845 0022 E12C      		mov r14,__zero_reg__
 846 0024 F12C      		mov r15,__zero_reg__
 847 0026 00C0      		rjmp .L52
 848               	.LVL50:
 849               	.L57:
 850               	.LBB193:
 361:../../../os/hal/src/hal_buffers.c **** 
 362:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 363:../../../os/hal/src/hal_buffers.c **** 
 364:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 365:../../../os/hal/src/hal_buffers.c **** 
 366:../../../os/hal/src/hal_buffers.c ****   while (true) {
 367:../../../os/hal/src/hal_buffers.c ****     size_t size;
 368:../../../os/hal/src/hal_buffers.c **** 
 369:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 370:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 371:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 372:../../../os/hal/src/hal_buffers.c **** 
 373:../../../os/hal/src/hal_buffers.c ****       /* Getting a data buffer using the specified timeout.*/
 374:../../../os/hal/src/hal_buffers.c ****       msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 375:../../../os/hal/src/hal_buffers.c **** 
 376:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 377:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 378:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 379:../../../os/hal/src/hal_buffers.c ****         return r;
 380:../../../os/hal/src/hal_buffers.c ****       }
 381:../../../os/hal/src/hal_buffers.c ****     }
 382:../../../os/hal/src/hal_buffers.c **** 
 383:../../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 384:../../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 385:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 386:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 387:../../../os/hal/src/hal_buffers.c ****     }
 388:../../../os/hal/src/hal_buffers.c **** 
 389:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 390:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 391:../../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 392:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 393:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 851               		.loc 1 393 0
 852 0028 80E4      		ldi r24,lo8(64)
 853 002a FB01      		movw r30,r22
 854 002c D601      		movw r26,r12
 855               		0:
 856 002e 0190      		ld r0,Z+
 857 0030 0D92      		st X+,r0
 858 0032 8A95      		dec r24
 859 0034 01F4      		brne 0b
 394:../../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 860               		.loc 1 394 0
 861 0036 20E4      		ldi r18,64
 862 0038 C20E      		add r12,r18
 863 003a D11C      		adc r13,__zero_reg__
 864               	.LVL51:
 395:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 865               		.loc 1 395 0
 866 003c 8889      		ldd r24,Y+16
 867 003e 9989      		ldd r25,Y+17
 868 0040 805C      		subi r24,-64
 869 0042 9F4F      		sbci r25,-1
 870 0044 998B      		std Y+17,r25
 871 0046 888B      		std Y+16,r24
 396:../../../os/hal/src/hal_buffers.c ****       r         += (size_t)BUFFERS_CHUNKS_SIZE;
 872               		.loc 1 396 0
 873 0048 20E4      		ldi r18,64
 874 004a E20E      		add r14,r18
 875 004c F11C      		adc r15,__zero_reg__
 876               	.LVL52:
 877               	.L47:
 397:../../../os/hal/src/hal_buffers.c ****     }
 398:../../../os/hal/src/hal_buffers.c ****     else {
 399:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 400:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 401:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 402:../../../os/hal/src/hal_buffers.c ****       r         += size;
 403:../../../os/hal/src/hal_buffers.c ****     }
 404:../../../os/hal/src/hal_buffers.c **** 
 405:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 406:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 878               		.loc 1 406 0
 879 004e 2A89      		ldd r18,Y+18
 880 0050 3B89      		ldd r19,Y+19
 881 0052 8217      		cp r24,r18
 882 0054 9307      		cpc r25,r19
 883 0056 00F0      		brlo .L49
 884               	.LVL53:
 885               	.LBB194:
 886               	.LBB195:
 275:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 887               		.loc 1 275 0
 888 0058 8A81      		ldd r24,Y+2
 889 005a 9B81      		ldd r25,Y+3
 890 005c 0197      		sbiw r24,1
 891 005e 9B83      		std Y+3,r25
 892 0060 8A83      		std Y+2,r24
 276:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 893               		.loc 1 276 0
 894 0062 2E81      		ldd r18,Y+6
 895 0064 3F81      		ldd r19,Y+7
 896 0066 8A85      		ldd r24,Y+10
 897 0068 9B85      		ldd r25,Y+11
 898 006a 820F      		add r24,r18
 899 006c 931F      		adc r25,r19
 900 006e 9F83      		std Y+7,r25
 901 0070 8E83      		std Y+6,r24
 277:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 902               		.loc 1 277 0
 903 0072 2885      		ldd r18,Y+8
 904 0074 3985      		ldd r19,Y+9
 905 0076 8217      		cp r24,r18
 906 0078 9307      		cpc r25,r19
 907 007a 00F0      		brlo .L50
 278:../../../os/hal/src/hal_buffers.c ****   }
 908               		.loc 1 278 0
 909 007c 8E85      		ldd r24,Y+14
 910 007e 9F85      		ldd r25,Y+15
 911 0080 9F83      		std Y+7,r25
 912 0082 8E83      		std Y+6,r24
 913               	.L50:
 282:../../../os/hal/src/hal_buffers.c **** 
 914               		.loc 1 282 0
 915 0084 198A      		std Y+17,__zero_reg__
 916 0086 188A      		std Y+16,__zero_reg__
 285:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 917               		.loc 1 285 0
 918 0088 EC89      		ldd r30,Y+20
 919 008a FD89      		ldd r31,Y+21
 920 008c 3097      		sbiw r30,0
 921 008e 01F0      		breq .L49
 286:../../../os/hal/src/hal_buffers.c ****   }
 922               		.loc 1 286 0
 923 0090 CE01      		movw r24,r28
 924 0092 0995      		icall
 925               	.LVL54:
 926               	.L49:
 927               	.LBE195:
 928               	.LBE194:
 929               	.LBB196:
 930               	.LBB197:
 931               	.LBB198:
 932               		.loc 3 440 0
 933               	/* #APP */
 934               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 935 0094 7894      		sei
 936               	 ;  0 "" 2
 937               	/* #NOAPP */
 938               	.LBE198:
 939               	.LBE197:
 940               	.LBE196:
 407:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 408:../../../os/hal/src/hal_buffers.c ****     }
 409:../../../os/hal/src/hal_buffers.c **** 
 410:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 411:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 412:../../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 941               		.loc 1 412 0
 942 0096 EA14      		cp r14,r10
 943 0098 FB04      		cpc r15,r11
 944 009a 00F4      		brsh .L44
 945               	.LBB199:
 946               	.LBB200:
 947               	.LBB201:
 430:../../../os/common/ports/AVR/chcore.h **** }
 948               		.loc 3 430 0
 949               	/* #APP */
 950               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 951 009c F894      		cli
 952               	 ;  0 "" 2
 953               	.LVL55:
 954               	/* #NOAPP */
 955               	.L52:
 956               	.LBE201:
 957               	.LBE200:
 958               	.LBE199:
 370:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 959               		.loc 1 370 0
 960 009e 6889      		ldd r22,Y+16
 961 00a0 7989      		ldd r23,Y+17
 962 00a2 6115      		cp r22,__zero_reg__
 963 00a4 7105      		cpc r23,__zero_reg__
 964 00a6 01F0      		breq .L56
 965               	.L42:
 384:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 966               		.loc 1 384 0
 967 00a8 0A89      		ldd r16,Y+18
 968 00aa 1B89      		ldd r17,Y+19
 969               	.LVL56:
 385:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 970               		.loc 1 385 0
 971 00ac C501      		movw r24,r10
 972 00ae 8E19      		sub r24,r14
 973 00b0 9F09      		sbc r25,r15
 974 00b2 061B      		sub r16,r22
 975 00b4 170B      		sbc r17,r23
 976               	.LVL57:
 977 00b6 8017      		cp r24,r16
 978 00b8 9107      		cpc r25,r17
 979 00ba 00F4      		brsh .L45
 980 00bc 8C01      		movw r16,r24
 981               	.LVL58:
 982               	.L45:
 391:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 983               		.loc 1 391 0
 984 00be 0134      		cpi r16,65
 985 00c0 1105      		cpc r17,__zero_reg__
 986 00c2 00F0      		brlo .+2
 987 00c4 00C0      		rjmp .L57
 399:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 988               		.loc 1 399 0
 989 00c6 A801      		movw r20,r16
 990 00c8 C601      		movw r24,r12
 991 00ca 0E94 0000 		call memcpy
 992               	.LVL59:
 400:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 993               		.loc 1 400 0
 994 00ce C00E      		add r12,r16
 995 00d0 D11E      		adc r13,r17
 996               	.LVL60:
 401:../../../os/hal/src/hal_buffers.c ****       r         += size;
 997               		.loc 1 401 0
 998 00d2 8889      		ldd r24,Y+16
 999 00d4 9989      		ldd r25,Y+17
 1000 00d6 800F      		add r24,r16
 1001 00d8 911F      		adc r25,r17
 1002 00da 998B      		std Y+17,r25
 1003 00dc 888B      		std Y+16,r24
 402:../../../os/hal/src/hal_buffers.c ****     }
 1004               		.loc 1 402 0
 1005 00de E00E      		add r14,r16
 1006 00e0 F11E      		adc r15,r17
 1007               	.LVL61:
 1008 00e2 00C0      		rjmp .L47
 1009               	.LVL62:
 1010               	.L56:
 1011               	.LBB202:
 374:../../../os/hal/src/hal_buffers.c **** 
 1012               		.loc 1 374 0
 1013 00e4 B401      		movw r22,r8
 1014 00e6 CE01      		movw r24,r28
 1015 00e8 0E94 0000 		call ibqGetFullBufferTimeoutS
 1016               	.LVL63:
 377:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1017               		.loc 1 377 0
 1018 00ec 892B      		or r24,r25
 1019 00ee 01F4      		brne .L43
 1020 00f0 6889      		ldd r22,Y+16
 1021 00f2 7989      		ldd r23,Y+17
 1022 00f4 00C0      		rjmp .L42
 1023               	.L43:
 1024               	.LBB203:
 1025               	.LBB204:
 1026               	.LBB205:
 1027               		.loc 3 440 0
 1028               	/* #APP */
 1029               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1030 00f6 7894      		sei
 1031               	 ;  0 "" 2
 1032               	.LVL64:
 1033               	/* #NOAPP */
 1034               	.L44:
 1035               	.LBE205:
 1036               	.LBE204:
 1037               	.LBE203:
 1038               	.LBE202:
 1039               	.LBE193:
 413:../../../os/hal/src/hal_buffers.c ****       return r;
 414:../../../os/hal/src/hal_buffers.c ****     }
 415:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 416:../../../os/hal/src/hal_buffers.c ****   }
 417:../../../os/hal/src/hal_buffers.c **** }
 1040               		.loc 1 417 0
 1041 00f8 C701      		movw r24,r14
 1042               	/* epilogue start */
 1043 00fa DF91      		pop r29
 1044 00fc CF91      		pop r28
 1045               	.LVL65:
 1046 00fe 1F91      		pop r17
 1047 0100 0F91      		pop r16
 1048 0102 FF90      		pop r15
 1049 0104 EF90      		pop r14
 1050               	.LVL66:
 1051 0106 DF90      		pop r13
 1052 0108 CF90      		pop r12
 1053               	.LVL67:
 1054 010a BF90      		pop r11
 1055 010c AF90      		pop r10
 1056               	.LVL68:
 1057 010e 9F90      		pop r9
 1058 0110 8F90      		pop r8
 1059               	.LVL69:
 1060 0112 0895      		ret
 1061               		.cfi_endproc
 1062               	.LFE155:
 1064               		.section	.text.obqObjectInit,"ax",@progbits
 1065               	.global	obqObjectInit
 1067               	obqObjectInit:
 1068               	.LFB156:
 418:../../../os/hal/src/hal_buffers.c **** 
 419:../../../os/hal/src/hal_buffers.c **** /**
 420:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 421:../../../os/hal/src/hal_buffers.c ****  *
 422:../../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 423:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 424:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 425:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 426:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 427:../../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 428:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 429:../../../os/hal/src/hal_buffers.c ****  *
 430:../../../os/hal/src/hal_buffers.c ****  * @init
 431:../../../os/hal/src/hal_buffers.c ****  */
 432:../../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 433:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1069               		.loc 1 433 0
 1070               		.cfi_startproc
 1071               	.LVL70:
 1072 0000 CF92      		push r12
 1073               	.LCFI26:
 1074               		.cfi_def_cfa_offset 3
 1075               		.cfi_offset 12, -2
 1076 0002 DF92      		push r13
 1077               	.LCFI27:
 1078               		.cfi_def_cfa_offset 4
 1079               		.cfi_offset 13, -3
 1080 0004 EF92      		push r14
 1081               	.LCFI28:
 1082               		.cfi_def_cfa_offset 5
 1083               		.cfi_offset 14, -4
 1084 0006 FF92      		push r15
 1085               	.LCFI29:
 1086               		.cfi_def_cfa_offset 6
 1087               		.cfi_offset 15, -5
 1088 0008 0F93      		push r16
 1089               	.LCFI30:
 1090               		.cfi_def_cfa_offset 7
 1091               		.cfi_offset 16, -6
 1092 000a 1F93      		push r17
 1093               	.LCFI31:
 1094               		.cfi_def_cfa_offset 8
 1095               		.cfi_offset 17, -7
 1096               	/* prologue: function */
 1097               	/* frame size = 0 */
 1098               	/* stack size = 6 */
 1099               	.L__stack_usage = 6
 1100 000c FC01      		movw r30,r24
 1101               	.LVL71:
 1102               	.LBB206:
 1103               	.LBB207:
 866:../../../os/hal/osal/rt-nil/osal.h **** }
 1104               		.loc 2 866 0
 1105 000e 1082      		st Z,__zero_reg__
 1106               	.LVL72:
 1107               	.LBE207:
 1108               	.LBE206:
 434:../../../os/hal/src/hal_buffers.c **** 
 435:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 436:../../../os/hal/src/hal_buffers.c **** 
 437:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 438:../../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1109               		.loc 1 438 0
 1110 0010 6183      		std Z+1,r22
 439:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1111               		.loc 1 439 0
 1112 0012 1383      		std Z+3,r17
 1113 0014 0283      		std Z+2,r16
 440:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1114               		.loc 1 440 0
 1115 0016 5783      		std Z+7,r21
 1116 0018 4683      		std Z+6,r20
 441:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1117               		.loc 1 441 0
 1118 001a 5583      		std Z+5,r21
 1119 001c 4483      		std Z+4,r20
 442:../../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1120               		.loc 1 442 0
 1121 001e 2E5F      		subi r18,-2
 1122 0020 3F4F      		sbci r19,-1
 1123               	.LVL73:
 1124 0022 029F      		mul r16,r18
 1125 0024 C001      		movw r24,r0
 1126 0026 039F      		mul r16,r19
 1127 0028 900D      		add r25,r0
 1128 002a 129F      		mul r17,r18
 1129 002c 900D      		add r25,r0
 1130 002e 1124      		clr r1
 1131               	.LVL74:
 1132 0030 840F      		add r24,r20
 1133 0032 951F      		adc r25,r21
 1134 0034 9187      		std Z+9,r25
 1135 0036 8087      		std Z+8,r24
 443:../../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1136               		.loc 1 443 0
 1137 0038 3387      		std Z+11,r19
 1138 003a 2287      		std Z+10,r18
 444:../../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1139               		.loc 1 444 0
 1140 003c 1587      		std Z+13,r17
 1141 003e 0487      		std Z+12,r16
 445:../../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1142               		.loc 1 445 0
 1143 0040 5787      		std Z+15,r21
 1144 0042 4687      		std Z+14,r20
 446:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1145               		.loc 1 446 0
 1146 0044 118A      		std Z+17,__zero_reg__
 1147 0046 108A      		std Z+16,__zero_reg__
 447:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1148               		.loc 1 447 0
 1149 0048 138A      		std Z+19,__zero_reg__
 1150 004a 128A      		std Z+18,__zero_reg__
 448:../../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1151               		.loc 1 448 0
 1152 004c F58A      		std Z+21,r15
 1153 004e E48A      		std Z+20,r14
 449:../../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1154               		.loc 1 449 0
 1155 0050 D78A      		std Z+23,r13
 1156 0052 C68A      		std Z+22,r12
 1157               	/* epilogue start */
 450:../../../os/hal/src/hal_buffers.c **** }
 1158               		.loc 1 450 0
 1159 0054 1F91      		pop r17
 1160 0056 0F91      		pop r16
 1161               	.LVL75:
 1162 0058 FF90      		pop r15
 1163 005a EF90      		pop r14
 1164               	.LVL76:
 1165 005c DF90      		pop r13
 1166 005e CF90      		pop r12
 1167               	.LVL77:
 1168 0060 0895      		ret
 1169               		.cfi_endproc
 1170               	.LFE156:
 1172               		.section	.text.obqResetI,"ax",@progbits
 1173               	.global	obqResetI
 1175               	obqResetI:
 1176               	.LFB157:
 451:../../../os/hal/src/hal_buffers.c **** 
 452:../../../os/hal/src/hal_buffers.c **** /**
 453:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 454:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 455:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 456:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 457:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 458:../../../os/hal/src/hal_buffers.c ****  *
 459:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 460:../../../os/hal/src/hal_buffers.c ****  *
 461:../../../os/hal/src/hal_buffers.c ****  * @iclass
 462:../../../os/hal/src/hal_buffers.c ****  */
 463:../../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1177               		.loc 1 463 0
 1178               		.cfi_startproc
 1179               	.LVL78:
 1180               	/* prologue: function */
 1181               	/* frame size = 0 */
 1182               	/* stack size = 0 */
 1183               	.L__stack_usage = 0
 1184 0000 FC01      		movw r30,r24
 464:../../../os/hal/src/hal_buffers.c **** 
 465:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 466:../../../os/hal/src/hal_buffers.c **** 
 467:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1185               		.loc 1 467 0
 1186 0002 8485      		ldd r24,Z+12
 1187 0004 9585      		ldd r25,Z+13
 1188               	.LVL79:
 1189 0006 9383      		std Z+3,r25
 1190 0008 8283      		std Z+2,r24
 468:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1191               		.loc 1 468 0
 1192 000a 8685      		ldd r24,Z+14
 1193 000c 9785      		ldd r25,Z+15
 1194 000e 9783      		std Z+7,r25
 1195 0010 8683      		std Z+6,r24
 469:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1196               		.loc 1 469 0
 1197 0012 9583      		std Z+5,r25
 1198 0014 8483      		std Z+4,r24
 470:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1199               		.loc 1 470 0
 1200 0016 118A      		std Z+17,__zero_reg__
 1201 0018 108A      		std Z+16,__zero_reg__
 471:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1202               		.loc 1 471 0
 1203 001a 138A      		std Z+19,__zero_reg__
 1204 001c 128A      		std Z+18,__zero_reg__
 1205               	.LVL80:
 1206               	.LBB208:
 1207               	.LBB209:
 1208               		.loc 2 921 0
 1209 001e 6EEF      		ldi r22,lo8(-2)
 1210 0020 7FEF      		ldi r23,lo8(-1)
 1211 0022 CF01      		movw r24,r30
 1212 0024 0C94 0000 		jmp chThdDequeueAllI
 1213               	.LVL81:
 1214               	.LBE209:
 1215               	.LBE208:
 1216               		.cfi_endproc
 1217               	.LFE157:
 1219               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1220               	.global	obqGetFullBufferI
 1222               	obqGetFullBufferI:
 1223               	.LFB158:
 472:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 473:../../../os/hal/src/hal_buffers.c **** }
 474:../../../os/hal/src/hal_buffers.c **** 
 475:../../../os/hal/src/hal_buffers.c **** /**
 476:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 477:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 478:../../../os/hal/src/hal_buffers.c ****  *
 479:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 480:../../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 481:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 482:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 483:../../../os/hal/src/hal_buffers.c ****  *
 484:../../../os/hal/src/hal_buffers.c ****  * @iclass
 485:../../../os/hal/src/hal_buffers.c ****  */
 486:../../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 487:../../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1224               		.loc 1 487 0
 1225               		.cfi_startproc
 1226               	.LVL82:
 1227               	/* prologue: function */
 1228               	/* frame size = 0 */
 1229               	/* stack size = 0 */
 1230               	.L__stack_usage = 0
 1231 0000 FC01      		movw r30,r24
 488:../../../os/hal/src/hal_buffers.c **** 
 489:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 490:../../../os/hal/src/hal_buffers.c **** 
 491:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1232               		.loc 1 491 0
 1233 0002 2681      		ldd r18,Z+6
 1234 0004 3781      		ldd r19,Z+7
 1235 0006 8481      		ldd r24,Z+4
 1236 0008 9581      		ldd r25,Z+5
 1237               	.LVL83:
 1238 000a 8217      		cp r24,r18
 1239 000c 9307      		cpc r25,r19
 1240 000e 01F0      		breq .L67
 1241               	.L61:
 492:../../../os/hal/src/hal_buffers.c ****     return NULL;
 493:../../../os/hal/src/hal_buffers.c ****   }
 494:../../../os/hal/src/hal_buffers.c **** 
 495:../../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 496:../../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)(void *)obqp->brdptr);
 1242               		.loc 1 496 0
 1243 0010 F901      		movw r30,r18
 1244               	.LVL84:
 1245 0012 2191      		ld r18,Z+
 1246 0014 3191      		ld r19,Z+
 1247 0016 CF01      		movw r24,r30
 1248 0018 FB01      		movw r30,r22
 1249 001a 3183      		std Z+1,r19
 1250 001c 2083      		st Z,r18
 497:../../../os/hal/src/hal_buffers.c **** 
 498:../../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 499:../../../os/hal/src/hal_buffers.c **** }
 1251               		.loc 1 499 0
 1252 001e 0895      		ret
 1253               	.LVL85:
 1254               	.L67:
 491:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1255               		.loc 1 491 0 discriminator 1
 1256 0020 8281      		ldd r24,Z+2
 1257 0022 9381      		ldd r25,Z+3
 1258 0024 892B      		or r24,r25
 1259 0026 01F0      		breq .L61
 492:../../../os/hal/src/hal_buffers.c ****     return NULL;
 1260               		.loc 1 492 0
 1261 0028 80E0      		ldi r24,0
 1262 002a 90E0      		ldi r25,0
 1263 002c 0895      		ret
 1264               		.cfi_endproc
 1265               	.LFE158:
 1267               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1268               	.global	obqReleaseEmptyBufferI
 1270               	obqReleaseEmptyBufferI:
 1271               	.LFB159:
 500:../../../os/hal/src/hal_buffers.c **** 
 501:../../../os/hal/src/hal_buffers.c **** /**
 502:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 503:../../../os/hal/src/hal_buffers.c ****  *
 504:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 505:../../../os/hal/src/hal_buffers.c ****  *
 506:../../../os/hal/src/hal_buffers.c ****  * @iclass
 507:../../../os/hal/src/hal_buffers.c ****  */
 508:../../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1272               		.loc 1 508 0
 1273               		.cfi_startproc
 1274               	.LVL86:
 1275               	/* prologue: function */
 1276               	/* frame size = 0 */
 1277               	/* stack size = 0 */
 1278               	.L__stack_usage = 0
 1279 0000 FC01      		movw r30,r24
 509:../../../os/hal/src/hal_buffers.c **** 
 510:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 511:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 512:../../../os/hal/src/hal_buffers.c **** 
 513:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 514:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1280               		.loc 1 514 0
 1281 0002 8281      		ldd r24,Z+2
 1282 0004 9381      		ldd r25,Z+3
 1283               	.LVL87:
 1284 0006 0196      		adiw r24,1
 1285 0008 9383      		std Z+3,r25
 1286 000a 8283      		std Z+2,r24
 515:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1287               		.loc 1 515 0
 1288 000c 2681      		ldd r18,Z+6
 1289 000e 3781      		ldd r19,Z+7
 1290 0010 8285      		ldd r24,Z+10
 1291 0012 9385      		ldd r25,Z+11
 1292 0014 820F      		add r24,r18
 1293 0016 931F      		adc r25,r19
 1294 0018 9783      		std Z+7,r25
 1295 001a 8683      		std Z+6,r24
 516:../../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1296               		.loc 1 516 0
 1297 001c 2085      		ldd r18,Z+8
 1298 001e 3185      		ldd r19,Z+9
 1299 0020 8217      		cp r24,r18
 1300 0022 9307      		cpc r25,r19
 1301 0024 00F0      		brlo .L69
 517:../../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1302               		.loc 1 517 0
 1303 0026 8685      		ldd r24,Z+14
 1304 0028 9785      		ldd r25,Z+15
 1305 002a 9783      		std Z+7,r25
 1306 002c 8683      		std Z+6,r24
 1307               	.L69:
 1308               	.LVL88:
 1309               	.LBB210:
 1310               	.LBB211:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 1311               		.loc 2 908 0
 1312 002e 60E0      		ldi r22,0
 1313 0030 70E0      		ldi r23,0
 1314 0032 CF01      		movw r24,r30
 1315 0034 0C94 0000 		jmp chThdDequeueNextI
 1316               	.LVL89:
 1317               	.LBE211:
 1318               	.LBE210:
 1319               		.cfi_endproc
 1320               	.LFE159:
 1322               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1323               	.global	obqGetEmptyBufferTimeoutS
 1325               	obqGetEmptyBufferTimeoutS:
 1326               	.LFB161:
 518:../../../os/hal/src/hal_buffers.c ****   }
 519:../../../os/hal/src/hal_buffers.c **** 
 520:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 521:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 522:../../../os/hal/src/hal_buffers.c **** }
 523:../../../os/hal/src/hal_buffers.c **** 
 524:../../../os/hal/src/hal_buffers.c **** /**
 525:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 526:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 527:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 528:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 529:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 530:../../../os/hal/src/hal_buffers.c ****  *
 531:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 532:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 533:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 534:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 535:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 536:../../../os/hal/src/hal_buffers.c ****  *                      .
 537:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 538:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 539:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 540:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 541:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 542:../../../os/hal/src/hal_buffers.c ****  *
 543:../../../os/hal/src/hal_buffers.c ****  * @api
 544:../../../os/hal/src/hal_buffers.c ****  */
 545:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 546:../../../os/hal/src/hal_buffers.c ****                                sysinterval_t timeout) {
 547:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 548:../../../os/hal/src/hal_buffers.c **** 
 549:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 550:../../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 551:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 552:../../../os/hal/src/hal_buffers.c **** 
 553:../../../os/hal/src/hal_buffers.c ****   return msg;
 554:../../../os/hal/src/hal_buffers.c **** }
 555:../../../os/hal/src/hal_buffers.c **** 
 556:../../../os/hal/src/hal_buffers.c **** /**
 557:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 558:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 559:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 560:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 561:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 562:../../../os/hal/src/hal_buffers.c ****  *
 563:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 564:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 565:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 566:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 567:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 568:../../../os/hal/src/hal_buffers.c ****  *                      .
 569:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 570:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 571:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 572:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 573:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 574:../../../os/hal/src/hal_buffers.c ****  *
 575:../../../os/hal/src/hal_buffers.c ****  * @sclass
 576:../../../os/hal/src/hal_buffers.c ****  */
 577:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 578:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1327               		.loc 1 578 0
 1328               		.cfi_startproc
 1329               	.LVL90:
 1330 0000 0F93      		push r16
 1331               	.LCFI32:
 1332               		.cfi_def_cfa_offset 3
 1333               		.cfi_offset 16, -2
 1334 0002 1F93      		push r17
 1335               	.LCFI33:
 1336               		.cfi_def_cfa_offset 4
 1337               		.cfi_offset 17, -3
 1338 0004 CF93      		push r28
 1339               	.LCFI34:
 1340               		.cfi_def_cfa_offset 5
 1341               		.cfi_offset 28, -4
 1342 0006 DF93      		push r29
 1343               	.LCFI35:
 1344               		.cfi_def_cfa_offset 6
 1345               		.cfi_offset 29, -5
 1346               	/* prologue: function */
 1347               	/* frame size = 0 */
 1348               	/* stack size = 4 */
 1349               	.L__stack_usage = 4
 1350 0008 EC01      		movw r28,r24
 1351 000a 8B01      		movw r16,r22
 579:../../../os/hal/src/hal_buffers.c **** 
 580:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 581:../../../os/hal/src/hal_buffers.c **** 
 582:../../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1352               		.loc 1 582 0
 1353 000c 00C0      		rjmp .L71
 1354               	.LVL91:
 1355               	.L73:
 1356               	.LBB220:
 583:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1357               		.loc 1 583 0
 1358 000e 8981      		ldd r24,Y+1
 1359 0010 8111      		cpse r24,__zero_reg__
 1360 0012 00C0      		rjmp .L74
 1361               	.LVL92:
 1362               	.LBB221:
 1363               	.LBB222:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1364               		.loc 2 895 0
 1365 0014 B801      		movw r22,r16
 1366 0016 CE01      		movw r24,r28
 1367 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1368               	.LVL93:
 1369               	.LBE222:
 1370               	.LBE221:
 584:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 585:../../../os/hal/src/hal_buffers.c ****     }
 586:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 587:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1371               		.loc 1 587 0
 1372 001c 97FD      		sbrc r25,7
 1373 001e 00C0      		rjmp .L72
 1374               	.L71:
 1375               	.LBE220:
 582:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1376               		.loc 1 582 0
 1377 0020 8A81      		ldd r24,Y+2
 1378 0022 9B81      		ldd r25,Y+3
 1379 0024 892B      		or r24,r25
 1380 0026 01F0      		breq .L73
 1381               	.LVL94:
 1382               	.LBB223:
 1383               	.LBB224:
 588:../../../os/hal/src/hal_buffers.c ****       return msg;
 589:../../../os/hal/src/hal_buffers.c ****     }
 590:../../../os/hal/src/hal_buffers.c ****   }
 591:../../../os/hal/src/hal_buffers.c **** 
 592:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 593:../../../os/hal/src/hal_buffers.c **** 
 594:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 595:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1384               		.loc 1 595 0
 1385 0028 2C81      		ldd r18,Y+4
 1386 002a 3D81      		ldd r19,Y+5
 1387 002c C901      		movw r24,r18
 1388 002e 0296      		adiw r24,2
 1389 0030 998B      		std Y+17,r25
 1390 0032 888B      		std Y+16,r24
 596:../../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1391               		.loc 1 596 0
 1392 0034 8A85      		ldd r24,Y+10
 1393 0036 9B85      		ldd r25,Y+11
 1394 0038 820F      		add r24,r18
 1395 003a 931F      		adc r25,r19
 1396 003c 9B8B      		std Y+19,r25
 1397 003e 8A8B      		std Y+18,r24
 1398               	.LVL95:
 1399 0040 80E0      		ldi r24,0
 1400 0042 90E0      		ldi r25,0
 1401               	.L72:
 1402               	/* epilogue start */
 1403               	.LBE224:
 1404               	.LBE223:
 597:../../../os/hal/src/hal_buffers.c **** 
 598:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 599:../../../os/hal/src/hal_buffers.c **** }
 1405               		.loc 1 599 0
 1406 0044 DF91      		pop r29
 1407 0046 CF91      		pop r28
 1408               	.LVL96:
 1409 0048 1F91      		pop r17
 1410 004a 0F91      		pop r16
 1411               	.LVL97:
 1412 004c 0895      		ret
 1413               	.LVL98:
 1414               	.L74:
 1415               	.LBB225:
 584:../../../os/hal/src/hal_buffers.c ****     }
 1416               		.loc 1 584 0
 1417 004e 8EEF      		ldi r24,lo8(-2)
 1418 0050 9FEF      		ldi r25,lo8(-1)
 1419               	/* epilogue start */
 1420               	.LBE225:
 1421               		.loc 1 599 0
 1422 0052 DF91      		pop r29
 1423 0054 CF91      		pop r28
 1424               	.LVL99:
 1425 0056 1F91      		pop r17
 1426 0058 0F91      		pop r16
 1427               	.LVL100:
 1428 005a 0895      		ret
 1429               		.cfi_endproc
 1430               	.LFE161:
 1432               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1433               	.global	obqGetEmptyBufferTimeout
 1435               	obqGetEmptyBufferTimeout:
 1436               	.LFB160:
 546:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1437               		.loc 1 546 0
 1438               		.cfi_startproc
 1439               	.LVL101:
 1440               	/* prologue: function */
 1441               	/* frame size = 0 */
 1442               	/* stack size = 0 */
 1443               	.L__stack_usage = 0
 1444               	.LBB226:
 1445               	.LBB227:
 1446               	.LBB228:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1447               		.loc 3 430 0
 1448               	/* #APP */
 1449               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1450 0000 F894      		cli
 1451               	 ;  0 "" 2
 1452               	/* #NOAPP */
 1453               	.LBE228:
 1454               	.LBE227:
 1455               	.LBE226:
 550:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1456               		.loc 1 550 0
 1457 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1458               	.LVL102:
 1459               	.LBB229:
 1460               	.LBB230:
 1461               	.LBB231:
 1462               		.loc 3 440 0
 1463               	/* #APP */
 1464               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1465 0006 7894      		sei
 1466               	 ;  0 "" 2
 1467               	/* #NOAPP */
 1468               	.LBE231:
 1469               	.LBE230:
 1470               	.LBE229:
 554:../../../os/hal/src/hal_buffers.c **** 
 1471               		.loc 1 554 0
 1472 0008 0895      		ret
 1473               		.cfi_endproc
 1474               	.LFE160:
 1476               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1477               	.global	obqPostFullBuffer
 1479               	obqPostFullBuffer:
 1480               	.LFB162:
 600:../../../os/hal/src/hal_buffers.c **** 
 601:../../../os/hal/src/hal_buffers.c **** /**
 602:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 603:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 604:../../../os/hal/src/hal_buffers.c ****  *
 605:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 606:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 607:../../../os/hal/src/hal_buffers.c ****  *
 608:../../../os/hal/src/hal_buffers.c ****  * @api
 609:../../../os/hal/src/hal_buffers.c ****  */
 610:../../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 1481               		.loc 1 610 0
 1482               		.cfi_startproc
 1483               	.LVL103:
 1484               	/* prologue: function */
 1485               	/* frame size = 0 */
 1486               	/* stack size = 0 */
 1487               	.L__stack_usage = 0
 1488 0000 DC01      		movw r26,r24
 1489               	.LBB232:
 1490               	.LBB233:
 1491               	.LBB234:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1492               		.loc 3 430 0
 1493               	/* #APP */
 1494               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1495 0002 F894      		cli
 1496               	 ;  0 "" 2
 1497               	.LVL104:
 1498               	/* #NOAPP */
 1499               	.LBE234:
 1500               	.LBE233:
 1501               	.LBE232:
 1502               	.LBB235:
 1503               	.LBB236:
 611:../../../os/hal/src/hal_buffers.c **** 
 612:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 613:../../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 614:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 615:../../../os/hal/src/hal_buffers.c **** }
 616:../../../os/hal/src/hal_buffers.c **** 
 617:../../../os/hal/src/hal_buffers.c **** /**
 618:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 619:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 620:../../../os/hal/src/hal_buffers.c ****  *
 621:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 622:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 623:../../../os/hal/src/hal_buffers.c ****  *
 624:../../../os/hal/src/hal_buffers.c ****  * @sclass
 625:../../../os/hal/src/hal_buffers.c ****  */
 626:../../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 627:../../../os/hal/src/hal_buffers.c **** 
 628:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 629:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 630:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 631:../../../os/hal/src/hal_buffers.c **** 
 632:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 633:../../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)obqp->bwrptr) = size;
 1504               		.loc 1 633 0
 1505 0004 1496      		adiw r26,4
 1506 0006 ED91      		ld r30,X+
 1507 0008 FC91      		ld r31,X
 1508 000a 1597      		sbiw r26,4+1
 1509 000c 7183      		std Z+1,r23
 1510 000e 6083      		st Z,r22
 634:../../../os/hal/src/hal_buffers.c **** 
 635:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1511               		.loc 1 636 0
 1512 0010 1296      		adiw r26,2
 1513 0012 2D91      		ld r18,X+
 1514 0014 3C91      		ld r19,X
 1515 0016 1397      		sbiw r26,2+1
 1516 0018 2150      		subi r18,1
 1517 001a 3109      		sbc r19,__zero_reg__
 1518 001c 1396      		adiw r26,2+1
 1519 001e 3C93      		st X,r19
 1520 0020 2E93      		st -X,r18
 1521 0022 1297      		sbiw r26,2
 637:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1522               		.loc 1 637 0
 1523 0024 1A96      		adiw r26,10
 1524 0026 8D91      		ld r24,X+
 1525 0028 9C91      		ld r25,X
 1526 002a 1B97      		sbiw r26,10+1
 1527               	.LVL105:
 1528 002c 8E0F      		add r24,r30
 1529 002e 9F1F      		adc r25,r31
 1530 0030 1596      		adiw r26,4+1
 1531 0032 9C93      		st X,r25
 1532 0034 8E93      		st -X,r24
 1533 0036 1497      		sbiw r26,4
 638:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1534               		.loc 1 638 0
 1535 0038 1896      		adiw r26,8
 1536 003a 2D91      		ld r18,X+
 1537 003c 3C91      		ld r19,X
 1538 003e 1997      		sbiw r26,8+1
 1539 0040 8217      		cp r24,r18
 1540 0042 9307      		cpc r25,r19
 1541 0044 00F0      		brlo .L77
 639:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1542               		.loc 1 639 0
 1543 0046 1E96      		adiw r26,14
 1544 0048 8D91      		ld r24,X+
 1545 004a 9C91      		ld r25,X
 1546 004c 1F97      		sbiw r26,14+1
 1547 004e 1596      		adiw r26,4+1
 1548 0050 9C93      		st X,r25
 1549 0052 8E93      		st -X,r24
 1550 0054 1497      		sbiw r26,4
 1551               	.L77:
 640:../../../os/hal/src/hal_buffers.c ****   }
 641:../../../os/hal/src/hal_buffers.c **** 
 642:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 643:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1552               		.loc 1 643 0
 1553 0056 5196      		adiw r26,16+1
 1554 0058 1C92      		st X,__zero_reg__
 1555 005a 1E92      		st -X,__zero_reg__
 1556 005c 5097      		sbiw r26,16
 644:../../../os/hal/src/hal_buffers.c **** 
 645:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 646:../../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1557               		.loc 1 646 0
 1558 005e 5496      		adiw r26,20
 1559 0060 ED91      		ld r30,X+
 1560 0062 FC91      		ld r31,X
 1561 0064 5597      		sbiw r26,20+1
 1562 0066 3097      		sbiw r30,0
 1563 0068 01F0      		breq .L78
 1564 006a CD01      		movw r24,r26
 647:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1565               		.loc 1 647 0
 1566 006c 0995      		icall
 1567               	.LVL106:
 1568               	.L78:
 1569               	.LBE236:
 1570               	.LBE235:
 1571               	.LBB237:
 1572               	.LBB238:
 1573               	.LBB239:
 1574               		.loc 3 440 0
 1575               	/* #APP */
 1576               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1577 006e 7894      		sei
 1578               	 ;  0 "" 2
 1579               	/* #NOAPP */
 1580 0070 0895      		ret
 1581               	.LBE239:
 1582               	.LBE238:
 1583               	.LBE237:
 1584               		.cfi_endproc
 1585               	.LFE162:
 1587               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1588               	.global	obqPostFullBufferS
 1590               	obqPostFullBufferS:
 1591               	.LFB163:
 626:../../../os/hal/src/hal_buffers.c **** 
 1592               		.loc 1 626 0
 1593               		.cfi_startproc
 1594               	.LVL107:
 1595               	/* prologue: function */
 1596               	/* frame size = 0 */
 1597               	/* stack size = 0 */
 1598               	.L__stack_usage = 0
 1599 0000 DC01      		movw r26,r24
 633:../../../os/hal/src/hal_buffers.c **** 
 1600               		.loc 1 633 0
 1601 0002 1496      		adiw r26,4
 1602 0004 ED91      		ld r30,X+
 1603 0006 FC91      		ld r31,X
 1604 0008 1597      		sbiw r26,4+1
 1605 000a 7183      		std Z+1,r23
 1606 000c 6083      		st Z,r22
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1607               		.loc 1 636 0
 1608 000e 1296      		adiw r26,2
 1609 0010 2D91      		ld r18,X+
 1610 0012 3C91      		ld r19,X
 1611 0014 1397      		sbiw r26,2+1
 1612 0016 2150      		subi r18,1
 1613 0018 3109      		sbc r19,__zero_reg__
 1614 001a 1396      		adiw r26,2+1
 1615 001c 3C93      		st X,r19
 1616 001e 2E93      		st -X,r18
 1617 0020 1297      		sbiw r26,2
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1618               		.loc 1 637 0
 1619 0022 1A96      		adiw r26,10
 1620 0024 8D91      		ld r24,X+
 1621 0026 9C91      		ld r25,X
 1622 0028 1B97      		sbiw r26,10+1
 1623               	.LVL108:
 1624 002a 8E0F      		add r24,r30
 1625 002c 9F1F      		adc r25,r31
 1626 002e 1596      		adiw r26,4+1
 1627 0030 9C93      		st X,r25
 1628 0032 8E93      		st -X,r24
 1629 0034 1497      		sbiw r26,4
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1630               		.loc 1 638 0
 1631 0036 1896      		adiw r26,8
 1632 0038 2D91      		ld r18,X+
 1633 003a 3C91      		ld r19,X
 1634 003c 1997      		sbiw r26,8+1
 1635 003e 8217      		cp r24,r18
 1636 0040 9307      		cpc r25,r19
 1637 0042 00F0      		brlo .L83
 639:../../../os/hal/src/hal_buffers.c ****   }
 1638               		.loc 1 639 0
 1639 0044 1E96      		adiw r26,14
 1640 0046 8D91      		ld r24,X+
 1641 0048 9C91      		ld r25,X
 1642 004a 1F97      		sbiw r26,14+1
 1643 004c 1596      		adiw r26,4+1
 1644 004e 9C93      		st X,r25
 1645 0050 8E93      		st -X,r24
 1646 0052 1497      		sbiw r26,4
 1647               	.L83:
 643:../../../os/hal/src/hal_buffers.c **** 
 1648               		.loc 1 643 0
 1649 0054 5196      		adiw r26,16+1
 1650 0056 1C92      		st X,__zero_reg__
 1651 0058 1E92      		st -X,__zero_reg__
 1652 005a 5097      		sbiw r26,16
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1653               		.loc 1 646 0
 1654 005c 5496      		adiw r26,20
 1655 005e ED91      		ld r30,X+
 1656 0060 FC91      		ld r31,X
 1657 0062 5597      		sbiw r26,20+1
 1658 0064 3097      		sbiw r30,0
 1659 0066 01F0      		breq .L82
 1660               		.loc 1 647 0
 1661 0068 CD01      		movw r24,r26
 1662 006a 0994      		ijmp
 1663               	.LVL109:
 1664               	.L82:
 1665 006c 0895      		ret
 1666               		.cfi_endproc
 1667               	.LFE163:
 1669               		.section	.text.obqPutTimeout,"ax",@progbits
 1670               	.global	obqPutTimeout
 1672               	obqPutTimeout:
 1673               	.LFB164:
 648:../../../os/hal/src/hal_buffers.c ****   }
 649:../../../os/hal/src/hal_buffers.c **** }
 650:../../../os/hal/src/hal_buffers.c **** 
 651:../../../os/hal/src/hal_buffers.c **** /**
 652:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 653:../../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 654:../../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 655:../../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 656:../../../os/hal/src/hal_buffers.c ****  *
 657:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 658:../../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 659:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 660:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 661:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 662:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 663:../../../os/hal/src/hal_buffers.c ****  *                      .
 664:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 665:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 666:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 667:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 668:../../../os/hal/src/hal_buffers.c ****  *
 669:../../../os/hal/src/hal_buffers.c ****  * @api
 670:../../../os/hal/src/hal_buffers.c ****  */
 671:../../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 672:../../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1674               		.loc 1 672 0
 1675               		.cfi_startproc
 1676               	.LVL110:
 1677 0000 1F93      		push r17
 1678               	.LCFI36:
 1679               		.cfi_def_cfa_offset 3
 1680               		.cfi_offset 17, -2
 1681 0002 CF93      		push r28
 1682               	.LCFI37:
 1683               		.cfi_def_cfa_offset 4
 1684               		.cfi_offset 28, -3
 1685 0004 DF93      		push r29
 1686               	.LCFI38:
 1687               		.cfi_def_cfa_offset 5
 1688               		.cfi_offset 29, -4
 1689               	/* prologue: function */
 1690               	/* frame size = 0 */
 1691               	/* stack size = 3 */
 1692               	.L__stack_usage = 3
 1693 0006 EC01      		movw r28,r24
 1694 0008 162F      		mov r17,r22
 1695               	.LBB240:
 1696               	.LBB241:
 1697               	.LBB242:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1698               		.loc 3 430 0
 1699               	/* #APP */
 1700               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1701 000a F894      		cli
 1702               	 ;  0 "" 2
 1703               	/* #NOAPP */
 1704               	.LBE242:
 1705               	.LBE241:
 1706               	.LBE240:
 673:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 674:../../../os/hal/src/hal_buffers.c **** 
 675:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 676:../../../os/hal/src/hal_buffers.c **** 
 677:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 678:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1707               		.loc 1 678 0
 1708 000c E889      		ldd r30,Y+16
 1709 000e F989      		ldd r31,Y+17
 1710 0010 3097      		sbiw r30,0
 1711 0012 01F0      		breq .L96
 1712               	.LVL111:
 1713               	.L86:
 679:../../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 680:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 681:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 682:../../../os/hal/src/hal_buffers.c ****       return msg;
 683:../../../os/hal/src/hal_buffers.c ****     }
 684:../../../os/hal/src/hal_buffers.c ****   }
 685:../../../os/hal/src/hal_buffers.c **** 
 686:../../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 687:../../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1714               		.loc 1 687 0
 1715 0014 1083      		st Z,r17
 688:../../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1716               		.loc 1 688 0
 1717 0016 8889      		ldd r24,Y+16
 1718 0018 9989      		ldd r25,Y+17
 1719 001a 0196      		adiw r24,1
 1720 001c 998B      		std Y+17,r25
 1721 001e 888B      		std Y+16,r24
 689:../../../os/hal/src/hal_buffers.c **** 
 690:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 691:../../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 692:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1722               		.loc 1 692 0
 1723 0020 2A89      		ldd r18,Y+18
 1724 0022 3B89      		ldd r19,Y+19
 1725 0024 8217      		cp r24,r18
 1726 0026 9307      		cpc r25,r19
 1727 0028 00F0      		brlo .L90
 1728               	.LVL112:
 1729               	.LBB243:
 1730               	.LBB244:
 633:../../../os/hal/src/hal_buffers.c **** 
 1731               		.loc 1 633 0
 1732 002a EC81      		ldd r30,Y+4
 1733 002c FD81      		ldd r31,Y+5
 1734 002e 2A85      		ldd r18,Y+10
 1735 0030 3B85      		ldd r19,Y+11
 1736 0032 2250      		subi r18,2
 1737 0034 3109      		sbc r19,__zero_reg__
 1738               	.LVL113:
 1739 0036 3183      		std Z+1,r19
 1740 0038 2083      		st Z,r18
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1741               		.loc 1 636 0
 1742 003a 2A81      		ldd r18,Y+2
 1743 003c 3B81      		ldd r19,Y+3
 1744               	.LVL114:
 1745 003e 2150      		subi r18,1
 1746 0040 3109      		sbc r19,__zero_reg__
 1747 0042 3B83      		std Y+3,r19
 1748 0044 2A83      		std Y+2,r18
 1749               	.LVL115:
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1750               		.loc 1 637 0
 1751 0046 8A85      		ldd r24,Y+10
 1752 0048 9B85      		ldd r25,Y+11
 1753 004a 8E0F      		add r24,r30
 1754 004c 9F1F      		adc r25,r31
 1755 004e 9D83      		std Y+5,r25
 1756 0050 8C83      		std Y+4,r24
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1757               		.loc 1 638 0
 1758 0052 2885      		ldd r18,Y+8
 1759 0054 3985      		ldd r19,Y+9
 1760 0056 8217      		cp r24,r18
 1761 0058 9307      		cpc r25,r19
 1762 005a 00F0      		brlo .L91
 639:../../../os/hal/src/hal_buffers.c ****   }
 1763               		.loc 1 639 0
 1764 005c 8E85      		ldd r24,Y+14
 1765 005e 9F85      		ldd r25,Y+15
 1766 0060 9D83      		std Y+5,r25
 1767 0062 8C83      		std Y+4,r24
 1768               	.L91:
 643:../../../os/hal/src/hal_buffers.c **** 
 1769               		.loc 1 643 0
 1770 0064 198A      		std Y+17,__zero_reg__
 1771 0066 188A      		std Y+16,__zero_reg__
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1772               		.loc 1 646 0
 1773 0068 EC89      		ldd r30,Y+20
 1774 006a FD89      		ldd r31,Y+21
 1775 006c 3097      		sbiw r30,0
 1776 006e 01F0      		breq .L90
 647:../../../os/hal/src/hal_buffers.c ****   }
 1777               		.loc 1 647 0
 1778 0070 CE01      		movw r24,r28
 1779 0072 0995      		icall
 1780               	.LVL116:
 1781               	.L90:
 1782               	.LBE244:
 1783               	.LBE243:
 1784               	.LBB245:
 1785               	.LBB246:
 1786               	.LBB247:
 1787               		.loc 3 440 0
 1788               	/* #APP */
 1789               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1790 0074 7894      		sei
 1791               	 ;  0 "" 2
 1792               	/* #NOAPP */
 1793               	.LBE247:
 1794               	.LBE246:
 1795               	.LBE245:
 693:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 694:../../../os/hal/src/hal_buffers.c ****   }
 695:../../../os/hal/src/hal_buffers.c **** 
 696:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 697:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1796               		.loc 1 697 0
 1797 0076 80E0      		ldi r24,0
 1798 0078 90E0      		ldi r25,0
 1799               	.L88:
 1800               	/* epilogue start */
 698:../../../os/hal/src/hal_buffers.c **** }
 1801               		.loc 1 698 0
 1802 007a DF91      		pop r29
 1803 007c CF91      		pop r28
 1804               	.LVL117:
 1805 007e 1F91      		pop r17
 1806               	.LVL118:
 1807 0080 0895      		ret
 1808               	.LVL119:
 1809               	.L96:
 679:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1810               		.loc 1 679 0
 1811 0082 BA01      		movw r22,r20
 1812 0084 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1813               	.LVL120:
 680:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1814               		.loc 1 680 0
 1815 0088 0097      		sbiw r24,0
 1816 008a 01F4      		brne .L87
 1817 008c E889      		ldd r30,Y+16
 1818 008e F989      		ldd r31,Y+17
 1819 0090 00C0      		rjmp .L86
 1820               	.L87:
 1821               	.LBB248:
 1822               	.LBB249:
 1823               	.LBB250:
 1824               		.loc 3 440 0
 1825               	/* #APP */
 1826               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1827 0092 7894      		sei
 1828               	 ;  0 "" 2
 1829               	/* #NOAPP */
 1830               	.LBE250:
 1831               	.LBE249:
 1832               	.LBE248:
 682:../../../os/hal/src/hal_buffers.c ****     }
 1833               		.loc 1 682 0
 1834 0094 00C0      		rjmp .L88
 1835               		.cfi_endproc
 1836               	.LFE164:
 1838               		.section	.text.obqWriteTimeout,"ax",@progbits
 1839               	.global	obqWriteTimeout
 1841               	obqWriteTimeout:
 1842               	.LFB165:
 699:../../../os/hal/src/hal_buffers.c **** 
 700:../../../os/hal/src/hal_buffers.c **** /**
 701:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 702:../../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 703:../../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 704:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 705:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 706:../../../os/hal/src/hal_buffers.c ****  *
 707:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 708:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 709:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 710:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 711:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 712:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 713:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 714:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 715:../../../os/hal/src/hal_buffers.c ****  *                      .
 716:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 717:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 718:../../../os/hal/src/hal_buffers.c ****  *
 719:../../../os/hal/src/hal_buffers.c ****  * @api
 720:../../../os/hal/src/hal_buffers.c ****  */
 721:../../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 722:../../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1843               		.loc 1 722 0
 1844               		.cfi_startproc
 1845               	.LVL121:
 1846 0000 8F92      		push r8
 1847               	.LCFI39:
 1848               		.cfi_def_cfa_offset 3
 1849               		.cfi_offset 8, -2
 1850 0002 9F92      		push r9
 1851               	.LCFI40:
 1852               		.cfi_def_cfa_offset 4
 1853               		.cfi_offset 9, -3
 1854 0004 AF92      		push r10
 1855               	.LCFI41:
 1856               		.cfi_def_cfa_offset 5
 1857               		.cfi_offset 10, -4
 1858 0006 BF92      		push r11
 1859               	.LCFI42:
 1860               		.cfi_def_cfa_offset 6
 1861               		.cfi_offset 11, -5
 1862 0008 CF92      		push r12
 1863               	.LCFI43:
 1864               		.cfi_def_cfa_offset 7
 1865               		.cfi_offset 12, -6
 1866 000a DF92      		push r13
 1867               	.LCFI44:
 1868               		.cfi_def_cfa_offset 8
 1869               		.cfi_offset 13, -7
 1870 000c EF92      		push r14
 1871               	.LCFI45:
 1872               		.cfi_def_cfa_offset 9
 1873               		.cfi_offset 14, -8
 1874 000e FF92      		push r15
 1875               	.LCFI46:
 1876               		.cfi_def_cfa_offset 10
 1877               		.cfi_offset 15, -9
 1878 0010 0F93      		push r16
 1879               	.LCFI47:
 1880               		.cfi_def_cfa_offset 11
 1881               		.cfi_offset 16, -10
 1882 0012 1F93      		push r17
 1883               	.LCFI48:
 1884               		.cfi_def_cfa_offset 12
 1885               		.cfi_offset 17, -11
 1886 0014 CF93      		push r28
 1887               	.LCFI49:
 1888               		.cfi_def_cfa_offset 13
 1889               		.cfi_offset 28, -12
 1890 0016 DF93      		push r29
 1891               	.LCFI50:
 1892               		.cfi_def_cfa_offset 14
 1893               		.cfi_offset 29, -13
 1894               	/* prologue: function */
 1895               	/* frame size = 0 */
 1896               	/* stack size = 12 */
 1897               	.L__stack_usage = 12
 1898 0018 EC01      		movw r28,r24
 1899 001a 6B01      		movw r12,r22
 1900 001c 5A01      		movw r10,r20
 1901 001e 4901      		movw r8,r18
 1902               	.LVL122:
 1903               	.LBB251:
 1904               	.LBB252:
 1905               	.LBB253:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1906               		.loc 3 430 0
 1907               	/* #APP */
 1908               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1909 0020 F894      		cli
 1910               	 ;  0 "" 2
 1911               	/* #NOAPP */
 1912               	.LBE253:
 1913               	.LBE252:
 1914               	.LBE251:
 723:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 1915               		.loc 1 723 0
 1916 0022 E12C      		mov r14,__zero_reg__
 1917 0024 F12C      		mov r15,__zero_reg__
 1918 0026 00C0      		rjmp .L108
 1919               	.LVL123:
 1920               	.L113:
 1921               	.LBB254:
 724:../../../os/hal/src/hal_buffers.c **** 
 725:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 726:../../../os/hal/src/hal_buffers.c **** 
 727:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 728:../../../os/hal/src/hal_buffers.c **** 
 729:../../../os/hal/src/hal_buffers.c ****   while (true) {
 730:../../../os/hal/src/hal_buffers.c ****     size_t size;
 731:../../../os/hal/src/hal_buffers.c **** 
 732:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 733:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 734:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 735:../../../os/hal/src/hal_buffers.c **** 
 736:../../../os/hal/src/hal_buffers.c ****       /* Getting an empty buffer using the specified timeout.*/
 737:../../../os/hal/src/hal_buffers.c ****       msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 738:../../../os/hal/src/hal_buffers.c **** 
 739:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 740:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 741:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 742:../../../os/hal/src/hal_buffers.c ****         return w;
 743:../../../os/hal/src/hal_buffers.c ****       }
 744:../../../os/hal/src/hal_buffers.c ****     }
 745:../../../os/hal/src/hal_buffers.c **** 
 746:../../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 747:../../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 748:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 749:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 750:../../../os/hal/src/hal_buffers.c ****     }
 751:../../../os/hal/src/hal_buffers.c **** 
 752:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 753:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 754:../../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 755:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 756:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 1922               		.loc 1 756 0
 1923 0028 20E4      		ldi r18,lo8(64)
 1924 002a F601      		movw r30,r12
 1925 002c DC01      		movw r26,r24
 1926               		0:
 1927 002e 0190      		ld r0,Z+
 1928 0030 0D92      		st X+,r0
 1929 0032 2A95      		dec r18
 1930 0034 01F4      		brne 0b
 757:../../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 1931               		.loc 1 757 0
 1932 0036 20E4      		ldi r18,64
 1933 0038 C20E      		add r12,r18
 1934 003a D11C      		adc r13,__zero_reg__
 1935               	.LVL124:
 758:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 1936               		.loc 1 758 0
 1937 003c 8889      		ldd r24,Y+16
 1938 003e 9989      		ldd r25,Y+17
 1939 0040 805C      		subi r24,-64
 1940 0042 9F4F      		sbci r25,-1
 1941 0044 998B      		std Y+17,r25
 1942 0046 888B      		std Y+16,r24
 759:../../../os/hal/src/hal_buffers.c ****       w         += (size_t)BUFFERS_CHUNKS_SIZE;
 1943               		.loc 1 759 0
 1944 0048 20E4      		ldi r18,64
 1945 004a E20E      		add r14,r18
 1946 004c F11C      		adc r15,__zero_reg__
 1947               	.LVL125:
 1948               	.L103:
 760:../../../os/hal/src/hal_buffers.c ****     }
 761:../../../os/hal/src/hal_buffers.c ****     else {
 762:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 763:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 764:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 765:../../../os/hal/src/hal_buffers.c ****       w         += size;
 766:../../../os/hal/src/hal_buffers.c ****     }
 767:../../../os/hal/src/hal_buffers.c **** 
 768:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 769:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 1949               		.loc 1 769 0
 1950 004e 2A89      		ldd r18,Y+18
 1951 0050 3B89      		ldd r19,Y+19
 1952 0052 8217      		cp r24,r18
 1953 0054 9307      		cpc r25,r19
 1954 0056 00F0      		brlo .L105
 1955               	.LVL126:
 1956               	.LBB255:
 1957               	.LBB256:
 633:../../../os/hal/src/hal_buffers.c **** 
 1958               		.loc 1 633 0
 1959 0058 EC81      		ldd r30,Y+4
 1960 005a FD81      		ldd r31,Y+5
 1961 005c 2A85      		ldd r18,Y+10
 1962 005e 3B85      		ldd r19,Y+11
 1963 0060 2250      		subi r18,2
 1964 0062 3109      		sbc r19,__zero_reg__
 1965               	.LVL127:
 1966 0064 3183      		std Z+1,r19
 1967 0066 2083      		st Z,r18
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1968               		.loc 1 636 0
 1969 0068 2A81      		ldd r18,Y+2
 1970 006a 3B81      		ldd r19,Y+3
 1971               	.LVL128:
 1972 006c 2150      		subi r18,1
 1973 006e 3109      		sbc r19,__zero_reg__
 1974 0070 3B83      		std Y+3,r19
 1975 0072 2A83      		std Y+2,r18
 1976               	.LVL129:
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1977               		.loc 1 637 0
 1978 0074 8A85      		ldd r24,Y+10
 1979 0076 9B85      		ldd r25,Y+11
 1980 0078 8E0F      		add r24,r30
 1981 007a 9F1F      		adc r25,r31
 1982 007c 9D83      		std Y+5,r25
 1983 007e 8C83      		std Y+4,r24
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1984               		.loc 1 638 0
 1985 0080 2885      		ldd r18,Y+8
 1986 0082 3985      		ldd r19,Y+9
 1987 0084 8217      		cp r24,r18
 1988 0086 9307      		cpc r25,r19
 1989 0088 00F0      		brlo .L106
 639:../../../os/hal/src/hal_buffers.c ****   }
 1990               		.loc 1 639 0
 1991 008a 8E85      		ldd r24,Y+14
 1992 008c 9F85      		ldd r25,Y+15
 1993 008e 9D83      		std Y+5,r25
 1994 0090 8C83      		std Y+4,r24
 1995               	.L106:
 643:../../../os/hal/src/hal_buffers.c **** 
 1996               		.loc 1 643 0
 1997 0092 198A      		std Y+17,__zero_reg__
 1998 0094 188A      		std Y+16,__zero_reg__
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1999               		.loc 1 646 0
 2000 0096 EC89      		ldd r30,Y+20
 2001 0098 FD89      		ldd r31,Y+21
 2002 009a 3097      		sbiw r30,0
 2003 009c 01F0      		breq .L105
 647:../../../os/hal/src/hal_buffers.c ****   }
 2004               		.loc 1 647 0
 2005 009e CE01      		movw r24,r28
 2006 00a0 0995      		icall
 2007               	.LVL130:
 2008               	.L105:
 2009               	.LBE256:
 2010               	.LBE255:
 2011               	.LBB257:
 2012               	.LBB258:
 2013               	.LBB259:
 2014               		.loc 3 440 0
 2015               	/* #APP */
 2016               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 2017 00a2 7894      		sei
 2018               	 ;  0 "" 2
 2019               	/* #NOAPP */
 2020               	.LBE259:
 2021               	.LBE258:
 2022               	.LBE257:
 770:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 771:../../../os/hal/src/hal_buffers.c ****     }
 772:../../../os/hal/src/hal_buffers.c **** 
 773:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 774:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 775:../../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2023               		.loc 1 775 0
 2024 00a4 EA14      		cp r14,r10
 2025 00a6 FB04      		cpc r15,r11
 2026 00a8 00F4      		brsh .L100
 2027               	.LBB260:
 2028               	.LBB261:
 2029               	.LBB262:
 430:../../../os/common/ports/AVR/chcore.h **** }
 2030               		.loc 3 430 0
 2031               	/* #APP */
 2032               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 2033 00aa F894      		cli
 2034               	 ;  0 "" 2
 2035               	.LVL131:
 2036               	/* #NOAPP */
 2037               	.L108:
 2038               	.LBE262:
 2039               	.LBE261:
 2040               	.LBE260:
 733:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2041               		.loc 1 733 0
 2042 00ac 8889      		ldd r24,Y+16
 2043 00ae 9989      		ldd r25,Y+17
 2044 00b0 0097      		sbiw r24,0
 2045 00b2 01F0      		breq .L112
 2046               	.L98:
 747:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2047               		.loc 1 747 0
 2048 00b4 0A89      		ldd r16,Y+18
 2049 00b6 1B89      		ldd r17,Y+19
 2050               	.LVL132:
 748:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 2051               		.loc 1 748 0
 2052 00b8 9501      		movw r18,r10
 2053 00ba 2E19      		sub r18,r14
 2054 00bc 3F09      		sbc r19,r15
 2055 00be 081B      		sub r16,r24
 2056 00c0 190B      		sbc r17,r25
 2057               	.LVL133:
 2058 00c2 2017      		cp r18,r16
 2059 00c4 3107      		cpc r19,r17
 2060 00c6 00F4      		brsh .L101
 2061 00c8 8901      		movw r16,r18
 2062               	.LVL134:
 2063               	.L101:
 754:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2064               		.loc 1 754 0
 2065 00ca 0134      		cpi r16,65
 2066 00cc 1105      		cpc r17,__zero_reg__
 2067 00ce 00F0      		brlo .+2
 2068 00d0 00C0      		rjmp .L113
 762:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 2069               		.loc 1 762 0
 2070 00d2 A801      		movw r20,r16
 2071 00d4 B601      		movw r22,r12
 2072 00d6 0E94 0000 		call memcpy
 2073               	.LVL135:
 763:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2074               		.loc 1 763 0
 2075 00da C00E      		add r12,r16
 2076 00dc D11E      		adc r13,r17
 2077               	.LVL136:
 764:../../../os/hal/src/hal_buffers.c ****       w         += size;
 2078               		.loc 1 764 0
 2079 00de 8889      		ldd r24,Y+16
 2080 00e0 9989      		ldd r25,Y+17
 2081 00e2 800F      		add r24,r16
 2082 00e4 911F      		adc r25,r17
 2083 00e6 998B      		std Y+17,r25
 2084 00e8 888B      		std Y+16,r24
 765:../../../os/hal/src/hal_buffers.c ****     }
 2085               		.loc 1 765 0
 2086 00ea E00E      		add r14,r16
 2087 00ec F11E      		adc r15,r17
 2088               	.LVL137:
 2089 00ee 00C0      		rjmp .L103
 2090               	.LVL138:
 2091               	.L112:
 2092               	.LBB263:
 737:../../../os/hal/src/hal_buffers.c **** 
 2093               		.loc 1 737 0
 2094 00f0 B401      		movw r22,r8
 2095 00f2 CE01      		movw r24,r28
 2096 00f4 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2097               	.LVL139:
 740:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2098               		.loc 1 740 0
 2099 00f8 892B      		or r24,r25
 2100 00fa 01F4      		brne .L99
 2101 00fc 8889      		ldd r24,Y+16
 2102 00fe 9989      		ldd r25,Y+17
 2103               	.LVL140:
 2104 0100 00C0      		rjmp .L98
 2105               	.LVL141:
 2106               	.L99:
 2107               	.LBB264:
 2108               	.LBB265:
 2109               	.LBB266:
 2110               		.loc 3 440 0
 2111               	/* #APP */
 2112               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 2113 0102 7894      		sei
 2114               	 ;  0 "" 2
 2115               	.LVL142:
 2116               	/* #NOAPP */
 2117               	.L100:
 2118               	.LBE266:
 2119               	.LBE265:
 2120               	.LBE264:
 2121               	.LBE263:
 2122               	.LBE254:
 776:../../../os/hal/src/hal_buffers.c ****       return w;
 777:../../../os/hal/src/hal_buffers.c ****     }
 778:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 779:../../../os/hal/src/hal_buffers.c ****   }
 780:../../../os/hal/src/hal_buffers.c **** }
 2123               		.loc 1 780 0
 2124 0104 C701      		movw r24,r14
 2125               	/* epilogue start */
 2126 0106 DF91      		pop r29
 2127 0108 CF91      		pop r28
 2128               	.LVL143:
 2129 010a 1F91      		pop r17
 2130 010c 0F91      		pop r16
 2131 010e FF90      		pop r15
 2132 0110 EF90      		pop r14
 2133               	.LVL144:
 2134 0112 DF90      		pop r13
 2135 0114 CF90      		pop r12
 2136               	.LVL145:
 2137 0116 BF90      		pop r11
 2138 0118 AF90      		pop r10
 2139               	.LVL146:
 2140 011a 9F90      		pop r9
 2141 011c 8F90      		pop r8
 2142               	.LVL147:
 2143 011e 0895      		ret
 2144               		.cfi_endproc
 2145               	.LFE165:
 2147               		.section	.text.obqTryFlushI,"ax",@progbits
 2148               	.global	obqTryFlushI
 2150               	obqTryFlushI:
 2151               	.LFB166:
 781:../../../os/hal/src/hal_buffers.c **** 
 782:../../../os/hal/src/hal_buffers.c **** /**
 783:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 784:../../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 785:../../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 786:../../../os/hal/src/hal_buffers.c ****  *          returned instead.
 787:../../../os/hal/src/hal_buffers.c ****  *
 788:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 789:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 790:../../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 791:../../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 792:../../../os/hal/src/hal_buffers.c ****  *
 793:../../../os/hal/src/hal_buffers.c ****  * @iclass
 794:../../../os/hal/src/hal_buffers.c ****  */
 795:../../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2152               		.loc 1 795 0
 2153               		.cfi_startproc
 2154               	.LVL148:
 2155               	/* prologue: function */
 2156               	/* frame size = 0 */
 2157               	/* stack size = 0 */
 2158               	.L__stack_usage = 0
 2159 0000 FC01      		movw r30,r24
 796:../../../os/hal/src/hal_buffers.c **** 
 797:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 798:../../../os/hal/src/hal_buffers.c **** 
 799:../../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 800:../../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 801:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2160               		.loc 1 801 0
 2161 0002 A481      		ldd r26,Z+4
 2162 0004 B581      		ldd r27,Z+5
 2163 0006 8681      		ldd r24,Z+6
 2164 0008 9781      		ldd r25,Z+7
 2165               	.LVL149:
 2166 000a A817      		cp r26,r24
 2167 000c B907      		cpc r27,r25
 2168 000e 01F0      		breq .L123
 2169               	.L122:
 802:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 803:../../../os/hal/src/hal_buffers.c **** 
 804:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 805:../../../os/hal/src/hal_buffers.c **** 
 806:../../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 807:../../../os/hal/src/hal_buffers.c ****       *((size_t *)(void *)obqp->bwrptr) = size;
 808:../../../os/hal/src/hal_buffers.c **** 
 809:../../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 810:../../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 811:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 812:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 813:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 814:../../../os/hal/src/hal_buffers.c ****       }
 815:../../../os/hal/src/hal_buffers.c **** 
 816:../../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 817:../../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 818:../../../os/hal/src/hal_buffers.c **** 
 819:../../../os/hal/src/hal_buffers.c ****       return true;
 820:../../../os/hal/src/hal_buffers.c ****     }
 821:../../../os/hal/src/hal_buffers.c ****   }
 822:../../../os/hal/src/hal_buffers.c ****   return false;
 2170               		.loc 1 822 0
 2171 0010 80E0      		ldi r24,0
 823:../../../os/hal/src/hal_buffers.c **** }
 2172               		.loc 1 823 0
 2173 0012 0895      		ret
 2174               	.L123:
 801:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2175               		.loc 1 801 0 discriminator 1
 2176 0014 8281      		ldd r24,Z+2
 2177 0016 9381      		ldd r25,Z+3
 2178 0018 892B      		or r24,r25
 2179 001a 01F0      		breq .L122
 801:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2180               		.loc 1 801 0 is_stmt 0
 2181 001c 8089      		ldd r24,Z+16
 2182 001e 9189      		ldd r25,Z+17
 2183 0020 0097      		sbiw r24,0
 2184 0022 01F0      		breq .L122
 2185               	.LBB267:
 802:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2186               		.loc 1 802 0 is_stmt 1
 2187 0024 0297      		sbiw r24,2
 2188 0026 8A1B      		sub r24,r26
 2189 0028 9B0B      		sbc r25,r27
 2190               	.LVL150:
 804:../../../os/hal/src/hal_buffers.c **** 
 2191               		.loc 1 804 0
 2192 002a 01F0      		breq .L122
 807:../../../os/hal/src/hal_buffers.c **** 
 2193               		.loc 1 807 0
 2194 002c 1196      		adiw r26,1
 2195 002e 9C93      		st X,r25
 2196 0030 8E93      		st -X,r24
 810:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2197               		.loc 1 810 0
 2198 0032 8281      		ldd r24,Z+2
 2199 0034 9381      		ldd r25,Z+3
 2200               	.LVL151:
 2201 0036 0197      		sbiw r24,1
 2202 0038 9383      		std Z+3,r25
 2203 003a 8283      		std Z+2,r24
 2204               	.LVL152:
 811:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2205               		.loc 1 811 0
 2206 003c 8285      		ldd r24,Z+10
 2207 003e 9385      		ldd r25,Z+11
 2208 0040 A80F      		add r26,r24
 2209 0042 B91F      		adc r27,r25
 2210               	.LVL153:
 2211 0044 B583      		std Z+5,r27
 2212 0046 A483      		std Z+4,r26
 2213               	.LVL154:
 812:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2214               		.loc 1 812 0
 2215 0048 8085      		ldd r24,Z+8
 2216 004a 9185      		ldd r25,Z+9
 2217 004c A817      		cp r26,r24
 2218 004e B907      		cpc r27,r25
 2219 0050 00F0      		brlo .L117
 813:../../../os/hal/src/hal_buffers.c ****       }
 2220               		.loc 1 813 0
 2221 0052 8685      		ldd r24,Z+14
 2222 0054 9785      		ldd r25,Z+15
 2223 0056 9583      		std Z+5,r25
 2224 0058 8483      		std Z+4,r24
 2225               	.L117:
 817:../../../os/hal/src/hal_buffers.c **** 
 2226               		.loc 1 817 0
 2227 005a 118A      		std Z+17,__zero_reg__
 2228 005c 108A      		std Z+16,__zero_reg__
 819:../../../os/hal/src/hal_buffers.c ****     }
 2229               		.loc 1 819 0
 2230 005e 81E0      		ldi r24,lo8(1)
 2231 0060 0895      		ret
 2232               	.LBE267:
 2233               		.cfi_endproc
 2234               	.LFE166:
 2236               		.section	.text.obqFlush,"ax",@progbits
 2237               	.global	obqFlush
 2239               	obqFlush:
 2240               	.LFB167:
 824:../../../os/hal/src/hal_buffers.c **** 
 825:../../../os/hal/src/hal_buffers.c **** /**
 826:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 827:../../../os/hal/src/hal_buffers.c ****  *
 828:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 829:../../../os/hal/src/hal_buffers.c ****  *
 830:../../../os/hal/src/hal_buffers.c ****  * @api
 831:../../../os/hal/src/hal_buffers.c ****  */
 832:../../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2241               		.loc 1 832 0
 2242               		.cfi_startproc
 2243               	.LVL155:
 2244               	/* prologue: function */
 2245               	/* frame size = 0 */
 2246               	/* stack size = 0 */
 2247               	.L__stack_usage = 0
 2248 0000 DC01      		movw r26,r24
 2249               	.LBB268:
 2250               	.LBB269:
 2251               	.LBB270:
 430:../../../os/common/ports/AVR/chcore.h **** }
 2252               		.loc 3 430 0
 2253               	/* #APP */
 2254               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 2255 0002 F894      		cli
 2256               	 ;  0 "" 2
 2257               	/* #NOAPP */
 2258               	.LBE270:
 2259               	.LBE269:
 2260               	.LBE268:
 833:../../../os/hal/src/hal_buffers.c **** 
 834:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 835:../../../os/hal/src/hal_buffers.c **** 
 836:../../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 837:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2261               		.loc 1 837 0
 2262 0004 5096      		adiw r26,16
 2263 0006 8D91      		ld r24,X+
 2264 0008 9C91      		ld r25,X
 2265 000a 5197      		sbiw r26,16+1
 2266               	.LVL156:
 2267 000c 0097      		sbiw r24,0
 2268 000e 01F0      		breq .L126
 2269               	.LBB271:
 838:../../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2270               		.loc 1 838 0
 2271 0010 1496      		adiw r26,4
 2272 0012 ED91      		ld r30,X+
 2273 0014 FC91      		ld r31,X
 2274 0016 1597      		sbiw r26,4+1
 2275 0018 0297      		sbiw r24,2
 2276 001a 8E1B      		sub r24,r30
 2277 001c 9F0B      		sbc r25,r31
 2278               	.LVL157:
 839:../../../os/hal/src/hal_buffers.c **** 
 840:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2279               		.loc 1 840 0
 2280 001e 01F0      		breq .L126
 2281               	.LVL158:
 2282               	.LBB272:
 2283               	.LBB273:
 633:../../../os/hal/src/hal_buffers.c **** 
 2284               		.loc 1 633 0
 2285 0020 9183      		std Z+1,r25
 2286 0022 8083      		st Z,r24
 636:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2287               		.loc 1 636 0
 2288 0024 1296      		adiw r26,2
 2289 0026 8D91      		ld r24,X+
 2290 0028 9C91      		ld r25,X
 2291 002a 1397      		sbiw r26,2+1
 2292               	.LVL159:
 2293 002c 0197      		sbiw r24,1
 2294 002e 1396      		adiw r26,2+1
 2295 0030 9C93      		st X,r25
 2296 0032 8E93      		st -X,r24
 2297 0034 1297      		sbiw r26,2
 2298               	.LVL160:
 637:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2299               		.loc 1 637 0
 2300 0036 1A96      		adiw r26,10
 2301 0038 8D91      		ld r24,X+
 2302 003a 9C91      		ld r25,X
 2303 003c 1B97      		sbiw r26,10+1
 2304 003e E80F      		add r30,r24
 2305 0040 F91F      		adc r31,r25
 2306               	.LVL161:
 2307 0042 1596      		adiw r26,4+1
 2308 0044 FC93      		st X,r31
 2309 0046 EE93      		st -X,r30
 2310 0048 1497      		sbiw r26,4
 2311               	.LVL162:
 638:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2312               		.loc 1 638 0
 2313 004a 1896      		adiw r26,8
 2314 004c 8D91      		ld r24,X+
 2315 004e 9C91      		ld r25,X
 2316 0050 1997      		sbiw r26,8+1
 2317 0052 E817      		cp r30,r24
 2318 0054 F907      		cpc r31,r25
 2319 0056 00F0      		brlo .L128
 639:../../../os/hal/src/hal_buffers.c ****   }
 2320               		.loc 1 639 0
 2321 0058 1E96      		adiw r26,14
 2322 005a 8D91      		ld r24,X+
 2323 005c 9C91      		ld r25,X
 2324 005e 1F97      		sbiw r26,14+1
 2325 0060 1596      		adiw r26,4+1
 2326 0062 9C93      		st X,r25
 2327 0064 8E93      		st -X,r24
 2328 0066 1497      		sbiw r26,4
 2329               	.L128:
 643:../../../os/hal/src/hal_buffers.c **** 
 2330               		.loc 1 643 0
 2331 0068 5196      		adiw r26,16+1
 2332 006a 1C92      		st X,__zero_reg__
 2333 006c 1E92      		st -X,__zero_reg__
 2334 006e 5097      		sbiw r26,16
 646:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2335               		.loc 1 646 0
 2336 0070 5496      		adiw r26,20
 2337 0072 ED91      		ld r30,X+
 2338 0074 FC91      		ld r31,X
 2339 0076 5597      		sbiw r26,20+1
 2340 0078 3097      		sbiw r30,0
 2341 007a 01F0      		breq .L126
 2342 007c CD01      		movw r24,r26
 647:../../../os/hal/src/hal_buffers.c ****   }
 2343               		.loc 1 647 0
 2344 007e 0995      		icall
 2345               	.LVL163:
 2346               	.L126:
 2347               	.LBE273:
 2348               	.LBE272:
 2349               	.LBE271:
 2350               	.LBB274:
 2351               	.LBB275:
 2352               	.LBB276:
 2353               		.loc 3 440 0
 2354               	/* #APP */
 2355               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 2356 0080 7894      		sei
 2357               	 ;  0 "" 2
 2358               	/* #NOAPP */
 2359 0082 0895      		ret
 2360               	.LBE276:
 2361               	.LBE275:
 2362               	.LBE274:
 2363               		.cfi_endproc
 2364               	.LFE167:
 2366               		.text
 2367               	.Letext0:
 2368               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2369               		.file 5 "/usr/lib/avr/include/stdint.h"
 2370               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2371               		.file 7 "../../../os/nil/include/ch.h"
 2372               		.file 8 "../../../os/hal/include/hal_buffers.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cc7kJKOY.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc7kJKOY.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc7kJKOY.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc7kJKOY.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc7kJKOY.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc7kJKOY.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cc7kJKOY.s:123    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cc7kJKOY.s:168    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cc7kJKOY.s:209    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cc7kJKOY.s:270    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cc7kJKOY.s:381    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cc7kJKOY.s:426    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cc7kJKOY.s:533    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cc7kJKOY.s:611    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cc7kJKOY.s:770    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cc7kJKOY.s:1067   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cc7kJKOY.s:1175   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cc7kJKOY.s:1222   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cc7kJKOY.s:1270   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cc7kJKOY.s:1325   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cc7kJKOY.s:1435   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cc7kJKOY.s:1479   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cc7kJKOY.s:1590   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cc7kJKOY.s:1672   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cc7kJKOY.s:1841   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cc7kJKOY.s:2150   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cc7kJKOY.s:2239   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
