   1               		.file	"chmsg.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMsgSend,"ax",@progbits
  11               	.global	chMsgSend
  13               	chMsgSend:
  14               	.LFB98:
  15               		.file 1 "../../../os/nil/src/chmsg.c"
   1:../../../os/nil/src/chmsg.c **** /*
   2:../../../os/nil/src/chmsg.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/nil/src/chmsg.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/nil/src/chmsg.c **** 
   5:../../../os/nil/src/chmsg.c ****     This file is part of ChibiOS.
   6:../../../os/nil/src/chmsg.c **** 
   7:../../../os/nil/src/chmsg.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/nil/src/chmsg.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/nil/src/chmsg.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/nil/src/chmsg.c **** 
  11:../../../os/nil/src/chmsg.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/nil/src/chmsg.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/nil/src/chmsg.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/nil/src/chmsg.c ****     GNU General Public License for more details.
  15:../../../os/nil/src/chmsg.c **** 
  16:../../../os/nil/src/chmsg.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/nil/src/chmsg.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/nil/src/chmsg.c **** */
  19:../../../os/nil/src/chmsg.c **** 
  20:../../../os/nil/src/chmsg.c **** /**
  21:../../../os/nil/src/chmsg.c ****  * @file    nil/src/chmsg.c
  22:../../../os/nil/src/chmsg.c ****  * @brief   Nil RTOS synchronous messages source file.
  23:../../../os/nil/src/chmsg.c ****  *
  24:../../../os/nil/src/chmsg.c ****  * @addtogroup NIL_MESSAGES
  25:../../../os/nil/src/chmsg.c ****  * @{
  26:../../../os/nil/src/chmsg.c ****  */
  27:../../../os/nil/src/chmsg.c **** 
  28:../../../os/nil/src/chmsg.c **** #include "ch.h"
  29:../../../os/nil/src/chmsg.c **** 
  30:../../../os/nil/src/chmsg.c **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
  31:../../../os/nil/src/chmsg.c **** 
  32:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  33:../../../os/nil/src/chmsg.c **** /* Module local definitions.                                                 */
  34:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  35:../../../os/nil/src/chmsg.c **** 
  36:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  37:../../../os/nil/src/chmsg.c **** /* Module exported variables.                                                */
  38:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  39:../../../os/nil/src/chmsg.c **** 
  40:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  41:../../../os/nil/src/chmsg.c **** /* Module local variables.                                                   */
  42:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  43:../../../os/nil/src/chmsg.c **** 
  44:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  45:../../../os/nil/src/chmsg.c **** /* Module local functions.                                                   */
  46:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  47:../../../os/nil/src/chmsg.c **** 
  48:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  49:../../../os/nil/src/chmsg.c **** /* Module interrupt handlers.                                                */
  50:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  51:../../../os/nil/src/chmsg.c **** 
  52:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  53:../../../os/nil/src/chmsg.c **** /* Module exported functions.                                                */
  54:../../../os/nil/src/chmsg.c **** /*===========================================================================*/
  55:../../../os/nil/src/chmsg.c **** 
  56:../../../os/nil/src/chmsg.c **** /**
  57:../../../os/nil/src/chmsg.c ****  * @brief   Sends a message to the specified thread.
  58:../../../os/nil/src/chmsg.c ****  * @details The sender is stopped until the receiver executes a
  59:../../../os/nil/src/chmsg.c ****  *          @p chMsgRelease()after receiving the message.
  60:../../../os/nil/src/chmsg.c ****  *
  61:../../../os/nil/src/chmsg.c ****  * @param[in] tp        the pointer to the thread
  62:../../../os/nil/src/chmsg.c ****  * @param[in] msg       the message
  63:../../../os/nil/src/chmsg.c ****  * @return              The answer message from @p chMsgRelease().
  64:../../../os/nil/src/chmsg.c ****  *
  65:../../../os/nil/src/chmsg.c ****  * @api
  66:../../../os/nil/src/chmsg.c ****  */
  67:../../../os/nil/src/chmsg.c **** msg_t chMsgSend(thread_t *tp, msg_t msg) {
  16               		.loc 1 67 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  68:../../../os/nil/src/chmsg.c ****   thread_t *ctp = nil.current;
  23               		.loc 1 68 0
  24 0000 E091 0000 		lds r30,nil
  25 0004 F091 0000 		lds r31,nil+1
  26               	.LVL1:
  27               	.LBB18:
  28               	.LBB19:
  29               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  30               		.loc 2 430 0
  31               	/* #APP */
  32               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  33 0008 F894      		cli
  34               	 ;  0 "" 2
  35               	/* #NOAPP */
  36               	.LBE19:
  37               	.LBE18:
  69:../../../os/nil/src/chmsg.c **** 
  70:../../../os/nil/src/chmsg.c ****   chDbgCheck(tp != NULL);
  71:../../../os/nil/src/chmsg.c **** 
  72:../../../os/nil/src/chmsg.c ****   chSysLock();
  73:../../../os/nil/src/chmsg.c ****   ctp->sntmsg = msg;
  38               		.loc 1 73 0
  39 000a 7187      		std Z+9,r23
  40 000c 6087      		std Z+8,r22
  74:../../../os/nil/src/chmsg.c ****   ctp->u1.tp =  tp;
  41               		.loc 1 74 0
  42 000e 9483      		std Z+4,r25
  43 0010 8383      		std Z+3,r24
  75:../../../os/nil/src/chmsg.c ****   if (NIL_THD_IS_WTMSG(tp)) {
  44               		.loc 1 75 0
  45 0012 DC01      		movw r26,r24
  46 0014 1296      		adiw r26,2
  47 0016 2C91      		ld r18,X
  48 0018 2A30      		cpi r18,lo8(10)
  49 001a 01F0      		breq .L4
  76:../../../os/nil/src/chmsg.c ****     (void) chSchReadyI(tp, (msg_t)ctp);
  77:../../../os/nil/src/chmsg.c ****   }
  78:../../../os/nil/src/chmsg.c ****   msg = chSchGoSleepTimeoutS(NIL_STATE_SNDMSGQ, TIME_INFINITE);
  50               		.loc 1 78 0
  51 001c 60E0      		ldi r22,0
  52 001e 70E0      		ldi r23,0
  53               	.LVL2:
  54 0020 88E0      		ldi r24,lo8(8)
  55               	.LVL3:
  56 0022 0E94 0000 		call chSchGoSleepTimeoutS
  57               	.LVL4:
  58               	.LBB20:
  59               	.LBB21:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  60               		.loc 2 440 0
  61               	/* #APP */
  62               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
  63 0026 7894      		sei
  64               	 ;  0 "" 2
  65               	/* #NOAPP */
  66               	.LBE21:
  67               	.LBE20:
  79:../../../os/nil/src/chmsg.c ****   chSysUnlock();
  80:../../../os/nil/src/chmsg.c **** 
  81:../../../os/nil/src/chmsg.c ****   return msg;
  82:../../../os/nil/src/chmsg.c **** }
  68               		.loc 1 82 0
  69 0028 0895      		ret
  70               	.LVL5:
  71               	.L4:
  76:../../../os/nil/src/chmsg.c ****   }
  72               		.loc 1 76 0
  73 002a BF01      		movw r22,r30
  74               	.LVL6:
  75 002c 0E94 0000 		call chSchReadyI
  76               	.LVL7:
  78:../../../os/nil/src/chmsg.c ****   chSysUnlock();
  77               		.loc 1 78 0
  78 0030 60E0      		ldi r22,0
  79 0032 70E0      		ldi r23,0
  80 0034 88E0      		ldi r24,lo8(8)
  81 0036 0E94 0000 		call chSchGoSleepTimeoutS
  82               	.LVL8:
  83               	.LBB23:
  84               	.LBB22:
  85               		.loc 2 440 0
  86               	/* #APP */
  87               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
  88 003a 7894      		sei
  89               	 ;  0 "" 2
  90               	/* #NOAPP */
  91               	.LBE22:
  92               	.LBE23:
  93               		.loc 1 82 0
  94 003c 0895      		ret
  95               		.cfi_endproc
  96               	.LFE98:
  98               		.section	.text.chMsgWaitTimeoutS,"ax",@progbits
  99               	.global	chMsgWaitTimeoutS
 101               	chMsgWaitTimeoutS:
 102               	.LFB101:
  83:../../../os/nil/src/chmsg.c **** 
  84:../../../os/nil/src/chmsg.c **** /**
  85:../../../os/nil/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message.
  86:../../../os/nil/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
  87:../../../os/nil/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
  88:../../../os/nil/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
  89:../../../os/nil/src/chmsg.c ****  *          the answer.
  90:../../../os/nil/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
  91:../../../os/nil/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
  92:../../../os/nil/src/chmsg.c ****  *          because the sending thread is suspended until then.
  93:../../../os/nil/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
  94:../../../os/nil/src/chmsg.c ****  *          returned pointer is a temporary reference.
  95:../../../os/nil/src/chmsg.c ****  *
  96:../../../os/nil/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
  97:../../../os/nil/src/chmsg.c ****  *
  98:../../../os/nil/src/chmsg.c ****  * @api
  99:../../../os/nil/src/chmsg.c ****  */
 100:../../../os/nil/src/chmsg.c **** thread_t *chMsgWait(void) {
 101:../../../os/nil/src/chmsg.c ****   thread_t *tp;
 102:../../../os/nil/src/chmsg.c **** 
 103:../../../os/nil/src/chmsg.c ****   chSysLock();
 104:../../../os/nil/src/chmsg.c ****   tp = chMsgWaitS();
 105:../../../os/nil/src/chmsg.c ****   chSysUnlock();
 106:../../../os/nil/src/chmsg.c **** 
 107:../../../os/nil/src/chmsg.c ****   return tp;
 108:../../../os/nil/src/chmsg.c **** }
 109:../../../os/nil/src/chmsg.c **** 
 110:../../../os/nil/src/chmsg.c **** /**
 111:../../../os/nil/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message or a
 112:../../../os/nil/src/chmsg.c ****  *          timeout to occur.
 113:../../../os/nil/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
 114:../../../os/nil/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 115:../../../os/nil/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 116:../../../os/nil/src/chmsg.c ****  *          the answer.
 117:../../../os/nil/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 118:../../../os/nil/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 119:../../../os/nil/src/chmsg.c ****  *          because the sending thread is suspended until then.
 120:../../../os/nil/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 121:../../../os/nil/src/chmsg.c ****  *          returned pointer is a temporary reference.
 122:../../../os/nil/src/chmsg.c ****  *
 123:../../../os/nil/src/chmsg.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 124:../../../os/nil/src/chmsg.c ****  *                      the following special values are allowed:
 125:../../../os/nil/src/chmsg.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 126:../../../os/nil/src/chmsg.c ****  *                      - @a TIME_INFINITE no timeout.
 127:../../../os/nil/src/chmsg.c ****  *                      .
 128:../../../os/nil/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
 129:../../../os/nil/src/chmsg.c ****  * @retval NULL         if a timeout occurred.
 130:../../../os/nil/src/chmsg.c ****  *
 131:../../../os/nil/src/chmsg.c ****  * @api
 132:../../../os/nil/src/chmsg.c ****  */
 133:../../../os/nil/src/chmsg.c **** thread_t *chMsgWaitTimeout(sysinterval_t timeout) {
 134:../../../os/nil/src/chmsg.c ****   thread_t *tp;
 135:../../../os/nil/src/chmsg.c **** 
 136:../../../os/nil/src/chmsg.c ****   chSysLock();
 137:../../../os/nil/src/chmsg.c ****   tp = chMsgWaitTimeoutS(timeout);
 138:../../../os/nil/src/chmsg.c ****   chSysUnlock();
 139:../../../os/nil/src/chmsg.c **** 
 140:../../../os/nil/src/chmsg.c ****   return tp;
 141:../../../os/nil/src/chmsg.c **** }
 142:../../../os/nil/src/chmsg.c **** 
 143:../../../os/nil/src/chmsg.c **** /**
 144:../../../os/nil/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message or a
 145:../../../os/nil/src/chmsg.c ****  *          timeout to occur.
 146:../../../os/nil/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
 147:../../../os/nil/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 148:../../../os/nil/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 149:../../../os/nil/src/chmsg.c ****  *          the answer.
 150:../../../os/nil/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 151:../../../os/nil/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 152:../../../os/nil/src/chmsg.c ****  *          because the sending thread is suspended until then.
 153:../../../os/nil/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 154:../../../os/nil/src/chmsg.c ****  *          returned pointer is a temporary reference.
 155:../../../os/nil/src/chmsg.c ****  *
 156:../../../os/nil/src/chmsg.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 157:../../../os/nil/src/chmsg.c ****  *                      the following special values are allowed:
 158:../../../os/nil/src/chmsg.c ****  *                      - @a TIME_INFINITE no timeout.
 159:../../../os/nil/src/chmsg.c ****  *                      .
 160:../../../os/nil/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
 161:../../../os/nil/src/chmsg.c ****  * @retval NULL         if a timeout occurred.
 162:../../../os/nil/src/chmsg.c ****  *
 163:../../../os/nil/src/chmsg.c ****  * @sclass
 164:../../../os/nil/src/chmsg.c ****  */
 165:../../../os/nil/src/chmsg.c **** thread_t *chMsgWaitTimeoutS(sysinterval_t timeout) {
 103               		.loc 1 165 0
 104               		.cfi_startproc
 105               	.LVL9:
 106 0000 CF93      		push r28
 107               	.LCFI0:
 108               		.cfi_def_cfa_offset 3
 109               		.cfi_offset 28, -2
 110 0002 DF93      		push r29
 111               	.LCFI1:
 112               		.cfi_def_cfa_offset 4
 113               		.cfi_offset 29, -3
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 2 */
 117               	.L__stack_usage = 2
 118 0004 EC01      		movw r28,r24
 166:../../../os/nil/src/chmsg.c ****   thread_t *tp;
 167:../../../os/nil/src/chmsg.c **** 
 168:../../../os/nil/src/chmsg.c ****   chDbgCheckClassS();
 169:../../../os/nil/src/chmsg.c **** 
 170:../../../os/nil/src/chmsg.c ****   tp = nil_find_thread(NIL_STATE_SNDMSGQ, nil.current);
 119               		.loc 1 170 0
 120 0006 6091 0000 		lds r22,nil
 121 000a 7091 0000 		lds r23,nil+1
 122 000e 88E0      		ldi r24,lo8(8)
 123               	.LVL10:
 124 0010 0E94 0000 		call nil_find_thread
 125               	.LVL11:
 171:../../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 126               		.loc 1 171 0
 127 0014 0097      		sbiw r24,0
 128 0016 01F0      		breq .L9
 129               	.LVL12:
 130               	.L6:
 131               	/* epilogue start */
 172:../../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 173:../../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 174:../../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 175:../../../os/nil/src/chmsg.c ****     }
 176:../../../os/nil/src/chmsg.c ****   }
 177:../../../os/nil/src/chmsg.c **** 
 178:../../../os/nil/src/chmsg.c ****   return tp;
 179:../../../os/nil/src/chmsg.c **** }
 132               		.loc 1 179 0
 133 0018 DF91      		pop r29
 134 001a CF91      		pop r28
 135               	.LVL13:
 136 001c 0895      		ret
 137               	.LVL14:
 138               	.L9:
 139               	.LBB24:
 172:../../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 140               		.loc 1 172 0
 141 001e BE01      		movw r22,r28
 142 0020 8AE0      		ldi r24,lo8(10)
 143               	.LVL15:
 144 0022 0E94 0000 		call chSchGoSleepTimeoutS
 145               	.LVL16:
 173:../../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 146               		.loc 1 173 0
 147 0026 8F3F      		cpi r24,-1
 148 0028 2FEF      		ldi r18,-1
 149 002a 9207      		cpc r25,r18
 150 002c 01F4      		brne .L6
 151 002e 80E0      		ldi r24,0
 152               	.LVL17:
 153 0030 90E0      		ldi r25,0
 154 0032 00C0      		rjmp .L6
 155               	.LBE24:
 156               		.cfi_endproc
 157               	.LFE101:
 159               		.section	.text.chMsgWait,"ax",@progbits
 160               	.global	chMsgWait
 162               	chMsgWait:
 163               	.LFB99:
 100:../../../os/nil/src/chmsg.c ****   thread_t *tp;
 164               		.loc 1 100 0
 165               		.cfi_startproc
 166               	/* prologue: function */
 167               	/* frame size = 0 */
 168               	/* stack size = 0 */
 169               	.L__stack_usage = 0
 170               	.LBB25:
 171               	.LBB26:
 430:../../../os/common/ports/AVR/chcore.h **** }
 172               		.loc 2 430 0
 173               	/* #APP */
 174               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 175 0000 F894      		cli
 176               	 ;  0 "" 2
 177               	/* #NOAPP */
 178               	.LBE26:
 179               	.LBE25:
 104:../../../os/nil/src/chmsg.c ****   chSysUnlock();
 180               		.loc 1 104 0
 181 0002 80E0      		ldi r24,0
 182 0004 90E0      		ldi r25,0
 183 0006 0E94 0000 		call chMsgWaitTimeoutS
 184               	.LVL18:
 185               	.LBB27:
 186               	.LBB28:
 187               		.loc 2 440 0
 188               	/* #APP */
 189               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 190 000a 7894      		sei
 191               	 ;  0 "" 2
 192               	/* #NOAPP */
 193               	.LBE28:
 194               	.LBE27:
 108:../../../os/nil/src/chmsg.c **** 
 195               		.loc 1 108 0
 196 000c 0895      		ret
 197               		.cfi_endproc
 198               	.LFE99:
 200               		.section	.text.chMsgWaitTimeout,"ax",@progbits
 201               	.global	chMsgWaitTimeout
 203               	chMsgWaitTimeout:
 204               	.LFB100:
 133:../../../os/nil/src/chmsg.c ****   thread_t *tp;
 205               		.loc 1 133 0
 206               		.cfi_startproc
 207               	.LVL19:
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212               	.LBB29:
 213               	.LBB30:
 430:../../../os/common/ports/AVR/chcore.h **** }
 214               		.loc 2 430 0
 215               	/* #APP */
 216               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 217 0000 F894      		cli
 218               	 ;  0 "" 2
 219               	/* #NOAPP */
 220               	.LBE30:
 221               	.LBE29:
 137:../../../os/nil/src/chmsg.c ****   chSysUnlock();
 222               		.loc 1 137 0
 223 0002 0E94 0000 		call chMsgWaitTimeoutS
 224               	.LVL20:
 225               	.LBB31:
 226               	.LBB32:
 227               		.loc 2 440 0
 228               	/* #APP */
 229               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 230 0006 7894      		sei
 231               	 ;  0 "" 2
 232               	/* #NOAPP */
 233               	.LBE32:
 234               	.LBE31:
 141:../../../os/nil/src/chmsg.c **** 
 235               		.loc 1 141 0
 236 0008 0895      		ret
 237               		.cfi_endproc
 238               	.LFE100:
 240               		.section	.text.chMsgRelease,"ax",@progbits
 241               	.global	chMsgRelease
 243               	chMsgRelease:
 244               	.LFB102:
 180:../../../os/nil/src/chmsg.c **** 
 181:../../../os/nil/src/chmsg.c **** /**
 182:../../../os/nil/src/chmsg.c ****  * @brief   Releases a sender thread specifying a response message.
 183:../../../os/nil/src/chmsg.c ****  * @pre     Invoke this function only after a message has been received
 184:../../../os/nil/src/chmsg.c ****  *          using @p chMsgWait().
 185:../../../os/nil/src/chmsg.c ****  *
 186:../../../os/nil/src/chmsg.c ****  * @param[in] tp        pointer to the thread
 187:../../../os/nil/src/chmsg.c ****  * @param[in] msg       message to be returned to the sender
 188:../../../os/nil/src/chmsg.c ****  *
 189:../../../os/nil/src/chmsg.c ****  * @api
 190:../../../os/nil/src/chmsg.c ****  */
 191:../../../os/nil/src/chmsg.c **** void chMsgRelease(thread_t *tp, msg_t msg) {
 245               		.loc 1 191 0
 246               		.cfi_startproc
 247               	.LVL21:
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
 252               	.LBB33:
 253               	.LBB34:
 430:../../../os/common/ports/AVR/chcore.h **** }
 254               		.loc 2 430 0
 255               	/* #APP */
 256               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 257 0000 F894      		cli
 258               	 ;  0 "" 2
 259               	/* #NOAPP */
 260               	.LBE34:
 261               	.LBE33:
 192:../../../os/nil/src/chmsg.c **** 
 193:../../../os/nil/src/chmsg.c ****   chSysLock();
 194:../../../os/nil/src/chmsg.c ****   chDbgAssert(tp->state == NIL_STATE_SNDMSGQ, "invalid state");
 195:../../../os/nil/src/chmsg.c ****   chMsgReleaseS(tp, msg);
 262               		.loc 1 195 0
 263 0002 0E94 0000 		call chSchReadyI
 264               	.LVL22:
 265 0006 0E94 0000 		call chSchRescheduleS
 266               	.LVL23:
 267               	.LBB35:
 268               	.LBB36:
 269               		.loc 2 440 0
 270               	/* #APP */
 271               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 272 000a 7894      		sei
 273               	 ;  0 "" 2
 274               	/* #NOAPP */
 275 000c 0895      		ret
 276               	.LBE36:
 277               	.LBE35:
 278               		.cfi_endproc
 279               	.LFE102:
 281               		.text
 282               	.Letext0:
 283               		.file 3 "/usr/lib/avr/include/stdint.h"
 284               		.file 4 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 285               		.file 5 "../../../os/nil/include/ch.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmsg.c
     /tmp/ccJ5AdvZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJ5AdvZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJ5AdvZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJ5AdvZ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJ5AdvZ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJ5AdvZ.s:13     .text.chMsgSend:0000000000000000 chMsgSend
     /tmp/ccJ5AdvZ.s:101    .text.chMsgWaitTimeoutS:0000000000000000 chMsgWaitTimeoutS
     /tmp/ccJ5AdvZ.s:162    .text.chMsgWait:0000000000000000 chMsgWait
     /tmp/ccJ5AdvZ.s:203    .text.chMsgWaitTimeout:0000000000000000 chMsgWaitTimeout
     /tmp/ccJ5AdvZ.s:243    .text.chMsgRelease:0000000000000000 chMsgRelease

UNDEFINED SYMBOLS
nil
chSchGoSleepTimeoutS
chSchReadyI
nil_find_thread
chSchRescheduleS
