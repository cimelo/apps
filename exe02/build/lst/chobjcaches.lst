   1               		.file	"chobjcaches.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chCacheObjectInit,"ax",@progbits
  11               	.global	chCacheObjectInit
  13               	chCacheObjectInit:
  14               	.LFB100:
  15               		.file 1 "../../../os/oslib/src/chobjcaches.c"
   1:../../../os/oslib/src/chobjcaches.c **** /*
   2:../../../os/oslib/src/chobjcaches.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/src/chobjcaches.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/src/chobjcaches.c **** 
   5:../../../os/oslib/src/chobjcaches.c ****     This file is part of ChibiOS.
   6:../../../os/oslib/src/chobjcaches.c **** 
   7:../../../os/oslib/src/chobjcaches.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/src/chobjcaches.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/src/chobjcaches.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/src/chobjcaches.c **** 
  11:../../../os/oslib/src/chobjcaches.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/src/chobjcaches.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/src/chobjcaches.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/src/chobjcaches.c ****     GNU General Public License for more details.
  15:../../../os/oslib/src/chobjcaches.c **** 
  16:../../../os/oslib/src/chobjcaches.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/src/chobjcaches.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/src/chobjcaches.c **** */
  19:../../../os/oslib/src/chobjcaches.c **** 
  20:../../../os/oslib/src/chobjcaches.c **** /**
  21:../../../os/oslib/src/chobjcaches.c ****  * @file    oslib/src/chobjcaches.c
  22:../../../os/oslib/src/chobjcaches.c ****  * @brief   Objects Caches code.
  23:../../../os/oslib/src/chobjcaches.c ****  * @details Objects caches.
  24:../../../os/oslib/src/chobjcaches.c ****  *          <h2>Operation mode</h2>
  25:../../../os/oslib/src/chobjcaches.c ****  *          An object cache allows to retrieve and release objects from a
  26:../../../os/oslib/src/chobjcaches.c ****  *          slow media, for example a disk or flash.<br>
  27:../../../os/oslib/src/chobjcaches.c ****  *          The most recently used objects are kept in a series of RAM
  28:../../../os/oslib/src/chobjcaches.c ****  *          buffers making access faster. Objects are identified by a
  29:../../../os/oslib/src/chobjcaches.c ****  *          pair <group, key> which could be mapped, for example, to a
  30:../../../os/oslib/src/chobjcaches.c ****  *          disk drive identifier and sector identifier.<br>
  31:../../../os/oslib/src/chobjcaches.c ****  *          Read and write operations are performed using externally-supplied
  32:../../../os/oslib/src/chobjcaches.c ****  *          functions, the cache is device-agnostic.<br>
  33:../../../os/oslib/src/chobjcaches.c ****  *          The cache uses internally an hash table, the size of the table
  34:../../../os/oslib/src/chobjcaches.c ****  *          should be dimensioned to minimize the risk of hash collisions,
  35:../../../os/oslib/src/chobjcaches.c ****  *          a factor of two is usually acceptable, it depends on the specific
  36:../../../os/oslib/src/chobjcaches.c ****  *          application requirements.<br>
  37:../../../os/oslib/src/chobjcaches.c ****  *          Operations defined for caches:
  38:../../../os/oslib/src/chobjcaches.c ****  *          - <b>Get Object</b>: Retrieves an object from cache, if not
  39:../../../os/oslib/src/chobjcaches.c ****  *            present then an empty buffer is returned.
  40:../../../os/oslib/src/chobjcaches.c ****  *          - <b>Read Object</b>: Retrieves an object from cache, if not
  41:../../../os/oslib/src/chobjcaches.c ****  *            present a buffer is allocated and the object is read from the
  42:../../../os/oslib/src/chobjcaches.c ****  *            media.
  43:../../../os/oslib/src/chobjcaches.c ****  *          - <b>Release Object</b>: Releases an object to the cache handling
  44:../../../os/oslib/src/chobjcaches.c ****  *            the media update, if required.
  45:../../../os/oslib/src/chobjcaches.c ****  *          .
  46:../../../os/oslib/src/chobjcaches.c ****  * @pre     In order to use the pipes APIs the @p CH_CFG_USE_OBJ_CACHES
  47:../../../os/oslib/src/chobjcaches.c ****  *          option must be enabled in @p chconf.h.
  48:../../../os/oslib/src/chobjcaches.c ****  * @note    Compatible with RT and NIL.
  49:../../../os/oslib/src/chobjcaches.c ****  *
  50:../../../os/oslib/src/chobjcaches.c ****  * @addtogroup oslib_objchaches
  51:../../../os/oslib/src/chobjcaches.c ****  * @{
  52:../../../os/oslib/src/chobjcaches.c ****  */
  53:../../../os/oslib/src/chobjcaches.c **** 
  54:../../../os/oslib/src/chobjcaches.c **** #include "ch.h"
  55:../../../os/oslib/src/chobjcaches.c **** 
  56:../../../os/oslib/src/chobjcaches.c **** #if (CH_CFG_USE_OBJ_CACHES == TRUE) || defined(__DOXYGEN__)
  57:../../../os/oslib/src/chobjcaches.c **** 
  58:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
  59:../../../os/oslib/src/chobjcaches.c **** /* Module local definitions.                                                 */
  60:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
  61:../../../os/oslib/src/chobjcaches.c **** 
  62:../../../os/oslib/src/chobjcaches.c **** /* Default hash function.*/
  63:../../../os/oslib/src/chobjcaches.c **** #if !defined(OC_HASH_FUNCTION) || defined(__DOXYGEN__)
  64:../../../os/oslib/src/chobjcaches.c **** #define OC_HASH_FUNCTION(ocp, group, key)                                   \
  65:../../../os/oslib/src/chobjcaches.c ****   (((unsigned)(group) + (unsigned)(key)) & ((unsigned)(ocp)->hashn - 1U))
  66:../../../os/oslib/src/chobjcaches.c **** #endif
  67:../../../os/oslib/src/chobjcaches.c **** 
  68:../../../os/oslib/src/chobjcaches.c **** /* Insertion into an hash slot list.*/
  69:../../../os/oslib/src/chobjcaches.c **** #define HASH_INSERT(ocp, objp, group, key) {                                \
  70:../../../os/oslib/src/chobjcaches.c ****   oc_hash_header_t *hhp;                                                    \
  71:../../../os/oslib/src/chobjcaches.c ****   (hhp) = &(ocp)->hashp[OC_HASH_FUNCTION(ocp, group, key)];                 \
  72:../../../os/oslib/src/chobjcaches.c ****   (objp)->hash_next = (hhp)->hash_next;                                     \
  73:../../../os/oslib/src/chobjcaches.c ****   (objp)->hash_prev = (oc_object_t *)(hhp);                                 \
  74:../../../os/oslib/src/chobjcaches.c ****   (hhp)->hash_next->hash_prev = (objp);                                     \
  75:../../../os/oslib/src/chobjcaches.c ****   (hhp)->hash_next = (objp);                                                \
  76:../../../os/oslib/src/chobjcaches.c **** }
  77:../../../os/oslib/src/chobjcaches.c **** 
  78:../../../os/oslib/src/chobjcaches.c **** /* Removal of an object from the hash.*/
  79:../../../os/oslib/src/chobjcaches.c **** #define HASH_REMOVE(objp) {                                                 \
  80:../../../os/oslib/src/chobjcaches.c ****   (objp)->hash_prev->hash_next = (objp)->hash_next;                         \
  81:../../../os/oslib/src/chobjcaches.c ****   (objp)->hash_next->hash_prev = (objp)->hash_prev;                         \
  82:../../../os/oslib/src/chobjcaches.c **** }
  83:../../../os/oslib/src/chobjcaches.c **** 
  84:../../../os/oslib/src/chobjcaches.c **** /* Insertion on LRU list head (newer objects).*/
  85:../../../os/oslib/src/chobjcaches.c **** #define LRU_INSERT_HEAD(ocp, objp) {                                        \
  86:../../../os/oslib/src/chobjcaches.c ****   (objp)->lru_next = (ocp)->lru.lru_next;                                   \
  87:../../../os/oslib/src/chobjcaches.c ****   (objp)->lru_prev = (oc_object_t *)&(ocp)->lru;                            \
  88:../../../os/oslib/src/chobjcaches.c ****   (ocp)->lru.lru_next->lru_prev = (objp);                                   \
  89:../../../os/oslib/src/chobjcaches.c ****   (ocp)->lru.lru_next = (objp);                                             \
  90:../../../os/oslib/src/chobjcaches.c **** }
  91:../../../os/oslib/src/chobjcaches.c **** 
  92:../../../os/oslib/src/chobjcaches.c **** /* Insertion on LRU list head (newer objects).*/
  93:../../../os/oslib/src/chobjcaches.c **** #define LRU_INSERT_TAIL(ocp, objp) {                                        \
  94:../../../os/oslib/src/chobjcaches.c ****   (objp)->lru_prev = (ocp)->lru.lru_prev;                                   \
  95:../../../os/oslib/src/chobjcaches.c ****   (objp)->lru_next = (oc_object_t *)&(ocp)->lru;                            \
  96:../../../os/oslib/src/chobjcaches.c ****   (ocp)->lru.lru_prev->lru_next = (objp);                                   \
  97:../../../os/oslib/src/chobjcaches.c ****   (ocp)->lru.lru_prev = (objp);                                             \
  98:../../../os/oslib/src/chobjcaches.c **** }
  99:../../../os/oslib/src/chobjcaches.c **** 
 100:../../../os/oslib/src/chobjcaches.c **** /* Removal of an object from the LRU list.*/
 101:../../../os/oslib/src/chobjcaches.c **** #define LRU_REMOVE(objp) {                                                  \
 102:../../../os/oslib/src/chobjcaches.c ****   (objp)->lru_prev->lru_next = (objp)->lru_next;                            \
 103:../../../os/oslib/src/chobjcaches.c ****   (objp)->lru_next->lru_prev = (objp)->lru_prev;                            \
 104:../../../os/oslib/src/chobjcaches.c **** }
 105:../../../os/oslib/src/chobjcaches.c **** 
 106:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 107:../../../os/oslib/src/chobjcaches.c **** /* Module exported variables.                                                */
 108:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 109:../../../os/oslib/src/chobjcaches.c **** 
 110:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 111:../../../os/oslib/src/chobjcaches.c **** /* Module local types.                                                       */
 112:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 113:../../../os/oslib/src/chobjcaches.c **** 
 114:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 115:../../../os/oslib/src/chobjcaches.c **** /* Module local variables.                                                   */
 116:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 117:../../../os/oslib/src/chobjcaches.c **** 
 118:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 119:../../../os/oslib/src/chobjcaches.c **** /* Module local functions.                                                   */
 120:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 121:../../../os/oslib/src/chobjcaches.c **** 
 122:../../../os/oslib/src/chobjcaches.c **** /**
 123:../../../os/oslib/src/chobjcaches.c ****  * @brief   Returns an object pointer from the cache, if present.
 124:../../../os/oslib/src/chobjcaches.c ****  *
 125:../../../os/oslib/src/chobjcaches.c ****  * @param[out] ocp      pointer to the @p objects_cache_t structure to be
 126:../../../os/oslib/src/chobjcaches.c ****  * @param[in] group     object group identifier
 127:../../../os/oslib/src/chobjcaches.c ****  * @param[in] key       object identifier within the group
 128:../../../os/oslib/src/chobjcaches.c ****  *                      initialized
 129:../../../os/oslib/src/chobjcaches.c ****  * @return              The pointer to the retrieved object.
 130:../../../os/oslib/src/chobjcaches.c ****  * @retval NULL         if the object is not in cache.
 131:../../../os/oslib/src/chobjcaches.c ****  *
 132:../../../os/oslib/src/chobjcaches.c ****  * @notapi
 133:../../../os/oslib/src/chobjcaches.c ****  */
 134:../../../os/oslib/src/chobjcaches.c **** static oc_object_t *hash_get_s(objects_cache_t *ocp,
 135:../../../os/oslib/src/chobjcaches.c ****                                uint32_t group,
 136:../../../os/oslib/src/chobjcaches.c ****                                uint32_t key) {
 137:../../../os/oslib/src/chobjcaches.c ****   oc_hash_header_t *hhp;
 138:../../../os/oslib/src/chobjcaches.c ****   oc_object_t *objp;
 139:../../../os/oslib/src/chobjcaches.c **** 
 140:../../../os/oslib/src/chobjcaches.c ****   /* Hash slot where to search for an hit.*/
 141:../../../os/oslib/src/chobjcaches.c ****   hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 142:../../../os/oslib/src/chobjcaches.c ****   objp = hhp->hash_next;
 143:../../../os/oslib/src/chobjcaches.c **** 
 144:../../../os/oslib/src/chobjcaches.c ****   /* Scanning the siblings collision list.*/
 145:../../../os/oslib/src/chobjcaches.c ****   while (objp != (oc_object_t *)hhp) {
 146:../../../os/oslib/src/chobjcaches.c ****     if ((objp->obj_key == key) && (objp->obj_group == group)) {
 147:../../../os/oslib/src/chobjcaches.c **** 
 148:../../../os/oslib/src/chobjcaches.c ****       /* Cache hit.*/
 149:../../../os/oslib/src/chobjcaches.c ****       return objp;
 150:../../../os/oslib/src/chobjcaches.c ****     }
 151:../../../os/oslib/src/chobjcaches.c ****     objp = objp->hash_next;
 152:../../../os/oslib/src/chobjcaches.c ****   }
 153:../../../os/oslib/src/chobjcaches.c **** 
 154:../../../os/oslib/src/chobjcaches.c ****   return NULL;
 155:../../../os/oslib/src/chobjcaches.c **** }
 156:../../../os/oslib/src/chobjcaches.c **** 
 157:../../../os/oslib/src/chobjcaches.c **** /**
 158:../../../os/oslib/src/chobjcaches.c ****  * @brief   Gets the least recently used object buffer from the LRU list.
 159:../../../os/oslib/src/chobjcaches.c ****  *
 160:../../../os/oslib/src/chobjcaches.c ****  * @param[out] ocp      pointer to the @p objects_cache_t structure to be
 161:../../../os/oslib/src/chobjcaches.c ****  * @return              The pointer to the retrieved object.
 162:../../../os/oslib/src/chobjcaches.c ****  *
 163:../../../os/oslib/src/chobjcaches.c ****  * @notapi
 164:../../../os/oslib/src/chobjcaches.c ****  */
 165:../../../os/oslib/src/chobjcaches.c **** static oc_object_t *lru_get_last_s(objects_cache_t *ocp) {
 166:../../../os/oslib/src/chobjcaches.c ****   oc_object_t *objp;
 167:../../../os/oslib/src/chobjcaches.c **** 
 168:../../../os/oslib/src/chobjcaches.c ****   while (true) {
 169:../../../os/oslib/src/chobjcaches.c ****     /* Waiting for an object buffer to become available in the LRU.*/
 170:../../../os/oslib/src/chobjcaches.c ****     (void) chSemWaitS(&ocp->lru_sem);
 171:../../../os/oslib/src/chobjcaches.c **** 
 172:../../../os/oslib/src/chobjcaches.c ****     /* Now an object buffer is in the LRU for sure, taking it from the
 173:../../../os/oslib/src/chobjcaches.c ****        LRU tail.*/
 174:../../../os/oslib/src/chobjcaches.c ****     objp = ocp->lru.lru_prev;
 175:../../../os/oslib/src/chobjcaches.c **** 
 176:../../../os/oslib/src/chobjcaches.c ****     chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
 177:../../../os/oslib/src/chobjcaches.c ****                 "not in LRU");
 178:../../../os/oslib/src/chobjcaches.c ****     chDbgAssert(chSemGetCounterI(&objp->obj_sem) == (cnt_t)1,
 179:../../../os/oslib/src/chobjcaches.c ****                 "semaphore counter not 1");
 180:../../../os/oslib/src/chobjcaches.c **** 
 181:../../../os/oslib/src/chobjcaches.c ****     LRU_REMOVE(objp);
 182:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags &= ~OC_FLAG_INLRU;
 183:../../../os/oslib/src/chobjcaches.c **** 
 184:../../../os/oslib/src/chobjcaches.c ****     /* Getting the object semaphore, we know there is no wait so
 185:../../../os/oslib/src/chobjcaches.c ****        using the "fast" variant.*/
 186:../../../os/oslib/src/chobjcaches.c ****     chSemFastWaitI(&objp->obj_sem);
 187:../../../os/oslib/src/chobjcaches.c **** 
 188:../../../os/oslib/src/chobjcaches.c ****     /* If it is a buffer not needing (lazy) write then it can be used
 189:../../../os/oslib/src/chobjcaches.c ****        right away.*/
 190:../../../os/oslib/src/chobjcaches.c ****     if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 191:../../../os/oslib/src/chobjcaches.c **** 
 192:../../../os/oslib/src/chobjcaches.c ****       /* Removing from hash table if required.*/
 193:../../../os/oslib/src/chobjcaches.c ****       if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 194:../../../os/oslib/src/chobjcaches.c ****         HASH_REMOVE(objp);
 195:../../../os/oslib/src/chobjcaches.c ****       }
 196:../../../os/oslib/src/chobjcaches.c **** 
 197:../../../os/oslib/src/chobjcaches.c ****       /* Removing all flags, it is "new" now.*/
 198:../../../os/oslib/src/chobjcaches.c ****       objp->obj_flags = 0U;
 199:../../../os/oslib/src/chobjcaches.c **** 
 200:../../../os/oslib/src/chobjcaches.c ****       return objp;
 201:../../../os/oslib/src/chobjcaches.c ****     }
 202:../../../os/oslib/src/chobjcaches.c **** 
 203:../../../os/oslib/src/chobjcaches.c ****     /* Out of critical section.*/
 204:../../../os/oslib/src/chobjcaches.c ****     chSysUnlock();
 205:../../../os/oslib/src/chobjcaches.c **** 
 206:../../../os/oslib/src/chobjcaches.c ****    /* Invoking the writer asynchronously, it will release the buffer once it
 207:../../../os/oslib/src/chobjcaches.c ****       is written. It is responsibility of the write function to release
 208:../../../os/oslib/src/chobjcaches.c ****       the buffer.*/
 209:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 210:../../../os/oslib/src/chobjcaches.c ****     (void) ocp->writef(ocp, objp, true);
 211:../../../os/oslib/src/chobjcaches.c **** 
 212:../../../os/oslib/src/chobjcaches.c ****     /* Critical section enter again.*/
 213:../../../os/oslib/src/chobjcaches.c ****     chSysLock();
 214:../../../os/oslib/src/chobjcaches.c ****   }
 215:../../../os/oslib/src/chobjcaches.c **** }
 216:../../../os/oslib/src/chobjcaches.c **** 
 217:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 218:../../../os/oslib/src/chobjcaches.c **** /* Module exported functions.                                                */
 219:../../../os/oslib/src/chobjcaches.c **** /*===========================================================================*/
 220:../../../os/oslib/src/chobjcaches.c **** 
 221:../../../os/oslib/src/chobjcaches.c **** /**
 222:../../../os/oslib/src/chobjcaches.c ****  * @brief   Initializes a @p objects_cache_t object.
 223:../../../os/oslib/src/chobjcaches.c ****  *
 224:../../../os/oslib/src/chobjcaches.c ****  * @param[out] ocp      pointer to the @p objects_cache_t structure to be
 225:../../../os/oslib/src/chobjcaches.c ****  *                      initialized
 226:../../../os/oslib/src/chobjcaches.c ****  * @param[in] hashn     number of elements in the hash table array, must be
 227:../../../os/oslib/src/chobjcaches.c ****  *                      a power of two and not lower than @p objn
 228:../../../os/oslib/src/chobjcaches.c ****  * @param[in] hashp     pointer to the hash table as an array of
 229:../../../os/oslib/src/chobjcaches.c ****  *                      @p oc_hash_header_t
 230:../../../os/oslib/src/chobjcaches.c ****  * @param[in] objn      number of elements in the objects table array
 231:../../../os/oslib/src/chobjcaches.c ****  * @param[in] objsz     size of elements in the objects table array, the
 232:../../../os/oslib/src/chobjcaches.c ****  *                      minimum value is <tt>sizeof (oc_object_t)</tt>.
 233:../../../os/oslib/src/chobjcaches.c ****  * @param[in] objvp     pointer to the hash objects as an array of structures
 234:../../../os/oslib/src/chobjcaches.c ****  *                      starting with an @p oc_object_t
 235:../../../os/oslib/src/chobjcaches.c ****  * @param[in] readf     pointer to an object reader function
 236:../../../os/oslib/src/chobjcaches.c ****  * @param[in] writef    pointer to an object writer function
 237:../../../os/oslib/src/chobjcaches.c ****  *
 238:../../../os/oslib/src/chobjcaches.c ****  * @init
 239:../../../os/oslib/src/chobjcaches.c ****  */
 240:../../../os/oslib/src/chobjcaches.c **** void chCacheObjectInit(objects_cache_t *ocp,
 241:../../../os/oslib/src/chobjcaches.c ****                        ucnt_t hashn,
 242:../../../os/oslib/src/chobjcaches.c ****                        oc_hash_header_t *hashp,
 243:../../../os/oslib/src/chobjcaches.c ****                        ucnt_t objn,
 244:../../../os/oslib/src/chobjcaches.c ****                        size_t objsz,
 245:../../../os/oslib/src/chobjcaches.c ****                        void *objvp,
 246:../../../os/oslib/src/chobjcaches.c ****                        oc_readf_t readf,
 247:../../../os/oslib/src/chobjcaches.c ****                        oc_writef_t writef) {
  16               		.loc 1 247 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 AF92      		push r10
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 10, -2
  23 0002 BF92      		push r11
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 11, -3
  27 0004 CF92      		push r12
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 12, -4
  31 0006 DF92      		push r13
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 13, -5
  35 0008 EF92      		push r14
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 14, -6
  39 000a FF92      		push r15
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 15, -7
  43 000c 0F93      		push r16
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 16, -8
  47 000e 1F93      		push r17
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 17, -9
  51 0010 CF93      		push r28
  52               	.LCFI8:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 28, -10
  55 0012 DF93      		push r29
  56               	.LCFI9:
  57               		.cfi_def_cfa_offset 12
  58               		.cfi_offset 29, -11
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 10 */
  62               	.L__stack_usage = 10
  63 0014 EC01      		movw r28,r24
  64 0016 F701      		movw r30,r14
 248:../../../os/oslib/src/chobjcaches.c **** 
 249:../../../os/oslib/src/chobjcaches.c ****   chDbgCheck((ocp != NULL) && (hashp != NULL) && (objvp != NULL) &&
 250:../../../os/oslib/src/chobjcaches.c ****              ((hashn & (hashn - (ucnt_t)1)) == (ucnt_t)0) &&
 251:../../../os/oslib/src/chobjcaches.c ****              (objn > (ucnt_t)0) && (hashn >= objn) &&
 252:../../../os/oslib/src/chobjcaches.c ****              (objsz >= sizeof (oc_object_t)) &&
 253:../../../os/oslib/src/chobjcaches.c ****              ((objsz & (PORT_NATURAL_ALIGN - 1U)) == 0U));
 254:../../../os/oslib/src/chobjcaches.c **** 
 255:../../../os/oslib/src/chobjcaches.c ****   chSemObjectInit(&ocp->cache_sem, (cnt_t)1);
  65               		.loc 1 255 0
  66 0018 81E0      		ldi r24,lo8(1)
  67               	.LVL1:
  68 001a 888B      		std Y+16,r24
 256:../../../os/oslib/src/chobjcaches.c ****   chSemObjectInit(&ocp->lru_sem, (cnt_t)objn);
  69               		.loc 1 256 0
  70 001c 298B      		std Y+17,r18
 257:../../../os/oslib/src/chobjcaches.c ****   ocp->hashn            = hashn;
  71               		.loc 1 257 0
  72 001e 6883      		st Y,r22
 258:../../../os/oslib/src/chobjcaches.c ****   ocp->hashp            = hashp;
  73               		.loc 1 258 0
  74 0020 5A83      		std Y+2,r21
  75 0022 4983      		std Y+1,r20
 259:../../../os/oslib/src/chobjcaches.c ****   ocp->objn             = objn;
  76               		.loc 1 259 0
  77 0024 2B83      		std Y+3,r18
 260:../../../os/oslib/src/chobjcaches.c ****   ocp->objvp            = objvp;
  78               		.loc 1 260 0
  79 0026 FF82      		std Y+7,r15
  80 0028 EE82      		std Y+6,r14
 261:../../../os/oslib/src/chobjcaches.c ****   ocp->readf            = readf;
  81               		.loc 1 261 0
  82 002a DB8A      		std Y+19,r13
  83 002c CA8A      		std Y+18,r12
 262:../../../os/oslib/src/chobjcaches.c ****   ocp->writef           = writef;
  84               		.loc 1 262 0
  85 002e BD8A      		std Y+21,r11
  86 0030 AC8A      		std Y+20,r10
 263:../../../os/oslib/src/chobjcaches.c ****   ocp->lru.hash_next    = NULL;
  87               		.loc 1 263 0
  88 0032 1986      		std Y+9,__zero_reg__
  89 0034 1886      		std Y+8,__zero_reg__
 264:../../../os/oslib/src/chobjcaches.c ****   ocp->lru.hash_prev    = NULL;
  90               		.loc 1 264 0
  91 0036 1B86      		std Y+11,__zero_reg__
  92 0038 1A86      		std Y+10,__zero_reg__
 265:../../../os/oslib/src/chobjcaches.c ****   ocp->lru.lru_next     = (oc_object_t *)&ocp->lru;
  93               		.loc 1 265 0
  94 003a BE01      		movw r22,r28
  95               	.LVL2:
  96 003c 685F      		subi r22,-8
  97 003e 7F4F      		sbci r23,-1
  98 0040 7D87      		std Y+13,r23
  99 0042 6C87      		std Y+12,r22
 266:../../../os/oslib/src/chobjcaches.c ****   ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 100               		.loc 1 266 0
 101 0044 7F87      		std Y+15,r23
 102 0046 6E87      		std Y+14,r22
 103 0048 DA01      		movw r26,r20
 104               	.LVL3:
 105               	.L2:
 267:../../../os/oslib/src/chobjcaches.c **** 
 268:../../../os/oslib/src/chobjcaches.c ****   /* Hash headers initialization.*/
 269:../../../os/oslib/src/chobjcaches.c ****   do {
 270:../../../os/oslib/src/chobjcaches.c ****     hashp->hash_next = (oc_object_t *)hashp;
 106               		.loc 1 270 0 discriminator 1
 107 004a 0B2E      		mov __tmp_reg__,r27
 108 004c 1196      		adiw r26,1
 109 004e 0C92      		st X,__tmp_reg__
 110 0050 1197      		sbiw r26,1
 111 0052 AC93      		st X,r26
 271:../../../os/oslib/src/chobjcaches.c ****     hashp->hash_prev = (oc_object_t *)hashp;
 112               		.loc 1 271 0 discriminator 1
 113 0054 0A2E      		mov __tmp_reg__,r26
 114 0056 1B2E      		mov __zero_reg__,r27
 115 0058 1396      		adiw r26,2+1
 116 005a 1C92      		st X,__zero_reg__
 117 005c 0E92      		st -X,__tmp_reg__
 118 005e 1124      		clr __zero_reg__
 119 0060 1297      		sbiw r26,2
 272:../../../os/oslib/src/chobjcaches.c ****     hashp++;
 120               		.loc 1 272 0 discriminator 1
 121 0062 1496      		adiw r26,4
 122               	.LVL4:
 273:../../../os/oslib/src/chobjcaches.c ****   } while (hashp < &ocp->hashp[ocp->hashn]);
 123               		.loc 1 273 0 discriminator 1
 124 0064 8881      		ld r24,Y
 125 0066 7A01      		movw r14,r20
 126 0068 34E0      		ldi r19,lo8(4)
 127 006a 839F      		mul r24,r19
 128 006c E00C      		add r14,r0
 129 006e F11C      		adc r15,r1
 130 0070 1124      		clr __zero_reg__
 131 0072 AE15      		cp r26,r14
 132 0074 BF05      		cpc r27,r15
 133 0076 00F0      		brlo .L2
 134               	.LBB13:
 274:../../../os/oslib/src/chobjcaches.c **** 
 275:../../../os/oslib/src/chobjcaches.c ****   /* Object headers initialization.*/
 276:../../../os/oslib/src/chobjcaches.c ****   do {
 277:../../../os/oslib/src/chobjcaches.c ****     oc_object_t *objp = (oc_object_t *)objvp;
 278:../../../os/oslib/src/chobjcaches.c **** 
 279:../../../os/oslib/src/chobjcaches.c ****     chSemObjectInit(&objp->obj_sem, (cnt_t)1);
 135               		.loc 1 279 0 discriminator 1
 136 0078 81E0      		ldi r24,lo8(1)
 280:../../../os/oslib/src/chobjcaches.c ****     LRU_INSERT_HEAD(ocp, objp);
 281:../../../os/oslib/src/chobjcaches.c ****     objp->obj_group = 0U;
 282:../../../os/oslib/src/chobjcaches.c ****     objp->obj_key   = 0U;
 283:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INLRU;
 137               		.loc 1 283 0 discriminator 1
 138 007a C12C      		mov r12,__zero_reg__
 139 007c D12C      		mov r13,__zero_reg__
 140 007e 7601      		movw r14,r12
 141 0080 C394      		inc r12
 142               	.LVL5:
 143               	.L3:
 279:../../../os/oslib/src/chobjcaches.c ****     LRU_INSERT_HEAD(ocp, objp);
 144               		.loc 1 279 0 discriminator 1
 145 0082 808B      		std Z+16,r24
 280:../../../os/oslib/src/chobjcaches.c ****     LRU_INSERT_HEAD(ocp, objp);
 146               		.loc 1 280 0 discriminator 1
 147 0084 AC85      		ldd r26,Y+12
 148 0086 BD85      		ldd r27,Y+13
 149 0088 B583      		std Z+5,r27
 150 008a A483      		std Z+4,r26
 151 008c 7783      		std Z+7,r23
 152 008e 6683      		std Z+6,r22
 153 0090 1796      		adiw r26,6+1
 154 0092 FC93      		st X,r31
 155 0094 EE93      		st -X,r30
 156 0096 1697      		sbiw r26,6
 157 0098 FD87      		std Y+13,r31
 158 009a EC87      		std Y+12,r30
 281:../../../os/oslib/src/chobjcaches.c ****     objp->obj_key   = 0U;
 159               		.loc 1 281 0 discriminator 1
 160 009c 1086      		std Z+8,__zero_reg__
 161 009e 1186      		std Z+9,__zero_reg__
 162 00a0 1286      		std Z+10,__zero_reg__
 163 00a2 1386      		std Z+11,__zero_reg__
 282:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INLRU;
 164               		.loc 1 282 0 discriminator 1
 165 00a4 1486      		std Z+12,__zero_reg__
 166 00a6 1586      		std Z+13,__zero_reg__
 167 00a8 1686      		std Z+14,__zero_reg__
 168 00aa 1786      		std Z+15,__zero_reg__
 169               		.loc 1 283 0 discriminator 1
 170 00ac C18A      		std Z+17,r12
 171 00ae D28A      		std Z+18,r13
 172 00b0 E38A      		std Z+19,r14
 173 00b2 F48A      		std Z+20,r15
 284:../../../os/oslib/src/chobjcaches.c ****     objp->dptr      = NULL;
 174               		.loc 1 284 0 discriminator 1
 175 00b4 168A      		std Z+22,__zero_reg__
 176 00b6 158A      		std Z+21,__zero_reg__
 285:../../../os/oslib/src/chobjcaches.c ****     objvp = (void *)((uint8_t *)objvp + objsz);
 177               		.loc 1 285 0 discriminator 1
 178 00b8 E00F      		add r30,r16
 179 00ba F11F      		adc r31,r17
 180               	.LVL6:
 286:../../../os/oslib/src/chobjcaches.c ****     objn--;
 181               		.loc 1 286 0 discriminator 1
 182 00bc 2150      		subi r18,lo8(-(-1))
 183               	.LVL7:
 184               	.LBE13:
 287:../../../os/oslib/src/chobjcaches.c ****   } while (objn > (ucnt_t)0);
 185               		.loc 1 287 0 discriminator 1
 186 00be 01F4      		brne .L3
 187               	/* epilogue start */
 288:../../../os/oslib/src/chobjcaches.c **** }
 188               		.loc 1 288 0
 189 00c0 DF91      		pop r29
 190 00c2 CF91      		pop r28
 191               	.LVL8:
 192 00c4 1F91      		pop r17
 193 00c6 0F91      		pop r16
 194               	.LVL9:
 195 00c8 FF90      		pop r15
 196 00ca EF90      		pop r14
 197 00cc DF90      		pop r13
 198 00ce CF90      		pop r12
 199 00d0 BF90      		pop r11
 200 00d2 AF90      		pop r10
 201               	.LVL10:
 202 00d4 0895      		ret
 203               		.cfi_endproc
 204               	.LFE100:
 206               		.section	.text.chCacheGetObject,"ax",@progbits
 207               	.global	chCacheGetObject
 209               	chCacheGetObject:
 210               	.LFB101:
 289:../../../os/oslib/src/chobjcaches.c **** 
 290:../../../os/oslib/src/chobjcaches.c **** /**
 291:../../../os/oslib/src/chobjcaches.c ****  * @brief   Retrieves an object from the cache.
 292:../../../os/oslib/src/chobjcaches.c ****  * @note    If the object is not in cache then the returned object is marked
 293:../../../os/oslib/src/chobjcaches.c ****  *          as @p OC_FLAG_NOTSYNC meaning that its data contains garbage and
 294:../../../os/oslib/src/chobjcaches.c ****  *          must be initialized.
 295:../../../os/oslib/src/chobjcaches.c ****  *
 296:../../../os/oslib/src/chobjcaches.c ****  * @param[in] ocp       pointer to the @p objects_cache_t structure
 297:../../../os/oslib/src/chobjcaches.c ****  * @param[in] group     object group identifier
 298:../../../os/oslib/src/chobjcaches.c ****  * @param[in] key       object identifier within the group
 299:../../../os/oslib/src/chobjcaches.c ****  * @return              The pointer to the retrieved object.
 300:../../../os/oslib/src/chobjcaches.c ****  *
 301:../../../os/oslib/src/chobjcaches.c ****  * @api
 302:../../../os/oslib/src/chobjcaches.c ****  */
 303:../../../os/oslib/src/chobjcaches.c **** oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 304:../../../os/oslib/src/chobjcaches.c ****                               uint32_t group,
 305:../../../os/oslib/src/chobjcaches.c ****                               uint32_t key) {
 211               		.loc 1 305 0
 212               		.cfi_startproc
 213               	.LVL11:
 214 0000 4F92      		push r4
 215               	.LCFI10:
 216               		.cfi_def_cfa_offset 3
 217               		.cfi_offset 4, -2
 218 0002 5F92      		push r5
 219               	.LCFI11:
 220               		.cfi_def_cfa_offset 4
 221               		.cfi_offset 5, -3
 222 0004 6F92      		push r6
 223               	.LCFI12:
 224               		.cfi_def_cfa_offset 5
 225               		.cfi_offset 6, -4
 226 0006 7F92      		push r7
 227               	.LCFI13:
 228               		.cfi_def_cfa_offset 6
 229               		.cfi_offset 7, -5
 230 0008 8F92      		push r8
 231               	.LCFI14:
 232               		.cfi_def_cfa_offset 7
 233               		.cfi_offset 8, -6
 234 000a 9F92      		push r9
 235               	.LCFI15:
 236               		.cfi_def_cfa_offset 8
 237               		.cfi_offset 9, -7
 238 000c AF92      		push r10
 239               	.LCFI16:
 240               		.cfi_def_cfa_offset 9
 241               		.cfi_offset 10, -8
 242 000e BF92      		push r11
 243               	.LCFI17:
 244               		.cfi_def_cfa_offset 10
 245               		.cfi_offset 11, -9
 246 0010 CF92      		push r12
 247               	.LCFI18:
 248               		.cfi_def_cfa_offset 11
 249               		.cfi_offset 12, -10
 250 0012 DF92      		push r13
 251               	.LCFI19:
 252               		.cfi_def_cfa_offset 12
 253               		.cfi_offset 13, -11
 254 0014 EF92      		push r14
 255               	.LCFI20:
 256               		.cfi_def_cfa_offset 13
 257               		.cfi_offset 14, -12
 258 0016 FF92      		push r15
 259               	.LCFI21:
 260               		.cfi_def_cfa_offset 14
 261               		.cfi_offset 15, -13
 262 0018 0F93      		push r16
 263               	.LCFI22:
 264               		.cfi_def_cfa_offset 15
 265               		.cfi_offset 16, -14
 266 001a 1F93      		push r17
 267               	.LCFI23:
 268               		.cfi_def_cfa_offset 16
 269               		.cfi_offset 17, -15
 270 001c CF93      		push r28
 271               	.LCFI24:
 272               		.cfi_def_cfa_offset 17
 273               		.cfi_offset 28, -16
 274 001e DF93      		push r29
 275               	.LCFI25:
 276               		.cfi_def_cfa_offset 18
 277               		.cfi_offset 29, -17
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 16 */
 281               	.L__stack_usage = 16
 282 0020 5C01      		movw r10,r24
 283 0022 2A01      		movw r4,r20
 284 0024 3B01      		movw r6,r22
 285 0026 6801      		movw r12,r16
 286 0028 7901      		movw r14,r18
 287               	.LBB27:
 288               	.LBB28:
 289               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 290               		.loc 2 430 0
 291               	/* #APP */
 292               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 293 002a F894      		cli
 294               	 ;  0 "" 2
 295               	.LVL12:
 296               	/* #NOAPP */
 297               	.LBE28:
 298               	.LBE27:
 299               	.LBB29:
 300               	.LBB30:
 141:../../../os/oslib/src/chobjcaches.c ****   objp = hhp->hash_next;
 301               		.loc 1 141 0
 302 002c 8A01      		movw r16,r20
 303               	.LVL13:
 304 002e 0C0D      		add r16,r12
 305 0030 1D1D      		adc r17,r13
 306 0032 DC01      		movw r26,r24
 307 0034 EC91      		ld r30,X
 308 0036 F0E0      		ldi r31,0
 309 0038 3197      		sbiw r30,1
 310 003a E023      		and r30,r16
 311 003c F123      		and r31,r17
 312 003e EE0F      		lsl r30
 313 0040 FF1F      		rol r31
 314 0042 EE0F      		lsl r30
 315 0044 FF1F      		rol r31
 316 0046 1196      		adiw r26,1
 317 0048 8D91      		ld r24,X+
 318 004a 9C91      		ld r25,X
 319 004c 1297      		sbiw r26,1+1
 320               	.LVL14:
 321 004e E80F      		add r30,r24
 322 0050 F91F      		adc r31,r25
 323               	.LVL15:
 142:../../../os/oslib/src/chobjcaches.c **** 
 324               		.loc 1 142 0
 325 0052 C081      		ld r28,Z
 326 0054 D181      		ldd r29,Z+1
 327               	.LVL16:
 145:../../../os/oslib/src/chobjcaches.c ****     if ((objp->obj_key == key) && (objp->obj_group == group)) {
 328               		.loc 1 145 0
 329 0056 EC17      		cp r30,r28
 330 0058 FD07      		cpc r31,r29
 331 005a 01F4      		brne .L11
 332 005c 00C0      		rjmp .L8
 333               	.L9:
 151:../../../os/oslib/src/chobjcaches.c ****   }
 334               		.loc 1 151 0
 335 005e 0990      		ld __tmp_reg__,Y+
 336 0060 D881      		ld r29,Y
 337 0062 C02D      		mov r28,__tmp_reg__
 338               	.LVL17:
 145:../../../os/oslib/src/chobjcaches.c ****     if ((objp->obj_key == key) && (objp->obj_group == group)) {
 339               		.loc 1 145 0
 340 0064 EC17      		cp r30,r28
 341 0066 FD07      		cpc r31,r29
 342 0068 01F4      		brne .+2
 343 006a 00C0      		rjmp .L8
 344               	.L11:
 146:../../../os/oslib/src/chobjcaches.c **** 
 345               		.loc 1 146 0
 346 006c 8C85      		ldd r24,Y+12
 347 006e 9D85      		ldd r25,Y+13
 348 0070 AE85      		ldd r26,Y+14
 349 0072 BF85      		ldd r27,Y+15
 350 0074 C816      		cp r12,r24
 351 0076 D906      		cpc r13,r25
 352 0078 EA06      		cpc r14,r26
 353 007a FB06      		cpc r15,r27
 354 007c 01F4      		brne .L9
 355 007e 8885      		ldd r24,Y+8
 356 0080 9985      		ldd r25,Y+9
 357 0082 AA85      		ldd r26,Y+10
 358 0084 BB85      		ldd r27,Y+11
 359 0086 4816      		cp r4,r24
 360 0088 5906      		cpc r5,r25
 361 008a 6A06      		cpc r6,r26
 362 008c 7B06      		cpc r7,r27
 363 008e 01F4      		brne .L9
 364               	.LVL18:
 365               	.LBE30:
 366               	.LBE29:
 306:../../../os/oslib/src/chobjcaches.c ****   oc_object_t *objp;
 307:../../../os/oslib/src/chobjcaches.c **** 
 308:../../../os/oslib/src/chobjcaches.c ****   /* Critical section enter, the hash check operation is fast.*/
 309:../../../os/oslib/src/chobjcaches.c ****   chSysLock();
 310:../../../os/oslib/src/chobjcaches.c **** 
 311:../../../os/oslib/src/chobjcaches.c ****   /* Checking the cache for a hit.*/
 312:../../../os/oslib/src/chobjcaches.c ****   objp = hash_get_s(ocp, group, key);
 313:../../../os/oslib/src/chobjcaches.c ****   if (objp != NULL) {
 367               		.loc 1 313 0
 368 0090 2097      		sbiw r28,0
 369 0092 01F0      		breq .L8
 314:../../../os/oslib/src/chobjcaches.c **** 
 315:../../../os/oslib/src/chobjcaches.c ****     chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
 316:../../../os/oslib/src/chobjcaches.c ****                 "not in hash");
 317:../../../os/oslib/src/chobjcaches.c **** 
 318:../../../os/oslib/src/chobjcaches.c ****     /* Cache hit, checking if the buffer is owned by some
 319:../../../os/oslib/src/chobjcaches.c ****        other thread.*/
 320:../../../os/oslib/src/chobjcaches.c ****     if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 370               		.loc 1 320 0
 371 0094 8889      		ldd r24,Y+16
 372 0096 1816      		cp __zero_reg__,r24
 373 0098 04F0      		brlt .+2
 374 009a 00C0      		rjmp .L12
 321:../../../os/oslib/src/chobjcaches.c ****       /* Not owned case, it is in the LRU list.*/
 322:../../../os/oslib/src/chobjcaches.c **** 
 323:../../../os/oslib/src/chobjcaches.c ****       chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
 324:../../../os/oslib/src/chobjcaches.c ****                   "not in LRU");
 325:../../../os/oslib/src/chobjcaches.c **** 
 326:../../../os/oslib/src/chobjcaches.c ****       /* Removing the object from LRU, now it is "owned".*/
 327:../../../os/oslib/src/chobjcaches.c ****       LRU_REMOVE(objp);
 375               		.loc 1 327 0
 376 009c EE81      		ldd r30,Y+6
 377 009e FF81      		ldd r31,Y+7
 378 00a0 8C81      		ldd r24,Y+4
 379 00a2 9D81      		ldd r25,Y+5
 380 00a4 9583      		std Z+5,r25
 381 00a6 8483      		std Z+4,r24
 382 00a8 AC81      		ldd r26,Y+4
 383 00aa BD81      		ldd r27,Y+5
 384 00ac 1796      		adiw r26,6+1
 385 00ae FC93      		st X,r31
 386 00b0 EE93      		st -X,r30
 387 00b2 1697      		sbiw r26,6
 328:../../../os/oslib/src/chobjcaches.c ****       objp->obj_flags &= ~OC_FLAG_INLRU;
 388               		.loc 1 328 0
 389 00b4 8989      		ldd r24,Y+17
 390 00b6 9A89      		ldd r25,Y+18
 391 00b8 AB89      		ldd r26,Y+19
 392 00ba BC89      		ldd r27,Y+20
 393 00bc 8E7F      		andi r24,254
 394 00be AA27      		clr r26
 395 00c0 BB27      		clr r27
 396 00c2 898B      		std Y+17,r24
 397 00c4 9A8B      		std Y+18,r25
 398 00c6 AB8B      		std Y+19,r26
 399 00c8 BC8B      		std Y+20,r27
 329:../../../os/oslib/src/chobjcaches.c **** 
 330:../../../os/oslib/src/chobjcaches.c ****       /* Getting the object semaphore, we know there is no wait so
 331:../../../os/oslib/src/chobjcaches.c ****          using the "fast" variant.*/
 332:../../../os/oslib/src/chobjcaches.c ****       chSemFastWaitI(&objp->obj_sem);
 400               		.loc 1 332 0
 401 00ca 8889      		ldd r24,Y+16
 402 00cc 8150      		subi r24,lo8(-(-1))
 403 00ce 888B      		std Y+16,r24
 404               	.LVL19:
 405               	.L13:
 406               	.LBB31:
 407               	.LBB32:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 408               		.loc 2 440 0
 409               	/* #APP */
 410               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 411 00d0 7894      		sei
 412               	 ;  0 "" 2
 413               	/* #NOAPP */
 414               	.LBE32:
 415               	.LBE31:
 333:../../../os/oslib/src/chobjcaches.c ****     }
 334:../../../os/oslib/src/chobjcaches.c ****     else {
 335:../../../os/oslib/src/chobjcaches.c ****       /* Owned case, some other thread is playing with this object, we
 336:../../../os/oslib/src/chobjcaches.c ****          need to wait.*/
 337:../../../os/oslib/src/chobjcaches.c **** 
 338:../../../os/oslib/src/chobjcaches.c ****       chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == 0U, "in LRU");
 339:../../../os/oslib/src/chobjcaches.c **** 
 340:../../../os/oslib/src/chobjcaches.c ****       /* Waiting on the buffer semaphore.*/
 341:../../../os/oslib/src/chobjcaches.c ****       (void) chSemWaitS(&objp->obj_sem);
 342:../../../os/oslib/src/chobjcaches.c ****     }
 343:../../../os/oslib/src/chobjcaches.c ****   }
 344:../../../os/oslib/src/chobjcaches.c ****   else {
 345:../../../os/oslib/src/chobjcaches.c ****     /* Cache miss, getting an object buffer from the LRU list.*/
 346:../../../os/oslib/src/chobjcaches.c ****     objp = lru_get_last_s(ocp);
 347:../../../os/oslib/src/chobjcaches.c **** 
 348:../../../os/oslib/src/chobjcaches.c ****     /* Naming this object and publishing it in the hash table.*/
 349:../../../os/oslib/src/chobjcaches.c ****     objp->obj_group = group;
 350:../../../os/oslib/src/chobjcaches.c ****     objp->obj_key   = key;
 351:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 352:../../../os/oslib/src/chobjcaches.c ****     HASH_INSERT(ocp, objp, group, key);
 353:../../../os/oslib/src/chobjcaches.c ****   }
 354:../../../os/oslib/src/chobjcaches.c **** 
 355:../../../os/oslib/src/chobjcaches.c ****   /* Out of critical section and returning the object.*/
 356:../../../os/oslib/src/chobjcaches.c ****   chSysUnlock();
 357:../../../os/oslib/src/chobjcaches.c **** 
 358:../../../os/oslib/src/chobjcaches.c ****   return objp;
 359:../../../os/oslib/src/chobjcaches.c **** }
 416               		.loc 1 359 0
 417 00d2 CE01      		movw r24,r28
 418               	/* epilogue start */
 419 00d4 DF91      		pop r29
 420 00d6 CF91      		pop r28
 421               	.LVL20:
 422 00d8 1F91      		pop r17
 423 00da 0F91      		pop r16
 424 00dc FF90      		pop r15
 425 00de EF90      		pop r14
 426 00e0 DF90      		pop r13
 427 00e2 CF90      		pop r12
 428               	.LVL21:
 429 00e4 BF90      		pop r11
 430 00e6 AF90      		pop r10
 431               	.LVL22:
 432 00e8 9F90      		pop r9
 433 00ea 8F90      		pop r8
 434 00ec 7F90      		pop r7
 435 00ee 6F90      		pop r6
 436 00f0 5F90      		pop r5
 437 00f2 4F90      		pop r4
 438               	.LVL23:
 439 00f4 0895      		ret
 440               	.LVL24:
 441               	.L8:
 442 00f6 4501      		movw r8,r10
 443 00f8 B1E1      		ldi r27,17
 444 00fa 8B0E      		add r8,r27
 445 00fc 911C      		adc r9,__zero_reg__
 446 00fe 00C0      		rjmp .L16
 447               	.LVL25:
 448               	.L14:
 449               	.LBB33:
 450               	.LBB34:
 451               	.LBB35:
 452               	.LBB36:
 453               		.loc 2 440 0
 454               	/* #APP */
 455               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 456 0100 7894      		sei
 457               	 ;  0 "" 2
 458               	/* #NOAPP */
 459               	.LBE36:
 460               	.LBE35:
 209:../../../os/oslib/src/chobjcaches.c ****     (void) ocp->writef(ocp, objp, true);
 461               		.loc 1 209 0
 462 0102 82E2      		ldi r24,lo8(34)
 463 0104 90E0      		ldi r25,0
 464 0106 A0E0      		ldi r26,0
 465 0108 B0E0      		ldi r27,0
 466 010a 898B      		std Y+17,r24
 467 010c 9A8B      		std Y+18,r25
 468 010e AB8B      		std Y+19,r26
 469 0110 BC8B      		std Y+20,r27
 210:../../../os/oslib/src/chobjcaches.c **** 
 470               		.loc 1 210 0
 471 0112 D501      		movw r26,r10
 472 0114 5496      		adiw r26,20
 473 0116 ED91      		ld r30,X+
 474 0118 FC91      		ld r31,X
 475 011a 5597      		sbiw r26,20+1
 476 011c 41E0      		ldi r20,lo8(1)
 477 011e BE01      		movw r22,r28
 478 0120 C501      		movw r24,r10
 479 0122 0995      		icall
 480               	.LVL26:
 481               	.LBB37:
 482               	.LBB38:
 430:../../../os/common/ports/AVR/chcore.h **** }
 483               		.loc 2 430 0
 484               	/* #APP */
 485               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 486 0124 F894      		cli
 487               	 ;  0 "" 2
 488               	.LVL27:
 489               	/* #NOAPP */
 490               	.L16:
 491               	.LBE38:
 492               	.LBE37:
 170:../../../os/oslib/src/chobjcaches.c **** 
 493               		.loc 1 170 0
 494 0126 60E0      		ldi r22,0
 495 0128 70E0      		ldi r23,0
 496 012a C401      		movw r24,r8
 497 012c 0E94 0000 		call chSemWaitTimeoutS
 498               	.LVL28:
 174:../../../os/oslib/src/chobjcaches.c **** 
 499               		.loc 1 174 0
 500 0130 F501      		movw r30,r10
 501 0132 C685      		ldd r28,Z+14
 502 0134 D785      		ldd r29,Z+15
 503               	.LVL29:
 181:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags &= ~OC_FLAG_INLRU;
 504               		.loc 1 181 0
 505 0136 EE81      		ldd r30,Y+6
 506 0138 FF81      		ldd r31,Y+7
 507 013a 8C81      		ldd r24,Y+4
 508 013c 9D81      		ldd r25,Y+5
 509 013e 9583      		std Z+5,r25
 510 0140 8483      		std Z+4,r24
 511 0142 AC81      		ldd r26,Y+4
 512 0144 BD81      		ldd r27,Y+5
 513 0146 1796      		adiw r26,6+1
 514 0148 FC93      		st X,r31
 515 014a EE93      		st -X,r30
 516 014c 1697      		sbiw r26,6
 182:../../../os/oslib/src/chobjcaches.c **** 
 517               		.loc 1 182 0
 518 014e 8989      		ldd r24,Y+17
 519 0150 9A89      		ldd r25,Y+18
 520 0152 AB89      		ldd r26,Y+19
 521 0154 BC89      		ldd r27,Y+20
 522 0156 AC01      		movw r20,r24
 523 0158 BD01      		movw r22,r26
 524 015a 4E7F      		andi r20,254
 525 015c 6627      		clr r22
 526 015e 7727      		clr r23
 527 0160 498B      		std Y+17,r20
 528 0162 5A8B      		std Y+18,r21
 529 0164 6B8B      		std Y+19,r22
 530 0166 7C8B      		std Y+20,r23
 186:../../../os/oslib/src/chobjcaches.c **** 
 531               		.loc 1 186 0
 532 0168 2889      		ldd r18,Y+16
 533 016a 2150      		subi r18,lo8(-(-1))
 534 016c 288B      		std Y+16,r18
 190:../../../os/oslib/src/chobjcaches.c **** 
 535               		.loc 1 190 0
 536 016e 84FD      		sbrc r24,4
 537 0170 00C0      		rjmp .L14
 193:../../../os/oslib/src/chobjcaches.c ****         HASH_REMOVE(objp);
 538               		.loc 1 193 0
 539 0172 81FF      		sbrs r24,1
 540 0174 00C0      		rjmp .L15
 194:../../../os/oslib/src/chobjcaches.c ****       }
 541               		.loc 1 194 0
 542 0176 EA81      		ldd r30,Y+2
 543 0178 FB81      		ldd r31,Y+3
 544 017a 8881      		ld r24,Y
 545 017c 9981      		ldd r25,Y+1
 546 017e 9183      		std Z+1,r25
 547 0180 8083      		st Z,r24
 548 0182 A881      		ld r26,Y
 549 0184 B981      		ldd r27,Y+1
 550 0186 1396      		adiw r26,2+1
 551 0188 FC93      		st X,r31
 552 018a EE93      		st -X,r30
 553 018c 1297      		sbiw r26,2
 554               	.L15:
 555               	.LVL30:
 556               	.LBE34:
 557               	.LBE33:
 349:../../../os/oslib/src/chobjcaches.c ****     objp->obj_key   = key;
 558               		.loc 1 349 0
 559 018e 4886      		std Y+8,r4
 560 0190 5986      		std Y+9,r5
 561 0192 6A86      		std Y+10,r6
 562 0194 7B86      		std Y+11,r7
 350:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 563               		.loc 1 350 0
 564 0196 CC86      		std Y+12,r12
 565 0198 DD86      		std Y+13,r13
 566 019a EE86      		std Y+14,r14
 567 019c FF86      		std Y+15,r15
 351:../../../os/oslib/src/chobjcaches.c ****     HASH_INSERT(ocp, objp, group, key);
 568               		.loc 1 351 0
 569 019e 8AE0      		ldi r24,lo8(10)
 570 01a0 90E0      		ldi r25,0
 571 01a2 A0E0      		ldi r26,0
 572 01a4 B0E0      		ldi r27,0
 573 01a6 898B      		std Y+17,r24
 574 01a8 9A8B      		std Y+18,r25
 575 01aa AB8B      		std Y+19,r26
 576 01ac BC8B      		std Y+20,r27
 577               	.LBB39:
 352:../../../os/oslib/src/chobjcaches.c ****   }
 578               		.loc 1 352 0
 579 01ae D501      		movw r26,r10
 580 01b0 EC91      		ld r30,X
 581 01b2 F0E0      		ldi r31,0
 582 01b4 3197      		sbiw r30,1
 583 01b6 0E23      		and r16,r30
 584 01b8 1F23      		and r17,r31
 585 01ba 000F      		lsl r16
 586 01bc 111F      		rol r17
 587 01be 000F      		lsl r16
 588 01c0 111F      		rol r17
 589 01c2 1196      		adiw r26,1
 590 01c4 ED91      		ld r30,X+
 591 01c6 FC91      		ld r31,X
 592 01c8 1297      		sbiw r26,1+1
 593 01ca E00F      		add r30,r16
 594 01cc F11F      		adc r31,r17
 595               	.LVL31:
 596 01ce A081      		ld r26,Z
 597 01d0 B181      		ldd r27,Z+1
 598 01d2 B983      		std Y+1,r27
 599 01d4 A883      		st Y,r26
 600 01d6 FB83      		std Y+3,r31
 601 01d8 EA83      		std Y+2,r30
 602 01da 1396      		adiw r26,2+1
 603 01dc DC93      		st X,r29
 604 01de CE93      		st -X,r28
 605 01e0 1297      		sbiw r26,2
 606 01e2 D183      		std Z+1,r29
 607 01e4 C083      		st Z,r28
 608 01e6 00C0      		rjmp .L13
 609               	.LVL32:
 610               	.L12:
 611               	.LBE39:
 341:../../../os/oslib/src/chobjcaches.c ****     }
 612               		.loc 1 341 0
 613 01e8 60E0      		ldi r22,0
 614 01ea 70E0      		ldi r23,0
 615 01ec CE01      		movw r24,r28
 616 01ee 4096      		adiw r24,16
 617 01f0 0E94 0000 		call chSemWaitTimeoutS
 618               	.LVL33:
 619 01f4 00C0      		rjmp .L13
 620               		.cfi_endproc
 621               	.LFE101:
 623               		.section	.text.chCacheReleaseObjectI,"ax",@progbits
 624               	.global	chCacheReleaseObjectI
 626               	chCacheReleaseObjectI:
 627               	.LFB102:
 360:../../../os/oslib/src/chobjcaches.c **** 
 361:../../../os/oslib/src/chobjcaches.c **** /**
 362:../../../os/oslib/src/chobjcaches.c ****  * @brief   Releases an object into the cache.
 363:../../../os/oslib/src/chobjcaches.c ****  * @note    This function gives a meaning to the following flags:
 364:../../../os/oslib/src/chobjcaches.c ****  *          - @p OC_FLAG_INLRU must be cleared.
 365:../../../os/oslib/src/chobjcaches.c ****  *          - @p OC_FLAG_INHASH must be set.
 366:../../../os/oslib/src/chobjcaches.c ****  *          - @p OC_FLAG_SHARED must be cleared.
 367:../../../os/oslib/src/chobjcaches.c ****  *          - @p OC_FLAG_NOTSYNC invalidates the object and queues it on
 368:../../../os/oslib/src/chobjcaches.c ****  *            the LRU tail.
 369:../../../os/oslib/src/chobjcaches.c ****  *          - @p OC_FLAG_LAZYWRITE is ignored and kept, a write will occur
 370:../../../os/oslib/src/chobjcaches.c ****  *            when the object is removed from the LRU list (lazy write).
 371:../../../os/oslib/src/chobjcaches.c ****  *          .
 372:../../../os/oslib/src/chobjcaches.c ****  *
 373:../../../os/oslib/src/chobjcaches.c ****  * @param[in] ocp       pointer to the @p objects_cache_t structure
 374:../../../os/oslib/src/chobjcaches.c ****  * @param[in] objp      pointer to the @p oc_object_t structure
 375:../../../os/oslib/src/chobjcaches.c ****  *
 376:../../../os/oslib/src/chobjcaches.c ****  * @iclass
 377:../../../os/oslib/src/chobjcaches.c ****  */
 378:../../../os/oslib/src/chobjcaches.c **** void chCacheReleaseObjectI(objects_cache_t *ocp,
 379:../../../os/oslib/src/chobjcaches.c ****                            oc_object_t *objp) {
 628               		.loc 1 379 0
 629               		.cfi_startproc
 630               	.LVL34:
 631 0000 CF93      		push r28
 632               	.LCFI26:
 633               		.cfi_def_cfa_offset 3
 634               		.cfi_offset 28, -2
 635 0002 DF93      		push r29
 636               	.LCFI27:
 637               		.cfi_def_cfa_offset 4
 638               		.cfi_offset 29, -3
 639               	/* prologue: function */
 640               	/* frame size = 0 */
 641               	/* stack size = 2 */
 642               	.L__stack_usage = 2
 643 0004 FB01      		movw r30,r22
 380:../../../os/oslib/src/chobjcaches.c **** 
 381:../../../os/oslib/src/chobjcaches.c ****   /* Checking initial conditions of the object to be released.*/
 382:../../../os/oslib/src/chobjcaches.c ****   chDbgAssert((objp->obj_flags & (OC_FLAG_INLRU |
 383:../../../os/oslib/src/chobjcaches.c ****                                   OC_FLAG_INHASH |
 384:../../../os/oslib/src/chobjcaches.c ****                                   OC_FLAG_SHARED)) == OC_FLAG_INHASH,
 385:../../../os/oslib/src/chobjcaches.c ****               "invalid object state");
 386:../../../os/oslib/src/chobjcaches.c ****   chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
 387:../../../os/oslib/src/chobjcaches.c ****               "semaphore counter greater than 0");
 388:../../../os/oslib/src/chobjcaches.c **** 
 389:../../../os/oslib/src/chobjcaches.c ****   /* If some thread is waiting for this specific buffer then it is
 390:../../../os/oslib/src/chobjcaches.c ****      handed directly without going through the LRU.*/
 391:../../../os/oslib/src/chobjcaches.c ****   if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 644               		.loc 1 391 0
 645 0006 2089      		ldd r18,Z+16
 646 0008 27FD      		sbrc r18,7
 647 000a 00C0      		rjmp .L30
 392:../../../os/oslib/src/chobjcaches.c ****     /* Clearing all flags except those that are still meaningful, note,
 393:../../../os/oslib/src/chobjcaches.c ****        OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
 394:../../../os/oslib/src/chobjcaches.c ****        will handle them.*/
 395:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 396:../../../os/oslib/src/chobjcaches.c ****     chSemSignalI(&objp->obj_sem);
 397:../../../os/oslib/src/chobjcaches.c ****     return;
 398:../../../os/oslib/src/chobjcaches.c ****   }
 399:../../../os/oslib/src/chobjcaches.c **** 
 400:../../../os/oslib/src/chobjcaches.c ****   /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
 401:../../../os/oslib/src/chobjcaches.c ****      and removed from the hash table.*/
 402:../../../os/oslib/src/chobjcaches.c ****   if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 648               		.loc 1 402 0
 649 000c 4189      		ldd r20,Z+17
 650 000e 5289      		ldd r21,Z+18
 651 0010 6389      		ldd r22,Z+19
 652 0012 7489      		ldd r23,Z+20
 653 0014 43FD      		sbrc r20,3
 654 0016 00C0      		rjmp .L31
 403:../../../os/oslib/src/chobjcaches.c ****     HASH_REMOVE(objp);
 404:../../../os/oslib/src/chobjcaches.c ****     LRU_INSERT_TAIL(ocp, objp);
 405:../../../os/oslib/src/chobjcaches.c ****     objp->obj_group = 0U;
 406:../../../os/oslib/src/chobjcaches.c ****     objp->obj_key   = 0U;
 407:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INLRU;
 408:../../../os/oslib/src/chobjcaches.c ****   }
 409:../../../os/oslib/src/chobjcaches.c ****   else {
 410:../../../os/oslib/src/chobjcaches.c ****     /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
 411:../../../os/oslib/src/chobjcaches.c ****     if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 412:../../../os/oslib/src/chobjcaches.c ****       /* Placing it on head.*/
 413:../../../os/oslib/src/chobjcaches.c ****       LRU_INSERT_HEAD(ocp, objp);
 655               		.loc 1 413 0
 656 0018 EC01      		movw r28,r24
 411:../../../os/oslib/src/chobjcaches.c ****       /* Placing it on head.*/
 657               		.loc 1 411 0
 658 001a 45FD      		sbrc r20,5
 659 001c 00C0      		rjmp .L28
 660               		.loc 1 413 0
 661 001e AC85      		ldd r26,Y+12
 662 0020 BD85      		ldd r27,Y+13
 663 0022 B583      		std Z+5,r27
 664 0024 A483      		std Z+4,r26
 665 0026 9C01      		movw r18,r24
 666 0028 285F      		subi r18,-8
 667 002a 3F4F      		sbci r19,-1
 668 002c 3783      		std Z+7,r19
 669 002e 2683      		std Z+6,r18
 670 0030 1796      		adiw r26,6+1
 671 0032 FC93      		st X,r31
 672 0034 EE93      		st -X,r30
 673 0036 1697      		sbiw r26,6
 674 0038 FD87      		std Y+13,r31
 675 003a EC87      		std Y+12,r30
 676               	.L29:
 414:../../../os/oslib/src/chobjcaches.c ****     }
 415:../../../os/oslib/src/chobjcaches.c ****     else {
 416:../../../os/oslib/src/chobjcaches.c ****       /* Low priority data, placing it on tail.*/
 417:../../../os/oslib/src/chobjcaches.c ****       LRU_INSERT_TAIL(ocp, objp);
 418:../../../os/oslib/src/chobjcaches.c ****     }
 419:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 420:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags |= OC_FLAG_INLRU;
 677               		.loc 1 420 0
 678 003c 4271      		andi r20,18
 679 003e 5527      		clr r21
 680 0040 6627      		clr r22
 681 0042 7727      		clr r23
 682 0044 4160      		ori r20,1
 683 0046 418B      		std Z+17,r20
 684 0048 528B      		std Z+18,r21
 685 004a 638B      		std Z+19,r22
 686 004c 748B      		std Z+20,r23
 687               	.L27:
 688 004e EF01      		movw r28,r30
 421:../../../os/oslib/src/chobjcaches.c ****   }
 422:../../../os/oslib/src/chobjcaches.c **** 
 423:../../../os/oslib/src/chobjcaches.c ****   /* Increasing the LRU counter semaphore.*/
 424:../../../os/oslib/src/chobjcaches.c ****   chSemSignalI(&ocp->lru_sem);
 689               		.loc 1 424 0
 690 0050 4196      		adiw r24,17
 691               	.LVL35:
 692 0052 0E94 0000 		call chSemSignalI
 693               	.LVL36:
 425:../../../os/oslib/src/chobjcaches.c **** 
 426:../../../os/oslib/src/chobjcaches.c ****   /* Releasing the object, we know there are no threads waiting so
 427:../../../os/oslib/src/chobjcaches.c ****      using the "fast" signal variant.*/
 428:../../../os/oslib/src/chobjcaches.c ****   chSemFastSignalI(&objp->obj_sem);
 694               		.loc 1 428 0
 695 0056 8889      		ldd r24,Y+16
 696 0058 8F5F      		subi r24,lo8(-(1))
 697 005a 888B      		std Y+16,r24
 698               	/* epilogue start */
 429:../../../os/oslib/src/chobjcaches.c **** }
 699               		.loc 1 429 0
 700 005c DF91      		pop r29
 701 005e CF91      		pop r28
 702               	.LVL37:
 703 0060 0895      		ret
 704               	.LVL38:
 705               	.L31:
 403:../../../os/oslib/src/chobjcaches.c ****     LRU_INSERT_TAIL(ocp, objp);
 706               		.loc 1 403 0
 707 0062 A281      		ldd r26,Z+2
 708 0064 B381      		ldd r27,Z+3
 709 0066 2081      		ld r18,Z
 710 0068 3181      		ldd r19,Z+1
 711 006a 1196      		adiw r26,1
 712 006c 3C93      		st X,r19
 713 006e 2E93      		st -X,r18
 714 0070 C081      		ld r28,Z
 715 0072 D181      		ldd r29,Z+1
 716 0074 BB83      		std Y+3,r27
 717 0076 AA83      		std Y+2,r26
 404:../../../os/oslib/src/chobjcaches.c ****     objp->obj_group = 0U;
 718               		.loc 1 404 0
 719 0078 EC01      		movw r28,r24
 720 007a AE85      		ldd r26,Y+14
 721 007c BF85      		ldd r27,Y+15
 722 007e B783      		std Z+7,r27
 723 0080 A683      		std Z+6,r26
 724 0082 9C01      		movw r18,r24
 725 0084 285F      		subi r18,-8
 726 0086 3F4F      		sbci r19,-1
 727 0088 3583      		std Z+5,r19
 728 008a 2483      		std Z+4,r18
 729 008c 1596      		adiw r26,4+1
 730 008e FC93      		st X,r31
 731 0090 EE93      		st -X,r30
 732 0092 1497      		sbiw r26,4
 733 0094 FF87      		std Y+15,r31
 734 0096 EE87      		std Y+14,r30
 405:../../../os/oslib/src/chobjcaches.c ****     objp->obj_key   = 0U;
 735               		.loc 1 405 0
 736 0098 1086      		std Z+8,__zero_reg__
 737 009a 1186      		std Z+9,__zero_reg__
 738 009c 1286      		std Z+10,__zero_reg__
 739 009e 1386      		std Z+11,__zero_reg__
 406:../../../os/oslib/src/chobjcaches.c ****     objp->obj_flags = OC_FLAG_INLRU;
 740               		.loc 1 406 0
 741 00a0 1486      		std Z+12,__zero_reg__
 742 00a2 1586      		std Z+13,__zero_reg__
 743 00a4 1686      		std Z+14,__zero_reg__
 744 00a6 1786      		std Z+15,__zero_reg__
 407:../../../os/oslib/src/chobjcaches.c ****   }
 745               		.loc 1 407 0
 746 00a8 41E0      		ldi r20,lo8(1)
 747 00aa 50E0      		ldi r21,0
 748 00ac 60E0      		ldi r22,0
 749 00ae 70E0      		ldi r23,0
 750 00b0 418B      		std Z+17,r20
 751 00b2 528B      		std Z+18,r21
 752 00b4 638B      		std Z+19,r22
 753 00b6 748B      		std Z+20,r23
 754 00b8 00C0      		rjmp .L27
 755               	.L28:
 417:../../../os/oslib/src/chobjcaches.c ****     }
 756               		.loc 1 417 0
 757 00ba AE85      		ldd r26,Y+14
 758 00bc BF85      		ldd r27,Y+15
 759 00be B783      		std Z+7,r27
 760 00c0 A683      		std Z+6,r26
 761 00c2 9C01      		movw r18,r24
 762 00c4 285F      		subi r18,-8
 763 00c6 3F4F      		sbci r19,-1
 764 00c8 3583      		std Z+5,r19
 765 00ca 2483      		std Z+4,r18
 766 00cc 1596      		adiw r26,4+1
 767 00ce FC93      		st X,r31
 768 00d0 EE93      		st -X,r30
 769 00d2 1497      		sbiw r26,4
 770 00d4 FF87      		std Y+15,r31
 771 00d6 EE87      		std Y+14,r30
 772 00d8 00C0      		rjmp .L29
 773               	.L30:
 395:../../../os/oslib/src/chobjcaches.c ****     chSemSignalI(&objp->obj_sem);
 774               		.loc 1 395 0
 775 00da 8189      		ldd r24,Z+17
 776 00dc 9289      		ldd r25,Z+18
 777 00de A389      		ldd r26,Z+19
 778 00e0 B489      		ldd r27,Z+20
 779               	.LVL39:
 780 00e2 8A71      		andi r24,26
 781 00e4 9927      		clr r25
 782 00e6 AA27      		clr r26
 783 00e8 BB27      		clr r27
 784 00ea 818B      		std Z+17,r24
 785 00ec 928B      		std Z+18,r25
 786 00ee A38B      		std Z+19,r26
 787 00f0 B48B      		std Z+20,r27
 396:../../../os/oslib/src/chobjcaches.c ****     return;
 788               		.loc 1 396 0
 789 00f2 CB01      		movw r24,r22
 790 00f4 4096      		adiw r24,16
 791               	/* epilogue start */
 792               		.loc 1 429 0
 793 00f6 DF91      		pop r29
 794 00f8 CF91      		pop r28
 396:../../../os/oslib/src/chobjcaches.c ****     return;
 795               		.loc 1 396 0
 796 00fa 0C94 0000 		jmp chSemSignalI
 797               	.LVL40:
 798               		.cfi_endproc
 799               	.LFE102:
 801               		.section	.text.chCacheReadObject,"ax",@progbits
 802               	.global	chCacheReadObject
 804               	chCacheReadObject:
 805               	.LFB103:
 430:../../../os/oslib/src/chobjcaches.c **** 
 431:../../../os/oslib/src/chobjcaches.c **** /**
 432:../../../os/oslib/src/chobjcaches.c ****  * @brief   Reads object data from the storage.
 433:../../../os/oslib/src/chobjcaches.c ****  * @note    In case of asynchronous operation an error condition is not
 434:../../../os/oslib/src/chobjcaches.c ****  *          reported by this function.
 435:../../../os/oslib/src/chobjcaches.c ****  *
 436:../../../os/oslib/src/chobjcaches.c ****  * @param[in] ocp       pointer to the @p objects_cache_t structure
 437:../../../os/oslib/src/chobjcaches.c ****  * @param[in] objp      pointer to the @p oc_object_t structure
 438:../../../os/oslib/src/chobjcaches.c ****  * @param[in] async     requests an asynchronous operation if supported, the
 439:../../../os/oslib/src/chobjcaches.c ****  *                      function is then responsible for releasing the
 440:../../../os/oslib/src/chobjcaches.c ****  *                      object
 441:../../../os/oslib/src/chobjcaches.c ****  * @return              The operation status. In case of asynchronous
 442:../../../os/oslib/src/chobjcaches.c ****  *                      operation @p false is always returned.
 443:../../../os/oslib/src/chobjcaches.c ****  * @retval false        if the operation succeeded.
 444:../../../os/oslib/src/chobjcaches.c ****  * @retval true         if the synchronous read operation failed.
 445:../../../os/oslib/src/chobjcaches.c ****  *
 446:../../../os/oslib/src/chobjcaches.c ****  * @api
 447:../../../os/oslib/src/chobjcaches.c ****  */
 448:../../../os/oslib/src/chobjcaches.c **** bool chCacheReadObject(objects_cache_t *ocp,
 449:../../../os/oslib/src/chobjcaches.c ****                        oc_object_t *objp,
 450:../../../os/oslib/src/chobjcaches.c ****                        bool async) {
 806               		.loc 1 450 0
 807               		.cfi_startproc
 808               	.LVL41:
 809 0000 0F93      		push r16
 810               	.LCFI28:
 811               		.cfi_def_cfa_offset 3
 812               		.cfi_offset 16, -2
 813 0002 1F93      		push r17
 814               	.LCFI29:
 815               		.cfi_def_cfa_offset 4
 816               		.cfi_offset 17, -3
 817               	/* prologue: function */
 818               	/* frame size = 0 */
 819               	/* stack size = 2 */
 820               	.L__stack_usage = 2
 451:../../../os/oslib/src/chobjcaches.c **** 
 452:../../../os/oslib/src/chobjcaches.c ****   /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
 453:../../../os/oslib/src/chobjcaches.c ****      to corrupt it in case of failure. It is responsibility of the read
 454:../../../os/oslib/src/chobjcaches.c ****      implementation to clear it if the operation succeeds.*/
 455:../../../os/oslib/src/chobjcaches.c ****   objp->obj_flags |= OC_FLAG_NOTSYNC;
 821               		.loc 1 455 0
 822 0004 DB01      		movw r26,r22
 823 0006 5196      		adiw r26,17
 824 0008 0D91      		ld r16,X+
 825 000a 1D91      		ld r17,X+
 826 000c 2D91      		ld r18,X+
 827 000e 3C91      		ld r19,X
 828 0010 5497      		sbiw r26,17+3
 829 0012 0860      		ori r16,8
 830 0014 FB01      		movw r30,r22
 831 0016 018B      		std Z+17,r16
 832 0018 128B      		std Z+18,r17
 833 001a 238B      		std Z+19,r18
 834 001c 348B      		std Z+20,r19
 456:../../../os/oslib/src/chobjcaches.c **** 
 457:../../../os/oslib/src/chobjcaches.c ****   return ocp->readf(ocp, objp, async);
 835               		.loc 1 457 0
 836 001e DC01      		movw r26,r24
 837 0020 5296      		adiw r26,18
 838 0022 ED91      		ld r30,X+
 839 0024 FC91      		ld r31,X
 840 0026 5397      		sbiw r26,18+1
 841               	/* epilogue start */
 458:../../../os/oslib/src/chobjcaches.c **** }
 842               		.loc 1 458 0
 843 0028 1F91      		pop r17
 844 002a 0F91      		pop r16
 457:../../../os/oslib/src/chobjcaches.c **** }
 845               		.loc 1 457 0
 846 002c 0994      		ijmp
 847               	.LVL42:
 848               		.cfi_endproc
 849               	.LFE103:
 851               		.section	.text.chCacheWriteObject,"ax",@progbits
 852               	.global	chCacheWriteObject
 854               	chCacheWriteObject:
 855               	.LFB104:
 459:../../../os/oslib/src/chobjcaches.c **** 
 460:../../../os/oslib/src/chobjcaches.c **** /**
 461:../../../os/oslib/src/chobjcaches.c ****  * @brief   Writes the object data back to storage.
 462:../../../os/oslib/src/chobjcaches.c ****  * @note    In case of asynchronous operation an error condition is not
 463:../../../os/oslib/src/chobjcaches.c ****  *          reported by this function.
 464:../../../os/oslib/src/chobjcaches.c ****  *
 465:../../../os/oslib/src/chobjcaches.c ****  * @param[in] ocp       pointer to the @p objects_cache_t structure
 466:../../../os/oslib/src/chobjcaches.c ****  * @param[in] objp      pointer to the @p oc_object_t structure
 467:../../../os/oslib/src/chobjcaches.c ****  * @param[in] async     requests an asynchronous operation if supported, the
 468:../../../os/oslib/src/chobjcaches.c ****  *                      function is then responsible for releasing the
 469:../../../os/oslib/src/chobjcaches.c ****  *                      object
 470:../../../os/oslib/src/chobjcaches.c ****  * @return              The operation status. In case of asynchronous
 471:../../../os/oslib/src/chobjcaches.c ****  *                      operation @p false is always returned.
 472:../../../os/oslib/src/chobjcaches.c ****  * @retval false        if the operation succeeded.
 473:../../../os/oslib/src/chobjcaches.c ****  * @retval true         if the synchronous write operation failed.
 474:../../../os/oslib/src/chobjcaches.c ****  *
 475:../../../os/oslib/src/chobjcaches.c ****  * @api
 476:../../../os/oslib/src/chobjcaches.c ****  */
 477:../../../os/oslib/src/chobjcaches.c **** bool chCacheWriteObject(objects_cache_t *ocp,
 478:../../../os/oslib/src/chobjcaches.c ****                         oc_object_t *objp,
 479:../../../os/oslib/src/chobjcaches.c ****                         bool async) {
 856               		.loc 1 479 0
 857               		.cfi_startproc
 858               	.LVL43:
 859 0000 0F93      		push r16
 860               	.LCFI30:
 861               		.cfi_def_cfa_offset 3
 862               		.cfi_offset 16, -2
 863 0002 1F93      		push r17
 864               	.LCFI31:
 865               		.cfi_def_cfa_offset 4
 866               		.cfi_offset 17, -3
 867               	/* prologue: function */
 868               	/* frame size = 0 */
 869               	/* stack size = 2 */
 870               	.L__stack_usage = 2
 480:../../../os/oslib/src/chobjcaches.c **** 
 481:../../../os/oslib/src/chobjcaches.c ****   /* Resetting the OC_FLAG_LAZYWRITE flag in order to prevent multiple
 482:../../../os/oslib/src/chobjcaches.c ****      writes.*/
 483:../../../os/oslib/src/chobjcaches.c ****   objp->obj_flags &= ~OC_FLAG_LAZYWRITE;
 871               		.loc 1 483 0
 872 0004 DB01      		movw r26,r22
 873 0006 5196      		adiw r26,17
 874 0008 0D91      		ld r16,X+
 875 000a 1D91      		ld r17,X+
 876 000c 2D91      		ld r18,X+
 877 000e 3C91      		ld r19,X
 878 0010 5497      		sbiw r26,17+3
 879 0012 0F7E      		andi r16,239
 880 0014 2227      		clr r18
 881 0016 3327      		clr r19
 882 0018 FB01      		movw r30,r22
 883 001a 018B      		std Z+17,r16
 884 001c 128B      		std Z+18,r17
 885 001e 238B      		std Z+19,r18
 886 0020 348B      		std Z+20,r19
 484:../../../os/oslib/src/chobjcaches.c **** 
 485:../../../os/oslib/src/chobjcaches.c ****   return ocp->writef(ocp, objp, async);
 887               		.loc 1 485 0
 888 0022 DC01      		movw r26,r24
 889 0024 5496      		adiw r26,20
 890 0026 ED91      		ld r30,X+
 891 0028 FC91      		ld r31,X
 892 002a 5597      		sbiw r26,20+1
 893               	/* epilogue start */
 486:../../../os/oslib/src/chobjcaches.c **** }
 894               		.loc 1 486 0
 895 002c 1F91      		pop r17
 896 002e 0F91      		pop r16
 485:../../../os/oslib/src/chobjcaches.c **** }
 897               		.loc 1 485 0
 898 0030 0994      		ijmp
 899               	.LVL44:
 900               		.cfi_endproc
 901               	.LFE104:
 903               		.text
 904               	.Letext0:
 905               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 906               		.file 4 "/usr/lib/avr/include/stdint.h"
 907               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 908               		.file 6 "../../../os/nil/include/ch.h"
 909               		.file 7 "../../../os/oslib/include/chobjcaches.h"
 910               		.file 8 "../../../os/nil/include/chsem.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chobjcaches.c
     /tmp/ccwwu20o.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwwu20o.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwwu20o.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwwu20o.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwwu20o.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwwu20o.s:13     .text.chCacheObjectInit:0000000000000000 chCacheObjectInit
     /tmp/ccwwu20o.s:209    .text.chCacheGetObject:0000000000000000 chCacheGetObject
     /tmp/ccwwu20o.s:626    .text.chCacheReleaseObjectI:0000000000000000 chCacheReleaseObjectI
     /tmp/ccwwu20o.s:804    .text.chCacheReadObject:0000000000000000 chCacheReadObject
     /tmp/ccwwu20o.s:854    .text.chCacheWriteObject:0000000000000000 chCacheWriteObject

UNDEFINED SYMBOLS
chSemWaitTimeoutS
chSemSignalI
