
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001d7a  00001e0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b7  0080016e  0080016e  00001e7c  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000740  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000d431  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00003875  00000000  00000000  0000fa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000bc07  00000000  00000000  000132b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000014bc  00000000  00000000  0001eec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00001da2  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00009214  00000000  00000000  0002211e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e68  00000000  00000000  0002b332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c4       	rjmp	.+2232   	; 0x8d6 <__vector_7>
      1e:	00 00       	nop
      20:	90 c4       	rjmp	.+2336   	; 0x942 <__vector_8>
      22:	00 00       	nop
      24:	22 c4       	rjmp	.+2116   	; 0x86a <__vector_9>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	da c3       	rjmp	.+1972   	; 0x7e2 <__vector_11>
      2e:	00 00       	nop
      30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
      36:	00 00       	nop
      38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c6       	rjmp	.+3192   	; 0xcc2 <__vector_18>
      4a:	00 00       	nop
      4c:	7a c6       	rjmp	.+3316   	; 0xd42 <__vector_19>
      4e:	00 00       	nop
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__c.0>:
      68:	45 46 47 65 66 67 00                                EFGefg.

0000006f <__c.1>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.0>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1

00000098 <.Loc.1>:
      98:	a0 e0       	ldi	r26, 0x00	; 0

0000009a <.Loc.2>:
      9a:	b1 e0       	ldi	r27, 0x01	; 1

0000009c <.Loc.3>:
      9c:	ea e7       	ldi	r30, 0x7A	; 122

0000009e <.Loc.4>:
      9e:	fd e1       	ldi	r31, 0x1D	; 29

000000a0 <.Loc.5>:
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <.L__do_copy_data_start>

000000a2 <.L__do_copy_data_loop>:
      a2:	05 90       	lpm	r0, Z+

000000a4 <.Loc.7>:
      a4:	0d 92       	st	X+, r0

000000a6 <.L__do_copy_data_start>:
      a6:	ae 36       	cpi	r26, 0x6E	; 110

000000a8 <.Loc.9>:
      a8:	b1 07       	cpc	r27, r17

000000aa <.Loc.10>:
      aa:	d9 f7       	brne	.-10     	; 0xa2 <.L__do_copy_data_loop>

000000ac <__do_clear_bss>:
      ac:	24 e0       	ldi	r18, 0x04	; 4

000000ae <.Loc.1>:
      ae:	ae e6       	ldi	r26, 0x6E	; 110

000000b0 <.Loc.2>:
      b0:	b1 e0       	ldi	r27, 0x01	; 1

000000b2 <.Loc.3>:
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.Loc.5>

000000b4 <.Loc.4>:
      b4:	1d 92       	st	X+, r1

000000b6 <.Loc.5>:
      b6:	a5 32       	cpi	r26, 0x25	; 37

000000b8 <.Loc.6>:
      b8:	b2 07       	cpc	r27, r18

000000ba <.Loc.7>:
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.Loc.4>

000000bc <L0^A>:
      bc:	0e 94 4d 0a 	call	0x149a	; 0x149a <main>
      c0:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c6:	56 d3       	rcall	.+1708   	; 0x774 <hal_lld_init>

000000c8 <.LVL0>:

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c8:	8e e2       	ldi	r24, 0x2E	; 46
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	54 d3       	rcall	.+1704   	; 0x776 <_pal_lld_init>

000000ce <.LVL1>:
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
      ce:	94 d2       	rcall	.+1320   	; 0x5f8 <pwmInit>

000000d0 <.LVL2>:
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      d0:	e3 d2       	rcall	.+1478   	; 0x698 <sdInit>

000000d2 <.LVL3>:
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d2:	4c d3       	rcall	.+1688   	; 0x76c <boardInit>

000000d4 <.LVL4>:
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <stInit>

000000d6 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d6:	b2 c3       	rjmp	.+1892   	; 0x83c <st_lld_init>

000000d8 <stGetCounter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t) TCNT1;
      d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <.Ldebug_info0+0x7f3280>
      dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <.Ldebug_info0+0x7f3281>

000000e0 <.LBE14>:
 * @api
 */
systime_t stGetCounter(void) {

  return st_lld_get_counter();
}
      e0:	08 95       	ret

000000e2 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
      e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <.Ldebug_info0+0x7f3285>
      e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <.Ldebug_info0+0x7f3284>

000000ea <.Loc.16>:

  /* Reset pending. */
  TIFR_REG = _BV(OCF1A);
      ea:	82 e0       	ldi	r24, 0x02	; 2

000000ec <.LVL2>:
      ec:	86 bb       	out	0x16, r24	; 22

000000ee <.LVL3>:

  /* Enable interrupt. */
  TIMSK_REG = _BV(OCIE1A);
      ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <.Ldebug_info0+0x7f326b>

000000f2 <.LBE16>:
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
      f2:	08 95       	ret

000000f4 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  TIMSK_REG = 0;
      f4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <.Ldebug_info0+0x7f326b>

000000f8 <.LBE18>:
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
      f8:	08 95       	ret

000000fa <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  OCR1A = (uint16_t) time;
      fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <.Ldebug_info0+0x7f3285>
      fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <.Ldebug_info0+0x7f3284>

00000102 <.LBE20>:
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
     102:	08 95       	ret

00000104 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
     104:	af 92       	push	r10

00000106 <.LCFI0>:
     106:	bf 92       	push	r11

00000108 <.LCFI1>:
     108:	cf 92       	push	r12

0000010a <.LCFI2>:
     10a:	df 92       	push	r13

0000010c <.LCFI3>:
     10c:	ef 92       	push	r14

0000010e <.LCFI4>:
     10e:	ff 92       	push	r15

00000110 <.LCFI5>:
     110:	0f 93       	push	r16

00000112 <.LCFI6>:
     112:	1f 93       	push	r17

00000114 <.LCFI7>:
     114:	cf 93       	push	r28

00000116 <.LCFI8>:
     116:	df 93       	push	r29

00000118 <.LCFI9>:
     118:	ec 01       	movw	r28, r24
     11a:	6b 01       	movw	r12, r22
     11c:	8a 01       	movw	r16, r20

0000011e <.Loc.2>:
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02

00000122 <.LVL1>:
     122:	84 17       	cp	r24, r20
     124:	95 07       	cpc	r25, r21
     126:	10 f4       	brcc	.+4      	; 0x12c <.L2>

00000128 <.Loc.10>:
    n = iqGetFullI(iqp);
     128:	09 81       	ldd	r16, Y+1	; 0x01
     12a:	1a 81       	ldd	r17, Y+2	; 0x02

0000012c <.L2>:
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
     12c:	69 85       	ldd	r22, Y+9	; 0x09
     12e:	7a 85       	ldd	r23, Y+10	; 0x0a

00000130 <.LVL3>:
     130:	ed 80       	ldd	r14, Y+5	; 0x05
     132:	fe 80       	ldd	r15, Y+6	; 0x06
     134:	e6 1a       	sub	r14, r22
     136:	f7 0a       	sbc	r15, r23

00000138 <.LVL4>:
  /*lint -restore*/
  if (n < s1) {
     138:	0e 15       	cp	r16, r14
     13a:	1f 05       	cpc	r17, r15
     13c:	88 f1       	brcs	.+98     	; 0x1a0 <.L7>

0000013e <.Loc.16>:
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
     13e:	e0 16       	cp	r14, r16
     140:	f1 06       	cpc	r15, r17
     142:	d0 f0       	brcs	.+52     	; 0x178 <.L8>

00000144 <.Loc.18>:
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
    iqp->q_rdptr = iqp->q_buffer + s2;
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
     144:	a8 01       	movw	r20, r16
     146:	c6 01       	movw	r24, r12
     148:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

0000014c <.LVL5>:
    iqp->q_rdptr = iqp->q_buffer;
     14c:	4b 81       	ldd	r20, Y+3	; 0x03
     14e:	5c 81       	ldd	r21, Y+4	; 0x04

00000150 <.L4>:
    iqp->q_rdptr += n;
     150:	5a 87       	std	Y+10, r21	; 0x0a
     152:	49 87       	std	Y+9, r20	; 0x09

00000154 <.Loc.22>:
  }

  iqp->q_counter -= n;
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	9a 81       	ldd	r25, Y+2	; 0x02

00000158 <.Loc.24>:
     158:	80 1b       	sub	r24, r16
     15a:	91 0b       	sbc	r25, r17
     15c:	9a 83       	std	Y+2, r25	; 0x02
     15e:	89 83       	std	Y+1, r24	; 0x01

00000160 <.Loc.25>:
  return n;
}
     160:	c8 01       	movw	r24, r16
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28

00000166 <.LVL7>:
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16

0000016a <.LVL8>:
     16a:	ff 90       	pop	r15
     16c:	ef 90       	pop	r14

0000016e <.LVL9>:
     16e:	df 90       	pop	r13
     170:	cf 90       	pop	r12
     172:	bf 90       	pop	r11
     174:	af 90       	pop	r10
     176:	08 95       	ret

00000178 <.L8>:
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
     178:	a7 01       	movw	r20, r14
     17a:	c6 01       	movw	r24, r12
     17c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

00000180 <.LVL11>:
    s2 = n - s1;
     180:	58 01       	movw	r10, r16
     182:	ae 18       	sub	r10, r14
     184:	bf 08       	sbc	r11, r15

00000186 <.LVL12>:
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
     186:	6b 81       	ldd	r22, Y+3	; 0x03
     188:	7c 81       	ldd	r23, Y+4	; 0x04
     18a:	a5 01       	movw	r20, r10
     18c:	c6 01       	movw	r24, r12
     18e:	8e 0d       	add	r24, r14
     190:	9f 1d       	adc	r25, r15

00000192 <.LVL13>:
     192:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

00000196 <.LVL14>:
    iqp->q_rdptr = iqp->q_buffer + s2;
     196:	4b 81       	ldd	r20, Y+3	; 0x03
     198:	5c 81       	ldd	r21, Y+4	; 0x04
     19a:	4a 0d       	add	r20, r10
     19c:	5b 1d       	adc	r21, r11
     19e:	d8 cf       	rjmp	.-80     	; 0x150 <.L4>

000001a0 <.L7>:
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
     1a0:	a8 01       	movw	r20, r16
     1a2:	c6 01       	movw	r24, r12
     1a4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

000001a8 <.LVL16>:
    iqp->q_rdptr += n;
     1a8:	49 85       	ldd	r20, Y+9	; 0x09
     1aa:	5a 85       	ldd	r21, Y+10	; 0x0a
     1ac:	40 0f       	add	r20, r16
     1ae:	51 1f       	adc	r21, r17
     1b0:	cf cf       	rjmp	.-98     	; 0x150 <.L4>

000001b2 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
     1b2:	af 92       	push	r10

000001b4 <.LCFI10>:
     1b4:	bf 92       	push	r11

000001b6 <.LCFI11>:
     1b6:	cf 92       	push	r12

000001b8 <.LCFI12>:
     1b8:	df 92       	push	r13

000001ba <.LCFI13>:
     1ba:	ef 92       	push	r14

000001bc <.LCFI14>:
     1bc:	ff 92       	push	r15

000001be <.LCFI15>:
     1be:	0f 93       	push	r16

000001c0 <.LCFI16>:
     1c0:	1f 93       	push	r17

000001c2 <.LCFI17>:
     1c2:	cf 93       	push	r28

000001c4 <.LCFI18>:
     1c4:	df 93       	push	r29

000001c6 <.LCFI19>:
     1c6:	ec 01       	movw	r28, r24
     1c8:	5b 01       	movw	r10, r22
     1ca:	8a 01       	movw	r16, r20

000001cc <.Loc.43>:
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02

000001d0 <.LVL18>:
     1d0:	84 17       	cp	r24, r20
     1d2:	95 07       	cpc	r25, r21
     1d4:	10 f4       	brcc	.+4      	; 0x1da <.L10>

000001d6 <.Loc.50>:
    n = oqGetEmptyI(oqp);
     1d6:	09 81       	ldd	r16, Y+1	; 0x01
     1d8:	1a 81       	ldd	r17, Y+2	; 0x02

000001da <.L10>:
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
     1da:	8f 81       	ldd	r24, Y+7	; 0x07
     1dc:	98 85       	ldd	r25, Y+8	; 0x08

000001de <.Loc.54>:
     1de:	ed 80       	ldd	r14, Y+5	; 0x05
     1e0:	fe 80       	ldd	r15, Y+6	; 0x06
     1e2:	e8 1a       	sub	r14, r24
     1e4:	f9 0a       	sbc	r15, r25

000001e6 <.LVL20>:
  /*lint -restore*/
  if (n < s1) {
     1e6:	0e 15       	cp	r16, r14
     1e8:	1f 05       	cpc	r17, r15
     1ea:	88 f1       	brcs	.+98     	; 0x24e <.L14>

000001ec <.Loc.57>:
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
     1ec:	e0 16       	cp	r14, r16
     1ee:	f1 06       	cpc	r15, r17
     1f0:	d0 f0       	brcs	.+52     	; 0x226 <.L15>

000001f2 <.Loc.59>:
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
    oqp->q_wrptr = oqp->q_buffer + s2;
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
     1f2:	a8 01       	movw	r20, r16
     1f4:	b5 01       	movw	r22, r10

000001f6 <.LVL21>:
     1f6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

000001fa <.LVL22>:
    oqp->q_wrptr = oqp->q_buffer;
     1fa:	8b 81       	ldd	r24, Y+3	; 0x03
     1fc:	9c 81       	ldd	r25, Y+4	; 0x04

000001fe <.L12>:
    oqp->q_wrptr += n;
     1fe:	98 87       	std	Y+8, r25	; 0x08
     200:	8f 83       	std	Y+7, r24	; 0x07

00000202 <.Loc.64>:
  }

  oqp->q_counter -= n;
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02

00000206 <.Loc.66>:
     206:	80 1b       	sub	r24, r16
     208:	91 0b       	sbc	r25, r17
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01

0000020e <.Loc.67>:
  return n;
}
     20e:	c8 01       	movw	r24, r16
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28

00000214 <.LVL24>:
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16

00000218 <.LVL25>:
     218:	ff 90       	pop	r15
     21a:	ef 90       	pop	r14

0000021c <.LVL26>:
     21c:	df 90       	pop	r13
     21e:	cf 90       	pop	r12
     220:	bf 90       	pop	r11
     222:	af 90       	pop	r10
     224:	08 95       	ret

00000226 <.L15>:
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
     226:	a7 01       	movw	r20, r14
     228:	b5 01       	movw	r22, r10
     22a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

0000022e <.LVL28>:
    s2 = n - s1;
     22e:	68 01       	movw	r12, r16
     230:	ce 18       	sub	r12, r14
     232:	df 08       	sbc	r13, r15

00000234 <.LVL29>:
    bp += s1;
     234:	b5 01       	movw	r22, r10
     236:	6e 0d       	add	r22, r14
     238:	7f 1d       	adc	r23, r15

0000023a <.LVL30>:
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
     23a:	a6 01       	movw	r20, r12
     23c:	8b 81       	ldd	r24, Y+3	; 0x03
     23e:	9c 81       	ldd	r25, Y+4	; 0x04
     240:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

00000244 <.LVL31>:
    oqp->q_wrptr = oqp->q_buffer + s2;
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	9c 81       	ldd	r25, Y+4	; 0x04
     248:	8c 0d       	add	r24, r12
     24a:	9d 1d       	adc	r25, r13
     24c:	d8 cf       	rjmp	.-80     	; 0x1fe <.L12>

0000024e <.L14>:
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
     24e:	a8 01       	movw	r20, r16
     250:	b5 01       	movw	r22, r10
     252:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <memcpy>

00000256 <.LVL33>:
    oqp->q_wrptr += n;
     256:	8f 81       	ldd	r24, Y+7	; 0x07
     258:	98 85       	ldd	r25, Y+8	; 0x08
     25a:	80 0f       	add	r24, r16
     25c:	91 1f       	adc	r25, r17
     25e:	cf cf       	rjmp	.-98     	; 0x1fe <.L12>

00000260 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
     260:	0f 93       	push	r16

00000262 <.LCFI20>:
     262:	1f 93       	push	r17

00000264 <.LCFI21>:
     264:	fc 01       	movw	r30, r24
     266:	db 01       	movw	r26, r22

00000268 <.LBB89>:
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {

  chThdQueueObjectInit(tqp);
     268:	10 82       	st	Z, r1

0000026a <.LBE89>:

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
     26a:	12 82       	std	Z+2, r1	; 0x02
     26c:	11 82       	std	Z+1, r1	; 0x01

0000026e <.Loc.92>:
  iqp->q_buffer  = bp;
     26e:	74 83       	std	Z+4, r23	; 0x04
     270:	63 83       	std	Z+3, r22	; 0x03

00000272 <.Loc.94>:
  iqp->q_rdptr   = bp;
     272:	72 87       	std	Z+10, r23	; 0x0a
     274:	61 87       	std	Z+9, r22	; 0x09

00000276 <.Loc.96>:
  iqp->q_wrptr   = bp;
     276:	70 87       	std	Z+8, r23	; 0x08
     278:	67 83       	std	Z+7, r22	; 0x07

0000027a <.Loc.98>:
  iqp->q_top     = bp + size;
     27a:	a4 0f       	add	r26, r20
     27c:	b5 1f       	adc	r27, r21

0000027e <.Loc.100>:
     27e:	b6 83       	std	Z+6, r27	; 0x06
     280:	a5 83       	std	Z+5, r26	; 0x05

00000282 <.Loc.101>:
  iqp->q_notify  = infy;
     282:	34 87       	std	Z+12, r19	; 0x0c
     284:	23 87       	std	Z+11, r18	; 0x0b

00000286 <.Loc.103>:
  iqp->q_link    = link;
     286:	16 87       	std	Z+14, r17	; 0x0e
     288:	05 87       	std	Z+13, r16	; 0x0d

0000028a <.Loc.105>:
}
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16

0000028e <.LVL37>:
     28e:	08 95       	ret

00000290 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
     290:	fc 01       	movw	r30, r24

00000292 <.Loc.123>:

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
     292:	a7 81       	ldd	r26, Z+7	; 0x07
     294:	b0 85       	ldd	r27, Z+8	; 0x08
     296:	81 85       	ldd	r24, Z+9	; 0x09
     298:	92 85       	ldd	r25, Z+10	; 0x0a

0000029a <.LVL43>:
     29a:	a8 17       	cp	r26, r24
     29c:	b9 07       	cpc	r27, r25
     29e:	e1 f0       	breq	.+56     	; 0x2d8 <.L23>

000002a0 <.L19>:
    iqp->q_counter++;
     2a0:	81 81       	ldd	r24, Z+1	; 0x01
     2a2:	92 81       	ldd	r25, Z+2	; 0x02

000002a4 <.Loc.129>:
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	92 83       	std	Z+2, r25	; 0x02
     2a8:	81 83       	std	Z+1, r24	; 0x01

000002aa <.Loc.130>:
    *iqp->q_wrptr++ = b;
     2aa:	cd 01       	movw	r24, r26
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	90 87       	std	Z+8, r25	; 0x08
     2b0:	87 83       	std	Z+7, r24	; 0x07

000002b2 <.Loc.132>:
     2b2:	6c 93       	st	X, r22

000002b4 <.Loc.133>:
    if (iqp->q_wrptr >= iqp->q_top) {
     2b4:	27 81       	ldd	r18, Z+7	; 0x07
     2b6:	30 85       	ldd	r19, Z+8	; 0x08
     2b8:	85 81       	ldd	r24, Z+5	; 0x05
     2ba:	96 81       	ldd	r25, Z+6	; 0x06
     2bc:	28 17       	cp	r18, r24
     2be:	39 07       	cpc	r19, r25
     2c0:	20 f0       	brcs	.+8      	; 0x2ca <.L21>

000002c2 <.Loc.135>:
      iqp->q_wrptr = iqp->q_buffer;
     2c2:	83 81       	ldd	r24, Z+3	; 0x03
     2c4:	94 81       	ldd	r25, Z+4	; 0x04
     2c6:	90 87       	std	Z+8, r25	; 0x08
     2c8:	87 83       	std	Z+7, r24	; 0x07

000002ca <.L21>:
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0

000002ce <.LVL45>:
     2ce:	cf 01       	movw	r24, r30
     2d0:	89 d7       	rcall	.+3858   	; 0x11e4 <chThdDequeueNextI>

000002d2 <.LBE93>:
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);

    return MSG_OK;
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret

000002d8 <.L23>:
  if (!iqIsFullI(iqp)) {
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	92 81       	ldd	r25, Z+2	; 0x02
     2dc:	89 2b       	or	r24, r25
     2de:	01 f3       	breq	.-64     	; 0x2a0 <.L19>

000002e0 <.Loc.145>:
  }

  return MSG_TIMEOUT;
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	9f ef       	ldi	r25, 0xFF	; 255

000002e4 <.Loc.146>:
}
     2e4:	08 95       	ret

000002e6 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
     2e6:	ef 92       	push	r14

000002e8 <.LCFI23>:
     2e8:	ff 92       	push	r15

000002ea <.LCFI24>:
     2ea:	0f 93       	push	r16

000002ec <.LCFI25>:
     2ec:	1f 93       	push	r17

000002ee <.LCFI26>:
     2ee:	cf 93       	push	r28

000002f0 <.LCFI27>:
     2f0:	df 93       	push	r29

000002f2 <.LCFI28>:
     2f2:	8c 01       	movw	r16, r24
     2f4:	7b 01       	movw	r14, r22

000002f6 <.LBB97>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     2f6:	f8 94       	cli

000002f8 <.LBB102>:
}
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <.L34>

000002fa <.L36>:
  return chThdEnqueueTimeoutS(tqp, timeout);
     2fa:	b7 01       	movw	r22, r14
     2fc:	c8 01       	movw	r24, r16
     2fe:	36 d7       	rcall	.+3692   	; 0x116c <chThdEnqueueTimeoutS>

00000300 <.LVL57>:
     300:	ec 01       	movw	r28, r24

00000302 <.LBE104>:
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
     302:	97 fd       	sbrc	r25, 7
     304:	3c c0       	rjmp	.+120    	; 0x37e <.L43>

00000306 <.L34>:
  while (iqIsEmptyI(iqp)) {
     306:	d8 01       	movw	r26, r16
     308:	11 96       	adiw	r26, 0x01	; 1
     30a:	8d 91       	ld	r24, X+
     30c:	9c 91       	ld	r25, X
     30e:	12 97       	sbiw	r26, 0x02	; 2
     310:	89 2b       	or	r24, r25
     312:	99 f3       	breq	.-26     	; 0x2fa <.L36>

00000314 <.Loc.197>:
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	8d 91       	ld	r24, X+
     318:	9c 91       	ld	r25, X
     31a:	12 97       	sbiw	r26, 0x02	; 2

0000031c <.Loc.199>:
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	9c 93       	st	X, r25
     322:	8e 93       	st	-X, r24
     324:	11 97       	sbiw	r26, 0x01	; 1

00000326 <.Loc.200>:
  b = *iqp->q_rdptr++;
     326:	19 96       	adiw	r26, 0x09	; 9
     328:	ed 91       	ld	r30, X+
     32a:	fc 91       	ld	r31, X
     32c:	1a 97       	sbiw	r26, 0x0a	; 10

0000032e <.Loc.202>:
     32e:	cf 01       	movw	r24, r30
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	1a 96       	adiw	r26, 0x0a	; 10
     334:	9c 93       	st	X, r25
     336:	8e 93       	st	-X, r24
     338:	19 97       	sbiw	r26, 0x09	; 9

0000033a <.Loc.203>:
     33a:	c0 81       	ld	r28, Z

0000033c <.LVL60>:
  if (iqp->q_rdptr >= iqp->q_top) {
     33c:	15 96       	adiw	r26, 0x05	; 5
     33e:	2d 91       	ld	r18, X+
     340:	3c 91       	ld	r19, X
     342:	16 97       	sbiw	r26, 0x06	; 6
     344:	82 17       	cp	r24, r18
     346:	93 07       	cpc	r25, r19
     348:	40 f0       	brcs	.+16     	; 0x35a <.L37>

0000034a <.Loc.206>:
    iqp->q_rdptr = iqp->q_buffer;
     34a:	13 96       	adiw	r26, 0x03	; 3
     34c:	8d 91       	ld	r24, X+
     34e:	9c 91       	ld	r25, X
     350:	14 97       	sbiw	r26, 0x04	; 4
     352:	1a 96       	adiw	r26, 0x0a	; 10
     354:	9c 93       	st	X, r25
     356:	8e 93       	st	-X, r24
     358:	19 97       	sbiw	r26, 0x09	; 9

0000035a <.L37>:
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
     35a:	d8 01       	movw	r26, r16
     35c:	1b 96       	adiw	r26, 0x0b	; 11
     35e:	ed 91       	ld	r30, X+
     360:	fc 91       	ld	r31, X

00000362 <.Loc.210>:
     362:	30 97       	sbiw	r30, 0x00	; 0
     364:	11 f0       	breq	.+4      	; 0x36a <.L38>

00000366 <.Loc.211>:
    iqp->q_notify(iqp);
     366:	c8 01       	movw	r24, r16
     368:	09 95       	icall

0000036a <.L38>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     36a:	78 94       	sei

0000036c <.LBE109>:
  }

  osalSysUnlock();

  return (msg_t)b;
     36c:	d0 e0       	ldi	r29, 0x00	; 0

0000036e <.Loc.221>:
}
     36e:	ce 01       	movw	r24, r28
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28

00000374 <.LVL62>:
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16

00000378 <.LVL63>:
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14

0000037c <.LVL64>:
     37c:	08 95       	ret

0000037e <.L43>:
     37e:	78 94       	sei

00000380 <.LBE106>:
     380:	ce 01       	movw	r24, r28

00000382 <.LVL66>:
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28

00000386 <.LVL67>:
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16

0000038a <.LVL68>:
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14

0000038e <.LVL69>:
     38e:	08 95       	ret

00000390 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
     390:	6f 92       	push	r6

00000392 <.LCFI35>:
     392:	7f 92       	push	r7

00000394 <.LCFI36>:
     394:	8f 92       	push	r8

00000396 <.LCFI37>:
     396:	9f 92       	push	r9

00000398 <.LCFI38>:
     398:	af 92       	push	r10

0000039a <.LCFI39>:
     39a:	bf 92       	push	r11

0000039c <.LCFI40>:
     39c:	cf 92       	push	r12

0000039e <.LCFI41>:
     39e:	df 92       	push	r13

000003a0 <.LCFI42>:
     3a0:	ef 92       	push	r14

000003a2 <.LCFI43>:
     3a2:	ff 92       	push	r15

000003a4 <.LCFI44>:
     3a4:	0f 93       	push	r16

000003a6 <.LCFI45>:
     3a6:	1f 93       	push	r17

000003a8 <.LCFI46>:
     3a8:	cf 93       	push	r28

000003aa <.LCFI47>:
     3aa:	df 93       	push	r29

000003ac <.LCFI48>:
     3ac:	6c 01       	movw	r12, r24
     3ae:	7b 01       	movw	r14, r22
     3b0:	4a 01       	movw	r8, r20
     3b2:	72 2e       	mov	r7, r18
     3b4:	63 2e       	mov	r6, r19

000003b6 <.Loc.258>:
  qnotify_t nfy = iqp->q_notify;
     3b6:	fc 01       	movw	r30, r24
     3b8:	a3 84       	ldd	r10, Z+11	; 0x0b
     3ba:	b4 84       	ldd	r11, Z+12	; 0x0c

000003bc <.LBB113>:
  asm volatile ("cli" : : : "memory");
     3bc:	f8 94       	cli

000003be <.LBE113>:

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     3be:	8a 01       	movw	r16, r20
     3c0:	45 2b       	or	r20, r21
     3c2:	b1 f0       	breq	.+44     	; 0x3f0 <.L58>

000003c4 <.L53>:
    size_t done;

    done = iq_read(iqp, bp, n);
     3c4:	a8 01       	movw	r20, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	c6 01       	movw	r24, r12
     3ca:	9c de       	rcall	.-712    	; 0x104 <iq_read>

000003cc <.LVL81>:
     3cc:	ec 01       	movw	r28, r24

000003ce <.LVL82>:
    if (done == (size_t)0) {
     3ce:	89 2b       	or	r24, r25
     3d0:	01 f1       	breq	.+64     	; 0x412 <.L69>

000003d2 <.Loc.278>:
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
     3d2:	a1 14       	cp	r10, r1
     3d4:	b1 04       	cpc	r11, r1
     3d6:	19 f0       	breq	.+6      	; 0x3de <.L57>

000003d8 <.Loc.280>:
        nfy(iqp);
     3d8:	c6 01       	movw	r24, r12

000003da <.LVL83>:
     3da:	f5 01       	movw	r30, r10
     3dc:	09 95       	icall

000003de <.L57>:
  asm volatile ("sei" : : : "memory");
     3de:	78 94       	sei

000003e0 <.LBE117>:
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
     3e0:	0c 1b       	sub	r16, r28
     3e2:	1d 0b       	sbc	r17, r29

000003e4 <.Loc.291>:
      bp += done;
     3e4:	ec 0e       	add	r14, r28
     3e6:	fd 1e       	adc	r15, r29

000003e8 <.LBB120>:
  asm volatile ("cli" : : : "memory");
     3e8:	f8 94       	cli

000003ea <.LBE116>:
  while (n > 0U) {
     3ea:	01 15       	cp	r16, r1
     3ec:	11 05       	cpc	r17, r1
     3ee:	51 f7       	brne	.-44     	; 0x3c4 <.L53>

000003f0 <.L58>:
     3f0:	c4 01       	movw	r24, r8

000003f2 <.L54>:
  asm volatile ("sei" : : : "memory");
     3f2:	78 94       	sei

000003f4 <.LBE126>:
    }
  }

  osalSysUnlock();
  return max - n;
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16

000003fc <.LVL88>:
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14

00000400 <.LVL89>:
     400:	df 90       	pop	r13
     402:	cf 90       	pop	r12

00000404 <.LVL90>:
     404:	bf 90       	pop	r11
     406:	af 90       	pop	r10

00000408 <.LVL91>:
     408:	9f 90       	pop	r9
     40a:	8f 90       	pop	r8

0000040c <.LVL92>:
     40c:	7f 90       	pop	r7
     40e:	6f 90       	pop	r6
     410:	08 95       	ret

00000412 <.L69>:
     412:	67 2d       	mov	r22, r7
     414:	76 2d       	mov	r23, r6
     416:	c6 01       	movw	r24, r12

00000418 <.LVL94>:
     418:	a9 d6       	rcall	.+3410   	; 0x116c <chThdEnqueueTimeoutS>

0000041a <.LBE124>:
      if (msg != MSG_OK) {
     41a:	89 2b       	or	r24, r25
     41c:	99 f2       	breq	.-90     	; 0x3c4 <.L53>

0000041e <.LBE123>:
  return max - n;
     41e:	c4 01       	movw	r24, r8

00000420 <.LVL96>:
     420:	80 1b       	sub	r24, r16
     422:	91 0b       	sbc	r25, r17
     424:	e6 cf       	rjmp	.-52     	; 0x3f2 <.L54>

00000426 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
     426:	0f 93       	push	r16

00000428 <.LCFI49>:
     428:	1f 93       	push	r17

0000042a <.LCFI50>:
     42a:	cf 93       	push	r28

0000042c <.LCFI51>:
     42c:	df 93       	push	r29

0000042e <.LCFI52>:
     42e:	fc 01       	movw	r30, r24
     430:	db 01       	movw	r26, r22

00000432 <.LBB130>:
  chThdQueueObjectInit(tqp);
     432:	10 82       	st	Z, r1

00000434 <.LBE130>:

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
     434:	52 83       	std	Z+2, r21	; 0x02
     436:	41 83       	std	Z+1, r20	; 0x01

00000438 <.Loc.335>:
  oqp->q_buffer  = bp;
     438:	74 83       	std	Z+4, r23	; 0x04
     43a:	63 83       	std	Z+3, r22	; 0x03

0000043c <.Loc.337>:
  oqp->q_rdptr   = bp;
     43c:	72 87       	std	Z+10, r23	; 0x0a
     43e:	61 87       	std	Z+9, r22	; 0x09

00000440 <.Loc.339>:
  oqp->q_wrptr   = bp;
     440:	70 87       	std	Z+8, r23	; 0x08
     442:	67 83       	std	Z+7, r22	; 0x07

00000444 <.Loc.341>:
  oqp->q_top     = bp + size;
     444:	a4 0f       	add	r26, r20
     446:	b5 1f       	adc	r27, r21

00000448 <.Loc.343>:
     448:	b6 83       	std	Z+6, r27	; 0x06
     44a:	a5 83       	std	Z+5, r26	; 0x05

0000044c <.Loc.344>:
  oqp->q_notify  = onfy;
     44c:	34 87       	std	Z+12, r19	; 0x0c
     44e:	23 87       	std	Z+11, r18	; 0x0b

00000450 <.Loc.346>:
  oqp->q_link    = link;
     450:	16 87       	std	Z+14, r17	; 0x0e
     452:	05 87       	std	Z+13, r16	; 0x0d

00000454 <.Loc.348>:
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16

0000045c <.LVL100>:
     45c:	08 95       	ret

0000045e <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
     45e:	df 92       	push	r13

00000460 <.LCFI53>:
     460:	ef 92       	push	r14

00000462 <.LCFI54>:
     462:	ff 92       	push	r15

00000464 <.LCFI55>:
     464:	0f 93       	push	r16

00000466 <.LCFI56>:
     466:	1f 93       	push	r17

00000468 <.LCFI57>:
     468:	cf 93       	push	r28

0000046a <.LCFI58>:
     46a:	df 93       	push	r29

0000046c <.LCFI59>:
     46c:	8c 01       	movw	r16, r24
     46e:	d6 2e       	mov	r13, r22
     470:	7a 01       	movw	r14, r20

00000472 <.LBB134>:
  asm volatile ("cli" : : : "memory");
     472:	f8 94       	cli

00000474 <.LBB139>:
}
     474:	06 c0       	rjmp	.+12     	; 0x482 <.L80>

00000476 <.L82>:
  return chThdEnqueueTimeoutS(tqp, timeout);
     476:	b7 01       	movw	r22, r14
     478:	c8 01       	movw	r24, r16
     47a:	78 d6       	rcall	.+3312   	; 0x116c <chThdEnqueueTimeoutS>

0000047c <.LVL111>:
     47c:	ec 01       	movw	r28, r24

0000047e <.LBE141>:
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
     47e:	97 fd       	sbrc	r25, 7
     480:	42 c0       	rjmp	.+132    	; 0x506 <.L89>

00000482 <.L80>:
  while (oqIsFullI(oqp)) {
     482:	d8 01       	movw	r26, r16
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	8d 91       	ld	r24, X+
     488:	9c 91       	ld	r25, X
     48a:	12 97       	sbiw	r26, 0x02	; 2
     48c:	89 2b       	or	r24, r25
     48e:	99 f3       	breq	.-26     	; 0x476 <.L82>

00000490 <.Loc.412>:
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
     490:	11 96       	adiw	r26, 0x01	; 1
     492:	8d 91       	ld	r24, X+
     494:	9c 91       	ld	r25, X
     496:	12 97       	sbiw	r26, 0x02	; 2

00000498 <.Loc.414>:
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	12 96       	adiw	r26, 0x02	; 2
     49c:	9c 93       	st	X, r25
     49e:	8e 93       	st	-X, r24
     4a0:	11 97       	sbiw	r26, 0x01	; 1

000004a2 <.Loc.415>:
  *oqp->q_wrptr++ = b;
     4a2:	17 96       	adiw	r26, 0x07	; 7
     4a4:	ed 91       	ld	r30, X+
     4a6:	fc 91       	ld	r31, X
     4a8:	18 97       	sbiw	r26, 0x08	; 8

000004aa <.Loc.417>:
     4aa:	cf 01       	movw	r24, r30
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	18 96       	adiw	r26, 0x08	; 8
     4b0:	9c 93       	st	X, r25
     4b2:	8e 93       	st	-X, r24
     4b4:	17 97       	sbiw	r26, 0x07	; 7

000004b6 <.Loc.418>:
     4b6:	d0 82       	st	Z, r13

000004b8 <.Loc.419>:
  if (oqp->q_wrptr >= oqp->q_top) {
     4b8:	17 96       	adiw	r26, 0x07	; 7
     4ba:	2d 91       	ld	r18, X+
     4bc:	3c 91       	ld	r19, X
     4be:	18 97       	sbiw	r26, 0x08	; 8
     4c0:	15 96       	adiw	r26, 0x05	; 5
     4c2:	8d 91       	ld	r24, X+
     4c4:	9c 91       	ld	r25, X
     4c6:	16 97       	sbiw	r26, 0x06	; 6
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	40 f0       	brcs	.+16     	; 0x4de <.L83>

000004ce <.Loc.421>:
    oqp->q_wrptr = oqp->q_buffer;
     4ce:	13 96       	adiw	r26, 0x03	; 3
     4d0:	8d 91       	ld	r24, X+
     4d2:	9c 91       	ld	r25, X
     4d4:	14 97       	sbiw	r26, 0x04	; 4
     4d6:	18 96       	adiw	r26, 0x08	; 8
     4d8:	9c 93       	st	X, r25
     4da:	8e 93       	st	-X, r24
     4dc:	17 97       	sbiw	r26, 0x07	; 7

000004de <.L83>:
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
     4de:	d8 01       	movw	r26, r16
     4e0:	1b 96       	adiw	r26, 0x0b	; 11
     4e2:	ed 91       	ld	r30, X+
     4e4:	fc 91       	ld	r31, X

000004e6 <.Loc.425>:
     4e6:	30 97       	sbiw	r30, 0x00	; 0
     4e8:	11 f0       	breq	.+4      	; 0x4ee <.L84>

000004ea <.Loc.426>:
    oqp->q_notify(oqp);
     4ea:	c8 01       	movw	r24, r16
     4ec:	09 95       	icall

000004ee <.L84>:
  asm volatile ("sei" : : : "memory");
     4ee:	78 94       	sei

000004f0 <.LBE146>:
  }

  osalSysUnlock();

  return MSG_OK;
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	d0 e0       	ldi	r29, 0x00	; 0

000004f4 <.L79>:
}
     4f4:	ce 01       	movw	r24, r28
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16

000004fe <.LVL115>:
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14

00000502 <.LVL116>:
     502:	df 90       	pop	r13

00000504 <.LVL117>:
     504:	08 95       	ret

00000506 <.L89>:
     506:	78 94       	sei

00000508 <.LBE143>:
      return msg;
     508:	f5 cf       	rjmp	.-22     	; 0x4f4 <.L79>

0000050a <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
     50a:	cf 93       	push	r28

0000050c <.LCFI60>:
     50c:	fc 01       	movw	r30, r24

0000050e <.Loc.451>:

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
     50e:	a1 85       	ldd	r26, Z+9	; 0x09
     510:	b2 85       	ldd	r27, Z+10	; 0x0a
     512:	87 81       	ldd	r24, Z+7	; 0x07
     514:	90 85       	ldd	r25, Z+8	; 0x08

00000516 <.LVL120>:
     516:	8a 17       	cp	r24, r26
     518:	9b 07       	cpc	r25, r27
     51a:	e1 f0       	breq	.+56     	; 0x554 <.L95>

0000051c <.L91>:
    uint8_t b;

    oqp->q_counter++;
     51c:	81 81       	ldd	r24, Z+1	; 0x01
     51e:	92 81       	ldd	r25, Z+2	; 0x02

00000520 <.Loc.458>:
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	92 83       	std	Z+2, r25	; 0x02
     524:	81 83       	std	Z+1, r24	; 0x01

00000526 <.Loc.459>:
    b = *oqp->q_rdptr++;
     526:	cd 01       	movw	r24, r26
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	92 87       	std	Z+10, r25	; 0x0a
     52c:	81 87       	std	Z+9, r24	; 0x09

0000052e <.Loc.461>:
     52e:	cc 91       	ld	r28, X

00000530 <.LVL121>:
    if (oqp->q_rdptr >= oqp->q_top) {
     530:	25 81       	ldd	r18, Z+5	; 0x05
     532:	36 81       	ldd	r19, Z+6	; 0x06
     534:	82 17       	cp	r24, r18
     536:	93 07       	cpc	r25, r19
     538:	40 f4       	brcc	.+16     	; 0x54a <.L96>

0000053a <.L93>:
  chThdDequeueNextI(tqp, msg);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	cf 01       	movw	r24, r30
     540:	51 d6       	rcall	.+3234   	; 0x11e4 <chThdDequeueNextI>

00000542 <.LBE151>:
      oqp->q_rdptr = oqp->q_buffer;
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
     542:	8c 2f       	mov	r24, r28
     544:	90 e0       	ldi	r25, 0x00	; 0

00000546 <.L90>:
  }

  return MSG_TIMEOUT;
}
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <.L96>:
      oqp->q_rdptr = oqp->q_buffer;
     54a:	83 81       	ldd	r24, Z+3	; 0x03
     54c:	94 81       	ldd	r25, Z+4	; 0x04
     54e:	92 87       	std	Z+10, r25	; 0x0a
     550:	81 87       	std	Z+9, r24	; 0x09
     552:	f3 cf       	rjmp	.-26     	; 0x53a <.L93>

00000554 <.L95>:
  if (!oqIsEmptyI(oqp)) {
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	92 81       	ldd	r25, Z+2	; 0x02
     558:	89 2b       	or	r24, r25
     55a:	01 f3       	breq	.-64     	; 0x51c <.L91>

0000055c <.Loc.476>:
  return MSG_TIMEOUT;
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	f2 cf       	rjmp	.-28     	; 0x546 <.L90>

00000562 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     562:	6f 92       	push	r6

00000564 <.LCFI67>:
     564:	7f 92       	push	r7

00000566 <.LCFI68>:
     566:	8f 92       	push	r8

00000568 <.LCFI69>:
     568:	9f 92       	push	r9

0000056a <.LCFI70>:
     56a:	af 92       	push	r10

0000056c <.LCFI71>:
     56c:	bf 92       	push	r11

0000056e <.LCFI72>:
     56e:	cf 92       	push	r12

00000570 <.LCFI73>:
     570:	df 92       	push	r13

00000572 <.LCFI74>:
     572:	ef 92       	push	r14

00000574 <.LCFI75>:
     574:	ff 92       	push	r15

00000576 <.LCFI76>:
     576:	0f 93       	push	r16

00000578 <.LCFI77>:
     578:	1f 93       	push	r17

0000057a <.LCFI78>:
     57a:	cf 93       	push	r28

0000057c <.LCFI79>:
     57c:	df 93       	push	r29

0000057e <.LCFI80>:
     57e:	6c 01       	movw	r12, r24
     580:	7b 01       	movw	r14, r22
     582:	4a 01       	movw	r8, r20
     584:	72 2e       	mov	r7, r18
     586:	63 2e       	mov	r6, r19

00000588 <.Loc.497>:
  qnotify_t nfy = oqp->q_notify;
     588:	fc 01       	movw	r30, r24
     58a:	a3 84       	ldd	r10, Z+11	; 0x0b
     58c:	b4 84       	ldd	r11, Z+12	; 0x0c

0000058e <.LBB154>:
  asm volatile ("cli" : : : "memory");
     58e:	f8 94       	cli

00000590 <.LBE154>:

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     590:	8a 01       	movw	r16, r20
     592:	45 2b       	or	r20, r21
     594:	b1 f0       	breq	.+44     	; 0x5c2 <.L111>

00000596 <.L106>:
    size_t done;

    done = oq_write(oqp, bp, n);
     596:	a8 01       	movw	r20, r16
     598:	b7 01       	movw	r22, r14
     59a:	c6 01       	movw	r24, r12
     59c:	0a de       	rcall	.-1004   	; 0x1b2 <oq_write>

0000059e <.LVL138>:
     59e:	ec 01       	movw	r28, r24

000005a0 <.LVL139>:
    if (done == (size_t)0) {
     5a0:	89 2b       	or	r24, r25
     5a2:	01 f1       	breq	.+64     	; 0x5e4 <.L122>

000005a4 <.Loc.517>:
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     5a4:	a1 14       	cp	r10, r1
     5a6:	b1 04       	cpc	r11, r1
     5a8:	19 f0       	breq	.+6      	; 0x5b0 <.L110>

000005aa <.Loc.519>:
        nfy(oqp);
     5aa:	c6 01       	movw	r24, r12

000005ac <.LVL140>:
     5ac:	f5 01       	movw	r30, r10
     5ae:	09 95       	icall

000005b0 <.L110>:
  asm volatile ("sei" : : : "memory");
     5b0:	78 94       	sei

000005b2 <.LBE158>:
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
     5b2:	0c 1b       	sub	r16, r28
     5b4:	1d 0b       	sbc	r17, r29

000005b6 <.Loc.530>:
      bp += done;
     5b6:	ec 0e       	add	r14, r28
     5b8:	fd 1e       	adc	r15, r29

000005ba <.LBB161>:
  asm volatile ("cli" : : : "memory");
     5ba:	f8 94       	cli

000005bc <.LBE157>:
  while (n > 0U) {
     5bc:	01 15       	cp	r16, r1
     5be:	11 05       	cpc	r17, r1
     5c0:	51 f7       	brne	.-44     	; 0x596 <.L106>

000005c2 <.L111>:
     5c2:	c4 01       	movw	r24, r8

000005c4 <.L107>:
  asm volatile ("sei" : : : "memory");
     5c4:	78 94       	sei

000005c6 <.LBE167>:
    }
  }

  osalSysUnlock();
  return max - n;
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16

000005ce <.LVL145>:
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14

000005d2 <.LVL146>:
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12

000005d6 <.LVL147>:
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10

000005da <.LVL148>:
     5da:	9f 90       	pop	r9
     5dc:	8f 90       	pop	r8

000005de <.LVL149>:
     5de:	7f 90       	pop	r7
     5e0:	6f 90       	pop	r6
     5e2:	08 95       	ret

000005e4 <.L122>:
  return chThdEnqueueTimeoutS(tqp, timeout);
     5e4:	67 2d       	mov	r22, r7
     5e6:	76 2d       	mov	r23, r6
     5e8:	c6 01       	movw	r24, r12

000005ea <.LVL151>:
     5ea:	c0 d5       	rcall	.+2944   	; 0x116c <chThdEnqueueTimeoutS>

000005ec <.LBE165>:
      if (msg != MSG_OK) {
     5ec:	89 2b       	or	r24, r25
     5ee:	99 f2       	breq	.-90     	; 0x596 <.L106>

000005f0 <.LBE164>:
  return max - n;
     5f0:	c4 01       	movw	r24, r8

000005f2 <.LVL153>:
     5f2:	80 1b       	sub	r24, r16
     5f4:	91 0b       	sbc	r25, r17
     5f6:	e6 cf       	rjmp	.-52     	; 0x5c4 <.L107>

000005f8 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
     5f8:	da c1       	rjmp	.+948    	; 0x9ae <pwm_lld_init>

000005fa <pwmObjectInit>:
 *
 * @param[out] pwmp     pointer to a @p PWMDriver object
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {
     5fa:	fc 01       	movw	r30, r24

000005fc <.Loc.4>:

  pwmp->state    = PWM_STOP;
     5fc:	81 e0       	ldi	r24, 0x01	; 1

000005fe <.LVL2>:
     5fe:	80 83       	st	Z, r24

00000600 <.Loc.7>:
  pwmp->config   = NULL;
     600:	12 82       	std	Z+2, r1	; 0x02
     602:	11 82       	std	Z+1, r1	; 0x01

00000604 <.Loc.10>:
  pwmp->enabled  = 0;
     604:	15 82       	std	Z+5, r1	; 0x05

00000606 <.Loc.11>:
  pwmp->channels = 0;
     606:	16 82       	std	Z+6, r1	; 0x06

00000608 <.Loc.13>:
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
     608:	08 95       	ret

0000060a <pwmStart>:
 * @param[in] config    pointer to a @p PWMConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
     60a:	cf 93       	push	r28

0000060c <.LCFI0>:
     60c:	df 93       	push	r29

0000060e <.LCFI1>:
     60e:	ec 01       	movw	r28, r24
     610:	fb 01       	movw	r30, r22

00000612 <.LBB78>:
  asm volatile ("cli" : : : "memory");
     612:	f8 94       	cli

00000614 <.LBE78>:

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");

  pwmp->config = config;
     614:	7a 83       	std	Y+2, r23	; 0x02
     616:	69 83       	std	Y+1, r22	; 0x01

00000618 <.Loc.32>:
  pwmp->period = config->period;
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	95 81       	ldd	r25, Z+5	; 0x05

0000061c <.LVL4>:
     61c:	9c 83       	std	Y+4, r25	; 0x04
     61e:	8b 83       	std	Y+3, r24	; 0x03

00000620 <.Loc.35>:
  pwmp->enabled = 0U;
     620:	1d 82       	std	Y+5, r1	; 0x05

00000622 <.Loc.37>:

#if defined(PWM_LLD_ENHANCED_API)
  msg = pwm_lld_start(pwmp);
#else
  pwm_lld_start(pwmp);
     622:	ce 01       	movw	r24, r28
     624:	cb d1       	rcall	.+918    	; 0x9bc <pwm_lld_start>

00000626 <.LVL5>:
  msg = HAL_RET_SUCCESS;
#endif
  if (msg == HAL_RET_SUCCESS) {
    pwmp->state = PWM_READY;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	88 83       	st	Y, r24

0000062a <.LBB81>:
  asm volatile ("sei" : : : "memory");
     62a:	78 94       	sei

0000062c <.LBE81>:
  }

  osalSysUnlock();

  return msg;
}
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28

00000634 <.LVL6>:
     634:	08 95       	ret

00000636 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
     636:	fc 01       	movw	r30, r24

00000638 <.LBB96>:
  asm volatile ("cli" : : : "memory");
     638:	f8 94       	cli

0000063a <.LBE96>:

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	06 2e       	mov	r0, r22
     640:	01 c0       	rjmp	.+2      	; 0x644 <.L2^B1>

00000642 <.L1^B1>:
     642:	22 0f       	add	r18, r18

00000644 <.L2^B1>:
     644:	0a 94       	dec	r0
     646:	ea f7       	brpl	.-6      	; 0x642 <.L1^B1>
     648:	85 81       	ldd	r24, Z+5	; 0x05

0000064a <.LVL13>:
     64a:	82 2b       	or	r24, r18
     64c:	85 83       	std	Z+5, r24	; 0x05

0000064e <.Loc.127>:
     64e:	cf 01       	movw	r24, r30
     650:	6e d2       	rcall	.+1244   	; 0xb2e <pwm_lld_enable_channel>

00000652 <.LBB100>:
  asm volatile ("sei" : : : "memory");
     652:	78 94       	sei

00000654 <.LBE100>:

  osalSysUnlock();
}
     654:	08 95       	ret

00000656 <_readt>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
     656:	05 96       	adiw	r24, 0x05	; 5

00000658 <.LVL1>:
     658:	9b ce       	rjmp	.-714    	; 0x390 <iqReadTimeout>

0000065a <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	05 96       	adiw	r24, 0x05	; 5

00000660 <.LVL4>:
     660:	97 ce       	rjmp	.-722    	; 0x390 <iqReadTimeout>

00000662 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
     662:	44 96       	adiw	r24, 0x14	; 20

00000664 <.LVL7>:
     664:	7e cf       	rjmp	.-260    	; 0x562 <oqWriteTimeout>

00000666 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	44 96       	adiw	r24, 0x14	; 20

0000066c <.LVL10>:
     66c:	7a cf       	rjmp	.-268    	; 0x562 <oqWriteTimeout>

0000066e <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
     66e:	05 96       	adiw	r24, 0x05	; 5

00000670 <.LVL13>:
     670:	3a ce       	rjmp	.-908    	; 0x2e6 <iqGetTimeout>

00000672 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	05 96       	adiw	r24, 0x05	; 5

00000678 <.LVL16>:
     678:	36 ce       	rjmp	.-916    	; 0x2e6 <iqGetTimeout>

0000067a <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
     67a:	44 96       	adiw	r24, 0x14	; 20

0000067c <.LVL19>:
     67c:	f0 ce       	rjmp	.-544    	; 0x45e <oqPutTimeout>

0000067e <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	44 96       	adiw	r24, 0x14	; 20

00000684 <.LVL22>:
     684:	ec ce       	rjmp	.-552    	; 0x45e <oqPutTimeout>

00000686 <_ctl>:
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
     686:	61 30       	cpi	r22, 0x01	; 1
     688:	71 05       	cpc	r23, r1
     68a:	19 f4       	brne	.+6      	; 0x692 <.L13>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	08 95       	ret

00000692 <.L13>:
     692:	8c ee       	ldi	r24, 0xEC	; 236
     694:	9f ef       	ldi	r25, 0xFF	; 255
     696:	08 95       	ret

00000698 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
     698:	95 c3       	rjmp	.+1834   	; 0xdc4 <sd_lld_init>

0000069a <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
     69a:	ef 92       	push	r14

0000069c <.LCFI0>:
     69c:	ff 92       	push	r15

0000069e <.LCFI1>:
     69e:	0f 93       	push	r16

000006a0 <.LCFI2>:
     6a0:	1f 93       	push	r17

000006a2 <.LCFI3>:
     6a2:	cf 93       	push	r28

000006a4 <.LCFI4>:
     6a4:	df 93       	push	r29

000006a6 <.LCFI5>:
     6a6:	ec 01       	movw	r28, r24
     6a8:	9b 01       	movw	r18, r22
     6aa:	7a 01       	movw	r14, r20

000006ac <.Loc.45>:

  sdp->vmt = &vmt;
     6ac:	fc 01       	movw	r30, r24
     6ae:	8a e1       	ldi	r24, 0x1A	; 26
     6b0:	91 e0       	ldi	r25, 0x01	; 1

000006b2 <.LVL26>:
     6b2:	81 93       	st	Z+, r24
     6b4:	91 93       	st	Z+, r25

000006b6 <.LBB50>:
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {

  chEvtObjectInit(esp);
     6b6:	fb 83       	std	Y+3, r31	; 0x03
     6b8:	ea 83       	std	Y+2, r30	; 0x02

000006ba <.LBE50>:
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	8c 83       	std	Y+4, r24	; 0x04

000006be <.Loc.56>:
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
     6be:	be 01       	movw	r22, r28

000006c0 <.LVL29>:
     6c0:	6d 5d       	subi	r22, 0xDD	; 221
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255

000006c4 <.Loc.59>:
     6c4:	8e 01       	movw	r16, r28
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0

000006ca <.LVL30>:
     6ca:	ce 01       	movw	r24, r28
     6cc:	05 96       	adiw	r24, 0x05	; 5
     6ce:	c8 dd       	rcall	.-1136   	; 0x260 <iqObjectInit>

000006d0 <.LVL31>:
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
     6d0:	be 01       	movw	r22, r28
     6d2:	6d 5c       	subi	r22, 0xCD	; 205
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255

000006d6 <.Loc.63>:
     6d6:	97 01       	movw	r18, r14
     6d8:	40 e1       	ldi	r20, 0x10	; 16
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	ce 01       	movw	r24, r28
     6de:	44 96       	adiw	r24, 0x14	; 20
     6e0:	a2 de       	rcall	.-700    	; 0x426 <oqObjectInit>

000006e2 <.LVL32>:
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28

000006e6 <.LVL33>:
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16

000006ea <.LVL34>:
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14

000006ee <.LVL35>:
     6ee:	08 95       	ret

000006f0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     6f0:	1f 93       	push	r17

000006f2 <.LCFI10>:
     6f2:	cf 93       	push	r28

000006f4 <.LCFI11>:
     6f4:	df 93       	push	r29

000006f6 <.LCFI12>:
     6f6:	ec 01       	movw	r28, r24
     6f8:	16 2f       	mov	r17, r22

000006fa <.Loc.133>:

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     6fa:	8e 81       	ldd	r24, Y+6	; 0x06
     6fc:	9f 81       	ldd	r25, Y+7	; 0x07

000006fe <.LVL46>:
     6fe:	89 2b       	or	r24, r25
     700:	51 f0       	breq	.+20     	; 0x716 <.L21>

00000702 <.Loc.140>:
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     702:	61 2f       	mov	r22, r17

00000704 <.LVL47>:
     704:	ce 01       	movw	r24, r28
     706:	05 96       	adiw	r24, 0x05	; 5
     708:	c3 dd       	rcall	.-1146   	; 0x290 <iqPutI>

0000070a <.LVL48>:
     70a:	97 fd       	sbrc	r25, 7
     70c:	0e c0       	rjmp	.+28     	; 0x72a <.L22>

0000070e <.L18>:
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28

00000712 <.LVL49>:
     712:	1f 91       	pop	r17

00000714 <.LVL50>:
     714:	08 95       	ret

00000716 <.L21>:
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     716:	64 e0       	ldi	r22, 0x04	; 4
     718:	ce 01       	movw	r24, r28
     71a:	02 96       	adiw	r24, 0x02	; 2

0000071c <.LVL52>:
     71c:	69 d5       	rcall	.+2770   	; 0x11f0 <chEvtBroadcastFlagsI>

0000071e <.LBE66>:
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     71e:	61 2f       	mov	r22, r17
     720:	ce 01       	movw	r24, r28
     722:	05 96       	adiw	r24, 0x05	; 5
     724:	b5 dd       	rcall	.-1174   	; 0x290 <iqPutI>

00000726 <.LVL54>:
     726:	97 ff       	sbrs	r25, 7
     728:	f2 cf       	rjmp	.-28     	; 0x70e <.L18>

0000072a <.L22>:
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	ce 01       	movw	r24, r28
     72e:	02 96       	adiw	r24, 0x02	; 2

00000730 <.LBE68>:
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28

00000734 <.LVL57>:
     734:	1f 91       	pop	r17

00000736 <.LBB71>:
     736:	5c c5       	rjmp	.+2744   	; 0x11f0 <chEvtBroadcastFlagsI>

00000738 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     738:	0f 93       	push	r16

0000073a <.LCFI13>:
     73a:	1f 93       	push	r17

0000073c <.LCFI14>:
     73c:	cf 93       	push	r28

0000073e <.LCFI15>:
     73e:	df 93       	push	r29

00000740 <.LCFI16>:
     740:	8c 01       	movw	r16, r24

00000742 <.Loc.167>:
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     742:	44 96       	adiw	r24, 0x14	; 20

00000744 <.LVL61>:
     744:	e2 de       	rcall	.-572    	; 0x50a <oqGetI>

00000746 <.LVL62>:
     746:	ec 01       	movw	r28, r24

00000748 <.LVL63>:
  if (b < MSG_OK)
     748:	97 fd       	sbrc	r25, 7
     74a:	06 c0       	rjmp	.+12     	; 0x758 <.L25>

0000074c <.Loc.177>:
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     74c:	ce 01       	movw	r24, r28

0000074e <.Loc.178>:
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16

00000756 <.LVL64>:
     756:	08 95       	ret

00000758 <.L25>:
     758:	68 e0       	ldi	r22, 0x08	; 8
     75a:	c8 01       	movw	r24, r16

0000075c <.LVL66>:
     75c:	02 96       	adiw	r24, 0x02	; 2

0000075e <.LVL67>:
     75e:	48 d5       	rcall	.+2704   	; 0x11f0 <chEvtBroadcastFlagsI>

00000760 <.LBE72>:
     760:	ce 01       	movw	r24, r28
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28

00000766 <.LVL69>:
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16

0000076a <.LVL70>:
     76a:	08 95       	ret

0000076c <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
     76c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <.Ldebug_info0+0x7f3265>

00000770 <.Loc.3>:
  EIMSK  = 0x00;
     770:	1d ba       	out	0x1d, r1	; 29

00000772 <.Loc.5>:

}
     772:	08 95       	ret

00000774 <hal_lld_init>:
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
}
     774:	08 95       	ret

00000776 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     776:	fc 01       	movw	r30, r24

00000778 <.Loc.2>:
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     778:	80 81       	ld	r24, Z

0000077a <.LVL1>:
     77a:	85 b9       	out	0x05, r24	; 5

0000077c <.Loc.5>:
  DDRB = config->portb.dir;
     77c:	81 81       	ldd	r24, Z+1	; 0x01

0000077e <.Loc.7>:
     77e:	84 b9       	out	0x04, r24	; 4

00000780 <.Loc.8>:
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     780:	82 81       	ldd	r24, Z+2	; 0x02

00000782 <.Loc.10>:
     782:	88 b9       	out	0x08, r24	; 8

00000784 <.Loc.11>:
  DDRC = config->portc.dir;
     784:	83 81       	ldd	r24, Z+3	; 0x03

00000786 <.Loc.13>:
     786:	87 b9       	out	0x07, r24	; 7

00000788 <.Loc.14>:
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     788:	84 81       	ldd	r24, Z+4	; 0x04

0000078a <.Loc.16>:
     78a:	8b b9       	out	0x0b, r24	; 11

0000078c <.Loc.17>:
  DDRD = config->portd.dir;
     78c:	85 81       	ldd	r24, Z+5	; 0x05

0000078e <.Loc.19>:
     78e:	8a b9       	out	0x0a, r24	; 10

00000790 <.Loc.20>:

#if defined(PORTL) || defined(__DOXYGEN__)
  PORTL = config->portl.out;
  DDRL = config->portl.dir;
#endif
}
     790:	08 95       	ret

00000792 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     792:	fc 01       	movw	r30, r24

00000794 <.Loc.23>:

  switch (mode) {
     794:	47 30       	cpi	r20, 0x07	; 7
     796:	90 f4       	brcc	.+36     	; 0x7bc <.L3>
     798:	81 e0       	ldi	r24, 0x01	; 1

0000079a <.LVL3>:
     79a:	04 2e       	mov	r0, r20
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <.L2^B1>

0000079e <.L1^B1>:
     79e:	88 0f       	add	r24, r24

000007a0 <.L2^B1>:
     7a0:	0a 94       	dec	r0
     7a2:	ea f7       	brpl	.-6      	; 0x79e <.L1^B1>
     7a4:	98 2f       	mov	r25, r24
     7a6:	95 72       	andi	r25, 0x25	; 37
     7a8:	91 11       	cpse	r25, r1
     7aa:	12 c0       	rjmp	.+36     	; 0x7d0 <.L5>
     7ac:	8a 70       	andi	r24, 0x0A	; 10
     7ae:	81 11       	cpse	r24, r1
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <.L6>
     7b2:	46 30       	cpi	r20, 0x06	; 6
     7b4:	a9 f4       	brne	.+42     	; 0x7e0 <.L8>

000007b6 <.Loc.25>:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     7b6:	81 81       	ldd	r24, Z+1	; 0x01

000007b8 <.Loc.27>:
     7b8:	86 2b       	or	r24, r22
     7ba:	81 83       	std	Z+1, r24	; 0x01

000007bc <.L3>:
    break;
  }
}
     7bc:	08 95       	ret

000007be <.L6>:
    port->dir &= ~mask;
     7be:	91 81       	ldd	r25, Z+1	; 0x01

000007c0 <.Loc.32>:
     7c0:	86 2f       	mov	r24, r22
     7c2:	80 95       	com	r24
     7c4:	89 23       	and	r24, r25
     7c6:	81 83       	std	Z+1, r24	; 0x01

000007c8 <.Loc.33>:
    port->out |= mask;
     7c8:	82 81       	ldd	r24, Z+2	; 0x02

000007ca <.Loc.35>:
     7ca:	86 2b       	or	r24, r22
     7cc:	82 83       	std	Z+2, r24	; 0x02

000007ce <.Loc.36>:
    break;
     7ce:	08 95       	ret

000007d0 <.L5>:
    port->dir &= ~mask;
     7d0:	81 81       	ldd	r24, Z+1	; 0x01

000007d2 <.Loc.39>:
     7d2:	60 95       	com	r22

000007d4 <.LVL4>:
     7d4:	86 23       	and	r24, r22
     7d6:	81 83       	std	Z+1, r24	; 0x01

000007d8 <.Loc.41>:
    port->out &= ~mask;
     7d8:	82 81       	ldd	r24, Z+2	; 0x02

000007da <.Loc.43>:
     7da:	86 23       	and	r24, r22
     7dc:	82 83       	std	Z+2, r24	; 0x02

000007de <.Loc.44>:
    break;
     7de:	08 95       	ret

000007e0 <.L8>:
     7e0:	08 95       	ret

000007e2 <__vector_11>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for free running mode.
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     7e2:	1f 92       	push	r1

000007e4 <.LCFI0>:
     7e4:	0f 92       	push	r0

000007e6 <.LCFI1>:
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18

000007ee <.LCFI2>:
     7ee:	3f 93       	push	r19

000007f0 <.LCFI3>:
     7f0:	4f 93       	push	r20

000007f2 <.LCFI4>:
     7f2:	5f 93       	push	r21

000007f4 <.LCFI5>:
     7f4:	6f 93       	push	r22

000007f6 <.LCFI6>:
     7f6:	7f 93       	push	r23

000007f8 <.LCFI7>:
     7f8:	8f 93       	push	r24

000007fa <.LCFI8>:
     7fa:	9f 93       	push	r25

000007fc <.LCFI9>:
     7fc:	af 93       	push	r26

000007fe <.LCFI10>:
     7fe:	bf 93       	push	r27

00000800 <.LCFI11>:
     800:	ef 93       	push	r30

00000802 <.LCFI12>:
     802:	ff 93       	push	r31

00000804 <.LCFI13>:

  OSAL_IRQ_PROLOGUE();
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

0000080a <.LBB12>:
  chSysTimerHandlerI();
     80a:	67 d3       	rcall	.+1742   	; 0xeda <chSysTimerHandlerI>

0000080c <.LBE12>:

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     80c:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

00000810 <.Loc.12>:
     810:	e0 d3       	rcall	.+1984   	; 0xfd2 <chSchIsPreemptionRequired>

00000812 <.LVL1>:
     812:	81 15       	cp	r24, r1
     814:	89 f4       	brne	.+34     	; 0x838 <.L7>

00000816 <.L1>:
}
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <.L7>:
  OSAL_IRQ_EPILOGUE();
     838:	db d3       	rcall	.+1974   	; 0xff0 <chSchDoPreemption>

0000083a <.LVL2>:
}
     83a:	ed cf       	rjmp	.-38     	; 0x816 <.L1>

0000083c <st_lld_init>:
  /*
   * Periodic mode uses Timer 1 (16 bit).
   */

  /* CTC mode, no clock source. */
  TCCR1A     = 0;
     83c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <.Ldebug_info0+0x7f327c>

00000840 <.Loc.23>:
  TCCR1B     = _BV(WGM12);
     840:	e1 e8       	ldi	r30, 0x81	; 129
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	80 83       	st	Z, r24

00000848 <.Loc.25>:

  /* Start disabled. */
  TCCR1C     = 0;
     848:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <.Ldebug_info0+0x7f327e>

0000084c <.Loc.27>:
  OCR1A      = 0;
     84c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <.Ldebug_info0+0x7f3285>
     850:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <.Ldebug_info0+0x7f3284>

00000854 <.Loc.29>:
  TCNT1      = 0;
     854:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <.Ldebug_info0+0x7f3281>
     858:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <.Ldebug_info0+0x7f3280>

0000085c <.Loc.31>:
  TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	86 bb       	out	0x16, r24	; 22

00000860 <.Loc.33>:
  TIMSK_REG  = 0;
     860:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <.Ldebug_info0+0x7f326b>

00000864 <.Loc.35>:
  TCCR1B     = PRESCALER;
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	80 83       	st	Z, r24

00000868 <.Loc.37>:
#else
  #error "Neither TCCR0A nor TCCR0 registers are defined"
#endif

#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
     868:	08 95       	ret

0000086a <__vector_9>:
}
#endif
#endif

#if AVR_PWM_USE_TIM2 || defined(__DOXYGEN__)
OSAL_IRQ_HANDLER(TIMER2_OVF_vect) {
     86a:	1f 92       	push	r1

0000086c <.LCFI0>:
     86c:	0f 92       	push	r0

0000086e <.LCFI1>:
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	2f 93       	push	r18

00000876 <.LCFI2>:
     876:	3f 93       	push	r19

00000878 <.LCFI3>:
     878:	4f 93       	push	r20

0000087a <.LCFI4>:
     87a:	5f 93       	push	r21

0000087c <.LCFI5>:
     87c:	6f 93       	push	r22

0000087e <.LCFI6>:
     87e:	7f 93       	push	r23

00000880 <.LCFI7>:
     880:	8f 93       	push	r24

00000882 <.LCFI8>:
     882:	9f 93       	push	r25

00000884 <.LCFI9>:
     884:	af 93       	push	r26

00000886 <.LCFI10>:
     886:	bf 93       	push	r27

00000888 <.LCFI11>:
     888:	ef 93       	push	r30

0000088a <.LCFI12>:
     88a:	ff 93       	push	r31

0000088c <.LCFI13>:

  OSAL_IRQ_PROLOGUE();
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

00000892 <.Loc.3>:
  PWMD2.config->callback(&PWMD2);
     892:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <PWMD2+0x1>
     896:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <PWMD2+0x2>

0000089a <.Loc.7>:
     89a:	06 80       	ldd	r0, Z+6	; 0x06
     89c:	f7 81       	ldd	r31, Z+7	; 0x07
     89e:	e0 2d       	mov	r30, r0
     8a0:	8e e6       	ldi	r24, 0x6E	; 110
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	09 95       	icall

000008a6 <.LVL0>:
  OSAL_IRQ_EPILOGUE();
     8a6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

000008aa <.Loc.10>:
     8aa:	93 d3       	rcall	.+1830   	; 0xfd2 <chSchIsPreemptionRequired>

000008ac <.LVL1>:
     8ac:	81 15       	cp	r24, r1
     8ae:	89 f4       	brne	.+34     	; 0x8d2 <.L7>

000008b0 <.L1>:
}
     8b0:	ff 91       	pop	r31
     8b2:	ef 91       	pop	r30
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <.L7>:
  OSAL_IRQ_EPILOGUE();
     8d2:	8e d3       	rcall	.+1820   	; 0xff0 <chSchDoPreemption>

000008d4 <.LVL2>:
}
     8d4:	ed cf       	rjmp	.-38     	; 0x8b0 <.L1>

000008d6 <__vector_7>:

OSAL_IRQ_HANDLER(TIMER2_COMPA_vect) {
     8d6:	1f 92       	push	r1

000008d8 <.LCFI14>:
     8d8:	0f 92       	push	r0

000008da <.LCFI15>:
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	0f 92       	push	r0
     8de:	11 24       	eor	r1, r1
     8e0:	2f 93       	push	r18

000008e2 <.LCFI16>:
     8e2:	3f 93       	push	r19

000008e4 <.LCFI17>:
     8e4:	4f 93       	push	r20

000008e6 <.LCFI18>:
     8e6:	5f 93       	push	r21

000008e8 <.LCFI19>:
     8e8:	6f 93       	push	r22

000008ea <.LCFI20>:
     8ea:	7f 93       	push	r23

000008ec <.LCFI21>:
     8ec:	8f 93       	push	r24

000008ee <.LCFI22>:
     8ee:	9f 93       	push	r25

000008f0 <.LCFI23>:
     8f0:	af 93       	push	r26

000008f2 <.LCFI24>:
     8f2:	bf 93       	push	r27

000008f4 <.LCFI25>:
     8f4:	ef 93       	push	r30

000008f6 <.LCFI26>:
     8f6:	ff 93       	push	r31

000008f8 <.LCFI27>:

  OSAL_IRQ_PROLOGUE();
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

000008fe <.Loc.21>:
  PWMD2.config->channels[0].callback(&PWMD2);
     8fe:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <PWMD2+0x1>
     902:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <PWMD2+0x2>

00000906 <.Loc.25>:
     906:	01 84       	ldd	r0, Z+9	; 0x09
     908:	f2 85       	ldd	r31, Z+10	; 0x0a
     90a:	e0 2d       	mov	r30, r0
     90c:	8e e6       	ldi	r24, 0x6E	; 110
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	09 95       	icall

00000912 <.LVL3>:
  OSAL_IRQ_EPILOGUE();
     912:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

00000916 <.Loc.28>:
     916:	5d d3       	rcall	.+1722   	; 0xfd2 <chSchIsPreemptionRequired>

00000918 <.LVL4>:
     918:	81 15       	cp	r24, r1
     91a:	89 f4       	brne	.+34     	; 0x93e <.L13>

0000091c <.L8>:
}
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	bf 91       	pop	r27
     922:	af 91       	pop	r26
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	7f 91       	pop	r23
     92a:	6f 91       	pop	r22
     92c:	5f 91       	pop	r21
     92e:	4f 91       	pop	r20
     930:	3f 91       	pop	r19
     932:	2f 91       	pop	r18
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <.L13>:
  OSAL_IRQ_EPILOGUE();
     93e:	58 d3       	rcall	.+1712   	; 0xff0 <chSchDoPreemption>

00000940 <.LVL5>:
}
     940:	ed cf       	rjmp	.-38     	; 0x91c <.L8>

00000942 <__vector_8>:

OSAL_IRQ_HANDLER(TIMER2_COMPB_vect) {
     942:	1f 92       	push	r1

00000944 <.LCFI28>:
     944:	0f 92       	push	r0

00000946 <.LCFI29>:
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	2f 93       	push	r18

0000094e <.LCFI30>:
     94e:	3f 93       	push	r19

00000950 <.LCFI31>:
     950:	4f 93       	push	r20

00000952 <.LCFI32>:
     952:	5f 93       	push	r21

00000954 <.LCFI33>:
     954:	6f 93       	push	r22

00000956 <.LCFI34>:
     956:	7f 93       	push	r23

00000958 <.LCFI35>:
     958:	8f 93       	push	r24

0000095a <.LCFI36>:
     95a:	9f 93       	push	r25

0000095c <.LCFI37>:
     95c:	af 93       	push	r26

0000095e <.LCFI38>:
     95e:	bf 93       	push	r27

00000960 <.LCFI39>:
     960:	ef 93       	push	r30

00000962 <.LCFI40>:
     962:	ff 93       	push	r31

00000964 <.LCFI41>:

  OSAL_IRQ_PROLOGUE();
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

0000096a <.Loc.39>:
  PWMD2.config->channels[1].callback(&PWMD2);
     96a:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <PWMD2+0x1>
     96e:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <PWMD2+0x2>

00000972 <.Loc.43>:
     972:	04 84       	ldd	r0, Z+12	; 0x0c
     974:	f5 85       	ldd	r31, Z+13	; 0x0d
     976:	e0 2d       	mov	r30, r0
     978:	8e e6       	ldi	r24, 0x6E	; 110
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	09 95       	icall

0000097e <.LVL6>:
  OSAL_IRQ_EPILOGUE();
     97e:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

00000982 <.Loc.46>:
     982:	27 d3       	rcall	.+1614   	; 0xfd2 <chSchIsPreemptionRequired>

00000984 <.LVL7>:
     984:	81 15       	cp	r24, r1
     986:	89 f4       	brne	.+34     	; 0x9aa <.L19>

00000988 <.L14>:
}
     988:	ff 91       	pop	r31
     98a:	ef 91       	pop	r30
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <.L19>:
  OSAL_IRQ_EPILOGUE();
     9aa:	22 d3       	rcall	.+1604   	; 0xff0 <chSchDoPreemption>

000009ac <.LVL8>:
}
     9ac:	ed cf       	rjmp	.-38     	; 0x988 <.L14>

000009ae <pwm_lld_init>:
  pwmObjectInit(&PWMD1);
  PWMD1.channels = PWM_CHANNELS;
#endif

#if AVR_PWM_USE_TIM2 || defined(__DOXYGEN__)
  pwmObjectInit(&PWMD2);
     9ae:	8e e6       	ldi	r24, 0x6E	; 110
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	23 de       	rcall	.-954    	; 0x5fa <pwmObjectInit>

000009b4 <.LVL9>:
  PWMD2.channels = PWM_CHANNELS;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <PWMD2+0x6>

000009ba <.Loc.58>:

#if AVR_PWM_USE_TIM5 || defined(__DOXYGEN__)
  pwmObjectInit(&PWMD5);
  PWMD5.channels = PWM_CHANNELS;
#endif
}
     9ba:	08 95       	ret

000009bc <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to the @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
     9bc:	8f 92       	push	r8

000009be <.LCFI42>:
     9be:	9f 92       	push	r9

000009c0 <.LCFI43>:
     9c0:	af 92       	push	r10

000009c2 <.LCFI44>:
     9c2:	bf 92       	push	r11

000009c4 <.LCFI45>:
     9c4:	cf 92       	push	r12

000009c6 <.LCFI46>:
     9c6:	df 92       	push	r13

000009c8 <.LCFI47>:
     9c8:	ef 92       	push	r14

000009ca <.LCFI48>:
     9ca:	ff 92       	push	r15

000009cc <.LCFI49>:
     9cc:	cf 93       	push	r28

000009ce <.LCFI50>:
     9ce:	df 93       	push	r29

000009d0 <.LCFI51>:
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <L0^A>

000009d2 <L0^A>:
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <L0^A>

000009d4 <L0^A>:
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <L0^A>

000009d6 <L0^A>:
     9d6:	0f 92       	push	r0

000009d8 <.LCFI52>:
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62

000009dc <.LCFI53>:
     9dc:	9c 01       	movw	r18, r24

000009de <.Loc.61>:

  if (pwmp->state == PWM_STOP) {
     9de:	dc 01       	movw	r26, r24
     9e0:	8c 91       	ld	r24, X

000009e2 <.LVL11>:
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	89 f0       	breq	.+34     	; 0xa08 <.L40>

000009e6 <.L21>:
    *regs_table[i].tccrb = ((cs_value << TIM1_CS_OFFSET) |
                            ((wgm_value >> 2) << TIM1_WGM_OFFSET2));
    if (pwmp->config->callback != NULL)
      *regs_table[i].timsk = (1 << TOIE1);
  }
}
     9e6:	27 96       	adiw	r28, 0x07	; 7
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	9f 90       	pop	r9
     a04:	8f 90       	pop	r8
     a06:	08 95       	ret

00000a08 <.L40>:
    if (pwmp == &PWMD2) {
     a08:	b1 e0       	ldi	r27, 0x01	; 1
     a0a:	2e 36       	cpi	r18, 0x6E	; 110
     a0c:	3b 07       	cpc	r19, r27
     a0e:	09 f4       	brne	.+2      	; 0xa12 <.LVL14>

00000a10 <L0^A>:
     a10:	46 c0       	rjmp	.+140    	; 0xa9e <.L41>

00000a12 <.LVL14>:
    const uint8_t log_ratio_timer1[] = {0, 3, 6, 8, 10};
     a12:	85 e0       	ldi	r24, 0x05	; 5
     a14:	e0 e0       	ldi	r30, 0x00	; 0
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	de 01       	movw	r26, r28
     a1a:	11 96       	adiw	r26, 0x01	; 1

00000a1c <.L0^B1>:
     a1c:	01 90       	ld	r0, Z+
     a1e:	0d 92       	st	X+, r0
     a20:	8a 95       	dec	r24
     a22:	e1 f7       	brne	.-8      	; 0xa1c <.L0^B1>

00000a24 <.LVL15>:
      if (pwmp->config->frequency == (F_CPU >> log_ratio_timer1[n])) {
     a24:	d9 01       	movw	r26, r18
     a26:	11 96       	adiw	r26, 0x01	; 1
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	80 80       	ld	r8, Z
     a2e:	91 80       	ldd	r9, Z+1	; 0x01
     a30:	a2 80       	ldd	r10, Z+2	; 0x02
     a32:	b3 80       	ldd	r11, Z+3	; 0x03
     a34:	fe 01       	movw	r30, r28
     a36:	31 96       	adiw	r30, 0x01	; 1

00000a38 <.Loc.76>:
    for (n = 0; n < sizeof(log_ratio_timer1)/sizeof(uint8_t); n++) {
     a38:	80 e0       	ldi	r24, 0x00	; 0

00000a3a <.Loc.77>:
      if (pwmp->config->frequency == (F_CPU >> log_ratio_timer1[n])) {
     a3a:	c1 2c       	mov	r12, r1
     a3c:	94 e2       	ldi	r25, 0x24	; 36
     a3e:	d9 2e       	mov	r13, r25
     a40:	94 ef       	ldi	r25, 0xF4	; 244
     a42:	e9 2e       	mov	r14, r25
     a44:	f1 2c       	mov	r15, r1

00000a46 <.L29>:
     a46:	91 91       	ld	r25, Z+

00000a48 <.Loc.80>:
        cs_value = n + 1;
     a48:	8f 5f       	subi	r24, 0xFF	; 255

00000a4a <.LVL17>:
      if (pwmp->config->frequency == (F_CPU >> log_ratio_timer1[n])) {
     a4a:	b7 01       	movw	r22, r14
     a4c:	a6 01       	movw	r20, r12
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <.L2^B1>

00000a50 <.L1^B1>:
     a50:	76 95       	lsr	r23
     a52:	67 95       	ror	r22
     a54:	57 95       	ror	r21
     a56:	47 95       	ror	r20

00000a58 <.L2^B1>:
     a58:	9a 95       	dec	r25
     a5a:	d2 f7       	brpl	.-12     	; 0xa50 <.L1^B1>

00000a5c <.Loc.82>:
     a5c:	84 16       	cp	r8, r20
     a5e:	95 06       	cpc	r9, r21
     a60:	a6 06       	cpc	r10, r22
     a62:	b7 06       	cpc	r11, r23
     a64:	09 f4       	brne	.+2      	; 0xa68 <.LVL18>

00000a66 <L0^A>:
     a66:	5f c0       	rjmp	.+190    	; 0xb26 <.L42>

00000a68 <.LVL18>:
    for (n = 0; n < sizeof(log_ratio_timer1)/sizeof(uint8_t); n++) {
     a68:	85 30       	cpi	r24, 0x05	; 5
     a6a:	69 f7       	brne	.-38     	; 0xa46 <.L29>
     a6c:	8d e1       	ldi	r24, 0x1D	; 29

00000a6e <.L28>:
    *regs_table[i].icr = pwmp->period;
     a6e:	f9 01       	movw	r30, r18
     a70:	43 81       	ldd	r20, Z+3	; 0x03
     a72:	54 81       	ldd	r21, Z+4	; 0x04

00000a74 <.Loc.88>:
     a74:	50 93 01 00 	sts	0x0001, r21	; 0x800001 <.Ldebug_info0+0x7f31fd>
     a78:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000a7c <.Loc.89>:
    *regs_table[i].tccra = (wgm_value & 0x3) << TIM1_WGM_OFFSET1;
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000a82 <.Loc.91>:
    *regs_table[i].tccrb = ((cs_value << TIM1_CS_OFFSET) |
     a82:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000a86 <.Loc.93>:
    if (pwmp->config->callback != NULL)
     a86:	01 80       	ldd	r0, Z+1	; 0x01
     a88:	f2 81       	ldd	r31, Z+2	; 0x02
     a8a:	e0 2d       	mov	r30, r0

00000a8c <.Loc.95>:
     a8c:	86 81       	ldd	r24, Z+6	; 0x06
     a8e:	97 81       	ldd	r25, Z+7	; 0x07
     a90:	89 2b       	or	r24, r25
     a92:	09 f4       	brne	.+2      	; 0xa96 <.Loc.96>

00000a94 <L0^A>:
     a94:	a8 cf       	rjmp	.-176    	; 0x9e6 <.L21>

00000a96 <.Loc.96>:
      *regs_table[i].timsk = (1 << TOIE1);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <.Ldebug_info0+0x7f31fc>
     a9c:	a4 cf       	rjmp	.-184    	; 0x9e6 <.L21>

00000a9e <.L41>:
      PWMD2.period = 0xFF;
     a9e:	2f ef       	ldi	r18, 0xFF	; 255
     aa0:	30 e0       	ldi	r19, 0x00	; 0

00000aa2 <.LVL21>:
     aa2:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <PWMD2+0x4>
     aa6:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <PWMD2+0x3>

00000aaa <.Loc.103>:
      const uint8_t log_ratio_timer2[] = {0, 3, 5, 6, 7, 8, 10};
     aaa:	97 e0       	ldi	r25, 0x07	; 7
     aac:	e5 e0       	ldi	r30, 0x05	; 5
     aae:	f1 e0       	ldi	r31, 0x01	; 1
     ab0:	de 01       	movw	r26, r28

00000ab2 <.LVL22>:
     ab2:	11 96       	adiw	r26, 0x01	; 1

00000ab4 <.L0^B2>:
     ab4:	01 90       	ld	r0, Z+
     ab6:	0d 92       	st	X+, r0
     ab8:	9a 95       	dec	r25
     aba:	e1 f7       	brne	.-8      	; 0xab4 <.L0^B2>

00000abc <.LVL23>:
        if (pwmp->config->frequency == (F_CPU >> log_ratio_timer2[n])) {
     abc:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <PWMD2+0x1>
     ac0:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <PWMD2+0x2>
     ac4:	8d 90       	ld	r8, X+
     ac6:	9d 90       	ld	r9, X+
     ac8:	ad 90       	ld	r10, X+
     aca:	bc 90       	ld	r11, X
     acc:	13 97       	sbiw	r26, 0x03	; 3
     ace:	fe 01       	movw	r30, r28
     ad0:	31 96       	adiw	r30, 0x01	; 1

00000ad2 <.Loc.110>:
      for (n = 0; n < sizeof(log_ratio_timer2)/sizeof(uint8_t); n++) {
     ad2:	90 e0       	ldi	r25, 0x00	; 0

00000ad4 <.Loc.111>:
        if (pwmp->config->frequency == (F_CPU >> log_ratio_timer2[n])) {
     ad4:	c1 2c       	mov	r12, r1
     ad6:	24 e2       	ldi	r18, 0x24	; 36
     ad8:	d2 2e       	mov	r13, r18
     ada:	24 ef       	ldi	r18, 0xF4	; 244
     adc:	e2 2e       	mov	r14, r18
     ade:	f1 2c       	mov	r15, r1

00000ae0 <.L25>:
     ae0:	21 91       	ld	r18, Z+

00000ae2 <.Loc.114>:
              cs_value = n + 1;
     ae2:	9f 5f       	subi	r25, 0xFF	; 255

00000ae4 <.LVL25>:
        if (pwmp->config->frequency == (F_CPU >> log_ratio_timer2[n])) {
     ae4:	b7 01       	movw	r22, r14
     ae6:	a6 01       	movw	r20, r12
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <.L2^B2>

00000aea <.L1^B2>:
     aea:	76 95       	lsr	r23
     aec:	67 95       	ror	r22
     aee:	57 95       	ror	r21
     af0:	47 95       	ror	r20

00000af2 <.L2^B2>:
     af2:	2a 95       	dec	r18
     af4:	d2 f7       	brpl	.-12     	; 0xaea <.L1^B2>

00000af6 <.Loc.116>:
     af6:	84 16       	cp	r8, r20
     af8:	95 06       	cpc	r9, r21
     afa:	a6 06       	cpc	r10, r22
     afc:	b7 06       	cpc	r11, r23
     afe:	a9 f0       	breq	.+42     	; 0xb2a <.L31>

00000b00 <.LVL26>:
      for (n = 0; n < sizeof(log_ratio_timer2)/sizeof(uint8_t); n++) {
     b00:	97 30       	cpi	r25, 0x07	; 7
     b02:	71 f7       	brne	.-36     	; 0xae0 <.L25>

00000b04 <.L24>:
      TCCR2A = (wgm_value & 0x3) << TIM1_WGM_OFFSET1;
     b04:	93 e0       	ldi	r25, 0x03	; 3
     b06:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <.Ldebug_info0+0x7f32ac>

00000b0a <.Loc.121>:
      TCCR2B = ((cs_value << TIM1_CS_OFFSET) |
     b0a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <.Ldebug_info0+0x7f32ad>

00000b0e <.Loc.123>:
      if (pwmp->config->callback != NULL)
     b0e:	16 96       	adiw	r26, 0x06	; 6
     b10:	8d 91       	ld	r24, X+
     b12:	9c 91       	ld	r25, X

00000b14 <.LVL28>:
     b14:	89 2b       	or	r24, r25
     b16:	09 f4       	brne	.+2      	; 0xb1a <.Loc.126>

00000b18 <L0^A>:
     b18:	66 cf       	rjmp	.-308    	; 0x9e6 <.L21>

00000b1a <.Loc.126>:
        TIMSK2 |= (1 << TOIE2);
     b1a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <.Ldebug_info0+0x7f326c>

00000b1e <.Loc.127>:
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <.Ldebug_info0+0x7f326c>

00000b24 <.LVL29>:
      return;
     b24:	60 cf       	rjmp	.-320    	; 0x9e6 <.L21>

00000b26 <.L42>:
        break;
     b26:	88 61       	ori	r24, 0x18	; 24

00000b28 <.LVL31>:
     b28:	a2 cf       	rjmp	.-188    	; 0xa6e <.L28>

00000b2a <.L31>:
              cs_value = n + 1;
     b2a:	89 2f       	mov	r24, r25
     b2c:	eb cf       	rjmp	.-42     	; 0xb04 <.L24>

00000b2e <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
     b2e:	cf 92       	push	r12

00000b30 <.LCFI54>:
     b30:	df 92       	push	r13

00000b32 <.LCFI55>:
     b32:	ef 92       	push	r14

00000b34 <.LCFI56>:
     b34:	ff 92       	push	r15

00000b36 <.LCFI57>:
     b36:	1f 93       	push	r17

00000b38 <.LCFI58>:
     b38:	cf 93       	push	r28

00000b3a <.LCFI59>:
     b3a:	df 93       	push	r29

00000b3c <.LCFI60>:
     b3c:	dc 01       	movw	r26, r24

00000b3e <.LVL41>:

  uint16_t val = width;

#if AVR_PWM_USE_TIM2 || defined(__DOXYGEN__)
  if (pwmp == &PWMD2) {
    config_channel(&TCCR2A,
     b3e:	c6 2f       	mov	r28, r22
     b40:	d0 e0       	ldi	r29, 0x00	; 0
     b42:	86 2f       	mov	r24, r22

00000b44 <.LVL42>:
     b44:	88 0f       	add	r24, r24
     b46:	e7 e0       	ldi	r30, 0x07	; 7
     b48:	e8 1b       	sub	r30, r24

00000b4a <.LBB31>:
  *tccra &= ~((1 << com1) | (1 << com0));
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	69 01       	movw	r12, r18
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <.L2^B3>

00000b52 <.L1^B3>:
     b52:	cc 0c       	add	r12, r12

00000b54 <.L2^B3>:
     b54:	ea 95       	dec	r30
     b56:	ea f7       	brpl	.-6      	; 0xb52 <.L1^B3>

00000b58 <.LBE31>:
                   7 - 2*channel,
                   6 - 2*channel,
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	86 1b       	sub	r24, r22
     b5e:	91 09       	sbc	r25, r1

00000b60 <.Loc.171>:
    config_channel(&TCCR2A,
     b60:	88 0f       	add	r24, r24

00000b62 <.LBB36>:
  *tccra &= ~((1 << com1) | (1 << com0));
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <.L2^B4>

00000b64 <.L1^B4>:
     b64:	22 0f       	add	r18, r18

00000b66 <.L2^B4>:
     b66:	8a 95       	dec	r24
     b68:	ea f7       	brpl	.-6      	; 0xb64 <.L1^B4>

00000b6a <.Loc.173>:
     b6a:	2c 29       	or	r18, r12

00000b6c <.Loc.174>:
     b6c:	12 2f       	mov	r17, r18
     b6e:	10 95       	com	r17

00000b70 <.LBE36>:
  if (pwmp == &PWMD2) {
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	ae 36       	cpi	r26, 0x6E	; 110
     b74:	b8 07       	cpc	r27, r24
     b76:	09 f4       	brne	.+2      	; 0xb7a <.LVL43>

00000b78 <L0^A>:
     b78:	4a c0       	rjmp	.+148    	; 0xc0e <.L67>

00000b7a <.LVL43>:

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
                 7 - 2*channel,
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	6d 91       	ld	r22, X+
     b7e:	7c 91       	ld	r23, X
     b80:	12 97       	sbiw	r26, 0x02	; 2

00000b82 <.LVL44>:
     b82:	ce 01       	movw	r24, r28
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	7c 01       	movw	r14, r24
     b8a:	ec 0e       	add	r14, r28
     b8c:	fd 1e       	adc	r15, r29
     b8e:	6e 0d       	add	r22, r14
     b90:	7f 1d       	adc	r23, r15
     b92:	fb 01       	movw	r30, r22
     b94:	60 85       	ldd	r22, Z+8	; 0x08

00000b96 <.LBB37>:
  *tccra &= ~((1 << com1) | (1 << com0));
     b96:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000b9a <.Loc.182>:
     b9a:	31 23       	and	r19, r17
     b9c:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000ba0 <.Loc.183>:
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
     ba0:	61 30       	cpi	r22, 0x01	; 1
     ba2:	49 f1       	breq	.+82     	; 0xbf6 <.L68>

00000ba4 <.Loc.185>:
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
     ba4:	62 30       	cpi	r22, 0x02	; 2
     ba6:	69 f1       	breq	.+90     	; 0xc02 <.L69>

00000ba8 <.L62>:
    break;
  default:
    ocrh = regs_table[i].ocrah;
    ocrl = regs_table[i].ocral;
  }
  *ocrh = val >> 8;
     ba8:	50 93 00 00 	sts	0x0000, r21	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000bac <.Loc.194>:
  *ocrl = val & 0xFF;
     bac:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000bb0 <.Loc.196>:
  *regs_table[i].tifr = (1 << (channel + 1));
     bb0:	ae 01       	movw	r20, r28

00000bb2 <.LVL47>:
     bb2:	4f 5f       	subi	r20, 0xFF	; 255
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255

00000bb6 <.Loc.199>:
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <.L2^B5>

00000bbc <.L1^B5>:
     bbc:	22 0f       	add	r18, r18

00000bbe <.L2^B5>:
     bbe:	4a 95       	dec	r20
     bc0:	ea f7       	brpl	.-6      	; 0xbbc <.L1^B5>

00000bc2 <.Loc.200>:
     bc2:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000bc6 <.LVL48>:
  if (pwmp->config->channels[channel].callback != NULL)
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	8c 0f       	add	r24, r28
     bce:	9d 1f       	adc	r25, r29
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25

00000bd4 <.Loc.203>:
     bd4:	81 85       	ldd	r24, Z+9	; 0x09
     bd6:	92 85       	ldd	r25, Z+10	; 0x0a
     bd8:	89 2b       	or	r24, r25
     bda:	29 f0       	breq	.+10     	; 0xbe6 <.L51>

00000bdc <.Loc.204>:
    *regs_table[i].timsk |= (1 << (channel + 1));
     bdc:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000be0 <.Loc.205>:
     be0:	82 2b       	or	r24, r18
     be2:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000be6 <.L51>:
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28

00000bea <.LVL50>:
     bea:	1f 91       	pop	r17
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	08 95       	ret

00000bf6 <.L68>:
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
     bf6:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000bfa <.Loc.209>:
     bfa:	2c 29       	or	r18, r12
     bfc:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <.Ldebug_info0+0x7f31fc>
     c00:	d3 cf       	rjmp	.-90     	; 0xba8 <.L62>

00000c02 <.L69>:
    *tccra |= (1 << com1) | (1 << com0);   /* Inverting mode.     */
     c02:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <.Ldebug_info0+0x7f31fc>

00000c06 <.Loc.211>:
     c06:	23 2b       	or	r18, r19
     c08:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <.Ldebug_info0+0x7f31fc>
     c0c:	cd cf       	rjmp	.-102    	; 0xba8 <.L62>

00000c0e <.L67>:
                   pwmp->config->channels[channel].mode);
     c0e:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <PWMD2+0x1>
     c12:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <PWMD2+0x2>
     c16:	ce 01       	movw	r24, r28
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	7c 01       	movw	r14, r24
     c1e:	ec 0e       	add	r14, r28
     c20:	fd 1e       	adc	r15, r29
     c22:	ee 0e       	add	r14, r30
     c24:	ff 1e       	adc	r15, r31
     c26:	d7 01       	movw	r26, r14

00000c28 <.LVL53>:
     c28:	18 96       	adiw	r26, 0x08	; 8
     c2a:	7c 91       	ld	r23, X

00000c2c <.LBB41>:
  *tccra &= ~((1 << com1) | (1 << com0));
     c2c:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <.Ldebug_info0+0x7f32ac>

00000c30 <.Loc.218>:
     c30:	31 23       	and	r19, r17
     c32:	30 93 b0 00 	sts	0x00B0, r19	; 0x8000b0 <.Ldebug_info0+0x7f32ac>

00000c36 <.Loc.219>:
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
     c36:	71 30       	cpi	r23, 0x01	; 1
     c38:	a9 f1       	breq	.+106    	; 0xca4 <.L70>

00000c3a <.Loc.221>:
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
     c3a:	72 30       	cpi	r23, 0x02	; 2
     c3c:	29 f4       	brne	.+10     	; 0xc48 <.L54>

00000c3e <.Loc.223>:
    *tccra |= (1 << com1) | (1 << com0);   /* Inverting mode.     */
     c3e:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <.Ldebug_info0+0x7f32ac>

00000c42 <.Loc.224>:
     c42:	23 2b       	or	r18, r19
     c44:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <.Ldebug_info0+0x7f32ac>

00000c48 <.L54>:
    if (val > 0xFF)
     c48:	9a 01       	movw	r18, r20
     c4a:	41 15       	cp	r20, r1
     c4c:	51 40       	sbci	r21, 0x01	; 1
     c4e:	10 f0       	brcs	.+4      	; 0xc54 <.L55>

00000c50 <.LVL56>:
     c50:	2f ef       	ldi	r18, 0xFF	; 255
     c52:	30 e0       	ldi	r19, 0x00	; 0

00000c54 <.L55>:
    switch (channel) {
     c54:	61 15       	cp	r22, r1
     c56:	61 f1       	breq	.+88     	; 0xcb0 <.L56>
     c58:	61 30       	cpi	r22, 0x01	; 1
     c5a:	11 f4       	brne	.+4      	; 0xc60 <.L58>

00000c5c <.Loc.230>:
    case 1: OCR2B = val; break;
     c5c:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <.Ldebug_info0+0x7f32b0>

00000c60 <.L58>:
    TIFR2 = 1 << (OCF2A + channel);
     c60:	ae 01       	movw	r20, r28

00000c62 <.LVL58>:
     c62:	4f 5f       	subi	r20, 0xFF	; 255
     c64:	5f 4f       	sbci	r21, 0xFF	; 255

00000c66 <.Loc.236>:
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <.L2^B6>

00000c6c <.L1^B6>:
     c6c:	22 0f       	add	r18, r18

00000c6e <.L2^B6>:
     c6e:	4a 95       	dec	r20
     c70:	ea f7       	brpl	.-6      	; 0xc6c <.L1^B6>

00000c72 <.Loc.237>:
     c72:	27 bb       	out	0x17, r18	; 23

00000c74 <.Loc.238>:
    if (pwmp->config->channels[channel].callback)
     c74:	8c 0f       	add	r24, r28
     c76:	9d 1f       	adc	r25, r29
     c78:	df 01       	movw	r26, r30
     c7a:	a8 0f       	add	r26, r24
     c7c:	b9 1f       	adc	r27, r25

00000c7e <.Loc.240>:
     c7e:	19 96       	adiw	r26, 0x09	; 9
     c80:	8d 91       	ld	r24, X+
     c82:	9c 91       	ld	r25, X
     c84:	89 2b       	or	r24, r25
     c86:	09 f4       	brne	.+2      	; 0xc8a <.Loc.241>

00000c88 <L0^A>:
     c88:	ae cf       	rjmp	.-164    	; 0xbe6 <.L51>

00000c8a <.Loc.241>:
      TIMSK2 |= (1 << (OCIE2A + channel));
     c8a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <.Ldebug_info0+0x7f326c>

00000c8e <.Loc.242>:
     c8e:	82 2b       	or	r24, r18
     c90:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <.Ldebug_info0+0x7f326c>

00000c94 <.Loc.243>:
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	08 95       	ret

00000ca4 <.L70>:
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
     ca4:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <.Ldebug_info0+0x7f32ac>

00000ca8 <.Loc.245>:
     ca8:	2c 29       	or	r18, r12
     caa:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <.Ldebug_info0+0x7f32ac>
     cae:	cc cf       	rjmp	.-104    	; 0xc48 <.L54>

00000cb0 <.L56>:
    case 0: OCR2A = val; break;
     cb0:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <.Ldebug_info0+0x7f32af>

00000cb4 <.Loc.249>:
     cb4:	d5 cf       	rjmp	.-86     	; 0xc60 <.L58>

00000cb6 <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
     cb6:	e1 ec       	ldi	r30, 0xC1	; 193
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z

00000cbc <.LVL1>:
     cbc:	80 62       	ori	r24, 0x20	; 32
     cbe:	80 83       	st	Z, r24

00000cc0 <.Loc.4>:
}
     cc0:	08 95       	ret

00000cc2 <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
     cc2:	1f 92       	push	r1

00000cc4 <.LCFI0>:
     cc4:	0f 92       	push	r0

00000cc6 <.LCFI1>:
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18

00000cce <.LCFI2>:
     cce:	3f 93       	push	r19

00000cd0 <.LCFI3>:
     cd0:	4f 93       	push	r20

00000cd2 <.LCFI4>:
     cd2:	5f 93       	push	r21

00000cd4 <.LCFI5>:
     cd4:	6f 93       	push	r22

00000cd6 <.LCFI6>:
     cd6:	7f 93       	push	r23

00000cd8 <.LCFI7>:
     cd8:	8f 93       	push	r24

00000cda <.LCFI8>:
     cda:	9f 93       	push	r25

00000cdc <.LCFI9>:
     cdc:	af 93       	push	r26

00000cde <.LCFI10>:
     cde:	bf 93       	push	r27

00000ce0 <.LCFI11>:
     ce0:	ef 93       	push	r30

00000ce2 <.LCFI12>:
     ce2:	ff 93       	push	r31

00000ce4 <.LCFI13>:
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

00000cea <.Loc.10>:

  sra = UCSR0A;
     cea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <.Ldebug_info0+0x7f32bc>

00000cee <.LVL2>:
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
     cee:	98 2f       	mov	r25, r24
     cf0:	9c 71       	andi	r25, 0x1C	; 28
     cf2:	91 11       	cpse	r25, r1
     cf4:	1b c0       	rjmp	.+54     	; 0xd2c <.L16>

00000cf6 <.L4>:
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
     cf6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <.Ldebug_info0+0x7f32c2>
     cfa:	85 e7       	ldi	r24, 0x75	; 117
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	f8 dc       	rcall	.-1552   	; 0x6f0 <sdIncomingDataI>

00000d00 <.LVL4>:
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     d00:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

00000d04 <.Loc.20>:
     d04:	66 d1       	rcall	.+716    	; 0xfd2 <chSchIsPreemptionRequired>

00000d06 <.LVL5>:
     d06:	81 15       	cp	r24, r1
     d08:	d1 f4       	brne	.+52     	; 0xd3e <.L17>

00000d0a <.L3>:
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <.L16>:
  if (sra & upe)
     d2c:	82 fb       	bst	r24, 2
     d2e:	66 27       	eor	r22, r22
     d30:	65 f9       	bld	r22, 5

00000d32 <.LVL7>:
  if (sra & fe)
     d32:	84 fd       	sbrc	r24, 4

00000d34 <.Loc.40>:
    sts |= SD_FRAMING_ERROR;
     d34:	60 64       	ori	r22, 0x40	; 64

00000d36 <.LBB30>:
  chEvtBroadcastFlagsI(esp, flags);
     d36:	87 e7       	ldi	r24, 0x77	; 119
     d38:	91 e0       	ldi	r25, 0x01	; 1

00000d3a <.LVL9>:
     d3a:	5a d2       	rcall	.+1204   	; 0x11f0 <chEvtBroadcastFlagsI>

00000d3c <.LBE30>:
}
     d3c:	dc cf       	rjmp	.-72     	; 0xcf6 <.L4>

00000d3e <.L17>:
  OSAL_IRQ_EPILOGUE();
     d3e:	58 d1       	rcall	.+688    	; 0xff0 <chSchDoPreemption>

00000d40 <.LVL11>:
}
     d40:	e4 cf       	rjmp	.-56     	; 0xd0a <.L3>

00000d42 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
     d42:	1f 92       	push	r1

00000d44 <.LCFI14>:
     d44:	0f 92       	push	r0

00000d46 <.LCFI15>:
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	2f 93       	push	r18

00000d4e <.LCFI16>:
     d4e:	3f 93       	push	r19

00000d50 <.LCFI17>:
     d50:	4f 93       	push	r20

00000d52 <.LCFI18>:
     d52:	5f 93       	push	r21

00000d54 <.LCFI19>:
     d54:	6f 93       	push	r22

00000d56 <.LCFI20>:
     d56:	7f 93       	push	r23

00000d58 <.LCFI21>:
     d58:	8f 93       	push	r24

00000d5a <.LCFI22>:
     d5a:	9f 93       	push	r25

00000d5c <.LCFI23>:
     d5c:	af 93       	push	r26

00000d5e <.LCFI24>:
     d5e:	bf 93       	push	r27

00000d60 <.LCFI25>:
     d60:	cf 93       	push	r28

00000d62 <.LCFI26>:
     d62:	df 93       	push	r29

00000d64 <.LCFI27>:
     d64:	ef 93       	push	r30

00000d66 <.LCFI28>:
     d66:	ff 93       	push	r31

00000d68 <.LCFI29>:
  msg_t b;

  OSAL_IRQ_PROLOGUE();
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

00000d6e <.Loc.60>:

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
     d6e:	85 e7       	ldi	r24, 0x75	; 117
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	e2 dc       	rcall	.-1596   	; 0x738 <sdRequestDataI>

00000d74 <.LVL12>:
  osalSysUnlockFromISR();
  if (b < MSG_OK)
     d74:	97 fd       	sbrc	r25, 7
     d76:	1a c0       	rjmp	.+52     	; 0xdac <.L25>

00000d78 <.Loc.68>:
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
     d78:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <.Ldebug_info0+0x7f32c2>

00000d7c <.Loc.70>:

  OSAL_IRQ_EPILOGUE();
     d7c:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

00000d80 <.Loc.72>:
     d80:	28 d1       	rcall	.+592    	; 0xfd2 <chSchIsPreemptionRequired>

00000d82 <.LVL13>:
     d82:	81 15       	cp	r24, r1
     d84:	e9 f4       	brne	.+58     	; 0xdc0 <.L26>

00000d86 <.L18>:
}
     d86:	ff 91       	pop	r31
     d88:	ef 91       	pop	r30
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <.L25>:
    UCSR0B &= ~(1 << UDRIE0);
     dac:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <.Ldebug_info0+0x7f32bd>

00000db0 <.LVL15>:
     db0:	8f 7d       	andi	r24, 0xDF	; 223
     db2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <.Ldebug_info0+0x7f32bd>

00000db6 <.Loc.79>:
  OSAL_IRQ_EPILOGUE();
     db6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__avr_in_isr>

00000dba <.Loc.81>:
     dba:	0b d1       	rcall	.+534    	; 0xfd2 <chSchIsPreemptionRequired>

00000dbc <.LVL16>:
     dbc:	81 15       	cp	r24, r1
     dbe:	19 f3       	breq	.-58     	; 0xd86 <.L18>

00000dc0 <.L26>:
     dc0:	17 d1       	rcall	.+558    	; 0xff0 <chSchDoPreemption>

00000dc2 <.LVL17>:
}
     dc2:	e1 cf       	rjmp	.-62     	; 0xd86 <.L18>

00000dc4 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
     dc4:	4b e5       	ldi	r20, 0x5B	; 91
     dc6:	56 e0       	ldi	r21, 0x06	; 6
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	85 e7       	ldi	r24, 0x75	; 117
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	64 cc       	rjmp	.-1848   	; 0x69a <sdObjectInit>

00000dd2 <chSysInit>:
 *          zeroed by the runtime environment. If this is not the case then
 *          make sure to clear it before calling this function.
 *
 * @special
 */
void chSysInit(void) {
     dd2:	ff 92       	push	r15

00000dd4 <.LCFI0>:
     dd4:	0f 93       	push	r16

00000dd6 <.LCFI1>:
     dd6:	1f 93       	push	r17

00000dd8 <.LCFI2>:
     dd8:	cf 93       	push	r28

00000dda <.LCFI3>:
     dda:	df 93       	push	r29

00000ddc <.LBB114>:
 * @notapi
 */
static inline void __oslib_init(void) {

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
     ddc:	51 d2       	rcall	.+1186   	; 0x1280 <__core_init>

00000dde <.LVL15>:
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
     dde:	a4 d2       	rcall	.+1352   	; 0x1328 <__heap_init>

00000de0 <.LVL16>:
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
     de0:	bd d2       	rcall	.+1402   	; 0x135c <__factory_init>

00000de2 <.LBE114>:

  /* Optional library modules.*/
  __oslib_init();

  /* Architecture layer initialization.*/
  port_init(&nil);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__avr_in_isr>

00000de8 <.Loc.72>:

  /* System initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* Making idle the current thread, this may change after rescheduling.*/
  nil.next = nil.current = &nil.threads[CH_CFG_MAX_THREADS];
     de8:	28 ee       	ldi	r18, 0xE8	; 232
     dea:	31 e0       	ldi	r19, 0x01	; 1
     dec:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <nil+0x1>
     df0:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <nil>

00000df4 <.Loc.77>:
     df4:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <nil+0x3>
     df8:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <nil+0x2>

00000dfc <.Loc.78>:
  nil.current->state = NIL_STATE_READY;
     dfc:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <nil+0x32>

00000e00 <.LBB116>:
 * @brief   Disables the interrupt sources below kernel-level priority.
 * @note    Interrupt sources above kernel level remains enabled.
 */
static inline void port_suspend(void) {

  asm volatile ("cli" : : : "memory");
     e00:	f8 94       	cli

00000e02 <.LBB118>:
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->wabase = (stkalign_t *)tdp->wbase;
#endif

  /* Port dependent thread initialization.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tdp->wend, tdp->funcp, tdp->arg);
     e02:	80 e1       	ldi	r24, 0x10	; 16
     e04:	9a e0       	ldi	r25, 0x0A	; 10
     e06:	f9 2e       	mov	r15, r25
     e08:	18 2f       	mov	r17, r24

00000e0a <.LBB120>:
  if (tp < nil.next) {
     e0a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nil+0x2>
     e0e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <nil+0x3>
     e12:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <nil_thd_configs+0x7>
     e16:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <nil_thd_configs+0x8>

00000e1a <.LBE118>:
  tdp = nil_thd_configs;
     e1a:	cc e4       	ldi	r28, 0x4C	; 76
     e1c:	d1 e0       	ldi	r29, 0x01	; 1

00000e1e <.LBB125>:
  tp->state = NIL_STATE_READY;
     e1e:	01 e0       	ldi	r16, 0x01	; 1

00000e20 <.L20>:
  tp = &nil.threads[tdp->prio];
     e20:	2e 81       	ldd	r18, Y+6	; 0x06
     e22:	30 e0       	ldi	r19, 0x00	; 0

00000e24 <.Loc.101>:
     e24:	f9 01       	movw	r30, r18
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	af 01       	movw	r20, r30
     e38:	40 54       	subi	r20, 0x40	; 64
     e3a:	5e 4f       	sbci	r21, 0xFE	; 254

00000e3c <.LVL20>:
  tp->epmask = (eventmask_t)0;
     e3c:	e8 54       	subi	r30, 0x48	; 72
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	17 86       	std	Z+15, r1	; 0x0f

00000e42 <.Loc.107>:
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tdp->wend, tdp->funcp, tdp->arg);
     e42:	ac 81       	ldd	r26, Y+4	; 0x04
     e44:	bd 81       	ldd	r27, Y+5	; 0x05
     e46:	55 97       	sbiw	r26, 0x15	; 21
     e48:	b1 87       	std	Z+9, r27	; 0x09
     e4a:	a0 87       	std	Z+8, r26	; 0x08

00000e4c <.Loc.108>:
     e4c:	52 96       	adiw	r26, 0x12	; 18
     e4e:	6c 93       	st	X, r22
     e50:	52 97       	sbiw	r26, 0x12	; 18

00000e52 <.Loc.109>:
     e52:	51 96       	adiw	r26, 0x11	; 17
     e54:	7c 93       	st	X, r23
     e56:	51 97       	sbiw	r26, 0x11	; 17

00000e58 <.Loc.110>:
     e58:	79 85       	ldd	r23, Y+9	; 0x09
     e5a:	6a 85       	ldd	r22, Y+10	; 0x0a
     e5c:	50 96       	adiw	r26, 0x10	; 16
     e5e:	7c 93       	st	X, r23
     e60:	50 97       	sbiw	r26, 0x10	; 16

00000e62 <.Loc.111>:
     e62:	1f 96       	adiw	r26, 0x0f	; 15
     e64:	6c 93       	st	X, r22
     e66:	1f 97       	sbiw	r26, 0x0f	; 15

00000e68 <.Loc.112>:
     e68:	53 96       	adiw	r26, 0x13	; 19
     e6a:	fc 92       	st	X, r15
     e6c:	53 97       	sbiw	r26, 0x13	; 19

00000e6e <.Loc.113>:
     e6e:	54 96       	adiw	r26, 0x14	; 20
     e70:	1c 93       	st	X, r17

00000e72 <.LBB126>:
  tp->u1.msg = msg;
     e72:	14 86       	std	Z+12, r1	; 0x0c
     e74:	13 86       	std	Z+11, r1	; 0x0b

00000e76 <.Loc.131>:
  tp->state = NIL_STATE_READY;
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	d9 01       	movw	r26, r18
     e7c:	aa 0f       	add	r26, r26
     e7e:	bb 1f       	adc	r27, r27
     e80:	aa 0f       	add	r26, r26
     e82:	bb 1f       	adc	r27, r27
     e84:	a2 0f       	add	r26, r18
     e86:	b3 1f       	adc	r27, r19
     e88:	aa 0f       	add	r26, r26
     e8a:	bb 1f       	adc	r27, r27
     e8c:	a8 54       	subi	r26, 0x48	; 72
     e8e:	be 4f       	sbci	r27, 0xFE	; 254
     e90:	0c 93       	st	X, r16

00000e92 <.Loc.133>:
  tp->timeout = (sysinterval_t)0;
     e92:	16 86       	std	Z+14, r1	; 0x0e
     e94:	15 86       	std	Z+13, r1	; 0x0d

00000e96 <.Loc.135>:
  if (tp < nil.next) {
     e96:	48 17       	cp	r20, r24
     e98:	59 07       	cpc	r21, r25
     e9a:	28 f4       	brcc	.+10     	; 0xea6 <.L19>

00000e9c <.Loc.137>:
    nil.next = tp;
     e9c:	50 93 bb 01 	sts	0x01BB, r21	; 0x8001bb <nil+0x3>
     ea0:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <nil+0x2>

00000ea4 <.LBE126>:
  tp = &nil.threads[tdp->prio];
     ea4:	ca 01       	movw	r24, r20

00000ea6 <.L19>:
    tdp++;
     ea6:	2b 96       	adiw	r28, 0x0b	; 11

00000ea8 <.Loc.144>:
  } while (tdp->funcp != NULL);
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08

00000eac <.Loc.146>:
     eac:	61 15       	cp	r22, r1
     eae:	71 05       	cpc	r23, r1
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <.LBB132>

00000eb2 <L0^A>:
     eb2:	b6 cf       	rjmp	.-148    	; 0xe20 <.L20>

00000eb4 <.LBB132>:
  if (chSchIsRescRequiredI()) {
     eb4:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <nil>
     eb8:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <nil+0x1>

00000ebc <.Loc.152>:
     ebc:	68 17       	cp	r22, r24
     ebe:	79 07       	cpc	r23, r25
     ec0:	29 f0       	breq	.+10     	; 0xecc <.L21>

00000ec2 <.LBB134>:
  nil.current = nil.next;
     ec2:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <nil+0x1>
     ec6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <nil>

00000eca <.Loc.158>:
  port_switch(nil.next, otp);
     eca:	7b d2       	rcall	.+1270   	; 0x13c2 <_port_switch>

00000ecc <.L21>:
  asm volatile ("sei" : : : "memory");
     ecc:	78 94       	sei

00000ece <.LBE136>:
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28

00000ed2 <.LVL27>:
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	08 95       	ret

00000eda <chSysTimerHandlerI>:
void chSysTimerHandlerI(void) {
     eda:	1f 93       	push	r17

00000edc <.LCFI5>:
     edc:	cf 93       	push	r28

00000ede <.LCFI6>:
     ede:	df 93       	push	r29

00000ee0 <.LCFI7>:
  sysinterval_t next = (sysinterval_t)0;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0

00000ee4 <.Loc.195>:
  thread_t *tp = &nil.threads[0];
     ee4:	e0 ec       	ldi	r30, 0xC0	; 192
     ee6:	f1 e0       	ldi	r31, 0x01	; 1

00000ee8 <.LVL30>:
     ee8:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <nil+0x6>
     eec:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <nil+0x7>

00000ef0 <.LBB140>:
  tp->u1.msg = msg;
     ef0:	cf ef       	ldi	r28, 0xFF	; 255
     ef2:	df ef       	ldi	r29, 0xFF	; 255

00000ef4 <.Loc.198>:
  tp->state = NIL_STATE_READY;
     ef4:	11 e0       	ldi	r17, 0x01	; 1

00000ef6 <.L31>:
    sysinterval_t timeout = tp->timeout;
     ef6:	45 81       	ldd	r20, Z+5	; 0x05
     ef8:	56 81       	ldd	r21, Z+6	; 0x06

00000efa <.LVL32>:
    if (timeout > (sysinterval_t)0) {
     efa:	41 15       	cp	r20, r1
     efc:	51 05       	cpc	r21, r1
     efe:	39 f1       	breq	.+78     	; 0xf4e <.L30>

00000f00 <.Loc.206>:
      timeout -= chTimeDiffX(nil.lasttime, nil.nexttime);
     f00:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <nil+0x4>
     f04:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <nil+0x5>
     f08:	26 1b       	sub	r18, r22
     f0a:	37 0b       	sbc	r19, r23

00000f0c <.Loc.214>:
     f0c:	24 0f       	add	r18, r20
     f0e:	35 1f       	adc	r19, r21

00000f10 <.LVL33>:
      tp->timeout = timeout;
     f10:	36 83       	std	Z+6, r19	; 0x06
     f12:	25 83       	std	Z+5, r18	; 0x05

00000f14 <.Loc.217>:
      if (timeout == (sysinterval_t)0) {
     f14:	21 15       	cp	r18, r1
     f16:	31 05       	cpc	r19, r1
     f18:	79 f5       	brne	.+94     	; 0xf78 <.L27>

00000f1a <.Loc.219>:
        if (NIL_THD_IS_WTQUEUE(tp)) {
     f1a:	22 81       	ldd	r18, Z+2	; 0x02

00000f1c <.LVL34>:
     f1c:	25 30       	cpi	r18, 0x05	; 5
     f1e:	09 f4       	brne	.+2      	; 0xf22 <.Loc.222>

00000f20 <L0^A>:
     f20:	3d c0       	rjmp	.+122    	; 0xf9c <.L40>

00000f22 <.Loc.222>:
          if (NIL_THD_IS_SUSPENDED(tp)) {
     f22:	23 30       	cpi	r18, 0x03	; 3
     f24:	a9 f1       	breq	.+106    	; 0xf90 <.L41>

00000f26 <.L29>:
  tp->u1.msg = msg;
     f26:	d4 83       	std	Z+4, r29	; 0x04
     f28:	c3 83       	std	Z+3, r28	; 0x03

00000f2a <.Loc.238>:
  tp->state = NIL_STATE_READY;
     f2a:	12 83       	std	Z+2, r17	; 0x02

00000f2c <.Loc.240>:
  tp->timeout = (sysinterval_t)0;
     f2c:	16 82       	std	Z+6, r1	; 0x06
     f2e:	15 82       	std	Z+5, r1	; 0x05

00000f30 <.Loc.242>:
  if (tp < nil.next) {
     f30:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <nil+0x2>
     f34:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <nil+0x3>
     f38:	e2 17       	cp	r30, r18
     f3a:	f3 07       	cpc	r31, r19
     f3c:	20 f4       	brcc	.+8      	; 0xf46 <.L39>

00000f3e <.Loc.244>:
    nil.next = tp;
     f3e:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <nil+0x3>
     f42:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <nil+0x2>

00000f46 <.L39>:
     f46:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <nil+0x6>
     f4a:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <nil+0x7>

00000f4e <.L30>:
    tp++;
     f4e:	3a 96       	adiw	r30, 0x0a	; 10

00000f50 <.LBE145>:
  } while (tp < &nil.threads[CH_CFG_MAX_THREADS]);
     f50:	b1 e0       	ldi	r27, 0x01	; 1
     f52:	e8 3e       	cpi	r30, 0xE8	; 232
     f54:	fb 07       	cpc	r31, r27
     f56:	79 f6       	brne	.-98     	; 0xef6 <.L31>

00000f58 <.Loc.257>:
  nil.lasttime = nil.nexttime;
     f58:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <nil+0x5>
     f5c:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <nil+0x4>

00000f60 <.Loc.259>:
  if (next > (sysinterval_t)0) {
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	91 f0       	breq	.+36     	; 0xf88 <.L32>

00000f64 <.Loc.261>:
    nil.nexttime = chTimeAddX(nil.nexttime, next);
     f64:	86 0f       	add	r24, r22
     f66:	97 1f       	adc	r25, r23

00000f68 <.LVL38>:
     f68:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <nil+0x7>
     f6c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <nil+0x6>

00000f70 <.LBB146>:
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17

00000f76 <.LBB149>:
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
     f76:	c1 c8       	rjmp	.-3710   	; 0xfa <stSetAlarm>

00000f78 <.L27>:
        if (timeout <= (sysinterval_t)(next - (sysinterval_t)1)) {
     f78:	ac 01       	movw	r20, r24
     f7a:	41 50       	subi	r20, 0x01	; 1
     f7c:	51 09       	sbc	r21, r1

00000f7e <.Loc.272>:
     f7e:	42 17       	cp	r20, r18
     f80:	53 07       	cpc	r21, r19
     f82:	28 f3       	brcs	.-54     	; 0xf4e <.L30>

00000f84 <.Loc.273>:
          next = timeout;
     f84:	c9 01       	movw	r24, r18

00000f86 <.LVL41>:
     f86:	e3 cf       	rjmp	.-58     	; 0xf4e <.L30>

00000f88 <.L32>:
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17

00000f8e <.LBB154>:
  stStopAlarm();
     f8e:	b2 c8       	rjmp	.-3740   	; 0xf4 <stStopAlarm>

00000f90 <.L41>:
            *tp->u1.trp = NULL;
     f90:	23 81       	ldd	r18, Z+3	; 0x03
     f92:	34 81       	ldd	r19, Z+4	; 0x04

00000f94 <.Loc.284>:
     f94:	d9 01       	movw	r26, r18
     f96:	1d 92       	st	X+, r1
     f98:	1c 92       	st	X, r1
     f9a:	c5 cf       	rjmp	.-118    	; 0xf26 <.L29>

00000f9c <.L40>:
          tp->u1.tqp->cnt++;
     f9c:	43 81       	ldd	r20, Z+3	; 0x03
     f9e:	54 81       	ldd	r21, Z+4	; 0x04

00000fa0 <.Loc.287>:
     fa0:	da 01       	movw	r26, r20
     fa2:	2c 91       	ld	r18, X

00000fa4 <.Loc.288>:
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	2c 93       	st	X, r18

00000fa8 <.LVL44>:
     fa8:	be cf       	rjmp	.-132    	; 0xf26 <.L29>

00000faa <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp, msg_t msg) {
     faa:	fc 01       	movw	r30, r24

00000fac <.Loc.378>:
  tp->u1.msg = msg;
     fac:	74 83       	std	Z+4, r23	; 0x04
     fae:	63 83       	std	Z+3, r22	; 0x03

00000fb0 <.Loc.390>:
  tp->state = NIL_STATE_READY;
     fb0:	81 e0       	ldi	r24, 0x01	; 1

00000fb2 <.LVL54>:
     fb2:	82 83       	std	Z+2, r24	; 0x02

00000fb4 <.Loc.393>:
  tp->timeout = (sysinterval_t)0;
     fb4:	16 82       	std	Z+6, r1	; 0x06
     fb6:	15 82       	std	Z+5, r1	; 0x05

00000fb8 <.Loc.395>:
  if (tp < nil.next) {
     fb8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nil+0x2>
     fbc:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <nil+0x3>
     fc0:	e8 17       	cp	r30, r24
     fc2:	f9 07       	cpc	r31, r25
     fc4:	20 f4       	brcc	.+8      	; 0xfce <.L55>

00000fc6 <.Loc.397>:
    nil.next = tp;
     fc6:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <nil+0x3>
     fca:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <nil+0x2>

00000fce <.L55>:
}
     fce:	cf 01       	movw	r24, r30
     fd0:	08 95       	ret

00000fd2 <chSchIsPreemptionRequired>:
  return chSchIsRescRequiredI();
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <nil>
     fd8:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <nil+0x1>
     fdc:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <nil+0x2>
     fe0:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <nil+0x3>
     fe4:	42 17       	cp	r20, r18
     fe6:	53 07       	cpc	r21, r19
     fe8:	09 f0       	breq	.+2      	; 0xfec <.L58>

00000fea <.Loc.404>:
}
     fea:	08 95       	ret

00000fec <.L58>:
  return chSchIsRescRequiredI();
     fec:	80 e0       	ldi	r24, 0x00	; 0

00000fee <.Loc.406>:
}
     fee:	08 95       	ret

00000ff0 <chSchDoPreemption>:
  thread_t *otp = nil.current;
     ff0:	e8 eb       	ldi	r30, 0xB8	; 184
     ff2:	f1 e0       	ldi	r31, 0x01	; 1
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01

00000ff8 <.LVL55>:
  nil.current = nil.next;
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03

00000ffc <.Loc.412>:
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24

00001000 <.Loc.413>:
  port_switch(nil.next, otp);
    1000:	e0 c1       	rjmp	.+960    	; 0x13c2 <_port_switch>

00001002 <.LVL56>:
}
    1002:	08 95       	ret

00001004 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
    1004:	0f 93       	push	r16

00001006 <.LCFI8>:
    1006:	1f 93       	push	r17

00001008 <.LCFI9>:
    1008:	cf 93       	push	r28

0000100a <.LCFI10>:
    100a:	df 93       	push	r29

0000100c <.LCFI11>:
    100c:	eb 01       	movw	r28, r22

0000100e <.Loc.440>:
  thread_t *ntp, *otp = nil.current;
    100e:	00 91 b8 01 	lds	r16, 0x01B8	; 0x8001b8 <nil>
    1012:	10 91 b9 01 	lds	r17, 0x01B9	; 0x8001b9 <nil+0x1>

00001016 <.LVL61>:
  otp->state = newstate;
    1016:	f8 01       	movw	r30, r16
    1018:	82 83       	std	Z+2, r24	; 0x02

0000101a <.Loc.448>:
  if (timeout != TIME_INFINITE) {
    101a:	20 97       	sbiw	r28, 0x00	; 0
    101c:	e1 f0       	breq	.+56     	; 0x1056 <.L63>

0000101e <.LBB209>:
    if (timeout < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    101e:	61 30       	cpi	r22, 0x01	; 1
    1020:	71 05       	cpc	r23, r1
    1022:	c9 f1       	breq	.+114    	; 0x1096 <.L78>

00001024 <.L64>:
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {

  return stGetCounter();
    1024:	59 d8       	rcall	.-3918   	; 0xd8 <stGetCounter>

00001026 <.LBE210>:
    abstime = chTimeAddX(chVTGetSystemTimeX(), timeout);
    1026:	c8 0f       	add	r28, r24
    1028:	d9 1f       	adc	r29, r25

0000102a <.LVL64>:
    if (nil.lasttime == nil.nexttime) {
    102a:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <nil+0x4>
    102e:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <nil+0x5>

00001032 <.Loc.461>:
    1032:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <nil+0x6>
    1036:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <nil+0x7>

0000103a <.Loc.462>:
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	71 f1       	breq	.+92     	; 0x109c <.L79>

00001040 <.LBB212>:
  return (bool)((systime_t)((systime_t)(time) - (systime_t)(start)) <
    1040:	ae 01       	movw	r20, r28
    1042:	42 1b       	sub	r20, r18
    1044:	53 0b       	sbc	r21, r19

00001046 <.LVL66>:
                (systime_t)((systime_t)(end) - (systime_t)(start)));
    1046:	82 1b       	sub	r24, r18
    1048:	93 0b       	sbc	r25, r19

0000104a <.LBE212>:
      if (chTimeIsInRangeX(abstime, nil.lasttime, nil.nexttime)) {
    104a:	48 17       	cp	r20, r24
    104c:	59 07       	cpc	r21, r25
    104e:	a0 f1       	brcs	.+104    	; 0x10b8 <.L80>

00001050 <.L66>:
    otp->timeout = abstime - nil.lasttime;
    1050:	f8 01       	movw	r30, r16
    1052:	56 83       	std	Z+6, r21	; 0x06
    1054:	45 83       	std	Z+5, r20	; 0x05

00001056 <.L63>:
    if (NIL_THD_IS_READY(ntp)) {
    1056:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <nil+0xa>

0000105a <.Loc.476>:
  ntp = nil.threads;
    105a:	e0 ec       	ldi	r30, 0xC0	; 192
    105c:	f1 e0       	ldi	r31, 0x01	; 1

0000105e <.LVL68>:
    if (NIL_THD_IS_READY(ntp)) {
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	21 f0       	breq	.+8      	; 0x106a <.L68>

00001062 <.L67>:
    ntp++;
    1062:	3a 96       	adiw	r30, 0x0a	; 10

00001064 <.Loc.480>:
    if (NIL_THD_IS_READY(ntp)) {
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	e1 f7       	brne	.-8      	; 0x1062 <.L67>

0000106a <.L68>:
      nil.current = nil.next = ntp;
    106a:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <nil+0x3>
    106e:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <nil+0x2>

00001072 <.Loc.489>:
    1072:	f0 93 b9 01 	sts	0x01B9, r31	; 0x8001b9 <nil+0x1>
    1076:	e0 93 b8 01 	sts	0x01B8, r30	; 0x8001b8 <nil>

0000107a <.Loc.490>:
      port_switch(ntp, otp);
    107a:	b8 01       	movw	r22, r16
    107c:	cf 01       	movw	r24, r30
    107e:	a1 d1       	rcall	.+834    	; 0x13c2 <_port_switch>

00001080 <.LVL70>:
      return nil.current->u1.msg;
    1080:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <nil>
    1084:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <nil+0x1>

00001088 <.Loc.498>:
    1088:	83 81       	ldd	r24, Z+3	; 0x03
    108a:	94 81       	ldd	r25, Z+4	; 0x04

0000108c <.Loc.499>:
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16

00001094 <.LVL71>:
    1094:	08 95       	ret

00001096 <.L78>:
      timeout = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    1096:	c2 e0       	ldi	r28, 0x02	; 2
    1098:	d0 e0       	ldi	r29, 0x00	; 0
    109a:	c4 cf       	rjmp	.-120    	; 0x1024 <.L64>

0000109c <.L79>:
  stStartAlarm(time);
    109c:	ce 01       	movw	r24, r28
    109e:	21 d8       	rcall	.-4030   	; 0xe2 <stStartAlarm>

000010a0 <.LBE214>:
      nil.nexttime = abstime;
    10a0:	d0 93 bf 01 	sts	0x01BF, r29	; 0x8001bf <nil+0x7>
    10a4:	c0 93 be 01 	sts	0x01BE, r28	; 0x8001be <nil+0x6>

000010a8 <.Loc.508>:
    otp->timeout = abstime - nil.lasttime;
    10a8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <nil+0x4>
    10ac:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <nil+0x5>
    10b0:	ae 01       	movw	r20, r28
    10b2:	48 1b       	sub	r20, r24
    10b4:	59 0b       	sbc	r21, r25
    10b6:	cc cf       	rjmp	.-104    	; 0x1050 <.L66>

000010b8 <.L80>:
  stSetAlarm(time);
    10b8:	ce 01       	movw	r24, r28
    10ba:	1f d8       	rcall	.-4034   	; 0xfa <stSetAlarm>

000010bc <.LBE216>:
        nil.nexttime = abstime;
    10bc:	d0 93 bf 01 	sts	0x01BF, r29	; 0x8001bf <nil+0x7>
    10c0:	c0 93 be 01 	sts	0x01BE, r28	; 0x8001be <nil+0x6>

000010c4 <.Loc.515>:
    otp->timeout = abstime - nil.lasttime;
    10c4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <nil+0x4>
    10c8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <nil+0x5>
    10cc:	ae 01       	movw	r20, r28
    10ce:	48 1b       	sub	r20, r24
    10d0:	59 0b       	sbc	r21, r25
    10d2:	be cf       	rjmp	.-132    	; 0x1050 <.L66>

000010d4 <chThdExit>:
  asm volatile ("cli" : : : "memory");
    10d4:	f8 94       	cli

000010d6 <.LBB255>:
  {
    /* Waking up any waiting thread.*/
    thread_t *tp = nil.threads;
    while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
      /* Is this thread waiting for current thread termination?*/
      if ((tp->state == NIL_STATE_WTEXIT) && (tp->u1.tp == nil.current)) {
    10d6:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <nil>
    10da:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <nil+0x1>

000010de <.Loc.625>:
    thread_t *tp = nil.threads;
    10de:	e0 ec       	ldi	r30, 0xC0	; 192
    10e0:	f1 e0       	ldi	r31, 0x01	; 1

000010e2 <.L91>:
      if ((tp->state == NIL_STATE_WTEXIT) && (tp->u1.tp == nil.current)) {
    10e2:	22 81       	ldd	r18, Z+2	; 0x02
    10e4:	24 30       	cpi	r18, 0x04	; 4
    10e6:	29 f1       	breq	.+74     	; 0x1132 <.L100>

000010e8 <.L89>:
        (void) chSchReadyI(tp, msg);
      }
      tp++;
    10e8:	3a 96       	adiw	r30, 0x0a	; 10

000010ea <.Loc.630>:
    while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	e8 3e       	cpi	r30, 0xE8	; 232
    10ee:	f2 07       	cpc	r31, r18
    10f0:	c1 f7       	brne	.-16     	; 0x10e2 <.L91>

000010f2 <.LBE255>:
    }
  }
#endif

  /* Going into final state with exit message stored.*/
  nil.current->u1.msg = msg;
    10f2:	13 96       	adiw	r26, 0x03	; 3
    10f4:	8c 93       	st	X, r24
    10f6:	13 97       	sbiw	r26, 0x03	; 3
    10f8:	14 96       	adiw	r26, 0x04	; 4
    10fa:	9c 93       	st	X, r25
    10fc:	14 97       	sbiw	r26, 0x04	; 4

000010fe <.LBB258>:
  otp->state = newstate;
    10fe:	8b e0       	ldi	r24, 0x0B	; 11

00001100 <.LVL100>:
    1100:	12 96       	adiw	r26, 0x02	; 2
    1102:	8c 93       	st	X, r24
    1104:	12 97       	sbiw	r26, 0x02	; 2

00001106 <.Loc.643>:
    if (NIL_THD_IS_READY(ntp)) {
    1106:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <nil+0xa>

0000110a <.Loc.648>:
  ntp = nil.threads;
    110a:	e0 ec       	ldi	r30, 0xC0	; 192
    110c:	f1 e0       	ldi	r31, 0x01	; 1

0000110e <.LVL102>:
    if (NIL_THD_IS_READY(ntp)) {
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	21 f0       	breq	.+8      	; 0x111a <.L93>

00001112 <.L92>:
    ntp++;
    1112:	3a 96       	adiw	r30, 0x0a	; 10

00001114 <.Loc.652>:
    if (NIL_THD_IS_READY(ntp)) {
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	e1 f7       	brne	.-8      	; 0x1112 <.L92>

0000111a <.L93>:
      nil.current = nil.next = ntp;
    111a:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <nil+0x3>
    111e:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <nil+0x2>

00001122 <.Loc.661>:
    1122:	f0 93 b9 01 	sts	0x01B9, r31	; 0x8001b9 <nil+0x1>
    1126:	e0 93 b8 01 	sts	0x01B8, r30	; 0x8001b8 <nil>

0000112a <.Loc.662>:
      port_switch(ntp, otp);
    112a:	bd 01       	movw	r22, r26
    112c:	cf 01       	movw	r24, r30
    112e:	49 c1       	rjmp	.+658    	; 0x13c2 <_port_switch>

00001130 <.LBE258>:
  (void) chSchGoSleepTimeoutS(NIL_STATE_FINAL, TIME_INFINITE);

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
    1130:	08 95       	ret

00001132 <.L100>:
      if ((tp->state == NIL_STATE_WTEXIT) && (tp->u1.tp == nil.current)) {
    1132:	23 81       	ldd	r18, Z+3	; 0x03
    1134:	34 81       	ldd	r19, Z+4	; 0x04
    1136:	2a 17       	cp	r18, r26
    1138:	3b 07       	cpc	r19, r27
    113a:	b1 f6       	brne	.-84     	; 0x10e8 <.L89>

0000113c <.LBB256>:
  tp->u1.msg = msg;
    113c:	83 83       	std	Z+3, r24	; 0x03
    113e:	94 83       	std	Z+4, r25	; 0x04

00001140 <.Loc.689>:
  tp->state = NIL_STATE_READY;
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	22 83       	std	Z+2, r18	; 0x02

00001144 <.Loc.691>:
  tp->timeout = (sysinterval_t)0;
    1144:	16 82       	std	Z+6, r1	; 0x06
    1146:	15 82       	std	Z+5, r1	; 0x05

00001148 <.Loc.693>:
  if (tp < nil.next) {
    1148:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <nil+0x2>
    114c:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <nil+0x3>
    1150:	e2 17       	cp	r30, r18
    1152:	f3 07       	cpc	r31, r19
    1154:	48 f6       	brcc	.-110    	; 0x10e8 <.L89>

00001156 <.Loc.695>:
    nil.next = tp;
    1156:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <nil+0x3>
    115a:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <nil+0x2>
    115e:	c4 cf       	rjmp	.-120    	; 0x10e8 <.L89>

00001160 <chThdSleep>:
 *
 * @param[in] timeout   the delay in system ticks
 *
 * @api
 */
void chThdSleep(sysinterval_t timeout) {
    1160:	bc 01       	movw	r22, r24

00001162 <.LBB327>:
    1162:	f8 94       	cli

00001164 <.LBE327>:

  chSysLock();
  chThdSleepS(timeout);
    1164:	82 e0       	ldi	r24, 0x02	; 2

00001166 <.LVL138>:
    1166:	4e df       	rcall	.-356    	; 0x1004 <chSchGoSleepTimeoutS>

00001168 <.LBB329>:
  asm volatile ("sei" : : : "memory");
    1168:	78 94       	sei

0000116a <.LBE329>:
  chSysUnlock();
}
    116a:	08 95       	ret

0000116c <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
    116c:	fc 01       	movw	r30, r24

0000116e <.Loc.923>:
  chDbgCheckClassS();
  chDbgCheck(tqp != NULL);

  chDbgAssert(tqp->cnt <= (cnt_t)0, "invalid counter");

  if (TIME_IMMEDIATE == timeout) {
    116e:	6f 3f       	cpi	r22, 0xFF	; 255
    1170:	76 07       	cpc	r23, r22

00001172 <.LVL145>:
    1172:	69 f0       	breq	.+26     	; 0x118e <.L125>

00001174 <.Loc.933>:
    return MSG_TIMEOUT;
  }

  tqp->cnt--;
    1174:	80 81       	ld	r24, Z

00001176 <.Loc.935>:
    1176:	81 50       	subi	r24, 0x01	; 1
    1178:	80 83       	st	Z, r24

0000117a <.Loc.936>:
  nil.current->u1.tqp = tqp;
    117a:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <nil>
    117e:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <nil+0x1>
    1182:	14 96       	adiw	r26, 0x04	; 4
    1184:	fc 93       	st	X, r31
    1186:	ee 93       	st	-X, r30
    1188:	13 97       	sbiw	r26, 0x03	; 3

0000118a <.Loc.938>:
  return chSchGoSleepTimeoutS(NIL_STATE_WTQUEUE, timeout);
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	3b cf       	rjmp	.-394    	; 0x1004 <chSchGoSleepTimeoutS>

0000118e <.L125>:
}
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	08 95       	ret

00001194 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    1194:	dc 01       	movw	r26, r24

00001196 <.Loc.943>:
  thread_t *tp;

  chDbgAssert(tqp->cnt < (cnt_t)0, "empty queue");

  tqp->cnt++;
    1196:	8c 91       	ld	r24, X

00001198 <.LVL148>:
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8c 93       	st	X, r24

0000119c <.LBB337>:
  thread_t *tp = nil.threads;
    119c:	e0 ec       	ldi	r30, 0xC0	; 192
    119e:	f1 e0       	ldi	r31, 0x01	; 1

000011a0 <.L129>:
    if ((tp->state == state) && (tp->u1.p == p)) {
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	c9 f0       	breq	.+50     	; 0x11d8 <.L132>

000011a6 <.L127>:
    tp++;
    11a6:	3a 96       	adiw	r30, 0x0a	; 10

000011a8 <.Loc.960>:
  while (tp < &nil.threads[CH_CFG_MAX_THREADS]) {
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	e8 3e       	cpi	r30, 0xE8	; 232
    11ac:	f8 07       	cpc	r31, r24
    11ae:	c1 f7       	brne	.-16     	; 0x11a0 <.L129>

000011b0 <.Loc.961>:
  return NULL;
    11b0:	e0 e0       	ldi	r30, 0x00	; 0
    11b2:	f0 e0       	ldi	r31, 0x00	; 0

000011b4 <.L128>:
  tp->u1.msg = msg;
    11b4:	63 83       	std	Z+3, r22	; 0x03
    11b6:	74 83       	std	Z+4, r23	; 0x04

000011b8 <.Loc.980>:
  tp->state = NIL_STATE_READY;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	82 83       	std	Z+2, r24	; 0x02

000011bc <.Loc.982>:
  tp->timeout = (sysinterval_t)0;
    11bc:	16 82       	std	Z+6, r1	; 0x06
    11be:	15 82       	std	Z+5, r1	; 0x05

000011c0 <.Loc.984>:
  if (tp < nil.next) {
    11c0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <nil+0x2>
    11c4:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <nil+0x3>
    11c8:	e8 17       	cp	r30, r24
    11ca:	f9 07       	cpc	r31, r25
    11cc:	20 f4       	brcc	.+8      	; 0x11d6 <.L126>

000011ce <.Loc.986>:
    nil.next = tp;
    11ce:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <nil+0x3>
    11d2:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <nil+0x2>

000011d6 <.L126>:
  tp = nil_find_thread(NIL_STATE_WTQUEUE, (void *)tqp);

  chDbgAssert(tp != NULL, "thread not found");

  (void) chSchReadyI(tp, msg);
}
    11d6:	08 95       	ret

000011d8 <.L132>:
    if ((tp->state == state) && (tp->u1.p == p)) {
    11d8:	83 81       	ldd	r24, Z+3	; 0x03
    11da:	94 81       	ldd	r25, Z+4	; 0x04
    11dc:	a8 17       	cp	r26, r24
    11de:	b9 07       	cpc	r27, r25
    11e0:	11 f7       	brne	.-60     	; 0x11a6 <.L127>
    11e2:	e8 cf       	rjmp	.-48     	; 0x11b4 <.L128>

000011e4 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    11e4:	fc 01       	movw	r30, r24

000011e6 <.Loc.994>:

  chDbgCheckClassI();
  chDbgCheck(tqp != NULL);

  if (tqp->cnt < (cnt_t)0) {
    11e6:	80 81       	ld	r24, Z

000011e8 <.LVL156>:
    11e8:	87 ff       	sbrs	r24, 7

000011ea <.Loc.1001>:
    chThdDoDequeueNextI(tqp, msg);
  }
}
    11ea:	08 95       	ret

000011ec <.Loc.1002>:
    chThdDoDequeueNextI(tqp, msg);
    11ec:	cf 01       	movw	r24, r30
    11ee:	d2 cf       	rjmp	.-92     	; 0x1194 <chThdDoDequeueNextI>

000011f0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
    11f0:	ff 92       	push	r15

000011f2 <.LCFI0>:
    11f2:	0f 93       	push	r16

000011f4 <.LCFI1>:
    11f4:	1f 93       	push	r17

000011f6 <.LCFI2>:
    11f6:	cf 93       	push	r28

000011f8 <.LCFI3>:
    11f8:	df 93       	push	r29

000011fa <.LCFI4>:
    11fa:	8c 01       	movw	r16, r24
    11fc:	f6 2e       	mov	r15, r22

000011fe <.Loc.120>:
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
    11fe:	fc 01       	movw	r30, r24
    1200:	c0 81       	ld	r28, Z
    1202:	d1 81       	ldd	r29, Z+1	; 0x01

00001204 <.LVL19>:
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    1204:	8c 17       	cp	r24, r28
    1206:	9d 07       	cpc	r25, r29
    1208:	39 f1       	breq	.+78     	; 0x1258 <.L12>

0000120a <.L19>:
  /*lint -restore*/
    elp->flags |= flags;
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	8f 29       	or	r24, r15
    120e:	8d 83       	std	Y+5, r24	; 0x05

00001210 <.Loc.131>:
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    1210:	f1 14       	cp	r15, r1
    1212:	89 f0       	breq	.+34     	; 0x1236 <.L14>

00001214 <.Loc.133>:
        ((flags & elp->wflags) != (eventflags_t)0)) {
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	8f 21       	and	r24, r15

00001218 <.Loc.134>:
    if ((flags == (eventflags_t)0) ||
    1218:	81 11       	cpse	r24, r1
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <.L14>

0000121c <.L24>:
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
    121c:	09 90       	ld	r0, Y+
    121e:	d8 81       	ld	r29, Y
    1220:	c0 2d       	mov	r28, r0

00001222 <.Loc.137>:
  while (elp != (event_listener_t *)esp) {
    1222:	c0 17       	cp	r28, r16
    1224:	d1 07       	cpc	r29, r17
    1226:	c1 f0       	breq	.+48     	; 0x1258 <.L12>

00001228 <.Loc.138>:
    elp->flags |= flags;
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	8f 29       	or	r24, r15
    122c:	8d 83       	std	Y+5, r24	; 0x05

0000122e <.Loc.140>:
        ((flags & elp->wflags) != (eventflags_t)0)) {
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	8f 21       	and	r24, r15

00001232 <.Loc.142>:
    if ((flags == (eventflags_t)0) ||
    1232:	81 15       	cp	r24, r1
    1234:	99 f3       	breq	.-26     	; 0x121c <.L24>

00001236 <.L14>:
      chEvtSignalI(elp->listener, elp->events);
    1236:	ea 81       	ldd	r30, Y+2	; 0x02
    1238:	fb 81       	ldd	r31, Y+3	; 0x03

0000123a <.LBB82>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epmask |= events;
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	87 81       	ldd	r24, Z+7	; 0x07
    123e:	98 2b       	or	r25, r24
    1240:	97 83       	std	Z+7, r25	; 0x07

00001242 <.LVL23>:
  if ((NIL_THD_IS_WTOREVT(tp) &&
    1242:	82 81       	ldd	r24, Z+2	; 0x02

00001244 <.Loc.153>:
    1244:	86 30       	cpi	r24, 0x06	; 6
    1246:	71 f0       	breq	.+28     	; 0x1264 <.L25>

00001248 <.Loc.154>:
       ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) ||
    1248:	87 30       	cpi	r24, 0x07	; 7
    124a:	a9 f0       	breq	.+42     	; 0x1276 <.L26>

0000124c <.L18>:
    elp = elp->next;
    124c:	09 90       	ld	r0, Y+
    124e:	d8 81       	ld	r29, Y
    1250:	c0 2d       	mov	r28, r0

00001252 <.Loc.158>:
  while (elp != (event_listener_t *)esp) {
    1252:	0c 17       	cp	r16, r28
    1254:	1d 07       	cpc	r17, r29
    1256:	c9 f6       	brne	.-78     	; 0x120a <.L19>

00001258 <.L12>:
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28

0000125c <.LVL26>:
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16

00001260 <.LVL27>:
    1260:	ff 90       	pop	r15

00001262 <.LVL28>:
    1262:	08 95       	ret

00001264 <.L25>:
       ((tp->epmask & tp->u1.ewmask) != (eventmask_t)0)) ||
    1264:	83 81       	ldd	r24, Z+3	; 0x03
    1266:	98 23       	and	r25, r24

00001268 <.Loc.164>:
  if ((NIL_THD_IS_WTOREVT(tp) &&
    1268:	91 15       	cp	r25, r1
    126a:	81 f3       	breq	.-32     	; 0x124c <.L18>

0000126c <.L17>:
      (NIL_THD_IS_WTANDEVT(tp) &&
       ((tp->epmask & tp->u1.ewmask) == tp->u1.ewmask))) {
    (void) chSchReadyI(tp, MSG_OK);
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	cf 01       	movw	r24, r30
    1272:	9b de       	rcall	.-714    	; 0xfaa <chSchReadyI>

00001274 <.LVL31>:
  }
}
    1274:	eb cf       	rjmp	.-42     	; 0x124c <.L18>

00001276 <.L26>:
       ((tp->epmask & tp->u1.ewmask) == tp->u1.ewmask))) {
    1276:	83 81       	ldd	r24, Z+3	; 0x03

00001278 <.Loc.171>:
    1278:	98 23       	and	r25, r24

0000127a <.Loc.172>:
      (NIL_THD_IS_WTANDEVT(tp) &&
    127a:	89 13       	cpse	r24, r25
    127c:	e7 cf       	rjmp	.-50     	; 0x124c <.L18>
    127e:	f6 cf       	rjmp	.-20     	; 0x126c <.L17>

00001280 <__core_init>:
  ch_memcore.topmem  = __heap_end__;
  /*lint restore*/
#else
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
    1280:	e2 e7       	ldi	r30, 0x72	; 114
    1282:	f2 e0       	ldi	r31, 0x02	; 2
    1284:	82 ef       	ldi	r24, 0xF2	; 242
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	91 83       	std	Z+1, r25	; 0x01
    128a:	80 83       	st	Z, r24

0000128c <.Loc.4>:
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
    128c:	82 e7       	ldi	r24, 0x72	; 114
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	93 83       	std	Z+3, r25	; 0x03
    1292:	82 83       	std	Z+2, r24	; 0x02

00001294 <.Loc.6>:
#endif
}
    1294:	08 95       	ret

00001296 <chCoreAllocFromTopI>:
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
    1296:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <ch_memcore+0x2>
    129a:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <ch_memcore+0x3>
    129e:	9f 01       	movw	r18, r30
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	c9 01       	movw	r24, r18

000012a6 <.LVL12>:
    12a6:	71 95       	neg	r23
    12a8:	61 95       	neg	r22
    12aa:	71 09       	sbc	r23, r1

000012ac <.LVL13>:
    12ac:	86 23       	and	r24, r22
    12ae:	97 23       	and	r25, r23

000012b0 <.LVL14>:
  prev = p - offset;
    12b0:	9c 01       	movw	r18, r24
    12b2:	24 1b       	sub	r18, r20
    12b4:	35 0b       	sbc	r19, r21

000012b6 <.LVL15>:

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    12b6:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <ch_memcore>
    12ba:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <ch_memcore+0x1>

000012be <.LVL16>:
    12be:	24 17       	cp	r18, r20
    12c0:	35 07       	cpc	r19, r21
    12c2:	40 f0       	brcs	.+16     	; 0x12d4 <.L10>

000012c4 <.Loc.48>:
    12c4:	e2 17       	cp	r30, r18
    12c6:	f3 07       	cpc	r31, r19
    12c8:	28 f0       	brcs	.+10     	; 0x12d4 <.L10>

000012ca <.Loc.49>:
    return NULL;
  }

  ch_memcore.topmem = prev;
    12ca:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <ch_memcore+0x3>
    12ce:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <ch_memcore+0x2>

000012d2 <.Loc.51>:

  return p;
    12d2:	08 95       	ret

000012d4 <.L10>:
    return NULL;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0

000012d8 <.LVL17>:
}
    12d8:	08 95       	ret

000012da <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
    12da:	dc 01       	movw	r26, r24
    12dc:	9b 01       	movw	r18, r22
    12de:	fa 01       	movw	r30, r20

000012e0 <.LBB32>:
  asm volatile ("cli" : : : "memory");
    12e0:	f8 94       	cli

000012e2 <.LBB34>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
    12e2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <ch_memcore+0x2>
    12e6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <ch_memcore+0x3>

000012ea <.LVL31>:
    12ea:	ca 01       	movw	r24, r20

000012ec <.LVL32>:
    12ec:	8a 1b       	sub	r24, r26
    12ee:	9b 0b       	sbc	r25, r27
    12f0:	31 95       	neg	r19
    12f2:	21 95       	neg	r18
    12f4:	31 09       	sbc	r19, r1
    12f6:	82 23       	and	r24, r18
    12f8:	93 23       	and	r25, r19

000012fa <.LVL33>:
  prev = p - offset;
    12fa:	9c 01       	movw	r18, r24
    12fc:	2e 1b       	sub	r18, r30
    12fe:	3f 0b       	sbc	r19, r31

00001300 <.LVL34>:
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    1300:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <ch_memcore>
    1304:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <ch_memcore+0x1>

00001308 <.LVL35>:
    1308:	26 17       	cp	r18, r22
    130a:	37 07       	cpc	r19, r23
    130c:	48 f0       	brcs	.+18     	; 0x1320 <.L18>

0000130e <.Loc.125>:
    130e:	42 17       	cp	r20, r18
    1310:	53 07       	cpc	r21, r19
    1312:	30 f0       	brcs	.+12     	; 0x1320 <.L18>

00001314 <.Loc.126>:
  ch_memcore.topmem = prev;
    1314:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <ch_memcore+0x3>
    1318:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <ch_memcore+0x2>

0000131c <.LBB37>:
  asm volatile ("sei" : : : "memory");
    131c:	78 94       	sei

0000131e <.LBE37>:
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    131e:	08 95       	ret

00001320 <.L18>:
    return NULL;
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0

00001324 <.LBB41>:
    1324:	78 94       	sei

00001326 <.LBE41>:
}
    1326:	08 95       	ret

00001328 <__heap_init>:
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
    1328:	e6 e7       	ldi	r30, 0x76	; 118
    132a:	f2 e0       	ldi	r31, 0x02	; 2
    132c:	8d e6       	ldi	r24, 0x6D	; 109
    132e:	99 e0       	ldi	r25, 0x09	; 9
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24

00001334 <.Loc.3>:
  H_NEXT(&default_heap.header) = NULL;
    1334:	13 82       	std	Z+3, r1	; 0x03
    1336:	12 82       	std	Z+2, r1	; 0x02

00001338 <.Loc.5>:
  H_PAGES(&default_heap.header) = 0;
    1338:	15 82       	std	Z+5, r1	; 0x05
    133a:	14 82       	std	Z+4, r1	; 0x04

0000133c <.Loc.7>:
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	86 83       	std	Z+6, r24	; 0x06

00001340 <.Loc.8>:
#endif
}
    1340:	08 95       	ret

00001342 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
    1342:	fc 01       	movw	r30, r24

00001344 <.Loc.2>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
    1344:	11 82       	std	Z+1, r1	; 0x01
    1346:	10 82       	st	Z, r1

00001348 <.Loc.7>:
  mp->object_size = size;
    1348:	73 83       	std	Z+3, r23	; 0x03
    134a:	62 83       	std	Z+2, r22	; 0x02

0000134c <.Loc.10>:
  mp->align = align;
    134c:	55 83       	std	Z+5, r21	; 0x05
    134e:	44 83       	std	Z+4, r20	; 0x04

00001350 <.Loc.11>:
  mp->provider = provider;
    1350:	37 83       	std	Z+7, r19	; 0x07
    1352:	26 83       	std	Z+6, r18	; 0x06

00001354 <.Loc.13>:
}
    1354:	08 95       	ret

00001356 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	9d cf       	rjmp	.-198    	; 0x1296 <chCoreAllocFromTopI>

0000135c <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
    135c:	cf 93       	push	r28

0000135e <.LCFI22>:
    135e:	df 93       	push	r29

00001360 <.LCFI23>:

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
    1360:	cd e7       	ldi	r28, 0x7D	; 125
    1362:	d2 e0       	ldi	r29, 0x02	; 2
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	88 83       	st	Y, r24

00001368 <.LBB46>:
  dlp->next = (dyn_element_t *)dlp;
    1368:	8e e7       	ldi	r24, 0x7E	; 126
    136a:	92 e0       	ldi	r25, 0x02	; 2

0000136c <.LVL44>:
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01

00001370 <.LBB48>:
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
    1370:	2b ea       	ldi	r18, 0xAB	; 171
    1372:	39 e0       	ldi	r19, 0x09	; 9
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	6d e0       	ldi	r22, 0x0D	; 13
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e8       	ldi	r24, 0x80	; 128
    137e:	92 e0       	ldi	r25, 0x02	; 2

00001380 <.LVL46>:
    1380:	e0 df       	rcall	.-64     	; 0x1342 <chPoolObjectInitAligned>

00001382 <.LBB50>:
    1382:	88 e8       	ldi	r24, 0x88	; 136
    1384:	92 e0       	ldi	r25, 0x02	; 2

00001386 <.LVL48>:
    1386:	9c 87       	std	Y+12, r25	; 0x0c
    1388:	8b 87       	std	Y+11, r24	; 0x0b

0000138a <.LBB52>:
    138a:	8a e8       	ldi	r24, 0x8A	; 138
    138c:	92 e0       	ldi	r25, 0x02	; 2

0000138e <.LVL50>:
    138e:	9e 87       	std	Y+14, r25	; 0x0e
    1390:	8d 87       	std	Y+13, r24	; 0x0d

00001392 <.LBB54>:
    1392:	2b ea       	ldi	r18, 0xAB	; 171
    1394:	39 e0       	ldi	r19, 0x09	; 9
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	6c e0       	ldi	r22, 0x0C	; 12
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	8c e8       	ldi	r24, 0x8C	; 140
    13a0:	92 e0       	ldi	r25, 0x02	; 2

000013a2 <.LVL52>:
    13a2:	cf df       	rcall	.-98     	; 0x1342 <chPoolObjectInitAligned>

000013a4 <.LBB56>:
    13a4:	84 e9       	ldi	r24, 0x94	; 148
    13a6:	92 e0       	ldi	r25, 0x02	; 2

000013a8 <.LVL54>:
    13a8:	98 8f       	std	Y+24, r25	; 0x18
    13aa:	8f 8b       	std	Y+23, r24	; 0x17

000013ac <.LBB58>:
    13ac:	86 e9       	ldi	r24, 0x96	; 150
    13ae:	92 e0       	ldi	r25, 0x02	; 2

000013b0 <.LVL56>:
    13b0:	9a 8f       	std	Y+26, r25	; 0x1a
    13b2:	89 8f       	std	Y+25, r24	; 0x19

000013b4 <.LBB60>:
    13b4:	88 e9       	ldi	r24, 0x98	; 152
    13b6:	92 e0       	ldi	r25, 0x02	; 2

000013b8 <.LVL58>:
    13b8:	9c 8f       	std	Y+28, r25	; 0x1c
    13ba:	8b 8f       	std	Y+27, r24	; 0x1b

000013bc <.LBE60>:
  dyn_list_init(&ch_factory.fifo_list);
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
#endif
}
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
    13c2:	2f 92       	push	r2

000013c4 <.Loc.4>:
  asm volatile ("push    r3");
    13c4:	3f 92       	push	r3

000013c6 <.Loc.5>:
  asm volatile ("push    r4");
    13c6:	4f 92       	push	r4

000013c8 <.Loc.6>:
  asm volatile ("push    r5");
    13c8:	5f 92       	push	r5

000013ca <.Loc.7>:
  asm volatile ("push    r6");
    13ca:	6f 92       	push	r6

000013cc <.Loc.8>:
  asm volatile ("push    r7");
    13cc:	7f 92       	push	r7

000013ce <.Loc.9>:
  asm volatile ("push    r8");
    13ce:	8f 92       	push	r8

000013d0 <.Loc.10>:
  asm volatile ("push    r9");
    13d0:	9f 92       	push	r9

000013d2 <.Loc.11>:
  asm volatile ("push    r10");
    13d2:	af 92       	push	r10

000013d4 <.Loc.12>:
  asm volatile ("push    r11");
    13d4:	bf 92       	push	r11

000013d6 <.Loc.13>:
  asm volatile ("push    r12");
    13d6:	cf 92       	push	r12

000013d8 <.Loc.14>:
  asm volatile ("push    r13");
    13d8:	df 92       	push	r13

000013da <.Loc.15>:
  asm volatile ("push    r14");
    13da:	ef 92       	push	r14

000013dc <.Loc.16>:
  asm volatile ("push    r15");
    13dc:	ff 92       	push	r15

000013de <.Loc.17>:
  asm volatile ("push    r16");
    13de:	0f 93       	push	r16

000013e0 <.Loc.18>:
  asm volatile ("push    r17");
    13e0:	1f 93       	push	r17

000013e2 <.Loc.19>:
  asm volatile ("push    r28");
    13e2:	cf 93       	push	r28

000013e4 <.Loc.20>:
  asm volatile ("push    r29");
    13e4:	df 93       	push	r29

000013e6 <.Loc.21>:
  asm volatile ("ldd     r0, Z+6");
  asm volatile ("out     0x3e, r0");
#endif

#if defined(__CHIBIOS_NIL__)
  asm volatile ("movw    r30, r22");
    13e6:	fb 01       	movw	r30, r22

000013e8 <.Loc.22>:
  asm volatile ("in      r0, 0x3d");
    13e8:	0d b6       	in	r0, 0x3d	; 61

000013ea <.Loc.23>:
  asm volatile ("std     Z+0, r0");
    13ea:	00 82       	st	Z, r0

000013ec <.Loc.24>:
  asm volatile ("in      r0, 0x3e");
    13ec:	0e b6       	in	r0, 0x3e	; 62

000013ee <.Loc.25>:
  asm volatile ("std     Z+1, r0");
    13ee:	01 82       	std	Z+1, r0	; 0x01

000013f0 <.Loc.26>:

  asm volatile ("movw    r30, r24");
    13f0:	fc 01       	movw	r30, r24

000013f2 <.Loc.27>:
  asm volatile ("ldd     r0, Z+0");
    13f2:	00 80       	ld	r0, Z

000013f4 <.Loc.28>:
  asm volatile ("out     0x3d, r0");
    13f4:	0d be       	out	0x3d, r0	; 61

000013f6 <.Loc.29>:
  asm volatile ("ldd     r0, Z+1");
    13f6:	01 80       	ldd	r0, Z+1	; 0x01

000013f8 <.Loc.30>:
  asm volatile ("out     0x3e, r0");
    13f8:	0e be       	out	0x3e, r0	; 62

000013fa <.Loc.31>:
#endif

  asm volatile ("pop     r29");
    13fa:	df 91       	pop	r29

000013fc <.Loc.32>:
  asm volatile ("pop     r28");
    13fc:	cf 91       	pop	r28

000013fe <.Loc.33>:
  asm volatile ("pop     r17");
    13fe:	1f 91       	pop	r17

00001400 <.Loc.34>:
  asm volatile ("pop     r16");
    1400:	0f 91       	pop	r16

00001402 <.Loc.35>:
  asm volatile ("pop     r15");
    1402:	ff 90       	pop	r15

00001404 <.Loc.36>:
  asm volatile ("pop     r14");
    1404:	ef 90       	pop	r14

00001406 <.Loc.37>:
  asm volatile ("pop     r13");
    1406:	df 90       	pop	r13

00001408 <.Loc.38>:
  asm volatile ("pop     r12");
    1408:	cf 90       	pop	r12

0000140a <.Loc.39>:
  asm volatile ("pop     r11");
    140a:	bf 90       	pop	r11

0000140c <.Loc.40>:
  asm volatile ("pop     r10");
    140c:	af 90       	pop	r10

0000140e <.Loc.41>:
  asm volatile ("pop     r9");
    140e:	9f 90       	pop	r9

00001410 <.Loc.42>:
  asm volatile ("pop     r8");
    1410:	8f 90       	pop	r8

00001412 <.Loc.43>:
  asm volatile ("pop     r7");
    1412:	7f 90       	pop	r7

00001414 <.Loc.44>:
  asm volatile ("pop     r6");
    1414:	6f 90       	pop	r6

00001416 <.Loc.45>:
  asm volatile ("pop     r5");
    1416:	5f 90       	pop	r5

00001418 <.Loc.46>:
  asm volatile ("pop     r4");
    1418:	4f 90       	pop	r4

0000141a <.Loc.47>:
  asm volatile ("pop     r3");
    141a:	3f 90       	pop	r3

0000141c <.Loc.48>:
  asm volatile ("pop     r2");
    141c:	2f 90       	pop	r2

0000141e <.Loc.49>:
  asm volatile ("ret");
    141e:	08 95       	ret

00001420 <_port_thread_start>:
    1420:	78 94       	sei

00001422 <.LBE4>:
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
    1422:	c2 01       	movw	r24, r4

00001424 <.Loc.58>:
  asm volatile ("movw    r30, r2");
    1424:	f1 01       	movw	r30, r2

00001426 <.Loc.59>:
  asm volatile ("icall");
    1426:	09 95       	icall

00001428 <.Loc.60>:
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
    1428:	55 ce       	rjmp	.-854    	; 0x10d4 <chThdExit>

0000142a <.Loc.61>:
}
    142a:	08 95       	ret

0000142c <Thread_Led>:
THD_FUNCTION(Thread_Led, arg) {

	(void)arg;

	while (true) {
		palTogglePad(IOPORT4, LED_YLW);
    142c:	d4 e0       	ldi	r29, 0x04	; 4

0000142e <.Loc.2>:
		palTogglePad(IOPORT4, LED_GRN);
    142e:	c8 e0       	ldi	r28, 0x08	; 8

00001430 <.L2>:
		palTogglePad(IOPORT4, LED_YLW);
    1430:	8b b1       	in	r24, 0x0b	; 11
    1432:	8d 27       	eor	r24, r29
    1434:	8b b9       	out	0x0b, r24	; 11

00001436 <.Loc.6>:
		palTogglePad(IOPORT4, LED_GRN);
    1436:	8b b1       	in	r24, 0x0b	; 11
    1438:	8c 27       	eor	r24, r28
    143a:	8b b9       	out	0x0b, r24	; 11

0000143c <.Loc.7>:
		chThdSleepMilliseconds(500);
    143c:	84 e8       	ldi	r24, 0x84	; 132
    143e:	9e e1       	ldi	r25, 0x1E	; 30
    1440:	8f de       	rcall	.-738    	; 0x1160 <chThdSleep>

00001442 <.LVL2>:
	while (true) {
    1442:	f6 cf       	rjmp	.-20     	; 0x1430 <.L2>

00001444 <Thread_Pwm>:
THD_FUNCTION(Thread_Pwm, arg) {

	(void)arg;

	while (true) {
		for (uint16_t i = 1000; i < 10000; i += 1000) {
    1444:	c8 ee       	ldi	r28, 0xE8	; 232
    1446:	d3 e0       	ldi	r29, 0x03	; 3

00001448 <.L5>:
			pwmEnableChannel(&PWMD2, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD2, i));
    1448:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <PWMD2+0x3>
    144c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <PWMD2+0x4>
    1450:	c8 9f       	mul	r28, r24
    1452:	90 01       	movw	r18, r0
    1454:	c9 9f       	mul	r28, r25
    1456:	30 0d       	add	r19, r0
    1458:	d8 9f       	mul	r29, r24
    145a:	30 0d       	add	r19, r0
    145c:	11 24       	eor	r1, r1

0000145e <.Loc.18>:
    145e:	32 95       	swap	r19
    1460:	22 95       	swap	r18
    1462:	2f 70       	andi	r18, 0x0F	; 15
    1464:	23 27       	eor	r18, r19
    1466:	3f 70       	andi	r19, 0x0F	; 15
    1468:	23 27       	eor	r18, r19
    146a:	a7 e4       	ldi	r26, 0x47	; 71
    146c:	b3 e0       	ldi	r27, 0x03	; 3
    146e:	34 d3       	rcall	.+1640   	; 0x1ad8 <__umulhisi3>
    1470:	ac 01       	movw	r20, r24
    1472:	56 95       	lsr	r21
    1474:	47 95       	ror	r20
    1476:	56 95       	lsr	r21
    1478:	47 95       	ror	r20
    147a:	56 95       	lsr	r21
    147c:	47 95       	ror	r20
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	8e e6       	ldi	r24, 0x6E	; 110
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	d8 d8       	rcall	.-3664   	; 0x636 <pwmEnableChannel>

00001486 <.LVL5>:
			chThdSleepMilliseconds(100);
    1486:	8b e1       	ldi	r24, 0x1B	; 27
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	6a de       	rcall	.-812    	; 0x1160 <chThdSleep>

0000148c <.LVL6>:
		for (uint16_t i = 1000; i < 10000; i += 1000) {
    148c:	c8 51       	subi	r28, 0x18	; 24
    148e:	dc 4f       	sbci	r29, 0xFC	; 252

00001490 <.Loc.21>:
    1490:	c0 31       	cpi	r28, 0x10	; 16
    1492:	87 e2       	ldi	r24, 0x27	; 39
    1494:	d8 07       	cpc	r29, r24
    1496:	c1 f6       	brne	.-80     	; 0x1448 <.L5>
    1498:	d5 cf       	rjmp	.-86     	; 0x1444 <Thread_Pwm>

0000149a <main>:
THD_TABLE_END

/*
 * Application entry point.
 */
int main(void) {
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62

0000149e <.LCFI0>:
    149e:	2e 97       	sbiw	r28, 0x0e	; 14

000014a0 <.LCFI1>:
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61

000014aa <.Loc.23>:
	halInit();
    14aa:	0e 94 63 00 	call	0xc6	; 0xc6 <halInit>

000014ae <.LVL8>:
	chSysInit();
    14ae:	91 dc       	rcall	.-1758   	; 0xdd2 <chSysInit>

000014b0 <.LVL9>:

	palSetPadMode(IOPORT4, LED_YLW, PAL_MODE_OUTPUT_PUSHPULL);
    14b0:	46 e0       	ldi	r20, 0x06	; 6
    14b2:	64 e0       	ldi	r22, 0x04	; 4
    14b4:	89 e2       	ldi	r24, 0x29	; 41
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	6c d9       	rcall	.-3368   	; 0x792 <_pal_lld_setgroupmode>

000014ba <.LVL10>:
	palSetPadMode(IOPORT4, LED_GRN, PAL_MODE_OUTPUT_PUSHPULL);
    14ba:	46 e0       	ldi	r20, 0x06	; 6
    14bc:	68 e0       	ldi	r22, 0x08	; 8
    14be:	89 e2       	ldi	r24, 0x29	; 41
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	67 d9       	rcall	.-3378   	; 0x792 <_pal_lld_setgroupmode>

000014c4 <.LVL11>:
	palSetPadMode(IOPORT2, LED_PWM, PAL_MODE_OUTPUT_PUSHPULL);
    14c4:	46 e0       	ldi	r20, 0x06	; 6
    14c6:	68 e0       	ldi	r22, 0x08	; 8
    14c8:	83 e2       	ldi	r24, 0x23	; 35
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	62 d9       	rcall	.-3388   	; 0x792 <_pal_lld_setgroupmode>

000014ce <.LVL12>:

	// PWM configuration

	PWMConfig pwm_driver = {
    14ce:	8e e0       	ldi	r24, 0x0E	; 14
    14d0:	ec e0       	ldi	r30, 0x0C	; 12
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	de 01       	movw	r26, r28
    14d6:	11 96       	adiw	r26, 0x01	; 1

000014d8 <.L0^B1>:
    14d8:	01 90       	ld	r0, Z+
    14da:	0d 92       	st	X+, r0
    14dc:	8a 95       	dec	r24
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <.L0^B1>

000014e0 <.Loc.30>:
			{PWM_OUTPUT_ACTIVE_HIGH, NULL},
			{PWM_OUTPUT_DISABLED, NULL}
		}
	};

	pwmStart(&PWMD2, &pwm_driver);
    14e0:	be 01       	movw	r22, r28
    14e2:	6f 5f       	subi	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	8e e6       	ldi	r24, 0x6E	; 110
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	8f d8       	rcall	.-3810   	; 0x60a <pwmStart>

000014ec <.L9>:

	while (1) ;
    14ec:	ff cf       	rjmp	.-2      	; 0x14ec <.L9>

000014ee <vfprintf>:
    14ee:	ab e0       	ldi	r26, 0x0B	; 11
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ec e7       	ldi	r30, 0x7C	; 124
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	03 c3       	rjmp	.+1542   	; 0x1afe <.Loc.4>

000014f8 <.L1^B1>:
    14f8:	5c 01       	movw	r10, r24
    14fa:	6b 01       	movw	r12, r22
    14fc:	7a 01       	movw	r14, r20
    14fe:	fc 01       	movw	r30, r24
    1500:	17 82       	std	Z+7, r1	; 0x07
    1502:	16 82       	std	Z+6, r1	; 0x06
    1504:	83 81       	ldd	r24, Z+3	; 0x03
    1506:	81 ff       	sbrs	r24, 1
    1508:	01 c1       	rjmp	.+514    	; 0x170c <.L40>
    150a:	ae 01       	movw	r20, r28
    150c:	4f 5f       	subi	r20, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	4a 01       	movw	r8, r20

00001512 <.L3>:
    1512:	f5 01       	movw	r30, r10
    1514:	73 80       	ldd	r7, Z+3	; 0x03
    1516:	f6 01       	movw	r30, r12
    1518:	73 fc       	sbrc	r7, 3
    151a:	85 91       	lpm	r24, Z+
    151c:	73 fe       	sbrs	r7, 3
    151e:	81 91       	ld	r24, Z+
    1520:	6f 01       	movw	r12, r30
    1522:	81 15       	cp	r24, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <L0^A+0x2>

00001526 <L0^A>:
    1526:	a7 c0       	rjmp	.+334    	; 0x1676 <.L4>
    1528:	85 32       	cpi	r24, 0x25	; 37
    152a:	39 f4       	brne	.+14     	; 0x153a <.L5>
    152c:	73 fc       	sbrc	r7, 3
    152e:	05 91       	lpm	r16, Z+
    1530:	73 fe       	sbrs	r7, 3
    1532:	01 91       	ld	r16, Z+
    1534:	6f 01       	movw	r12, r30
    1536:	05 32       	cpi	r16, 0x25	; 37
    1538:	21 f4       	brne	.+8      	; 0x1542 <.L41>

0000153a <.L5>:
    153a:	b5 01       	movw	r22, r10
    153c:	90 e0       	ldi	r25, 0x00	; 0

0000153e <.L70>:
    153e:	71 d3       	rcall	.+1762   	; 0x1c22 <fputc>
    1540:	e8 cf       	rjmp	.-48     	; 0x1512 <.L3>

00001542 <.L41>:
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	61 2c       	mov	r6, r1

00001546 <.L6>:
    1546:	01 15       	cp	r16, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <L0^A+0x2>

0000154a <L0^A>:
    154a:	95 c0       	rjmp	.+298    	; 0x1676 <.L4>
    154c:	60 2f       	mov	r22, r16
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	8f e6       	ldi	r24, 0x6F	; 111
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0f d3       	rcall	.+1566   	; 0x1b74 <strchr_P>
    1556:	89 2b       	or	r24, r25
    1558:	19 f4       	brne	.+6      	; 0x1560 <.L8>
    155a:	03 32       	cpi	r16, 0x23	; 35
    155c:	e9 f4       	brne	.+58     	; 0x1598 <.L9>
    155e:	10 61       	ori	r17, 0x10	; 16

00001560 <.L8>:
    1560:	f6 01       	movw	r30, r12
    1562:	73 fc       	sbrc	r7, 3
    1564:	05 91       	lpm	r16, Z+
    1566:	73 fe       	sbrs	r7, 3
    1568:	01 91       	ld	r16, Z+
    156a:	6f 01       	movw	r12, r30
    156c:	61 2e       	mov	r6, r17
    156e:	17 ff       	sbrs	r17, 7
    1570:	ea cf       	rjmp	.-44     	; 0x1546 <.L6>
    1572:	01 15       	cp	r16, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <.L11>

00001576 <L0^A>:
    1576:	7f c0       	rjmp	.+254    	; 0x1676 <.L4>

00001578 <.L11>:
    1578:	60 2f       	mov	r22, r16
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	88 e6       	ldi	r24, 0x68	; 104
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	f9 d2       	rcall	.+1522   	; 0x1b74 <strchr_P>
    1582:	89 2b       	or	r24, r25
    1584:	a9 f0       	breq	.+42     	; 0x15b0 <.L12>
    1586:	13 ff       	sbrs	r17, 3
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <.L13>
    158a:	f8 e0       	ldi	r31, 0x08	; 8
    158c:	ef 0e       	add	r14, r31
    158e:	f1 1c       	adc	r15, r1

00001590 <.L14>:
    1590:	b5 01       	movw	r22, r10
    1592:	8f e3       	ldi	r24, 0x3F	; 63
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	d3 cf       	rjmp	.-90     	; 0x153e <.L70>

00001598 <.L9>:
    1598:	0c 36       	cpi	r16, 0x6C	; 108
    159a:	11 f4       	brne	.+4      	; 0x15a0 <.L10>
    159c:	10 68       	ori	r17, 0x80	; 128
    159e:	e0 cf       	rjmp	.-64     	; 0x1560 <.L8>

000015a0 <.L10>:
    15a0:	0c 34       	cpi	r16, 0x4C	; 76
    15a2:	51 f7       	brne	.-44     	; 0x1578 <.L11>
    15a4:	18 60       	ori	r17, 0x08	; 8
    15a6:	dc cf       	rjmp	.-72     	; 0x1560 <.L8>

000015a8 <.L13>:
    15a8:	44 e0       	ldi	r20, 0x04	; 4
    15aa:	e4 0e       	add	r14, r20
    15ac:	f1 1c       	adc	r15, r1
    15ae:	f0 cf       	rjmp	.-32     	; 0x1590 <.L14>

000015b0 <.L12>:
    15b0:	03 36       	cpi	r16, 0x63	; 99
    15b2:	b9 f1       	breq	.+110    	; 0x1622 <.L15>
    15b4:	03 37       	cpi	r16, 0x73	; 115
    15b6:	e1 f1       	breq	.+120    	; 0x1630 <.L16>
    15b8:	03 35       	cpi	r16, 0x53	; 83
    15ba:	c9 f1       	breq	.+114    	; 0x162e <.L17>
    15bc:	04 36       	cpi	r16, 0x64	; 100
    15be:	19 f0       	breq	.+6      	; 0x15c6 <.L21>
    15c0:	09 36       	cpi	r16, 0x69	; 105
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <.L21>

000015c4 <L0^A>:
    15c4:	4e c0       	rjmp	.+156    	; 0x1662 <.L22>

000015c6 <.L21>:
    15c6:	f7 01       	movw	r30, r14
    15c8:	67 fe       	sbrs	r6, 7
    15ca:	43 c0       	rjmp	.+134    	; 0x1652 <.L23>
    15cc:	61 91       	ld	r22, Z+
    15ce:	71 91       	ld	r23, Z+
    15d0:	81 91       	ld	r24, Z+
    15d2:	91 91       	ld	r25, Z+
    15d4:	7f 01       	movw	r14, r30

000015d6 <.L24>:
    15d6:	1f 7e       	andi	r17, 0xEF	; 239
    15d8:	97 ff       	sbrs	r25, 7
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <.L25>
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	10 64       	ori	r17, 0x40	; 64

000015ec <.L25>:
    15ec:	2a e0       	ldi	r18, 0x0A	; 10
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	ae 01       	movw	r20, r28
    15f2:	4f 5f       	subi	r20, 0xFF	; 255
    15f4:	5f 4f       	sbci	r21, 0xFF	; 255
    15f6:	3a 01       	movw	r6, r20
    15f8:	5d d3       	rcall	.+1722   	; 0x1cb4 <__ultoa_invert>
    15fa:	08 2f       	mov	r16, r24
    15fc:	16 fd       	sbrc	r17, 6
    15fe:	81 c0       	rjmp	.+258    	; 0x1702 <.L26>

00001600 <.L37>:
    1600:	06 19       	sub	r16, r6

00001602 <.L27>:
    1602:	01 50       	subi	r16, 0x01	; 1
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	0f 5f       	subi	r16, 0xFF	; 255
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	08 0d       	add	r16, r8
    160c:	19 1d       	adc	r17, r9

0000160e <.L39>:
    160e:	f8 01       	movw	r30, r16
    1610:	82 91       	ld	r24, -Z
    1612:	8f 01       	movw	r16, r30
    1614:	b5 01       	movw	r22, r10
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	04 d3       	rcall	.+1544   	; 0x1c22 <fputc>
    161a:	80 16       	cp	r8, r16
    161c:	91 06       	cpc	r9, r17
    161e:	b9 f7       	brne	.-18     	; 0x160e <.L39>
    1620:	78 cf       	rjmp	.-272    	; 0x1512 <.L3>

00001622 <.L15>:
    1622:	b5 01       	movw	r22, r10
    1624:	f7 01       	movw	r30, r14
    1626:	81 91       	ld	r24, Z+
    1628:	91 91       	ld	r25, Z+
    162a:	7f 01       	movw	r14, r30
    162c:	88 cf       	rjmp	.-240    	; 0x153e <.L70>

0000162e <.L17>:
    162e:	11 60       	ori	r17, 0x01	; 1

00001630 <.L16>:
    1630:	f7 01       	movw	r30, r14
    1632:	61 90       	ld	r6, Z+
    1634:	71 90       	ld	r7, Z+
    1636:	7f 01       	movw	r14, r30

00001638 <.L19>:
    1638:	f3 01       	movw	r30, r6
    163a:	10 fd       	sbrc	r17, 0
    163c:	85 91       	lpm	r24, Z+
    163e:	10 ff       	sbrs	r17, 0
    1640:	81 91       	ld	r24, Z+
    1642:	3f 01       	movw	r6, r30
    1644:	81 15       	cp	r24, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <L0^A+0x2>

00001648 <L0^A>:
    1648:	64 cf       	rjmp	.-312    	; 0x1512 <.L3>
    164a:	b5 01       	movw	r22, r10
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	e9 d2       	rcall	.+1490   	; 0x1c22 <fputc>
    1650:	f3 cf       	rjmp	.-26     	; 0x1638 <.L19>

00001652 <.L23>:
    1652:	61 91       	ld	r22, Z+
    1654:	71 91       	ld	r23, Z+
    1656:	7f 01       	movw	r14, r30
    1658:	07 2e       	mov	r0, r23
    165a:	00 0c       	add	r0, r0
    165c:	88 0b       	sbc	r24, r24
    165e:	99 0b       	sbc	r25, r25
    1660:	ba cf       	rjmp	.-140    	; 0x15d6 <.L24>

00001662 <.L22>:
    1662:	00 37       	cpi	r16, 0x70	; 112
    1664:	09 f4       	brne	.+2      	; 0x1668 <L0^A+0x2>

00001666 <L0^A>:
    1666:	3e c0       	rjmp	.+124    	; 0x16e4 <.L28>
    1668:	60 f4       	brcc	.+24     	; 0x1682 <.L29>
    166a:	08 35       	cpi	r16, 0x58	; 88
    166c:	09 f4       	brne	.+2      	; 0x1670 <L0^A+0x2>

0000166e <L0^A>:
    166e:	3c c0       	rjmp	.+120    	; 0x16e8 <.L30>
    1670:	0f 36       	cpi	r16, 0x6F	; 111
    1672:	09 f4       	brne	.+2      	; 0x1676 <.L4>

00001674 <L0^A>:
    1674:	3d c0       	rjmp	.+122    	; 0x16f0 <.L42>

00001676 <.L4>:
    1676:	f5 01       	movw	r30, r10
    1678:	86 81       	ldd	r24, Z+6	; 0x06
    167a:	97 81       	ldd	r25, Z+7	; 0x07

0000167c <.L1>:
    167c:	2b 96       	adiw	r28, 0x0b	; 11
    167e:	ee e0       	ldi	r30, 0x0E	; 14
    1680:	5a c2       	rjmp	.+1204   	; 0x1b36 <.Loc.4>

00001682 <.L29>:
    1682:	05 37       	cpi	r16, 0x75	; 117
    1684:	31 f0       	breq	.+12     	; 0x1692 <.L32>
    1686:	08 37       	cpi	r16, 0x78	; 120
    1688:	b1 f7       	brne	.-20     	; 0x1676 <.L4>

0000168a <.L33>:
    168a:	14 62       	ori	r17, 0x24	; 36
    168c:	20 e1       	ldi	r18, 0x10	; 16
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <.L31>

00001692 <.L32>:
    1692:	1f 7e       	andi	r17, 0xEF	; 239
    1694:	2a e0       	ldi	r18, 0x0A	; 10
    1696:	30 e0       	ldi	r19, 0x00	; 0

00001698 <.L31>:
    1698:	f7 01       	movw	r30, r14
    169a:	17 ff       	sbrs	r17, 7
    169c:	2c c0       	rjmp	.+88     	; 0x16f6 <.L34>
    169e:	61 91       	ld	r22, Z+
    16a0:	71 91       	ld	r23, Z+
    16a2:	81 91       	ld	r24, Z+
    16a4:	91 91       	ld	r25, Z+
    16a6:	7f 01       	movw	r14, r30

000016a8 <.L35>:
    16a8:	ae 01       	movw	r20, r28
    16aa:	4f 5f       	subi	r20, 0xFF	; 255
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
    16ae:	3a 01       	movw	r6, r20
    16b0:	01 d3       	rcall	.+1538   	; 0x1cb4 <__ultoa_invert>
    16b2:	86 19       	sub	r24, r6
    16b4:	97 09       	sbc	r25, r7
    16b6:	08 2f       	mov	r16, r24
    16b8:	14 ff       	sbrs	r17, 4
    16ba:	a3 cf       	rjmp	.-186    	; 0x1602 <.L27>
    16bc:	fe 01       	movw	r30, r28
    16be:	e8 0f       	add	r30, r24
    16c0:	f1 1d       	adc	r31, r1
    16c2:	80 81       	ld	r24, Z
    16c4:	80 33       	cpi	r24, 0x30	; 48
    16c6:	09 f4       	brne	.+2      	; 0x16ca <L0^A+0x2>

000016c8 <L0^A>:
    16c8:	9c cf       	rjmp	.-200    	; 0x1602 <.L27>
    16ca:	b5 01       	movw	r22, r10
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a8 d2       	rcall	.+1360   	; 0x1c22 <fputc>
    16d2:	12 ff       	sbrs	r17, 2
    16d4:	96 cf       	rjmp	.-212    	; 0x1602 <.L27>
    16d6:	10 72       	andi	r17, 0x20	; 32
    16d8:	18 5a       	subi	r17, 0xA8	; 168
    16da:	b5 01       	movw	r22, r10
    16dc:	81 2f       	mov	r24, r17
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 d2       	rcall	.+1344   	; 0x1c22 <fputc>
    16e2:	8f cf       	rjmp	.-226    	; 0x1602 <.L27>

000016e4 <.L28>:
    16e4:	10 61       	ori	r17, 0x10	; 16
    16e6:	d1 cf       	rjmp	.-94     	; 0x168a <.L33>

000016e8 <.L30>:
    16e8:	14 60       	ori	r17, 0x04	; 4
    16ea:	20 e1       	ldi	r18, 0x10	; 16
    16ec:	32 e0       	ldi	r19, 0x02	; 2
    16ee:	d4 cf       	rjmp	.-88     	; 0x1698 <.L31>

000016f0 <.L42>:
    16f0:	28 e0       	ldi	r18, 0x08	; 8
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	d1 cf       	rjmp	.-94     	; 0x1698 <.L31>

000016f6 <.L34>:
    16f6:	61 91       	ld	r22, Z+
    16f8:	71 91       	ld	r23, Z+
    16fa:	7f 01       	movw	r14, r30
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	d3 cf       	rjmp	.-90     	; 0x16a8 <.L35>

00001702 <.L26>:
    1702:	b5 01       	movw	r22, r10
    1704:	8d e2       	ldi	r24, 0x2D	; 45
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	8c d2       	rcall	.+1304   	; 0x1c22 <fputc>
    170a:	7a cf       	rjmp	.-268    	; 0x1600 <.L37>

0000170c <.L40>:
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	9f ef       	ldi	r25, 0xFF	; 255
    1710:	b5 cf       	rjmp	.-150    	; 0x167c <.L1>

00001712 <putval>:
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	fc 01       	movw	r30, r24
    171c:	6a 01       	movw	r12, r20
    171e:	7b 01       	movw	r14, r22
    1720:	20 fd       	sbrc	r18, 0
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <.L1>
    1724:	23 fd       	sbrc	r18, 3
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <.L1^B1>
    1728:	22 ff       	sbrs	r18, 2
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <.L2^B1>
    172c:	f3 82       	std	Z+3, r15	; 0x03
    172e:	e2 82       	std	Z+2, r14	; 0x02

00001730 <.L2^B1>:
    1730:	d1 82       	std	Z+1, r13	; 0x01

00001732 <.L1^B1>:
    1732:	c0 82       	st	Z, r12

00001734 <.L1>:
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	08 95       	ret

0000173e <mulacc>:
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	6b 01       	movw	r12, r22
    1748:	7c 01       	movw	r14, r24
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	44 fd       	sbrc	r20, 4
    174e:	10 c0       	rjmp	.+32     	; 0x1770 <.L5>
    1750:	84 e0       	ldi	r24, 0x04	; 4
    1752:	46 fd       	sbrc	r20, 6
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <.L5>
    1756:	d6 01       	movw	r26, r12
    1758:	f7 01       	movw	r30, r14

0000175a <.L1^B2>:
    175a:	aa 0f       	add	r26, r26
    175c:	bb 1f       	adc	r27, r27
    175e:	ee 1f       	adc	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	10 94       	com	r1
    1764:	d1 f7       	brne	.-12     	; 0x175a <.L1^B2>
    1766:	ca 0e       	add	r12, r26
    1768:	db 1e       	adc	r13, r27
    176a:	ee 1e       	adc	r14, r30
    176c:	ff 1e       	adc	r15, r31
    176e:	81 e0       	ldi	r24, 0x01	; 1

00001770 <.L5>:
    1770:	cc 0c       	add	r12, r12
    1772:	dd 1c       	adc	r13, r13
    1774:	ee 1c       	adc	r14, r14
    1776:	ff 1c       	adc	r15, r15
    1778:	8a 95       	dec	r24
    177a:	d1 f7       	brne	.-12     	; 0x1770 <.L5>
    177c:	c7 01       	movw	r24, r14
    177e:	b6 01       	movw	r22, r12
    1780:	62 0f       	add	r22, r18
    1782:	71 1d       	adc	r23, r1
    1784:	81 1d       	adc	r24, r1
    1786:	91 1d       	adc	r25, r1
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	08 95       	ret

00001792 <skip_spaces>:
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	8c 01       	movw	r16, r24

0000179c <.L11>:
    179c:	c8 01       	movw	r24, r16
    179e:	fe d1       	rcall	.+1020   	; 0x1b9c <fgetc>
    17a0:	ec 01       	movw	r28, r24
    17a2:	97 fd       	sbrc	r25, 7
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <.L9>
    17a6:	de d1       	rcall	.+956    	; 0x1b64 <isspace>
    17a8:	89 2b       	or	r24, r25
    17aa:	c1 f7       	brne	.-16     	; 0x179c <.L11>
    17ac:	b8 01       	movw	r22, r16
    17ae:	ce 01       	movw	r24, r28
    17b0:	68 d2       	rcall	.+1232   	; 0x1c82 <ungetc>

000017b2 <.L9>:
    17b2:	ce 01       	movw	r24, r28
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <conv_int>:
    17be:	a0 e0       	ldi	r26, 0x00	; 0
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e4 ee       	ldi	r30, 0xE4	; 228
    17c4:	fb e0       	ldi	r31, 0x0B	; 11
    17c6:	9d c1       	rjmp	.+826    	; 0x1b02 <.Loc.6>

000017c8 <.L1^B3>:
    17c8:	5c 01       	movw	r10, r24
    17ca:	16 2f       	mov	r17, r22
    17cc:	4a 01       	movw	r8, r20
    17ce:	f2 2e       	mov	r15, r18
    17d0:	e5 d1       	rcall	.+970    	; 0x1b9c <fgetc>
    17d2:	ec 01       	movw	r28, r24
    17d4:	99 27       	eor	r25, r25
    17d6:	cb 32       	cpi	r28, 0x2B	; 43
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <.L14>
    17da:	8d 97       	sbiw	r24, 0x2d	; 45
    17dc:	71 f4       	brne	.+28     	; 0x17fa <.L15>
    17de:	68 94       	set
    17e0:	f7 f8       	bld	r15, 7

000017e2 <.L14>:
    17e2:	1a 95       	dec	r17
    17e4:	29 f4       	brne	.+10     	; 0x17f0 <.L16>

000017e6 <.L18>:
    17e6:	80 e0       	ldi	r24, 0x00	; 0

000017e8 <.L13>:
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	ec e0       	ldi	r30, 0x0C	; 12
    17ee:	a5 c1       	rjmp	.+842    	; 0x1b3a <.Loc.6>

000017f0 <.L16>:
    17f0:	c5 01       	movw	r24, r10
    17f2:	d4 d1       	rcall	.+936    	; 0x1b9c <fgetc>
    17f4:	ec 01       	movw	r28, r24
    17f6:	97 fd       	sbrc	r25, 7
    17f8:	f6 cf       	rjmp	.-20     	; 0x17e6 <.L18>

000017fa <.L15>:
    17fa:	0f 2d       	mov	r16, r15
    17fc:	0d 7f       	andi	r16, 0xFD	; 253
    17fe:	8f 2d       	mov	r24, r15
    1800:	80 73       	andi	r24, 0x30	; 48
    1802:	81 11       	cpse	r24, r1
    1804:	2c c0       	rjmp	.+88     	; 0x185e <.L19>
    1806:	c0 33       	cpi	r28, 0x30	; 48
    1808:	51 f5       	brne	.+84     	; 0x185e <.L19>
    180a:	ee 24       	eor	r14, r14
    180c:	ea 94       	dec	r14
    180e:	e1 0e       	add	r14, r17
    1810:	e1 14       	cp	r14, r1
    1812:	29 f0       	breq	.+10     	; 0x181e <.L24>
    1814:	c5 01       	movw	r24, r10
    1816:	c2 d1       	rcall	.+900    	; 0x1b9c <fgetc>
    1818:	ec 01       	movw	r28, r24
    181a:	97 ff       	sbrs	r25, 7
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <.L21>

0000181e <.L24>:
    181e:	c1 2c       	mov	r12, r1
    1820:	d1 2c       	mov	r13, r1
    1822:	76 01       	movw	r14, r12

00001824 <.L22>:
    1824:	07 ff       	sbrs	r16, 7
    1826:	08 c0       	rjmp	.+16     	; 0x1838 <.L31>
    1828:	f0 94       	com	r15
    182a:	e0 94       	com	r14
    182c:	d0 94       	com	r13
    182e:	c0 94       	com	r12
    1830:	c1 1c       	adc	r12, r1
    1832:	d1 1c       	adc	r13, r1
    1834:	e1 1c       	adc	r14, r1
    1836:	f1 1c       	adc	r15, r1

00001838 <.L31>:
    1838:	20 2f       	mov	r18, r16
    183a:	b7 01       	movw	r22, r14
    183c:	a6 01       	movw	r20, r12
    183e:	c4 01       	movw	r24, r8
    1840:	68 df       	rcall	.-304    	; 0x1712 <putval>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	d1 cf       	rjmp	.-94     	; 0x17e8 <.L13>

00001846 <.L21>:
    1846:	8f 7d       	andi	r24, 0xDF	; 223
    1848:	0f 2d       	mov	r16, r15
    184a:	88 35       	cpi	r24, 0x58	; 88
    184c:	01 f5       	brne	.+64     	; 0x188e <.L23>
    184e:	02 64       	ori	r16, 0x42	; 66
    1850:	12 50       	subi	r17, 0x02	; 2
    1852:	29 f3       	breq	.-54     	; 0x181e <.L24>
    1854:	c5 01       	movw	r24, r10
    1856:	a2 d1       	rcall	.+836    	; 0x1b9c <fgetc>
    1858:	ec 01       	movw	r28, r24
    185a:	97 fd       	sbrc	r25, 7
    185c:	e0 cf       	rjmp	.-64     	; 0x181e <.L24>

0000185e <.L19>:
    185e:	c1 2c       	mov	r12, r1
    1860:	d1 2c       	mov	r13, r1
    1862:	76 01       	movw	r14, r12

00001864 <.L30>:
    1864:	2c 2f       	mov	r18, r28
    1866:	20 53       	subi	r18, 0x30	; 48
    1868:	28 30       	cpi	r18, 0x08	; 8
    186a:	c8 f0       	brcs	.+50     	; 0x189e <.L26>
    186c:	04 fd       	sbrc	r16, 4
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <.L27>
    1870:	2a 30       	cpi	r18, 0x0A	; 10
    1872:	a8 f0       	brcs	.+42     	; 0x189e <.L26>
    1874:	06 ff       	sbrs	r16, 6
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <.L27>
    1878:	2f 7d       	andi	r18, 0xDF	; 223
    187a:	8f ee       	ldi	r24, 0xEF	; 239
    187c:	82 0f       	add	r24, r18
    187e:	86 30       	cpi	r24, 0x06	; 6
    1880:	68 f0       	brcs	.+26     	; 0x189c <.L28>

00001882 <.L27>:
    1882:	b5 01       	movw	r22, r10
    1884:	ce 01       	movw	r24, r28
    1886:	fd d1       	rcall	.+1018   	; 0x1c82 <ungetc>
    1888:	01 ff       	sbrs	r16, 1
    188a:	ad cf       	rjmp	.-166    	; 0x17e6 <.L18>
    188c:	cb cf       	rjmp	.-106    	; 0x1824 <.L22>

0000188e <.L23>:
    188e:	f6 fe       	sbrs	r15, 6
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <.L25>
    1892:	02 60       	ori	r16, 0x02	; 2

00001894 <.L51>:
    1894:	1e 2d       	mov	r17, r14
    1896:	e3 cf       	rjmp	.-58     	; 0x185e <.L19>

00001898 <.L25>:
    1898:	02 61       	ori	r16, 0x12	; 18
    189a:	fc cf       	rjmp	.-8      	; 0x1894 <.L51>

0000189c <.L28>:
    189c:	27 50       	subi	r18, 0x07	; 7

0000189e <.L26>:
    189e:	40 2f       	mov	r20, r16
    18a0:	c7 01       	movw	r24, r14
    18a2:	b6 01       	movw	r22, r12
    18a4:	4c df       	rcall	.-360    	; 0x173e <mulacc>
    18a6:	6b 01       	movw	r12, r22
    18a8:	7c 01       	movw	r14, r24
    18aa:	02 60       	ori	r16, 0x02	; 2
    18ac:	1a 95       	dec	r17
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <L0^A+0x2>

000018b0 <L0^A>:
    18b0:	b9 cf       	rjmp	.-142    	; 0x1824 <.L22>
    18b2:	c5 01       	movw	r24, r10
    18b4:	73 d1       	rcall	.+742    	; 0x1b9c <fgetc>
    18b6:	ec 01       	movw	r28, r24
    18b8:	97 ff       	sbrs	r25, 7
    18ba:	d4 cf       	rjmp	.-88     	; 0x1864 <.L30>
    18bc:	b3 cf       	rjmp	.-154    	; 0x1824 <.L22>

000018be <vfscanf>:
    18be:	a4 e0       	ldi	r26, 0x04	; 4
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e4 e6       	ldi	r30, 0x64	; 100
    18c4:	fc e0       	ldi	r31, 0x0C	; 12
    18c6:	17 c1       	rjmp	.+558    	; 0x1af6 <__prologue_saves__>

000018c8 <.L1^B4>:
    18c8:	7c 01       	movw	r14, r24
    18ca:	6b 83       	std	Y+3, r22	; 0x03
    18cc:	7c 83       	std	Y+4, r23	; 0x04
    18ce:	49 83       	std	Y+1, r20	; 0x01
    18d0:	5a 83       	std	Y+2, r21	; 0x02
    18d2:	fc 01       	movw	r30, r24
    18d4:	17 82       	std	Z+7, r1	; 0x07
    18d6:	16 82       	std	Z+6, r1	; 0x06
    18d8:	21 2c       	mov	r2, r1

000018da <.L53>:
    18da:	f7 01       	movw	r30, r14
    18dc:	13 81       	ldd	r17, Z+3	; 0x03
    18de:	eb 81       	ldd	r30, Y+3	; 0x03
    18e0:	fc 81       	ldd	r31, Y+4	; 0x04
    18e2:	13 fd       	sbrc	r17, 3
    18e4:	05 91       	lpm	r16, Z+
    18e6:	13 ff       	sbrs	r17, 3
    18e8:	01 91       	ld	r16, Z+
    18ea:	fc 83       	std	Y+4, r31	; 0x04
    18ec:	eb 83       	std	Y+3, r30	; 0x03
    18ee:	01 15       	cp	r16, r1
    18f0:	f1 f0       	breq	.+60     	; 0x192e <.L125>
    18f2:	80 2f       	mov	r24, r16
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	36 d1       	rcall	.+620    	; 0x1b64 <isspace>
    18f8:	89 2b       	or	r24, r25
    18fa:	19 f0       	breq	.+6      	; 0x1902 <.L54>
    18fc:	c7 01       	movw	r24, r14
    18fe:	49 df       	rcall	.-366    	; 0x1792 <skip_spaces>
    1900:	ec cf       	rjmp	.-40     	; 0x18da <.L53>

00001902 <.L54>:
    1902:	05 32       	cpi	r16, 0x25	; 37
    1904:	59 f4       	brne	.+22     	; 0x191c <.L56>
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	13 fd       	sbrc	r17, 3
    190c:	55 90       	lpm	r5, Z+
    190e:	13 ff       	sbrs	r17, 3
    1910:	51 90       	ld	r5, Z+
    1912:	fc 83       	std	Y+4, r31	; 0x04
    1914:	eb 83       	std	Y+3, r30	; 0x03
    1916:	f5 e2       	ldi	r31, 0x25	; 37
    1918:	5f 12       	cpse	r5, r31
    191a:	0c c0       	rjmp	.+24     	; 0x1934 <.L57>

0000191c <.L56>:
    191c:	c7 01       	movw	r24, r14
    191e:	3e d1       	rcall	.+636    	; 0x1b9c <fgetc>
    1920:	4c 01       	movw	r8, r24
    1922:	97 fd       	sbrc	r25, 7
    1924:	b5 c0       	rjmp	.+362    	; 0x1a90 <.L58>
    1926:	08 17       	cp	r16, r24
    1928:	c1 f2       	breq	.-80     	; 0x18da <.L53>
    192a:	b7 01       	movw	r22, r14
    192c:	aa d1       	rcall	.+852    	; 0x1c82 <ungetc>

0000192e <.L125>:
    192e:	82 2d       	mov	r24, r2
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	b2 c0       	rjmp	.+356    	; 0x1a98 <.L52>

00001934 <.L57>:
    1934:	8a e2       	ldi	r24, 0x2A	; 42
    1936:	41 2c       	mov	r4, r1
    1938:	58 12       	cpse	r5, r24
    193a:	0a c0       	rjmp	.+20     	; 0x1950 <.L60>
    193c:	eb 81       	ldd	r30, Y+3	; 0x03
    193e:	fc 81       	ldd	r31, Y+4	; 0x04
    1940:	13 fd       	sbrc	r17, 3
    1942:	55 90       	lpm	r5, Z+
    1944:	13 ff       	sbrs	r17, 3
    1946:	51 90       	ld	r5, Z+
    1948:	fc 83       	std	Y+4, r31	; 0x04
    194a:	eb 83       	std	Y+3, r30	; 0x03
    194c:	44 24       	eor	r4, r4
    194e:	43 94       	inc	r4

00001950 <.L60>:
    1950:	31 2c       	mov	r3, r1

00001952 <.L61>:
    1952:	20 ed       	ldi	r18, 0xD0	; 208
    1954:	25 0d       	add	r18, r5
    1956:	2a 30       	cpi	r18, 0x0A	; 10
    1958:	68 f1       	brcs	.+90     	; 0x19b4 <.L62>
    195a:	41 fe       	sbrs	r4, 1
    195c:	3d c0       	rjmp	.+122    	; 0x19d8 <.L90>
    195e:	31 14       	cp	r3, r1
    1960:	31 f3       	breq	.-52     	; 0x192e <.L125>

00001962 <.L63>:
    1962:	e8 e6       	ldi	r30, 0x68	; 104
    1964:	5e 16       	cp	r5, r30
    1966:	09 f4       	brne	.+2      	; 0x196a <.LLST48+0x1>

00001968 <L0^A>:
    1968:	3a c0       	rjmp	.+116    	; 0x19de <.L64>
    196a:	fc e6       	ldi	r31, 0x6C	; 108
    196c:	5f 16       	cp	r5, r31
    196e:	09 f4       	brne	.+2      	; 0x1972 <.L66>

00001970 <L0^A>:
    1970:	43 c0       	rjmp	.+134    	; 0x19f8 <.L65>

00001972 <.L66>:
    1972:	51 14       	cp	r5, r1
    1974:	e1 f2       	breq	.-72     	; 0x192e <.L125>
    1976:	65 2d       	mov	r22, r5
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	8f e7       	ldi	r24, 0x7F	; 127
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	fa d0       	rcall	.+500    	; 0x1b74 <strchr_P>
    1980:	89 2b       	or	r24, r25
    1982:	a9 f2       	breq	.-86     	; 0x192e <.L125>
    1984:	00 e0       	ldi	r16, 0x00	; 0
    1986:	10 e0       	ldi	r17, 0x00	; 0
    1988:	40 fc       	sbrc	r4, 0
    198a:	08 c0       	rjmp	.+16     	; 0x199c <.L68>
    198c:	a9 80       	ldd	r10, Y+1	; 0x01
    198e:	ba 80       	ldd	r11, Y+2	; 0x02
    1990:	f5 01       	movw	r30, r10
    1992:	01 91       	ld	r16, Z+
    1994:	11 91       	ld	r17, Z+
    1996:	5f 01       	movw	r10, r30
    1998:	e9 83       	std	Y+1, r30	; 0x01
    199a:	ba 82       	std	Y+2, r11	; 0x02

0000199c <.L68>:
    199c:	fe e6       	ldi	r31, 0x6E	; 110
    199e:	5f 12       	cpse	r5, r31
    19a0:	36 c0       	rjmp	.+108    	; 0x1a0e <.L69>
    19a2:	f7 01       	movw	r30, r14
    19a4:	46 81       	ldd	r20, Z+6	; 0x06
    19a6:	57 81       	ldd	r21, Z+7	; 0x07
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	24 2d       	mov	r18, r4
    19ae:	c8 01       	movw	r24, r16
    19b0:	b0 de       	rcall	.-672    	; 0x1712 <putval>
    19b2:	93 cf       	rjmp	.-218    	; 0x18da <.L53>

000019b4 <.L62>:
    19b4:	68 94       	set
    19b6:	41 f8       	bld	r4, 1
    19b8:	63 2d       	mov	r22, r3
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	bd de       	rcall	.-646    	; 0x173e <mulacc>
    19c4:	36 2e       	mov	r3, r22
    19c6:	eb 81       	ldd	r30, Y+3	; 0x03
    19c8:	fc 81       	ldd	r31, Y+4	; 0x04
    19ca:	13 fd       	sbrc	r17, 3
    19cc:	55 90       	lpm	r5, Z+
    19ce:	13 ff       	sbrs	r17, 3
    19d0:	51 90       	ld	r5, Z+
    19d2:	fc 83       	std	Y+4, r31	; 0x04
    19d4:	eb 83       	std	Y+3, r30	; 0x03
    19d6:	bd cf       	rjmp	.-134    	; 0x1952 <.L61>

000019d8 <.L90>:
    19d8:	33 24       	eor	r3, r3
    19da:	3a 94       	dec	r3
    19dc:	c2 cf       	rjmp	.-124    	; 0x1962 <.L63>

000019de <.L64>:
    19de:	eb 81       	ldd	r30, Y+3	; 0x03
    19e0:	fc 81       	ldd	r31, Y+4	; 0x04
    19e2:	13 fd       	sbrc	r17, 3
    19e4:	55 90       	lpm	r5, Z+
    19e6:	13 ff       	sbrs	r17, 3
    19e8:	51 90       	ld	r5, Z+
    19ea:	fc 83       	std	Y+4, r31	; 0x04
    19ec:	eb 83       	std	Y+3, r30	; 0x03
    19ee:	88 e6       	ldi	r24, 0x68	; 104
    19f0:	58 12       	cpse	r5, r24
    19f2:	bf cf       	rjmp	.-130    	; 0x1972 <.L66>
    19f4:	68 94       	set
    19f6:	43 f8       	bld	r4, 3

000019f8 <.L65>:
    19f8:	68 94       	set
    19fa:	42 f8       	bld	r4, 2
    19fc:	eb 81       	ldd	r30, Y+3	; 0x03
    19fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1a00:	13 fd       	sbrc	r17, 3
    1a02:	55 90       	lpm	r5, Z+
    1a04:	13 ff       	sbrs	r17, 3
    1a06:	51 90       	ld	r5, Z+
    1a08:	fc 83       	std	Y+4, r31	; 0x04
    1a0a:	eb 83       	std	Y+3, r30	; 0x03
    1a0c:	b2 cf       	rjmp	.-156    	; 0x1972 <.L66>

00001a0e <.L69>:
    1a0e:	f3 e6       	ldi	r31, 0x63	; 99
    1a10:	5f 12       	cpse	r5, r31
    1a12:	15 c0       	rjmp	.+42     	; 0x1a3e <.L70>
    1a14:	41 fc       	sbrc	r4, 1
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <.L73>
    1a18:	33 24       	eor	r3, r3
    1a1a:	33 94       	inc	r3

00001a1c <.L73>:
    1a1c:	c7 01       	movw	r24, r14
    1a1e:	be d0       	rcall	.+380    	; 0x1b9c <fgetc>
    1a20:	3c 01       	movw	r6, r24
    1a22:	97 fd       	sbrc	r25, 7
    1a24:	35 c0       	rjmp	.+106    	; 0x1a90 <.L58>
    1a26:	01 15       	cp	r16, r1
    1a28:	11 05       	cpc	r17, r1
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <.L72>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	81 93       	st	Z+, r24
    1a30:	8f 01       	movw	r16, r30

00001a32 <.L72>:
    1a32:	3a 94       	dec	r3
    1a34:	99 f7       	brne	.-26     	; 0x1a1c <.L73>

00001a36 <.L86>:
    1a36:	40 fc       	sbrc	r4, 0
    1a38:	50 cf       	rjmp	.-352    	; 0x18da <.L53>
    1a3a:	23 94       	inc	r2
    1a3c:	4e cf       	rjmp	.-356    	; 0x18da <.L53>

00001a3e <.L70>:
    1a3e:	c7 01       	movw	r24, r14
    1a40:	a8 de       	rcall	.-688    	; 0x1792 <skip_spaces>
    1a42:	97 fd       	sbrc	r25, 7
    1a44:	25 c0       	rjmp	.+74     	; 0x1a90 <.L58>
    1a46:	8f e6       	ldi	r24, 0x6F	; 111
    1a48:	58 16       	cp	r5, r24
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <L0^A+0x2>

00001a4c <L0^A>:
    1a4c:	42 c0       	rjmp	.+132    	; 0x1ad2 <.L75>
    1a4e:	e0 e7       	ldi	r30, 0x70	; 112
    1a50:	5e 16       	cp	r5, r30
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <.L76>
    1a54:	f4 e6       	ldi	r31, 0x64	; 100
    1a56:	5f 16       	cp	r5, r31
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <.L77>
    1a5a:	89 e6       	ldi	r24, 0x69	; 105
    1a5c:	58 16       	cp	r5, r24
    1a5e:	59 f0       	breq	.+22     	; 0x1a76 <.L78>

00001a60 <.L79>:
    1a60:	68 94       	set
    1a62:	46 f8       	bld	r4, 6
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <.L78>

00001a66 <.L76>:
    1a66:	e3 e7       	ldi	r30, 0x73	; 115
    1a68:	5e 16       	cp	r5, r30
    1a6a:	09 f1       	breq	.+66     	; 0x1aae <.L80>
    1a6c:	f5 e7       	ldi	r31, 0x75	; 117
    1a6e:	5f 12       	cpse	r5, r31
    1a70:	f7 cf       	rjmp	.-18     	; 0x1a60 <.L79>

00001a72 <.L77>:
    1a72:	68 94       	set
    1a74:	45 f8       	bld	r4, 5

00001a76 <.L78>:
    1a76:	24 2d       	mov	r18, r4
    1a78:	a8 01       	movw	r20, r16
    1a7a:	63 2d       	mov	r22, r3
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	9f de       	rcall	.-706    	; 0x17be <conv_int>
    1a80:	81 11       	cpse	r24, r1
    1a82:	d9 cf       	rjmp	.-78     	; 0x1a36 <.L86>
    1a84:	f7 01       	movw	r30, r14
    1a86:	83 81       	ldd	r24, Z+3	; 0x03
    1a88:	80 73       	andi	r24, 0x30	; 48
    1a8a:	81 15       	cp	r24, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <.L58>

00001a8e <L0^A>:
    1a8e:	4f cf       	rjmp	.-354    	; 0x192e <.L125>

00001a90 <.L58>:
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	21 10       	cpse	r2, r1
    1a96:	4b cf       	rjmp	.-362    	; 0x192e <.L125>

00001a98 <.L52>:
    1a98:	24 96       	adiw	r28, 0x04	; 4
    1a9a:	e2 e1       	ldi	r30, 0x12	; 18
    1a9c:	48 c0       	rjmp	.+144    	; 0x1b2e <__epilogue_restores__>

00001a9e <.L82>:
    1a9e:	01 15       	cp	r16, r1
    1aa0:	11 05       	cpc	r17, r1
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <.L83>
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	c1 92       	st	Z+, r12
    1aa8:	8f 01       	movw	r16, r30

00001aaa <.L83>:
    1aaa:	3a 94       	dec	r3
    1aac:	59 f0       	breq	.+22     	; 0x1ac4 <.L84>

00001aae <.L80>:
    1aae:	c7 01       	movw	r24, r14
    1ab0:	75 d0       	rcall	.+234    	; 0x1b9c <fgetc>
    1ab2:	6c 01       	movw	r12, r24
    1ab4:	97 fd       	sbrc	r25, 7
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <.L84>
    1ab8:	55 d0       	rcall	.+170    	; 0x1b64 <isspace>
    1aba:	89 2b       	or	r24, r25
    1abc:	81 f3       	breq	.-32     	; 0x1a9e <.L82>
    1abe:	b7 01       	movw	r22, r14
    1ac0:	c6 01       	movw	r24, r12
    1ac2:	df d0       	rcall	.+446    	; 0x1c82 <ungetc>

00001ac4 <.L84>:
    1ac4:	01 15       	cp	r16, r1
    1ac6:	11 05       	cpc	r17, r1
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <L0^A+0x2>

00001aca <L0^A>:
    1aca:	b5 cf       	rjmp	.-150    	; 0x1a36 <.L86>
    1acc:	f8 01       	movw	r30, r16
    1ace:	10 82       	st	Z, r1
    1ad0:	b2 cf       	rjmp	.-156    	; 0x1a36 <.L86>

00001ad2 <.L75>:
    1ad2:	68 94       	set
    1ad4:	44 f8       	bld	r4, 4
    1ad6:	cf cf       	rjmp	.-98     	; 0x1a76 <.L78>

00001ad8 <__umulhisi3>:
    1ad8:	a2 9f       	mul	r26, r18

00001ada <.Loc.1>:
    1ada:	b0 01       	movw	r22, r0

00001adc <.Loc.2>:
    1adc:	b3 9f       	mul	r27, r19

00001ade <.Loc.3>:
    1ade:	c0 01       	movw	r24, r0

00001ae0 <.Loc.4>:
    1ae0:	a3 9f       	mul	r26, r19

00001ae2 <.Loc.5>:
    1ae2:	70 0d       	add	r23, r0

00001ae4 <.Loc.6>:
    1ae4:	81 1d       	adc	r24, r1

00001ae6 <.Loc.7>:
    1ae6:	11 24       	eor	r1, r1

00001ae8 <.Loc.8>:
    1ae8:	91 1d       	adc	r25, r1

00001aea <.Loc.9>:
    1aea:	b2 9f       	mul	r27, r18

00001aec <.Loc.10>:
    1aec:	70 0d       	add	r23, r0

00001aee <.Loc.11>:
    1aee:	81 1d       	adc	r24, r1

00001af0 <.Loc.12>:
    1af0:	11 24       	eor	r1, r1

00001af2 <.Loc.13>:
    1af2:	91 1d       	adc	r25, r1

00001af4 <.Loc.14>:
    1af4:	08 95       	ret

00001af6 <__prologue_saves__>:
    1af6:	2f 92       	push	r2

00001af8 <.Loc.1>:
    1af8:	3f 92       	push	r3

00001afa <.Loc.2>:
    1afa:	4f 92       	push	r4

00001afc <.Loc.3>:
    1afc:	5f 92       	push	r5

00001afe <.Loc.4>:
    1afe:	6f 92       	push	r6

00001b00 <.Loc.5>:
    1b00:	7f 92       	push	r7

00001b02 <.Loc.6>:
    1b02:	8f 92       	push	r8

00001b04 <.Loc.7>:
    1b04:	9f 92       	push	r9

00001b06 <.Loc.8>:
    1b06:	af 92       	push	r10

00001b08 <.Loc.9>:
    1b08:	bf 92       	push	r11

00001b0a <.Loc.10>:
    1b0a:	cf 92       	push	r12

00001b0c <.Loc.11>:
    1b0c:	df 92       	push	r13

00001b0e <.Loc.12>:
    1b0e:	ef 92       	push	r14

00001b10 <.Loc.13>:
    1b10:	ff 92       	push	r15

00001b12 <.Loc.14>:
    1b12:	0f 93       	push	r16

00001b14 <.Loc.15>:
    1b14:	1f 93       	push	r17

00001b16 <.Loc.16>:
    1b16:	cf 93       	push	r28

00001b18 <.Loc.17>:
    1b18:	df 93       	push	r29

00001b1a <.Loc.18>:
    1b1a:	cd b7       	in	r28, 0x3d	; 61

00001b1c <.Loc.19>:
    1b1c:	de b7       	in	r29, 0x3e	; 62

00001b1e <.Loc.20>:
    1b1e:	ca 1b       	sub	r28, r26

00001b20 <.Loc.21>:
    1b20:	db 0b       	sbc	r29, r27

00001b22 <.Loc.22>:
    1b22:	0f b6       	in	r0, 0x3f	; 63

00001b24 <.Loc.23>:
    1b24:	f8 94       	cli

00001b26 <.Loc.24>:
    1b26:	de bf       	out	0x3e, r29	; 62

00001b28 <.Loc.25>:
    1b28:	0f be       	out	0x3f, r0	; 63

00001b2a <.Loc.26>:
    1b2a:	cd bf       	out	0x3d, r28	; 61

00001b2c <.Loc.27>:
    1b2c:	09 94       	ijmp

00001b2e <__epilogue_restores__>:
    1b2e:	2a 88       	ldd	r2, Y+18	; 0x12

00001b30 <.Loc.1>:
    1b30:	39 88       	ldd	r3, Y+17	; 0x11

00001b32 <.Loc.2>:
    1b32:	48 88       	ldd	r4, Y+16	; 0x10

00001b34 <.Loc.3>:
    1b34:	5f 84       	ldd	r5, Y+15	; 0x0f

00001b36 <.Loc.4>:
    1b36:	6e 84       	ldd	r6, Y+14	; 0x0e

00001b38 <.Loc.5>:
    1b38:	7d 84       	ldd	r7, Y+13	; 0x0d

00001b3a <.Loc.6>:
    1b3a:	8c 84       	ldd	r8, Y+12	; 0x0c

00001b3c <.Loc.7>:
    1b3c:	9b 84       	ldd	r9, Y+11	; 0x0b

00001b3e <.Loc.8>:
    1b3e:	aa 84       	ldd	r10, Y+10	; 0x0a

00001b40 <.Loc.9>:
    1b40:	b9 84       	ldd	r11, Y+9	; 0x09

00001b42 <.Loc.10>:
    1b42:	c8 84       	ldd	r12, Y+8	; 0x08

00001b44 <.Loc.11>:
    1b44:	df 80       	ldd	r13, Y+7	; 0x07

00001b46 <.Loc.12>:
    1b46:	ee 80       	ldd	r14, Y+6	; 0x06

00001b48 <.Loc.13>:
    1b48:	fd 80       	ldd	r15, Y+5	; 0x05

00001b4a <.Loc.14>:
    1b4a:	0c 81       	ldd	r16, Y+4	; 0x04

00001b4c <.Loc.15>:
    1b4c:	1b 81       	ldd	r17, Y+3	; 0x03

00001b4e <.Loc.16>:
    1b4e:	aa 81       	ldd	r26, Y+2	; 0x02

00001b50 <.Loc.17>:
    1b50:	b9 81       	ldd	r27, Y+1	; 0x01

00001b52 <.Loc.18>:
    1b52:	ce 0f       	add	r28, r30

00001b54 <.Loc.19>:
    1b54:	d1 1d       	adc	r29, r1

00001b56 <.Loc.20>:
    1b56:	0f b6       	in	r0, 0x3f	; 63

00001b58 <.Loc.21>:
    1b58:	f8 94       	cli

00001b5a <.Loc.22>:
    1b5a:	de bf       	out	0x3e, r29	; 62

00001b5c <.Loc.23>:
    1b5c:	0f be       	out	0x3f, r0	; 63

00001b5e <.Loc.24>:
    1b5e:	cd bf       	out	0x3d, r28	; 61

00001b60 <.Loc.25>:
    1b60:	ed 01       	movw	r28, r26

00001b62 <.Loc.26>:
    1b62:	08 95       	ret

00001b64 <isspace>:
    1b64:	91 11       	cpse	r25, r1

00001b66 <.L1^B1>:
    1b66:	04 c1       	rjmp	.+520    	; 0x1d70 <__ctype_isfalse>
    1b68:	80 32       	cpi	r24, 0x20	; 32
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <.L2^B1>
    1b6c:	89 50       	subi	r24, 0x09	; 9
    1b6e:	85 50       	subi	r24, 0x05	; 5
    1b70:	d0 f7       	brcc	.-12     	; 0x1b66 <.L1^B1>

00001b72 <.L2^B1>:
    1b72:	08 95       	ret

00001b74 <strchr_P>:
    1b74:	fc 01       	movw	r30, r24

00001b76 <.L1^B1>:
    1b76:	05 90       	lpm	r0, Z+
    1b78:	06 16       	cp	r0, r22
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <.L2^B1>
    1b7c:	00 20       	and	r0, r0
    1b7e:	d9 f7       	brne	.-10     	; 0x1b76 <.L1^B1>
    1b80:	c0 01       	movw	r24, r0
    1b82:	08 95       	ret

00001b84 <.L2^B1>:
    1b84:	31 97       	sbiw	r30, 0x01	; 1
    1b86:	cf 01       	movw	r24, r30
    1b88:	08 95       	ret

00001b8a <memcpy>:
    1b8a:	fb 01       	movw	r30, r22
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <.L_memcpy_start>

00001b90 <.L_memcpy_loop>:
    1b90:	01 90       	ld	r0, Z+
    1b92:	0d 92       	st	X+, r0

00001b94 <.L_memcpy_start>:
    1b94:	41 50       	subi	r20, 0x01	; 1
    1b96:	50 40       	sbci	r21, 0x00	; 0
    1b98:	d8 f7       	brcc	.-10     	; 0x1b90 <.L_memcpy_loop>
    1b9a:	08 95       	ret

00001b9c <fgetc>:
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	80 ff       	sbrs	r24, 0
    1baa:	1d c0       	rjmp	.+58     	; 0x1be6 <.L2>
    1bac:	86 ff       	sbrs	r24, 6
    1bae:	0e c0       	rjmp	.+28     	; 0x1bcc <.L3>
    1bb0:	8f 7b       	andi	r24, 0xBF	; 191
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	9f 83       	std	Y+7, r25	; 0x07
    1bbc:	8e 83       	std	Y+6, r24	; 0x06
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	90 e0       	ldi	r25, 0x00	; 0

00001bc2 <.L1>:
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <.L3>:
    1bcc:	82 ff       	sbrs	r24, 2
    1bce:	19 c0       	rjmp	.+50     	; 0x1c02 <.L5>
    1bd0:	e8 81       	ld	r30, Y
    1bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd4:	90 81       	ld	r25, Z
    1bd6:	09 2f       	mov	r16, r25
    1bd8:	09 2e       	mov	r0, r25
    1bda:	00 0c       	add	r0, r0
    1bdc:	11 0b       	sbc	r17, r17
    1bde:	91 11       	cpse	r25, r1
    1be0:	05 c0       	rjmp	.+10     	; 0x1bec <.L6>
    1be2:	80 62       	ori	r24, 0x20	; 32

00001be4 <.L13>:
    1be4:	8b 83       	std	Y+3, r24	; 0x03

00001be6 <.L2>:
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	9f ef       	ldi	r25, 0xFF	; 255
    1bea:	eb cf       	rjmp	.-42     	; 0x1bc2 <.L1>

00001bec <.L6>:
    1bec:	31 96       	adiw	r30, 0x01	; 1
    1bee:	f9 83       	std	Y+1, r31	; 0x01
    1bf0:	e8 83       	st	Y, r30

00001bf2 <.L7>:
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	9f 83       	std	Y+7, r25	; 0x07
    1bfa:	8e 83       	std	Y+6, r24	; 0x06
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	99 27       	eor	r25, r25
    1c00:	e0 cf       	rjmp	.-64     	; 0x1bc2 <.L1>

00001c02 <.L5>:
    1c02:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c04:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c06:	ce 01       	movw	r24, r28
    1c08:	09 95       	icall
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	97 ff       	sbrs	r25, 7
    1c0e:	f1 cf       	rjmp	.-30     	; 0x1bf2 <.L7>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	0f 3f       	cpi	r16, 0xFF	; 255
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <.L9>
    1c18:	90 e1       	ldi	r25, 0x10	; 16

00001c1a <.L8>:
    1c1a:	89 2b       	or	r24, r25
    1c1c:	e3 cf       	rjmp	.-58     	; 0x1be4 <.L13>

00001c1e <.L9>:
    1c1e:	90 e2       	ldi	r25, 0x20	; 32
    1c20:	fc cf       	rjmp	.-8      	; 0x1c1a <.L8>

00001c22 <fputc>:
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	18 2f       	mov	r17, r24
    1c2c:	09 2f       	mov	r16, r25
    1c2e:	eb 01       	movw	r28, r22
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	81 fd       	sbrc	r24, 1
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <.L2>

00001c36 <.L7>:
    1c36:	1f ef       	ldi	r17, 0xFF	; 255
    1c38:	0f ef       	ldi	r16, 0xFF	; 255

00001c3a <.L3>:
    1c3a:	81 2f       	mov	r24, r17
    1c3c:	90 2f       	mov	r25, r16
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <.L2>:
    1c48:	82 ff       	sbrs	r24, 2
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <.L4>
    1c4c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c4e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	28 17       	cp	r18, r24
    1c56:	39 07       	cpc	r19, r25
    1c58:	3c f4       	brge	.+14     	; 0x1c68 <.L8>
    1c5a:	e8 81       	ld	r30, Y
    1c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5e:	cf 01       	movw	r24, r30
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	99 83       	std	Y+1, r25	; 0x01
    1c64:	88 83       	st	Y, r24
    1c66:	10 83       	st	Z, r17

00001c68 <.L8>:
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	9f 83       	std	Y+7, r25	; 0x07
    1c70:	8e 83       	std	Y+6, r24	; 0x06
    1c72:	e3 cf       	rjmp	.-58     	; 0x1c3a <.L3>

00001c74 <.L4>:
    1c74:	e8 85       	ldd	r30, Y+8	; 0x08
    1c76:	f9 85       	ldd	r31, Y+9	; 0x09
    1c78:	81 2f       	mov	r24, r17
    1c7a:	09 95       	icall
    1c7c:	89 2b       	or	r24, r25
    1c7e:	a1 f3       	breq	.-24     	; 0x1c68 <.L8>
    1c80:	da cf       	rjmp	.-76     	; 0x1c36 <.L7>

00001c82 <ungetc>:
    1c82:	9c 01       	movw	r18, r24
    1c84:	fb 01       	movw	r30, r22
    1c86:	83 81       	ldd	r24, Z+3	; 0x03
    1c88:	80 ff       	sbrs	r24, 0
    1c8a:	11 c0       	rjmp	.+34     	; 0x1cae <.L4>
    1c8c:	86 fd       	sbrc	r24, 6
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <.L4>
    1c90:	2f 3f       	cpi	r18, 0xFF	; 255
    1c92:	32 07       	cpc	r19, r18
    1c94:	51 f0       	breq	.+20     	; 0x1caa <.L2>
    1c96:	22 83       	std	Z+2, r18	; 0x02
    1c98:	8f 7d       	andi	r24, 0xDF	; 223
    1c9a:	80 64       	ori	r24, 0x40	; 64
    1c9c:	83 83       	std	Z+3, r24	; 0x03
    1c9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ca0:	97 81       	ldd	r25, Z+7	; 0x07
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	97 83       	std	Z+7, r25	; 0x07
    1ca6:	86 83       	std	Z+6, r24	; 0x06
    1ca8:	33 27       	eor	r19, r19

00001caa <.L2>:
    1caa:	c9 01       	movw	r24, r18
    1cac:	08 95       	ret

00001cae <.L4>:
    1cae:	2f ef       	ldi	r18, 0xFF	; 255
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	fb cf       	rjmp	.-10     	; 0x1caa <.L2>

00001cb4 <__ultoa_invert>:
    1cb4:	fa 01       	movw	r30, r20
    1cb6:	aa 27       	eor	r26, r26
    1cb8:	28 30       	cpi	r18, 0x08	; 8
    1cba:	51 f1       	breq	.+84     	; 0x1d10 <.L_oct>
    1cbc:	20 31       	cpi	r18, 0x10	; 16
    1cbe:	81 f1       	breq	.+96     	; 0x1d20 <.L_hex>
    1cc0:	e8 94       	clt

00001cc2 <.L_dec_loop>:
    1cc2:	6f 93       	push	r22
    1cc4:	6e 7f       	andi	r22, 0xFE	; 254
    1cc6:	6e 5f       	subi	r22, 0xFE	; 254
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	af 4f       	sbci	r26, 0xFF	; 255
    1cd0:	b1 e0       	ldi	r27, 0x01	; 1
    1cd2:	3e d0       	rcall	.+124    	; 0x1d50 <.L_div_add>
    1cd4:	b4 e0       	ldi	r27, 0x04	; 4
    1cd6:	3c d0       	rcall	.+120    	; 0x1d50 <.L_div_add>
    1cd8:	67 0f       	add	r22, r23
    1cda:	78 1f       	adc	r23, r24
    1cdc:	89 1f       	adc	r24, r25
    1cde:	9a 1f       	adc	r25, r26
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	68 0f       	add	r22, r24
    1ce4:	79 1f       	adc	r23, r25
    1ce6:	8a 1f       	adc	r24, r26
    1ce8:	91 1d       	adc	r25, r1
    1cea:	a1 1d       	adc	r26, r1
    1cec:	6a 0f       	add	r22, r26
    1cee:	71 1d       	adc	r23, r1
    1cf0:	81 1d       	adc	r24, r1
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	20 d0       	rcall	.+64     	; 0x1d38 <.L_lsr_4>
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <.L1^B1>
    1cfa:	68 94       	set

00001cfc <.L1^B1>:
    1cfc:	3f 91       	pop	r19
    1cfe:	2a e0       	ldi	r18, 0x0A	; 10
    1d00:	26 9f       	mul	r18, r22
    1d02:	11 24       	eor	r1, r1
    1d04:	30 19       	sub	r19, r0
    1d06:	30 5d       	subi	r19, 0xD0	; 208
    1d08:	31 93       	st	Z+, r19
    1d0a:	de f6       	brtc	.-74     	; 0x1cc2 <.L_dec_loop>

00001d0c <.L_eos>:
    1d0c:	cf 01       	movw	r24, r30
    1d0e:	08 95       	ret

00001d10 <.L_oct>:
    1d10:	46 2f       	mov	r20, r22
    1d12:	47 70       	andi	r20, 0x07	; 7
    1d14:	40 5d       	subi	r20, 0xD0	; 208
    1d16:	41 93       	st	Z+, r20
    1d18:	b3 e0       	ldi	r27, 0x03	; 3
    1d1a:	0f d0       	rcall	.+30     	; 0x1d3a <.L_lsr>
    1d1c:	c9 f7       	brne	.-14     	; 0x1d10 <.L_oct>
    1d1e:	f6 cf       	rjmp	.-20     	; 0x1d0c <.L_eos>

00001d20 <.L_hex>:
    1d20:	46 2f       	mov	r20, r22
    1d22:	4f 70       	andi	r20, 0x0F	; 15
    1d24:	40 5d       	subi	r20, 0xD0	; 208
    1d26:	4a 33       	cpi	r20, 0x3A	; 58
    1d28:	18 f0       	brcs	.+6      	; 0x1d30 <.L3^B1>
    1d2a:	49 5d       	subi	r20, 0xD9	; 217
    1d2c:	31 fd       	sbrc	r19, 1
    1d2e:	40 52       	subi	r20, 0x20	; 32

00001d30 <.L3^B1>:
    1d30:	41 93       	st	Z+, r20
    1d32:	02 d0       	rcall	.+4      	; 0x1d38 <.L_lsr_4>
    1d34:	a9 f7       	brne	.-22     	; 0x1d20 <.L_hex>
    1d36:	ea cf       	rjmp	.-44     	; 0x1d0c <.L_eos>

00001d38 <.L_lsr_4>:
    1d38:	b4 e0       	ldi	r27, 0x04	; 4

00001d3a <.L_lsr>:
    1d3a:	a6 95       	lsr	r26
    1d3c:	97 95       	ror	r25
    1d3e:	87 95       	ror	r24
    1d40:	77 95       	ror	r23
    1d42:	67 95       	ror	r22
    1d44:	ba 95       	dec	r27
    1d46:	c9 f7       	brne	.-14     	; 0x1d3a <.L_lsr>
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	61 05       	cpc	r22, r1
    1d4c:	71 05       	cpc	r23, r1
    1d4e:	08 95       	ret

00001d50 <.L_div_add>:
    1d50:	9b 01       	movw	r18, r22
    1d52:	ac 01       	movw	r20, r24
    1d54:	0a 2e       	mov	r0, r26

00001d56 <.L7^B1>:
    1d56:	06 94       	lsr	r0
    1d58:	57 95       	ror	r21
    1d5a:	47 95       	ror	r20
    1d5c:	37 95       	ror	r19
    1d5e:	27 95       	ror	r18
    1d60:	ba 95       	dec	r27
    1d62:	c9 f7       	brne	.-14     	; 0x1d56 <.L7^B1>
    1d64:	62 0f       	add	r22, r18
    1d66:	73 1f       	adc	r23, r19
    1d68:	84 1f       	adc	r24, r20
    1d6a:	95 1f       	adc	r25, r21
    1d6c:	a0 1d       	adc	r26, r0
    1d6e:	08 95       	ret

00001d70 <__ctype_isfalse>:
    1d70:	99 27       	eor	r25, r25
    1d72:	88 27       	eor	r24, r24

00001d74 <__ctype_istrue>:
    1d74:	08 95       	ret

00001d76 <_exit>:
    1d76:	f8 94       	cli

00001d78 <__stop_program>:
    1d78:	ff cf       	rjmp	.-2      	; 0x1d78 <__stop_program>
