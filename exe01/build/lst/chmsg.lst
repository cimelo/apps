   1               		.file	"chmsg.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.file 1 "../../os/nil/src/chmsg.c"
  11               		.section	.text.chMsgSend,"ax",@progbits
  12               	.global	chMsgSend
  14               	chMsgSend:
  15               	.LVL0:
  16               	.LFB98:
   1:../../os/nil/src/chmsg.c **** /*
   2:../../os/nil/src/chmsg.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/nil/src/chmsg.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/nil/src/chmsg.c **** 
   5:../../os/nil/src/chmsg.c ****     This file is part of ChibiOS.
   6:../../os/nil/src/chmsg.c **** 
   7:../../os/nil/src/chmsg.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/nil/src/chmsg.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/nil/src/chmsg.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/nil/src/chmsg.c **** 
  11:../../os/nil/src/chmsg.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/nil/src/chmsg.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/nil/src/chmsg.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/nil/src/chmsg.c ****     GNU General Public License for more details.
  15:../../os/nil/src/chmsg.c **** 
  16:../../os/nil/src/chmsg.c ****     You should have received a copy of the GNU General Public License
  17:../../os/nil/src/chmsg.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/nil/src/chmsg.c **** */
  19:../../os/nil/src/chmsg.c **** 
  20:../../os/nil/src/chmsg.c **** /**
  21:../../os/nil/src/chmsg.c ****  * @file    nil/src/chmsg.c
  22:../../os/nil/src/chmsg.c ****  * @brief   Nil RTOS synchronous messages source file.
  23:../../os/nil/src/chmsg.c ****  *
  24:../../os/nil/src/chmsg.c ****  * @addtogroup NIL_MESSAGES
  25:../../os/nil/src/chmsg.c ****  * @{
  26:../../os/nil/src/chmsg.c ****  */
  27:../../os/nil/src/chmsg.c **** 
  28:../../os/nil/src/chmsg.c **** #include "ch.h"
  29:../../os/nil/src/chmsg.c **** 
  30:../../os/nil/src/chmsg.c **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
  31:../../os/nil/src/chmsg.c **** 
  32:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  33:../../os/nil/src/chmsg.c **** /* Module local definitions.                                                 */
  34:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  35:../../os/nil/src/chmsg.c **** 
  36:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  37:../../os/nil/src/chmsg.c **** /* Module exported variables.                                                */
  38:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  39:../../os/nil/src/chmsg.c **** 
  40:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  41:../../os/nil/src/chmsg.c **** /* Module local variables.                                                   */
  42:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  43:../../os/nil/src/chmsg.c **** 
  44:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  45:../../os/nil/src/chmsg.c **** /* Module local functions.                                                   */
  46:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  47:../../os/nil/src/chmsg.c **** 
  48:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  49:../../os/nil/src/chmsg.c **** /* Module interrupt handlers.                                                */
  50:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  51:../../os/nil/src/chmsg.c **** 
  52:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  53:../../os/nil/src/chmsg.c **** /* Module exported functions.                                                */
  54:../../os/nil/src/chmsg.c **** /*===========================================================================*/
  55:../../os/nil/src/chmsg.c **** 
  56:../../os/nil/src/chmsg.c **** /**
  57:../../os/nil/src/chmsg.c ****  * @brief   Sends a message to the specified thread.
  58:../../os/nil/src/chmsg.c ****  * @details The sender is stopped until the receiver executes a
  59:../../os/nil/src/chmsg.c ****  *          @p chMsgRelease()after receiving the message.
  60:../../os/nil/src/chmsg.c ****  *
  61:../../os/nil/src/chmsg.c ****  * @param[in] tp        the pointer to the thread
  62:../../os/nil/src/chmsg.c ****  * @param[in] msg       the message
  63:../../os/nil/src/chmsg.c ****  * @return              The answer message from @p chMsgRelease().
  64:../../os/nil/src/chmsg.c ****  *
  65:../../os/nil/src/chmsg.c ****  * @api
  66:../../os/nil/src/chmsg.c ****  */
  67:../../os/nil/src/chmsg.c **** msg_t chMsgSend(thread_t *tp, msg_t msg) {
  17               		.loc 1 67 42 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 67 42 is_stmt 0 view .LVU1
  24 0000 FC01      		movw r30,r24
  68:../../os/nil/src/chmsg.c ****   thread_t *ctp = nil.current;
  25               		.loc 1 68 3 is_stmt 1 view .LVU2
  26               		.loc 1 68 13 is_stmt 0 view .LVU3
  27 0002 A091 0000 		lds r26,nil
  28 0006 B091 0000 		lds r27,nil+1
  29               	.LVL1:
  69:../../os/nil/src/chmsg.c **** 
  70:../../os/nil/src/chmsg.c ****   chDbgCheck(tp != NULL);
  30               		.loc 1 70 3 is_stmt 1 view .LVU4
  31               		.loc 1 70 3 view .LVU5
  32               		.loc 1 70 3 discriminator 5 view .LVU6
  71:../../os/nil/src/chmsg.c **** 
  72:../../os/nil/src/chmsg.c ****   chSysLock();
  33               		.loc 1 72 3 view .LVU7
  34               	.LBB18:
  35               	.LBI18:
  36               		.file 2 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
  37               		.loc 2 428 20 view .LVU8
  38               	.LBB19:
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  39               		.loc 2 430 3 view .LVU9
  40               	/* #APP */
  41               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
  42 000a F894      		cli
  43               	 ;  0 "" 2
  44               	/* #NOAPP */
  45               	.LBE19:
  46               	.LBE18:
  47               		.loc 1 72 3 discriminator 1 view .LVU10
  48               		.loc 1 72 14 discriminator 1 view .LVU11
  73:../../os/nil/src/chmsg.c ****   ctp->sntmsg = msg;
  49               		.loc 1 73 3 view .LVU12
  50               		.loc 1 73 15 is_stmt 0 view .LVU13
  51 000c 1896      		adiw r26,8
  52 000e 6C93      		st X,r22
  53 0010 1897      		sbiw r26,8
  54 0012 1996      		adiw r26,9
  55 0014 7C93      		st X,r23
  56 0016 1997      		sbiw r26,9
  74:../../os/nil/src/chmsg.c ****   ctp->u1.tp =  tp;
  57               		.loc 1 74 3 is_stmt 1 view .LVU14
  58               		.loc 1 74 14 is_stmt 0 view .LVU15
  59 0018 1496      		adiw r26,3+1
  60 001a 9C93      		st X,r25
  61 001c 8E93      		st -X,r24
  62 001e 1397      		sbiw r26,3
  75:../../os/nil/src/chmsg.c ****   if (NIL_THD_IS_WTMSG(tp)) {
  63               		.loc 1 75 3 is_stmt 1 view .LVU16
  64               		.loc 1 75 6 is_stmt 0 view .LVU17
  65 0020 8281      		ldd r24,Z+2
  66               	.LVL2:
  67               		.loc 1 75 6 view .LVU18
  68 0022 8A30      		cpi r24,lo8(10)
  69 0024 01F0      		breq .L4
  76:../../os/nil/src/chmsg.c ****     (void) chSchReadyI(tp, (msg_t)ctp);
  77:../../os/nil/src/chmsg.c ****   }
  78:../../os/nil/src/chmsg.c ****   msg = chSchGoSleepTimeoutS(NIL_STATE_SNDMSGQ, TIME_INFINITE);
  70               		.loc 1 78 3 is_stmt 1 view .LVU19
  71               		.loc 1 78 9 is_stmt 0 view .LVU20
  72 0026 60E0      		ldi r22,0
  73 0028 70E0      		ldi r23,0
  74               	.LVL3:
  75               		.loc 1 78 9 view .LVU21
  76 002a 88E0      		ldi r24,lo8(8)
  77 002c 0E94 0000 		call chSchGoSleepTimeoutS
  78               	.LVL4:
  79:../../os/nil/src/chmsg.c ****   chSysUnlock();
  79               		.loc 1 79 3 is_stmt 1 view .LVU22
  80               		.loc 1 79 3 view .LVU23
  81               	.LBB20:
  82               	.LBI20:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
  83               		.loc 2 438 20 view .LVU24
  84               	.LBB21:
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  85               		.loc 2 440 3 view .LVU25
  86               	/* #APP */
  87               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
  88 0030 7894      		sei
  89               	 ;  0 "" 2
  90               	/* #NOAPP */
  91               	.LBE21:
  92               	.LBE20:
  93               		.loc 1 79 16 discriminator 1 view .LVU26
  80:../../os/nil/src/chmsg.c **** 
  81:../../os/nil/src/chmsg.c ****   return msg;
  94               		.loc 1 81 3 view .LVU27
  95               	/* epilogue start */
  82:../../os/nil/src/chmsg.c **** }
  96               		.loc 1 82 1 is_stmt 0 view .LVU28
  97 0032 0895      		ret
  98               	.LVL5:
  99               	.L4:
  76:../../os/nil/src/chmsg.c ****   }
 100               		.loc 1 76 5 is_stmt 1 view .LVU29
  76:../../os/nil/src/chmsg.c ****   }
 101               		.loc 1 76 12 is_stmt 0 view .LVU30
 102 0034 BD01      		movw r22,r26
 103               	.LVL6:
  76:../../os/nil/src/chmsg.c ****   }
 104               		.loc 1 76 12 view .LVU31
 105 0036 CF01      		movw r24,r30
 106 0038 0E94 0000 		call chSchReadyI
 107               	.LVL7:
  78:../../os/nil/src/chmsg.c ****   chSysUnlock();
 108               		.loc 1 78 3 is_stmt 1 view .LVU32
  78:../../os/nil/src/chmsg.c ****   chSysUnlock();
 109               		.loc 1 78 9 is_stmt 0 view .LVU33
 110 003c 60E0      		ldi r22,0
 111 003e 70E0      		ldi r23,0
 112 0040 88E0      		ldi r24,lo8(8)
 113 0042 0E94 0000 		call chSchGoSleepTimeoutS
 114               	.LVL8:
  79:../../os/nil/src/chmsg.c **** 
 115               		.loc 1 79 3 is_stmt 1 view .LVU34
  79:../../os/nil/src/chmsg.c **** 
 116               		.loc 1 79 3 view .LVU35
 117               	.LBB23:
 438:../../os/common/ports/AVR/chcore.h **** 
 118               		.loc 2 438 20 view .LVU36
 119               	.LBB22:
 120               		.loc 2 440 3 view .LVU37
 121               	/* #APP */
 122               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 123 0046 7894      		sei
 124               	 ;  0 "" 2
 125               	/* #NOAPP */
 126               	.LBE22:
 127               	.LBE23:
  79:../../os/nil/src/chmsg.c **** 
 128               		.loc 1 79 16 discriminator 1 view .LVU38
  81:../../os/nil/src/chmsg.c **** }
 129               		.loc 1 81 3 view .LVU39
 130               	/* epilogue start */
 131               		.loc 1 82 1 is_stmt 0 view .LVU40
 132 0048 0895      		ret
 133               		.cfi_endproc
 134               	.LFE98:
 136               		.section	.text.chMsgWait,"ax",@progbits
 137               	.global	chMsgWait
 139               	chMsgWait:
 140               	.LFB99:
  83:../../os/nil/src/chmsg.c **** 
  84:../../os/nil/src/chmsg.c **** /**
  85:../../os/nil/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message.
  86:../../os/nil/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
  87:../../os/nil/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
  88:../../os/nil/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
  89:../../os/nil/src/chmsg.c ****  *          the answer.
  90:../../os/nil/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
  91:../../os/nil/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
  92:../../os/nil/src/chmsg.c ****  *          because the sending thread is suspended until then.
  93:../../os/nil/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
  94:../../os/nil/src/chmsg.c ****  *          returned pointer is a temporary reference.
  95:../../os/nil/src/chmsg.c ****  *
  96:../../os/nil/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
  97:../../os/nil/src/chmsg.c ****  *
  98:../../os/nil/src/chmsg.c ****  * @api
  99:../../os/nil/src/chmsg.c ****  */
 100:../../os/nil/src/chmsg.c **** thread_t *chMsgWait(void) {
 141               		.loc 1 100 27 is_stmt 1 view -0
 142               		.cfi_startproc
 143 0000 0F93      		push r16
 144               	.LCFI0:
 145               		.cfi_def_cfa_offset 3
 146               		.cfi_offset 16, -2
 147 0002 1F93      		push r17
 148               	.LCFI1:
 149               		.cfi_def_cfa_offset 4
 150               		.cfi_offset 17, -3
 151 0004 CF93      		push r28
 152               	.LCFI2:
 153               		.cfi_def_cfa_offset 5
 154               		.cfi_offset 28, -4
 155 0006 DF93      		push r29
 156               	.LCFI3:
 157               		.cfi_def_cfa_offset 6
 158               		.cfi_offset 29, -5
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 4 */
 162               	.L__stack_usage = 4
 101:../../os/nil/src/chmsg.c ****   thread_t *tp;
 163               		.loc 1 101 3 view .LVU42
 102:../../os/nil/src/chmsg.c **** 
 103:../../os/nil/src/chmsg.c ****   chSysLock();
 164               		.loc 1 103 3 view .LVU43
 165               	.LBB31:
 166               	.LBI31:
 428:../../os/common/ports/AVR/chcore.h **** 
 167               		.loc 2 428 20 view .LVU44
 168               	.LBB32:
 430:../../os/common/ports/AVR/chcore.h **** }
 169               		.loc 2 430 3 view .LVU45
 170               	/* #APP */
 171               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 172 0008 F894      		cli
 173               	 ;  0 "" 2
 174               	/* #NOAPP */
 175               	.LBE32:
 176               	.LBE31:
 177               		.loc 1 103 3 discriminator 1 view .LVU46
 178               		.loc 1 103 14 discriminator 1 view .LVU47
 104:../../os/nil/src/chmsg.c ****   tp = chMsgWaitS();
 179               		.loc 1 104 3 view .LVU48
 180               	.LVL9:
 181               	.LBB33:
 182               	.LBI33:
 105:../../os/nil/src/chmsg.c ****   chSysUnlock();
 106:../../os/nil/src/chmsg.c **** 
 107:../../os/nil/src/chmsg.c ****   return tp;
 108:../../os/nil/src/chmsg.c **** }
 109:../../os/nil/src/chmsg.c **** 
 110:../../os/nil/src/chmsg.c **** /**
 111:../../os/nil/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message or a
 112:../../os/nil/src/chmsg.c ****  *          timeout to occur.
 113:../../os/nil/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
 114:../../os/nil/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 115:../../os/nil/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 116:../../os/nil/src/chmsg.c ****  *          the answer.
 117:../../os/nil/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 118:../../os/nil/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 119:../../os/nil/src/chmsg.c ****  *          because the sending thread is suspended until then.
 120:../../os/nil/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 121:../../os/nil/src/chmsg.c ****  *          returned pointer is a temporary reference.
 122:../../os/nil/src/chmsg.c ****  *
 123:../../os/nil/src/chmsg.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 124:../../os/nil/src/chmsg.c ****  *                      the following special values are allowed:
 125:../../os/nil/src/chmsg.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 126:../../os/nil/src/chmsg.c ****  *                      - @a TIME_INFINITE no timeout.
 127:../../os/nil/src/chmsg.c ****  *                      .
 128:../../os/nil/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
 129:../../os/nil/src/chmsg.c ****  * @retval NULL         if a timeout occurred.
 130:../../os/nil/src/chmsg.c ****  *
 131:../../os/nil/src/chmsg.c ****  * @api
 132:../../os/nil/src/chmsg.c ****  */
 133:../../os/nil/src/chmsg.c **** thread_t *chMsgWaitTimeout(sysinterval_t timeout) {
 134:../../os/nil/src/chmsg.c ****   thread_t *tp;
 135:../../os/nil/src/chmsg.c **** 
 136:../../os/nil/src/chmsg.c ****   chSysLock();
 137:../../os/nil/src/chmsg.c ****   tp = chMsgWaitTimeoutS(timeout);
 138:../../os/nil/src/chmsg.c ****   chSysUnlock();
 139:../../os/nil/src/chmsg.c **** 
 140:../../os/nil/src/chmsg.c ****   return tp;
 141:../../os/nil/src/chmsg.c **** }
 142:../../os/nil/src/chmsg.c **** 
 143:../../os/nil/src/chmsg.c **** /**
 144:../../os/nil/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message or a
 145:../../os/nil/src/chmsg.c ****  *          timeout to occur.
 146:../../os/nil/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
 147:../../os/nil/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 148:../../os/nil/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 149:../../os/nil/src/chmsg.c ****  *          the answer.
 150:../../os/nil/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 151:../../os/nil/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 152:../../os/nil/src/chmsg.c ****  *          because the sending thread is suspended until then.
 153:../../os/nil/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 154:../../os/nil/src/chmsg.c ****  *          returned pointer is a temporary reference.
 155:../../os/nil/src/chmsg.c ****  *
 156:../../os/nil/src/chmsg.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 157:../../os/nil/src/chmsg.c ****  *                      the following special values are allowed:
 158:../../os/nil/src/chmsg.c ****  *                      - @a TIME_INFINITE no timeout.
 159:../../os/nil/src/chmsg.c ****  *                      .
 160:../../os/nil/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
 161:../../os/nil/src/chmsg.c ****  * @retval NULL         if a timeout occurred.
 162:../../os/nil/src/chmsg.c ****  *
 163:../../os/nil/src/chmsg.c ****  * @sclass
 164:../../os/nil/src/chmsg.c ****  */
 165:../../os/nil/src/chmsg.c **** thread_t *chMsgWaitTimeoutS(sysinterval_t timeout) {
 183               		.loc 1 165 11 view .LVU49
 184               	.LBB34:
 166:../../os/nil/src/chmsg.c ****   thread_t *tp;
 185               		.loc 1 166 3 view .LVU50
 167:../../os/nil/src/chmsg.c **** 
 168:../../os/nil/src/chmsg.c ****   chDbgCheckClassS();
 186               		.loc 1 168 21 view .LVU51
 169:../../os/nil/src/chmsg.c **** 
 170:../../os/nil/src/chmsg.c ****   tp = nil_find_thread(NIL_STATE_SNDMSGQ, nil.current);
 187               		.loc 1 170 3 view .LVU52
 188               		.loc 1 170 8 is_stmt 0 view .LVU53
 189 000a 6091 0000 		lds r22,nil
 190 000e 7091 0000 		lds r23,nil+1
 191 0012 88E0      		ldi r24,lo8(8)
 192 0014 0E94 0000 		call nil_find_thread
 193               	.LVL10:
 194 0018 EC01      		movw r28,r24
 195               	.LVL11:
 171:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 196               		.loc 1 171 3 is_stmt 1 view .LVU54
 197               		.loc 1 171 6 is_stmt 0 view .LVU55
 198 001a 892B      		or r24,r25
 199 001c 01F0      		breq .L10
 200               	.LVL12:
 201               	.L6:
 202               		.loc 1 171 6 view .LVU56
 203               	.LBE34:
 204               	.LBE33:
 105:../../os/nil/src/chmsg.c **** 
 205               		.loc 1 105 3 is_stmt 1 view .LVU57
 105:../../os/nil/src/chmsg.c **** 
 206               		.loc 1 105 3 view .LVU58
 207               	.LBB37:
 208               	.LBI37:
 438:../../os/common/ports/AVR/chcore.h **** 
 209               		.loc 2 438 20 view .LVU59
 210               	.LBB38:
 211               		.loc 2 440 3 view .LVU60
 212               	/* #APP */
 213               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 214 001e 7894      		sei
 215               	 ;  0 "" 2
 216               	/* #NOAPP */
 217               	.LBE38:
 218               	.LBE37:
 105:../../os/nil/src/chmsg.c **** 
 219               		.loc 1 105 16 discriminator 1 view .LVU61
 107:../../os/nil/src/chmsg.c **** }
 220               		.loc 1 107 3 view .LVU62
 108:../../os/nil/src/chmsg.c **** 
 221               		.loc 1 108 1 is_stmt 0 view .LVU63
 222 0020 CE01      		movw r24,r28
 223               	/* epilogue start */
 224 0022 DF91      		pop r29
 225 0024 CF91      		pop r28
 226               	.LVL13:
 108:../../os/nil/src/chmsg.c **** 
 227               		.loc 1 108 1 view .LVU64
 228 0026 1F91      		pop r17
 229 0028 0F91      		pop r16
 230 002a 0895      		ret
 231               	.LVL14:
 232               	.L10:
 233               	.LBB39:
 234               	.LBB36:
 235               	.LBB35:
 172:../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 236               		.loc 1 172 5 is_stmt 1 view .LVU65
 237               		.loc 1 172 17 is_stmt 0 view .LVU66
 238 002c 60E0      		ldi r22,0
 239 002e 70E0      		ldi r23,0
 240 0030 8AE0      		ldi r24,lo8(10)
 241               	.LVL15:
 242               		.loc 1 172 17 view .LVU67
 243 0032 0E94 0000 		call chSchGoSleepTimeoutS
 244               	.LVL16:
 245 0036 8C01      		movw r16,r24
 246               	.LVL17:
 173:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 247               		.loc 1 173 5 is_stmt 1 view .LVU68
 248               		.loc 1 173 8 is_stmt 0 view .LVU69
 249 0038 0F3F      		cpi r16,-1
 250 003a 1007      		cpc r17,r16
 251 003c 01F0      		breq .L6
 174:../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 252               		.loc 1 174 7 is_stmt 1 view .LVU70
 253               		.loc 1 174 14 is_stmt 0 view .LVU71
 254 003e E801      		movw r28,r16
 255               	.LVL18:
 256               		.loc 1 174 14 view .LVU72
 257 0040 00C0      		rjmp .L6
 258               	.LBE35:
 259               	.LBE36:
 260               	.LBE39:
 261               		.cfi_endproc
 262               	.LFE99:
 264               		.section	.text.chMsgWaitTimeout,"ax",@progbits
 265               	.global	chMsgWaitTimeout
 267               	chMsgWaitTimeout:
 268               	.LVL19:
 269               	.LFB100:
 133:../../os/nil/src/chmsg.c ****   thread_t *tp;
 270               		.loc 1 133 51 is_stmt 1 view -0
 271               		.cfi_startproc
 133:../../os/nil/src/chmsg.c ****   thread_t *tp;
 272               		.loc 1 133 51 is_stmt 0 view .LVU74
 273 0000 EF92      		push r14
 274               	.LCFI4:
 275               		.cfi_def_cfa_offset 3
 276               		.cfi_offset 14, -2
 277 0002 FF92      		push r15
 278               	.LCFI5:
 279               		.cfi_def_cfa_offset 4
 280               		.cfi_offset 15, -3
 281 0004 0F93      		push r16
 282               	.LCFI6:
 283               		.cfi_def_cfa_offset 5
 284               		.cfi_offset 16, -4
 285 0006 1F93      		push r17
 286               	.LCFI7:
 287               		.cfi_def_cfa_offset 6
 288               		.cfi_offset 17, -5
 289 0008 CF93      		push r28
 290               	.LCFI8:
 291               		.cfi_def_cfa_offset 7
 292               		.cfi_offset 28, -6
 293 000a DF93      		push r29
 294               	.LCFI9:
 295               		.cfi_def_cfa_offset 8
 296               		.cfi_offset 29, -7
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 6 */
 300               	.L__stack_usage = 6
 301 000c 8C01      		movw r16,r24
 134:../../os/nil/src/chmsg.c **** 
 302               		.loc 1 134 3 is_stmt 1 view .LVU75
 136:../../os/nil/src/chmsg.c ****   tp = chMsgWaitTimeoutS(timeout);
 303               		.loc 1 136 3 view .LVU76
 304               	.LBB47:
 305               	.LBI47:
 428:../../os/common/ports/AVR/chcore.h **** 
 306               		.loc 2 428 20 view .LVU77
 307               	.LBB48:
 430:../../os/common/ports/AVR/chcore.h **** }
 308               		.loc 2 430 3 view .LVU78
 309               	/* #APP */
 310               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 311 000e F894      		cli
 312               	 ;  0 "" 2
 313               	/* #NOAPP */
 314               	.LBE48:
 315               	.LBE47:
 136:../../os/nil/src/chmsg.c ****   tp = chMsgWaitTimeoutS(timeout);
 316               		.loc 1 136 3 discriminator 1 view .LVU79
 136:../../os/nil/src/chmsg.c ****   tp = chMsgWaitTimeoutS(timeout);
 317               		.loc 1 136 14 discriminator 1 view .LVU80
 137:../../os/nil/src/chmsg.c ****   chSysUnlock();
 318               		.loc 1 137 3 view .LVU81
 319               	.LVL20:
 320               	.LBB49:
 321               	.LBI49:
 165:../../os/nil/src/chmsg.c ****   thread_t *tp;
 322               		.loc 1 165 11 view .LVU82
 323               	.LBB50:
 166:../../os/nil/src/chmsg.c **** 
 324               		.loc 1 166 3 view .LVU83
 168:../../os/nil/src/chmsg.c **** 
 325               		.loc 1 168 21 view .LVU84
 170:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 326               		.loc 1 170 3 view .LVU85
 170:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 327               		.loc 1 170 8 is_stmt 0 view .LVU86
 328 0010 6091 0000 		lds r22,nil
 329 0014 7091 0000 		lds r23,nil+1
 330 0018 88E0      		ldi r24,lo8(8)
 331               	.LVL21:
 170:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 332               		.loc 1 170 8 view .LVU87
 333 001a 0E94 0000 		call nil_find_thread
 334               	.LVL22:
 335 001e EC01      		movw r28,r24
 336               	.LVL23:
 171:../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 337               		.loc 1 171 3 is_stmt 1 view .LVU88
 171:../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 338               		.loc 1 171 6 is_stmt 0 view .LVU89
 339 0020 892B      		or r24,r25
 340 0022 01F0      		breq .L16
 341               	.LVL24:
 342               	.L12:
 171:../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 343               		.loc 1 171 6 view .LVU90
 344               	.LBE50:
 345               	.LBE49:
 138:../../os/nil/src/chmsg.c **** 
 346               		.loc 1 138 3 is_stmt 1 view .LVU91
 138:../../os/nil/src/chmsg.c **** 
 347               		.loc 1 138 3 view .LVU92
 348               	.LBB53:
 349               	.LBI53:
 438:../../os/common/ports/AVR/chcore.h **** 
 350               		.loc 2 438 20 view .LVU93
 351               	.LBB54:
 352               		.loc 2 440 3 view .LVU94
 353               	/* #APP */
 354               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 355 0024 7894      		sei
 356               	 ;  0 "" 2
 357               	/* #NOAPP */
 358               	.LBE54:
 359               	.LBE53:
 138:../../os/nil/src/chmsg.c **** 
 360               		.loc 1 138 16 discriminator 1 view .LVU95
 140:../../os/nil/src/chmsg.c **** }
 361               		.loc 1 140 3 view .LVU96
 141:../../os/nil/src/chmsg.c **** 
 362               		.loc 1 141 1 is_stmt 0 view .LVU97
 363 0026 CE01      		movw r24,r28
 364               	/* epilogue start */
 365 0028 DF91      		pop r29
 366 002a CF91      		pop r28
 367               	.LVL25:
 141:../../os/nil/src/chmsg.c **** 
 368               		.loc 1 141 1 view .LVU98
 369 002c 1F91      		pop r17
 370 002e 0F91      		pop r16
 371               	.LVL26:
 141:../../os/nil/src/chmsg.c **** 
 372               		.loc 1 141 1 view .LVU99
 373 0030 FF90      		pop r15
 374 0032 EF90      		pop r14
 375 0034 0895      		ret
 376               	.LVL27:
 377               	.L16:
 378               	.LBB55:
 379               	.LBB52:
 380               	.LBB51:
 172:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 381               		.loc 1 172 5 is_stmt 1 view .LVU100
 172:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 382               		.loc 1 172 17 is_stmt 0 view .LVU101
 383 0036 B801      		movw r22,r16
 384 0038 8AE0      		ldi r24,lo8(10)
 385               	.LVL28:
 172:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 386               		.loc 1 172 17 view .LVU102
 387 003a 0E94 0000 		call chSchGoSleepTimeoutS
 388               	.LVL29:
 389 003e 7C01      		movw r14,r24
 390               	.LVL30:
 173:../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 391               		.loc 1 173 5 is_stmt 1 view .LVU103
 173:../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 392               		.loc 1 173 8 is_stmt 0 view .LVU104
 393 0040 8FEF      		ldi r24,-1
 394 0042 E816      		cp r14,r24
 395 0044 F806      		cpc r15,r24
 396 0046 01F0      		breq .L12
 397               		.loc 1 174 7 is_stmt 1 view .LVU105
 398               		.loc 1 174 14 is_stmt 0 view .LVU106
 399 0048 E701      		movw r28,r14
 400               	.LVL31:
 401               		.loc 1 174 14 view .LVU107
 402 004a 00C0      		rjmp .L12
 403               	.LBE51:
 404               	.LBE52:
 405               	.LBE55:
 406               		.cfi_endproc
 407               	.LFE100:
 409               		.section	.text.chMsgWaitTimeoutS,"ax",@progbits
 410               	.global	chMsgWaitTimeoutS
 412               	chMsgWaitTimeoutS:
 413               	.LVL32:
 414               	.LFB101:
 165:../../os/nil/src/chmsg.c ****   thread_t *tp;
 415               		.loc 1 165 52 is_stmt 1 view -0
 416               		.cfi_startproc
 165:../../os/nil/src/chmsg.c ****   thread_t *tp;
 417               		.loc 1 165 52 is_stmt 0 view .LVU109
 418 0000 EF92      		push r14
 419               	.LCFI10:
 420               		.cfi_def_cfa_offset 3
 421               		.cfi_offset 14, -2
 422 0002 FF92      		push r15
 423               	.LCFI11:
 424               		.cfi_def_cfa_offset 4
 425               		.cfi_offset 15, -3
 426 0004 0F93      		push r16
 427               	.LCFI12:
 428               		.cfi_def_cfa_offset 5
 429               		.cfi_offset 16, -4
 430 0006 1F93      		push r17
 431               	.LCFI13:
 432               		.cfi_def_cfa_offset 6
 433               		.cfi_offset 17, -5
 434 0008 CF93      		push r28
 435               	.LCFI14:
 436               		.cfi_def_cfa_offset 7
 437               		.cfi_offset 28, -6
 438 000a DF93      		push r29
 439               	.LCFI15:
 440               		.cfi_def_cfa_offset 8
 441               		.cfi_offset 29, -7
 442               	/* prologue: function */
 443               	/* frame size = 0 */
 444               	/* stack size = 6 */
 445               	.L__stack_usage = 6
 446 000c 8C01      		movw r16,r24
 166:../../os/nil/src/chmsg.c **** 
 447               		.loc 1 166 3 is_stmt 1 view .LVU110
 168:../../os/nil/src/chmsg.c **** 
 448               		.loc 1 168 21 view .LVU111
 170:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 449               		.loc 1 170 3 view .LVU112
 170:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 450               		.loc 1 170 8 is_stmt 0 view .LVU113
 451 000e 6091 0000 		lds r22,nil
 452 0012 7091 0000 		lds r23,nil+1
 453 0016 88E0      		ldi r24,lo8(8)
 454               	.LVL33:
 170:../../os/nil/src/chmsg.c ****   if (tp == NULL) {
 455               		.loc 1 170 8 view .LVU114
 456 0018 0E94 0000 		call nil_find_thread
 457               	.LVL34:
 458 001c EC01      		movw r28,r24
 459               	.LVL35:
 171:../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 460               		.loc 1 171 3 is_stmt 1 view .LVU115
 171:../../os/nil/src/chmsg.c ****     msg_t msg = chSchGoSleepTimeoutS(NIL_STATE_WTMSG, timeout);
 461               		.loc 1 171 6 is_stmt 0 view .LVU116
 462 001e 892B      		or r24,r25
 463 0020 01F0      		breq .L22
 464               	.LVL36:
 465               	.L17:
 175:../../os/nil/src/chmsg.c ****     }
 176:../../os/nil/src/chmsg.c ****   }
 177:../../os/nil/src/chmsg.c **** 
 178:../../os/nil/src/chmsg.c ****   return tp;
 179:../../os/nil/src/chmsg.c **** }
 466               		.loc 1 179 1 view .LVU117
 467 0022 CE01      		movw r24,r28
 468               	/* epilogue start */
 469 0024 DF91      		pop r29
 470 0026 CF91      		pop r28
 471 0028 1F91      		pop r17
 472 002a 0F91      		pop r16
 473               	.LVL37:
 474               		.loc 1 179 1 view .LVU118
 475 002c FF90      		pop r15
 476 002e EF90      		pop r14
 477 0030 0895      		ret
 478               	.LVL38:
 479               	.L22:
 480               	.LBB56:
 172:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 481               		.loc 1 172 5 is_stmt 1 view .LVU119
 172:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 482               		.loc 1 172 17 is_stmt 0 view .LVU120
 483 0032 B801      		movw r22,r16
 484 0034 8AE0      		ldi r24,lo8(10)
 485               	.LVL39:
 172:../../os/nil/src/chmsg.c ****     if (msg != MSG_TIMEOUT) {
 486               		.loc 1 172 17 view .LVU121
 487 0036 0E94 0000 		call chSchGoSleepTimeoutS
 488               	.LVL40:
 489 003a 7C01      		movw r14,r24
 490               	.LVL41:
 173:../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 491               		.loc 1 173 5 is_stmt 1 view .LVU122
 173:../../os/nil/src/chmsg.c ****       return (thread_t *)msg;
 492               		.loc 1 173 8 is_stmt 0 view .LVU123
 493 003c 8FEF      		ldi r24,-1
 494 003e E816      		cp r14,r24
 495 0040 F806      		cpc r15,r24
 496 0042 01F0      		breq .L17
 174:../../os/nil/src/chmsg.c ****     }
 497               		.loc 1 174 7 is_stmt 1 view .LVU124
 174:../../os/nil/src/chmsg.c ****     }
 498               		.loc 1 174 14 is_stmt 0 view .LVU125
 499 0044 E701      		movw r28,r14
 500               	.LVL42:
 174:../../os/nil/src/chmsg.c ****     }
 501               		.loc 1 174 14 view .LVU126
 502 0046 00C0      		rjmp .L17
 503               	.LBE56:
 504               		.cfi_endproc
 505               	.LFE101:
 507               		.section	.text.chMsgRelease,"ax",@progbits
 508               	.global	chMsgRelease
 510               	chMsgRelease:
 511               	.LVL43:
 512               	.LFB102:
 180:../../os/nil/src/chmsg.c **** 
 181:../../os/nil/src/chmsg.c **** /**
 182:../../os/nil/src/chmsg.c ****  * @brief   Releases a sender thread specifying a response message.
 183:../../os/nil/src/chmsg.c ****  * @pre     Invoke this function only after a message has been received
 184:../../os/nil/src/chmsg.c ****  *          using @p chMsgWait().
 185:../../os/nil/src/chmsg.c ****  *
 186:../../os/nil/src/chmsg.c ****  * @param[in] tp        pointer to the thread
 187:../../os/nil/src/chmsg.c ****  * @param[in] msg       message to be returned to the sender
 188:../../os/nil/src/chmsg.c ****  *
 189:../../os/nil/src/chmsg.c ****  * @api
 190:../../os/nil/src/chmsg.c ****  */
 191:../../os/nil/src/chmsg.c **** void chMsgRelease(thread_t *tp, msg_t msg) {
 513               		.loc 1 191 44 is_stmt 1 view -0
 514               		.cfi_startproc
 515               	/* prologue: function */
 516               	/* frame size = 0 */
 517               	/* stack size = 0 */
 518               	.L__stack_usage = 0
 192:../../os/nil/src/chmsg.c **** 
 193:../../os/nil/src/chmsg.c ****   chSysLock();
 519               		.loc 1 193 3 view .LVU128
 520               	.LBB57:
 521               	.LBI57:
 428:../../os/common/ports/AVR/chcore.h **** 
 522               		.loc 2 428 20 view .LVU129
 523               	.LBB58:
 430:../../os/common/ports/AVR/chcore.h **** }
 524               		.loc 2 430 3 view .LVU130
 525               	/* #APP */
 526               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 527 0000 F894      		cli
 528               	 ;  0 "" 2
 529               	/* #NOAPP */
 530               	.LBE58:
 531               	.LBE57:
 532               		.loc 1 193 3 discriminator 1 view .LVU131
 533               		.loc 1 193 14 discriminator 1 view .LVU132
 194:../../os/nil/src/chmsg.c ****   chDbgAssert(tp->state == NIL_STATE_SNDMSGQ, "invalid state");
 534               		.loc 1 194 3 view .LVU133
 535               		.loc 1 194 3 view .LVU134
 536               		.loc 1 194 3 discriminator 5 view .LVU135
 195:../../os/nil/src/chmsg.c ****   chMsgReleaseS(tp, msg);
 537               		.loc 1 195 3 view .LVU136
 538               		.loc 1 195 3 view .LVU137
 539 0002 0E94 0000 		call chSchReadyI
 540               	.LVL44:
 541               		.loc 1 195 3 discriminator 1 view .LVU138
 542 0006 0E94 0000 		call chSchRescheduleS
 543               	.LVL45:
 544               		.loc 1 195 3 discriminator 2 view .LVU139
 196:../../os/nil/src/chmsg.c ****   chSysUnlock();
 545               		.loc 1 196 3 view .LVU140
 546               		.loc 1 196 3 view .LVU141
 547               	.LBB59:
 548               	.LBI59:
 438:../../os/common/ports/AVR/chcore.h **** 
 549               		.loc 2 438 20 view .LVU142
 550               	.LBB60:
 551               		.loc 2 440 3 view .LVU143
 552               	/* #APP */
 553               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 554 000a 7894      		sei
 555               	 ;  0 "" 2
 556               	/* #NOAPP */
 557               	.LBE60:
 558               	.LBE59:
 559               		.loc 1 196 16 discriminator 1 view .LVU144
 560               	/* epilogue start */
 197:../../os/nil/src/chmsg.c **** }
 561               		.loc 1 197 1 is_stmt 0 view .LVU145
 562 000c 0895      		ret
 563               		.cfi_endproc
 564               	.LFE102:
 566               		.text
 567               	.Letext0:
 568               		.file 3 "/usr/avr/include/stdint.h"
 569               		.file 4 "../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 570               		.file 5 "../../os/nil/include/ch.h"
DEFINED SYMBOLS
                            *ABS*:00000000 chmsg.c
     /tmp/cchXuBiO.s:2      *ABS*:0000003e __SP_H__
     /tmp/cchXuBiO.s:3      *ABS*:0000003d __SP_L__
     /tmp/cchXuBiO.s:4      *ABS*:0000003f __SREG__
     /tmp/cchXuBiO.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cchXuBiO.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cchXuBiO.s:14     .text.chMsgSend:00000000 chMsgSend
     /tmp/cchXuBiO.s:17     .text.chMsgSend:00000000 .Loc.0
     /tmp/cchXuBiO.s:18     .text.chMsgSend:00000000 L0
     /tmp/cchXuBiO.s:23     .text.chMsgSend:00000000 .Loc.1
     /tmp/cchXuBiO.s:25     .text.chMsgSend:00000002 .Loc.2
     /tmp/cchXuBiO.s:26     .text.chMsgSend:00000002 .Loc.3
     /tmp/cchXuBiO.s:30     .text.chMsgSend:0000000a .Loc.4
     /tmp/cchXuBiO.s:31     .text.chMsgSend:0000000a .Loc.5
     /tmp/cchXuBiO.s:32     .text.chMsgSend:0000000a .Loc.6
     /tmp/cchXuBiO.s:33     .text.chMsgSend:0000000a .Loc.7
     /tmp/cchXuBiO.s:37     .text.chMsgSend:0000000a .Loc.8
     /tmp/cchXuBiO.s:39     .text.chMsgSend:0000000a .Loc.9
     /tmp/cchXuBiO.s:47     .text.chMsgSend:0000000c .Loc.10
     /tmp/cchXuBiO.s:48     .text.chMsgSend:0000000c .Loc.11
     /tmp/cchXuBiO.s:49     .text.chMsgSend:0000000c .Loc.12
     /tmp/cchXuBiO.s:50     .text.chMsgSend:0000000c .Loc.13
     /tmp/cchXuBiO.s:57     .text.chMsgSend:00000018 .Loc.14
     /tmp/cchXuBiO.s:58     .text.chMsgSend:00000018 .Loc.15
     /tmp/cchXuBiO.s:63     .text.chMsgSend:00000020 .Loc.16
     /tmp/cchXuBiO.s:64     .text.chMsgSend:00000020 .Loc.17
     /tmp/cchXuBiO.s:67     .text.chMsgSend:00000022 .Loc.18
     /tmp/cchXuBiO.s:70     .text.chMsgSend:00000026 .Loc.19
     /tmp/cchXuBiO.s:71     .text.chMsgSend:00000026 .Loc.20
     /tmp/cchXuBiO.s:75     .text.chMsgSend:0000002a .Loc.21
     /tmp/cchXuBiO.s:79     .text.chMsgSend:00000030 .Loc.22
     /tmp/cchXuBiO.s:80     .text.chMsgSend:00000030 .Loc.23
     /tmp/cchXuBiO.s:83     .text.chMsgSend:00000030 .Loc.24
     /tmp/cchXuBiO.s:85     .text.chMsgSend:00000030 .Loc.25
     /tmp/cchXuBiO.s:93     .text.chMsgSend:00000032 .Loc.26
     /tmp/cchXuBiO.s:94     .text.chMsgSend:00000032 .Loc.27
     /tmp/cchXuBiO.s:96     .text.chMsgSend:00000032 .Loc.28
     /tmp/cchXuBiO.s:100    .text.chMsgSend:00000034 .Loc.29
     /tmp/cchXuBiO.s:101    .text.chMsgSend:00000034 .Loc.30
     /tmp/cchXuBiO.s:104    .text.chMsgSend:00000036 .Loc.31
     /tmp/cchXuBiO.s:108    .text.chMsgSend:0000003c .Loc.32
     /tmp/cchXuBiO.s:109    .text.chMsgSend:0000003c .Loc.33
     /tmp/cchXuBiO.s:115    .text.chMsgSend:00000046 .Loc.34
     /tmp/cchXuBiO.s:116    .text.chMsgSend:00000046 .Loc.35
     /tmp/cchXuBiO.s:118    .text.chMsgSend:00000046 .Loc.36
     /tmp/cchXuBiO.s:120    .text.chMsgSend:00000046 .Loc.37
     /tmp/cchXuBiO.s:128    .text.chMsgSend:00000048 .Loc.38
     /tmp/cchXuBiO.s:129    .text.chMsgSend:00000048 .Loc.39
     /tmp/cchXuBiO.s:131    .text.chMsgSend:00000048 .Loc.40
     /tmp/cchXuBiO.s:133    .text.chMsgSend:0000004a L0
     /tmp/cchXuBiO.s:139    .text.chMsgWait:00000000 chMsgWait
     /tmp/cchXuBiO.s:141    .text.chMsgWait:00000000 .Loc.41
     /tmp/cchXuBiO.s:142    .text.chMsgWait:00000000 L0
     /tmp/cchXuBiO.s:163    .text.chMsgWait:00000008 .Loc.42
     /tmp/cchXuBiO.s:164    .text.chMsgWait:00000008 .Loc.43
     /tmp/cchXuBiO.s:167    .text.chMsgWait:00000008 .Loc.44
     /tmp/cchXuBiO.s:169    .text.chMsgWait:00000008 .Loc.45
     /tmp/cchXuBiO.s:177    .text.chMsgWait:0000000a .Loc.46
     /tmp/cchXuBiO.s:178    .text.chMsgWait:0000000a .Loc.47
     /tmp/cchXuBiO.s:179    .text.chMsgWait:0000000a .Loc.48
     /tmp/cchXuBiO.s:183    .text.chMsgWait:0000000a .Loc.49
     /tmp/cchXuBiO.s:185    .text.chMsgWait:0000000a .Loc.50
     /tmp/cchXuBiO.s:186    .text.chMsgWait:0000000a .Loc.51
     /tmp/cchXuBiO.s:187    .text.chMsgWait:0000000a .Loc.52
     /tmp/cchXuBiO.s:188    .text.chMsgWait:0000000a .Loc.53
     /tmp/cchXuBiO.s:196    .text.chMsgWait:0000001a .Loc.54
     /tmp/cchXuBiO.s:197    .text.chMsgWait:0000001a .Loc.55
     /tmp/cchXuBiO.s:202    .text.chMsgWait:0000001e .Loc.56
     /tmp/cchXuBiO.s:205    .text.chMsgWait:0000001e .Loc.57
     /tmp/cchXuBiO.s:206    .text.chMsgWait:0000001e .Loc.58
     /tmp/cchXuBiO.s:209    .text.chMsgWait:0000001e .Loc.59
     /tmp/cchXuBiO.s:211    .text.chMsgWait:0000001e .Loc.60
     /tmp/cchXuBiO.s:219    .text.chMsgWait:00000020 .Loc.61
     /tmp/cchXuBiO.s:220    .text.chMsgWait:00000020 .Loc.62
     /tmp/cchXuBiO.s:221    .text.chMsgWait:00000020 .Loc.63
     /tmp/cchXuBiO.s:227    .text.chMsgWait:00000026 .Loc.64
     /tmp/cchXuBiO.s:236    .text.chMsgWait:0000002c .Loc.65
     /tmp/cchXuBiO.s:237    .text.chMsgWait:0000002c .Loc.66
     /tmp/cchXuBiO.s:242    .text.chMsgWait:00000032 .Loc.67
     /tmp/cchXuBiO.s:247    .text.chMsgWait:00000038 .Loc.68
     /tmp/cchXuBiO.s:248    .text.chMsgWait:00000038 .Loc.69
     /tmp/cchXuBiO.s:252    .text.chMsgWait:0000003e .Loc.70
     /tmp/cchXuBiO.s:253    .text.chMsgWait:0000003e .Loc.71
     /tmp/cchXuBiO.s:256    .text.chMsgWait:00000040 .Loc.72
     /tmp/cchXuBiO.s:261    .text.chMsgWait:00000042 L0
     /tmp/cchXuBiO.s:267    .text.chMsgWaitTimeout:00000000 chMsgWaitTimeout
     /tmp/cchXuBiO.s:270    .text.chMsgWaitTimeout:00000000 .Loc.73
     /tmp/cchXuBiO.s:271    .text.chMsgWaitTimeout:00000000 L0
     /tmp/cchXuBiO.s:272    .text.chMsgWaitTimeout:00000000 .Loc.74
     /tmp/cchXuBiO.s:302    .text.chMsgWaitTimeout:0000000e .Loc.75
     /tmp/cchXuBiO.s:303    .text.chMsgWaitTimeout:0000000e .Loc.76
     /tmp/cchXuBiO.s:306    .text.chMsgWaitTimeout:0000000e .Loc.77
     /tmp/cchXuBiO.s:308    .text.chMsgWaitTimeout:0000000e .Loc.78
     /tmp/cchXuBiO.s:316    .text.chMsgWaitTimeout:00000010 .Loc.79
     /tmp/cchXuBiO.s:317    .text.chMsgWaitTimeout:00000010 .Loc.80
     /tmp/cchXuBiO.s:318    .text.chMsgWaitTimeout:00000010 .Loc.81
     /tmp/cchXuBiO.s:322    .text.chMsgWaitTimeout:00000010 .Loc.82
     /tmp/cchXuBiO.s:324    .text.chMsgWaitTimeout:00000010 .Loc.83
     /tmp/cchXuBiO.s:325    .text.chMsgWaitTimeout:00000010 .Loc.84
     /tmp/cchXuBiO.s:326    .text.chMsgWaitTimeout:00000010 .Loc.85
     /tmp/cchXuBiO.s:327    .text.chMsgWaitTimeout:00000010 .Loc.86
     /tmp/cchXuBiO.s:332    .text.chMsgWaitTimeout:0000001a .Loc.87
     /tmp/cchXuBiO.s:337    .text.chMsgWaitTimeout:00000020 .Loc.88
     /tmp/cchXuBiO.s:338    .text.chMsgWaitTimeout:00000020 .Loc.89
     /tmp/cchXuBiO.s:343    .text.chMsgWaitTimeout:00000024 .Loc.90
     /tmp/cchXuBiO.s:346    .text.chMsgWaitTimeout:00000024 .Loc.91
     /tmp/cchXuBiO.s:347    .text.chMsgWaitTimeout:00000024 .Loc.92
     /tmp/cchXuBiO.s:350    .text.chMsgWaitTimeout:00000024 .Loc.93
     /tmp/cchXuBiO.s:352    .text.chMsgWaitTimeout:00000024 .Loc.94
     /tmp/cchXuBiO.s:360    .text.chMsgWaitTimeout:00000026 .Loc.95
     /tmp/cchXuBiO.s:361    .text.chMsgWaitTimeout:00000026 .Loc.96
     /tmp/cchXuBiO.s:362    .text.chMsgWaitTimeout:00000026 .Loc.97
     /tmp/cchXuBiO.s:368    .text.chMsgWaitTimeout:0000002c .Loc.98
     /tmp/cchXuBiO.s:372    .text.chMsgWaitTimeout:00000030 .Loc.99
     /tmp/cchXuBiO.s:381    .text.chMsgWaitTimeout:00000036 .Loc.100
     /tmp/cchXuBiO.s:382    .text.chMsgWaitTimeout:00000036 .Loc.101
     /tmp/cchXuBiO.s:386    .text.chMsgWaitTimeout:0000003a .Loc.102
     /tmp/cchXuBiO.s:391    .text.chMsgWaitTimeout:00000040 .Loc.103
     /tmp/cchXuBiO.s:392    .text.chMsgWaitTimeout:00000040 .Loc.104
     /tmp/cchXuBiO.s:397    .text.chMsgWaitTimeout:00000048 .Loc.105
     /tmp/cchXuBiO.s:398    .text.chMsgWaitTimeout:00000048 .Loc.106
     /tmp/cchXuBiO.s:401    .text.chMsgWaitTimeout:0000004a .Loc.107
     /tmp/cchXuBiO.s:406    .text.chMsgWaitTimeout:0000004c L0
     /tmp/cchXuBiO.s:412    .text.chMsgWaitTimeoutS:00000000 chMsgWaitTimeoutS
     /tmp/cchXuBiO.s:415    .text.chMsgWaitTimeoutS:00000000 .Loc.108
     /tmp/cchXuBiO.s:416    .text.chMsgWaitTimeoutS:00000000 L0
     /tmp/cchXuBiO.s:417    .text.chMsgWaitTimeoutS:00000000 .Loc.109
     /tmp/cchXuBiO.s:447    .text.chMsgWaitTimeoutS:0000000e .Loc.110
     /tmp/cchXuBiO.s:448    .text.chMsgWaitTimeoutS:0000000e .Loc.111
     /tmp/cchXuBiO.s:449    .text.chMsgWaitTimeoutS:0000000e .Loc.112
     /tmp/cchXuBiO.s:450    .text.chMsgWaitTimeoutS:0000000e .Loc.113
     /tmp/cchXuBiO.s:455    .text.chMsgWaitTimeoutS:00000018 .Loc.114
     /tmp/cchXuBiO.s:460    .text.chMsgWaitTimeoutS:0000001e .Loc.115
     /tmp/cchXuBiO.s:461    .text.chMsgWaitTimeoutS:0000001e .Loc.116
     /tmp/cchXuBiO.s:466    .text.chMsgWaitTimeoutS:00000022 .Loc.117
     /tmp/cchXuBiO.s:474    .text.chMsgWaitTimeoutS:0000002c .Loc.118
     /tmp/cchXuBiO.s:481    .text.chMsgWaitTimeoutS:00000032 .Loc.119
     /tmp/cchXuBiO.s:482    .text.chMsgWaitTimeoutS:00000032 .Loc.120
     /tmp/cchXuBiO.s:486    .text.chMsgWaitTimeoutS:00000036 .Loc.121
     /tmp/cchXuBiO.s:491    .text.chMsgWaitTimeoutS:0000003c .Loc.122
     /tmp/cchXuBiO.s:492    .text.chMsgWaitTimeoutS:0000003c .Loc.123
     /tmp/cchXuBiO.s:497    .text.chMsgWaitTimeoutS:00000044 .Loc.124
     /tmp/cchXuBiO.s:498    .text.chMsgWaitTimeoutS:00000044 .Loc.125
     /tmp/cchXuBiO.s:501    .text.chMsgWaitTimeoutS:00000046 .Loc.126
     /tmp/cchXuBiO.s:504    .text.chMsgWaitTimeoutS:00000048 L0
     /tmp/cchXuBiO.s:510    .text.chMsgRelease:00000000 chMsgRelease
     /tmp/cchXuBiO.s:513    .text.chMsgRelease:00000000 .Loc.127
     /tmp/cchXuBiO.s:514    .text.chMsgRelease:00000000 L0
     /tmp/cchXuBiO.s:519    .text.chMsgRelease:00000000 .Loc.128
     /tmp/cchXuBiO.s:522    .text.chMsgRelease:00000000 .Loc.129
     /tmp/cchXuBiO.s:524    .text.chMsgRelease:00000000 .Loc.130
     /tmp/cchXuBiO.s:532    .text.chMsgRelease:00000002 .Loc.131
     /tmp/cchXuBiO.s:533    .text.chMsgRelease:00000002 .Loc.132
     /tmp/cchXuBiO.s:534    .text.chMsgRelease:00000002 .Loc.133
     /tmp/cchXuBiO.s:535    .text.chMsgRelease:00000002 .Loc.134
     /tmp/cchXuBiO.s:536    .text.chMsgRelease:00000002 .Loc.135
     /tmp/cchXuBiO.s:537    .text.chMsgRelease:00000002 .Loc.136
     /tmp/cchXuBiO.s:538    .text.chMsgRelease:00000002 .Loc.137
     /tmp/cchXuBiO.s:541    .text.chMsgRelease:00000006 .Loc.138
     /tmp/cchXuBiO.s:544    .text.chMsgRelease:0000000a .Loc.139
     /tmp/cchXuBiO.s:545    .text.chMsgRelease:0000000a .Loc.140
     /tmp/cchXuBiO.s:546    .text.chMsgRelease:0000000a .Loc.141
     /tmp/cchXuBiO.s:549    .text.chMsgRelease:0000000a .Loc.142
     /tmp/cchXuBiO.s:551    .text.chMsgRelease:0000000a .Loc.143
     /tmp/cchXuBiO.s:559    .text.chMsgRelease:0000000c .Loc.144
     /tmp/cchXuBiO.s:561    .text.chMsgRelease:0000000c .Loc.145
     /tmp/cchXuBiO.s:563    .text.chMsgRelease:0000000e L0
     /tmp/cchXuBiO.s:136    .text.chMsgSend:0000004a L0
     /tmp/cchXuBiO.s:264    .text.chMsgWait:00000042 L0
     /tmp/cchXuBiO.s:409    .text.chMsgWaitTimeout:0000004c L0
     /tmp/cchXuBiO.s:507    .text.chMsgWaitTimeoutS:00000048 L0
     /tmp/cchXuBiO.s:566    .text.chMsgRelease:0000000e L0
                     .debug_frame:00000000 L0
     /tmp/cchXuBiO.s:99     .text.chMsgSend:00000034 .L4
     /tmp/cchXuBiO.s:232    .text.chMsgWait:0000002c .L10
     /tmp/cchXuBiO.s:201    .text.chMsgWait:0000001e .L6
     /tmp/cchXuBiO.s:377    .text.chMsgWaitTimeout:00000036 .L16
     /tmp/cchXuBiO.s:342    .text.chMsgWaitTimeout:00000024 .L12
     /tmp/cchXuBiO.s:479    .text.chMsgWaitTimeoutS:00000032 .L22
     /tmp/cchXuBiO.s:465    .text.chMsgWaitTimeoutS:00000022 .L17
     /tmp/cchXuBiO.s:1763   .debug_abbrev:00000000 .Ldebug_abbrev0
     /tmp/cchXuBiO.s:3218   .debug_ranges:00000000 .Ldebug_ranges0
     /tmp/cchXuBiO.s:3250   .debug_line:00000000 .Ldebug_line0
     /tmp/cchXuBiO.s:512    .text.chMsgRelease:00000000 .LFB102
     /tmp/cchXuBiO.s:564    .text.chMsgRelease:0000000e .LFE102
     /tmp/cchXuBiO.s:2492   .debug_loc:00000004 .LLST18
     /tmp/cchXuBiO.s:2487   .debug_loc:00000000 .LVUS18
     /tmp/cchXuBiO.s:2522   .debug_loc:00000034 .LLST19
     /tmp/cchXuBiO.s:2517   .debug_loc:00000030 .LVUS19
     /tmp/cchXuBiO.s:521    .text.chMsgRelease:00000000 .LBI57
     /tmp/cchXuBiO.s:520    .text.chMsgRelease:00000000 .LBB57
     /tmp/cchXuBiO.s:531    .text.chMsgRelease:00000002 .LBE57
     /tmp/cchXuBiO.s:548    .text.chMsgRelease:0000000a .LBI59
     /tmp/cchXuBiO.s:547    .text.chMsgRelease:0000000a .LBB59
     /tmp/cchXuBiO.s:558    .text.chMsgRelease:0000000c .LBE59
     /tmp/cchXuBiO.s:540    .text.chMsgRelease:00000006 .LVL44
     /tmp/cchXuBiO.s:543    .text.chMsgRelease:0000000a .LVL45
     /tmp/cchXuBiO.s:488    .text.chMsgWaitTimeoutS:0000003a .LVL40
     /tmp/cchXuBiO.s:269    .text.chMsgWaitTimeout:00000000 .LFB100
     /tmp/cchXuBiO.s:407    .text.chMsgWaitTimeout:0000004c .LFE100
     /tmp/cchXuBiO.s:2547   .debug_loc:00000060 .LLST8
     /tmp/cchXuBiO.s:2601   .debug_loc:000000cb .LLST9
     /tmp/cchXuBiO.s:2592   .debug_loc:000000c3 .LVUS9
     /tmp/cchXuBiO.s:2649   .debug_loc:0000011b .LLST10
     /tmp/cchXuBiO.s:2644   .debug_loc:00000117 .LVUS10
     /tmp/cchXuBiO.s:305    .text.chMsgWaitTimeout:0000000e .LBI47
     /tmp/cchXuBiO.s:304    .text.chMsgWaitTimeout:0000000e .LBB47
     /tmp/cchXuBiO.s:315    .text.chMsgWaitTimeout:00000010 .LBE47
     /tmp/cchXuBiO.s:321    .text.chMsgWaitTimeout:00000010 .LBI49
     /tmp/cchXuBiO.s:2675   .debug_loc:00000147 .LLST11
     /tmp/cchXuBiO.s:2670   .debug_loc:00000143 .LVUS11
     /tmp/cchXuBiO.s:2703   .debug_loc:00000175 .LLST12
     /tmp/cchXuBiO.s:2696   .debug_loc:0000016f .LVUS12
     /tmp/cchXuBiO.s:380    .text.chMsgWaitTimeout:00000036 .LBB51
     /tmp/cchXuBiO.s:403    .text.chMsgWaitTimeout:0000004c .LBE51
     /tmp/cchXuBiO.s:2736   .debug_loc:000001af .LLST13
     /tmp/cchXuBiO.s:2733   .debug_loc:000001ad .LVUS13
     /tmp/cchXuBiO.s:388    .text.chMsgWaitTimeout:0000003e .LVL29
     /tmp/cchXuBiO.s:334    .text.chMsgWaitTimeout:0000001e .LVL22
     /tmp/cchXuBiO.s:349    .text.chMsgWaitTimeout:00000024 .LBI53
     /tmp/cchXuBiO.s:348    .text.chMsgWaitTimeout:00000024 .LBB53
     /tmp/cchXuBiO.s:359    .text.chMsgWaitTimeout:00000026 .LBE53
     /tmp/cchXuBiO.s:140    .text.chMsgWait:00000000 .LFB99
     /tmp/cchXuBiO.s:262    .text.chMsgWait:00000042 .LFE99
     /tmp/cchXuBiO.s:2748   .debug_loc:000001c7 .LLST3
     /tmp/cchXuBiO.s:2786   .debug_loc:00000214 .LLST4
     /tmp/cchXuBiO.s:2781   .debug_loc:00000210 .LVUS4
     /tmp/cchXuBiO.s:166    .text.chMsgWait:00000008 .LBI31
     /tmp/cchXuBiO.s:165    .text.chMsgWait:00000008 .LBB31
     /tmp/cchXuBiO.s:176    .text.chMsgWait:0000000a .LBE31
     /tmp/cchXuBiO.s:182    .text.chMsgWait:0000000a .LBI33
     /tmp/cchXuBiO.s:2812   .debug_loc:00000240 .LLST5
     /tmp/cchXuBiO.s:2807   .debug_loc:0000023c .LVUS5
     /tmp/cchXuBiO.s:2832   .debug_loc:00000266 .LLST6
     /tmp/cchXuBiO.s:2825   .debug_loc:00000260 .LVUS6
     /tmp/cchXuBiO.s:235    .text.chMsgWait:0000002c .LBB35
     /tmp/cchXuBiO.s:258    .text.chMsgWait:00000042 .LBE35
     /tmp/cchXuBiO.s:2865   .debug_loc:000002a0 .LLST7
     /tmp/cchXuBiO.s:2862   .debug_loc:0000029e .LVUS7
     /tmp/cchXuBiO.s:244    .text.chMsgWait:00000036 .LVL16
     /tmp/cchXuBiO.s:193    .text.chMsgWait:00000018 .LVL10
     /tmp/cchXuBiO.s:208    .text.chMsgWait:0000001e .LBI37
     /tmp/cchXuBiO.s:207    .text.chMsgWait:0000001e .LBB37
     /tmp/cchXuBiO.s:218    .text.chMsgWait:00000020 .LBE37
     /tmp/cchXuBiO.s:16     .text.chMsgSend:00000000 .LFB98
     /tmp/cchXuBiO.s:134    .text.chMsgSend:0000004a .LFE98
     /tmp/cchXuBiO.s:2888   .debug_loc:000002c2 .LLST0
     /tmp/cchXuBiO.s:2877   .debug_loc:000002b8 .LVUS0
     /tmp/cchXuBiO.s:2957   .debug_loc:0000032e .LLST1
     /tmp/cchXuBiO.s:2944   .debug_loc:00000322 .LVUS1
     /tmp/cchXuBiO.s:3027   .debug_loc:000003a2 .LLST2
     /tmp/cchXuBiO.s:3022   .debug_loc:0000039e .LVUS2
     /tmp/cchXuBiO.s:35     .text.chMsgSend:0000000a .LBI18
     /tmp/cchXuBiO.s:34     .text.chMsgSend:0000000a .LBB18
     /tmp/cchXuBiO.s:46     .text.chMsgSend:0000000c .LBE18
     /tmp/cchXuBiO.s:82     .text.chMsgSend:00000030 .LBI20
     /tmp/cchXuBiO.s:78     .text.chMsgSend:00000030 .LVL4
     /tmp/cchXuBiO.s:107    .text.chMsgSend:0000003c .LVL7
     /tmp/cchXuBiO.s:114    .text.chMsgSend:00000046 .LVL8
     /tmp/cchXuBiO.s:414    .text.chMsgWaitTimeoutS:00000000 .LFB101
     /tmp/cchXuBiO.s:505    .text.chMsgWaitTimeoutS:00000048 .LFE101
     /tmp/cchXuBiO.s:3048   .debug_loc:000003ca .LLST14
     /tmp/cchXuBiO.s:3102   .debug_loc:00000435 .LLST15
     /tmp/cchXuBiO.s:3093   .debug_loc:0000042d .LVUS15
     /tmp/cchXuBiO.s:3152   .debug_loc:00000487 .LLST16
     /tmp/cchXuBiO.s:3145   .debug_loc:00000481 .LVUS16
     /tmp/cchXuBiO.s:480    .text.chMsgWaitTimeoutS:00000032 .LBB56
     /tmp/cchXuBiO.s:503    .text.chMsgWaitTimeoutS:00000048 .LBE56
     /tmp/cchXuBiO.s:3185   .debug_loc:000004c1 .LLST17
     /tmp/cchXuBiO.s:3182   .debug_loc:000004bf .LVUS17
     /tmp/cchXuBiO.s:457    .text.chMsgWaitTimeoutS:0000001c .LVL34
     /tmp/cchXuBiO.s:511    .text.chMsgRelease:00000000 .LVL43
     /tmp/cchXuBiO.s:274    .text.chMsgWaitTimeout:00000002 .LCFI4
     /tmp/cchXuBiO.s:278    .text.chMsgWaitTimeout:00000004 .LCFI5
     /tmp/cchXuBiO.s:282    .text.chMsgWaitTimeout:00000006 .LCFI6
     /tmp/cchXuBiO.s:286    .text.chMsgWaitTimeout:00000008 .LCFI7
     /tmp/cchXuBiO.s:290    .text.chMsgWaitTimeout:0000000a .LCFI8
     /tmp/cchXuBiO.s:294    .text.chMsgWaitTimeout:0000000c .LCFI9
     /tmp/cchXuBiO.s:268    .text.chMsgWaitTimeout:00000000 .LVL19
     /tmp/cchXuBiO.s:331    .text.chMsgWaitTimeout:0000001a .LVL21
     /tmp/cchXuBiO.s:371    .text.chMsgWaitTimeout:00000030 .LVL26
     /tmp/cchXuBiO.s:376    .text.chMsgWaitTimeout:00000036 .LVL27
     /tmp/cchXuBiO.s:341    .text.chMsgWaitTimeout:00000024 .LVL24
     /tmp/cchXuBiO.s:367    .text.chMsgWaitTimeout:0000002c .LVL25
     /tmp/cchXuBiO.s:319    .text.chMsgWaitTimeout:00000010 .LVL20
     /tmp/cchXuBiO.s:336    .text.chMsgWaitTimeout:00000020 .LVL23
     /tmp/cchXuBiO.s:385    .text.chMsgWaitTimeout:0000003a .LVL28
     /tmp/cchXuBiO.s:400    .text.chMsgWaitTimeout:0000004a .LVL31
     /tmp/cchXuBiO.s:390    .text.chMsgWaitTimeout:00000040 .LVL30
     /tmp/cchXuBiO.s:144    .text.chMsgWait:00000002 .LCFI0
     /tmp/cchXuBiO.s:148    .text.chMsgWait:00000004 .LCFI1
     /tmp/cchXuBiO.s:152    .text.chMsgWait:00000006 .LCFI2
     /tmp/cchXuBiO.s:156    .text.chMsgWait:00000008 .LCFI3
     /tmp/cchXuBiO.s:200    .text.chMsgWait:0000001e .LVL12
     /tmp/cchXuBiO.s:226    .text.chMsgWait:00000026 .LVL13
     /tmp/cchXuBiO.s:231    .text.chMsgWait:0000002c .LVL14
     /tmp/cchXuBiO.s:180    .text.chMsgWait:0000000a .LVL9
     /tmp/cchXuBiO.s:195    .text.chMsgWait:0000001a .LVL11
     /tmp/cchXuBiO.s:241    .text.chMsgWait:00000032 .LVL15
     /tmp/cchXuBiO.s:255    .text.chMsgWait:00000040 .LVL18
     /tmp/cchXuBiO.s:246    .text.chMsgWait:00000038 .LVL17
     /tmp/cchXuBiO.s:15     .text.chMsgSend:00000000 .LVL0
     /tmp/cchXuBiO.s:66     .text.chMsgSend:00000022 .LVL2
     /tmp/cchXuBiO.s:98     .text.chMsgSend:00000034 .LVL5
     /tmp/cchXuBiO.s:74     .text.chMsgSend:0000002a .LVL3
     /tmp/cchXuBiO.s:103    .text.chMsgSend:00000036 .LVL6
     /tmp/cchXuBiO.s:29     .text.chMsgSend:0000000a .LVL1
     /tmp/cchXuBiO.s:419    .text.chMsgWaitTimeoutS:00000002 .LCFI10
     /tmp/cchXuBiO.s:423    .text.chMsgWaitTimeoutS:00000004 .LCFI11
     /tmp/cchXuBiO.s:427    .text.chMsgWaitTimeoutS:00000006 .LCFI12
     /tmp/cchXuBiO.s:431    .text.chMsgWaitTimeoutS:00000008 .LCFI13
     /tmp/cchXuBiO.s:435    .text.chMsgWaitTimeoutS:0000000a .LCFI14
     /tmp/cchXuBiO.s:439    .text.chMsgWaitTimeoutS:0000000c .LCFI15
     /tmp/cchXuBiO.s:413    .text.chMsgWaitTimeoutS:00000000 .LVL32
     /tmp/cchXuBiO.s:454    .text.chMsgWaitTimeoutS:00000018 .LVL33
     /tmp/cchXuBiO.s:473    .text.chMsgWaitTimeoutS:0000002c .LVL37
     /tmp/cchXuBiO.s:478    .text.chMsgWaitTimeoutS:00000032 .LVL38
     /tmp/cchXuBiO.s:459    .text.chMsgWaitTimeoutS:0000001e .LVL35
     /tmp/cchXuBiO.s:464    .text.chMsgWaitTimeoutS:00000022 .LVL36
     /tmp/cchXuBiO.s:485    .text.chMsgWaitTimeoutS:00000036 .LVL39
     /tmp/cchXuBiO.s:500    .text.chMsgWaitTimeoutS:00000046 .LVL42
     /tmp/cchXuBiO.s:490    .text.chMsgWaitTimeoutS:0000003c .LVL41
     /tmp/cchXuBiO.s:572    .debug_info:00000000 .Ldebug_info0
     /tmp/cchXuBiO.s:81     .text.chMsgSend:00000030 .LBB20
     /tmp/cchXuBiO.s:92     .text.chMsgSend:00000032 .LBE20
     /tmp/cchXuBiO.s:117    .text.chMsgSend:00000046 .LBB23
     /tmp/cchXuBiO.s:127    .text.chMsgSend:00000048 .LBE23
     /tmp/cchXuBiO.s:181    .text.chMsgWait:0000000a .LBB33
     /tmp/cchXuBiO.s:204    .text.chMsgWait:0000001e .LBE33
     /tmp/cchXuBiO.s:233    .text.chMsgWait:0000002c .LBB39
     /tmp/cchXuBiO.s:260    .text.chMsgWait:00000042 .LBE39
     /tmp/cchXuBiO.s:320    .text.chMsgWaitTimeout:00000010 .LBB49
     /tmp/cchXuBiO.s:345    .text.chMsgWaitTimeout:00000024 .LBE49
     /tmp/cchXuBiO.s:378    .text.chMsgWaitTimeout:00000036 .LBB55
     /tmp/cchXuBiO.s:405    .text.chMsgWaitTimeout:0000004c .LBE55

UNDEFINED SYMBOLS
nil
chSchGoSleepTimeoutS
chSchReadyI
nil_find_thread
chSchRescheduleS
