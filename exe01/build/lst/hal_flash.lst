   1               		.file	"hal_flash.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.file 1 "../../os/hal/src/hal_flash.c"
  11               		.section	.text.flashWaitErase,"ax",@progbits
  12               	.global	flashWaitErase
  14               	flashWaitErase:
  15               	.LVL0:
  16               	.LFB146:
   1:../../os/hal/src/hal_flash.c **** /*
   2:../../os/hal/src/hal_flash.c ****     ChibiOS - Copyright (C) 2006..2021 Giovanni Di Sirio
   3:../../os/hal/src/hal_flash.c **** 
   4:../../os/hal/src/hal_flash.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/src/hal_flash.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/src/hal_flash.c ****     You may obtain a copy of the License at
   7:../../os/hal/src/hal_flash.c **** 
   8:../../os/hal/src/hal_flash.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/src/hal_flash.c **** 
  10:../../os/hal/src/hal_flash.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/src/hal_flash.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/src/hal_flash.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/src/hal_flash.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/src/hal_flash.c ****     limitations under the License.
  15:../../os/hal/src/hal_flash.c **** */
  16:../../os/hal/src/hal_flash.c **** 
  17:../../os/hal/src/hal_flash.c **** /**
  18:../../os/hal/src/hal_flash.c ****  * @file    hal_flash.c
  19:../../os/hal/src/hal_flash.c ****  * @brief   Generic flash driver class code.
  20:../../os/hal/src/hal_flash.c ****  *
  21:../../os/hal/src/hal_flash.c ****  * @addtogroup HAL_FLASH
  22:../../os/hal/src/hal_flash.c ****  * @{
  23:../../os/hal/src/hal_flash.c ****  */
  24:../../os/hal/src/hal_flash.c **** 
  25:../../os/hal/src/hal_flash.c **** #include "hal.h"
  26:../../os/hal/src/hal_flash.c **** 
  27:../../os/hal/src/hal_flash.c **** #include "hal_flash.h"
  28:../../os/hal/src/hal_flash.c **** 
  29:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  30:../../os/hal/src/hal_flash.c **** /* Driver local definitions.                                                 */
  31:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  32:../../os/hal/src/hal_flash.c **** 
  33:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  34:../../os/hal/src/hal_flash.c **** /* Driver exported variables.                                                */
  35:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  36:../../os/hal/src/hal_flash.c **** 
  37:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  38:../../os/hal/src/hal_flash.c **** /* Driver local variables and types.                                         */
  39:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  40:../../os/hal/src/hal_flash.c **** 
  41:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  42:../../os/hal/src/hal_flash.c **** /* Driver local functions.                                                   */
  43:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  44:../../os/hal/src/hal_flash.c **** 
  45:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  46:../../os/hal/src/hal_flash.c **** /* Driver exported functions.                                                */
  47:../../os/hal/src/hal_flash.c **** /*===========================================================================*/
  48:../../os/hal/src/hal_flash.c **** 
  49:../../os/hal/src/hal_flash.c **** /**
  50:../../os/hal/src/hal_flash.c ****  * @brief   Waits until the current erase operation is finished.
  51:../../os/hal/src/hal_flash.c ****  *
  52:../../os/hal/src/hal_flash.c ****  * @param[in] devp      pointer to a @p BaseFlash object
  53:../../os/hal/src/hal_flash.c ****  *
  54:../../os/hal/src/hal_flash.c ****  * @return              An error code.
  55:../../os/hal/src/hal_flash.c ****  * @retval FLASH_NO_ERROR if there is no erase operation in progress.
  56:../../os/hal/src/hal_flash.c ****  * @retval FLASH_ERROR_ERASE if the erase operation failed.
  57:../../os/hal/src/hal_flash.c ****  * @retval FLASH_ERROR_HW_FAILURE if access to the memory failed.
  58:../../os/hal/src/hal_flash.c ****  *
  59:../../os/hal/src/hal_flash.c ****  * @api
  60:../../os/hal/src/hal_flash.c ****  */
  61:../../os/hal/src/hal_flash.c **** flash_error_t flashWaitErase(BaseFlash *devp) {
  17               		.loc 1 61 47 view -0
  18               		.cfi_startproc
  19               		.loc 1 61 47 is_stmt 0 view .LVU1
  20 0000 CF92      		push r12
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 12, -2
  24 0002 DF92      		push r13
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 13, -3
  28 0004 EF92      		push r14
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 14, -4
  32 0006 FF92      		push r15
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 15, -5
  36 0008 0F93      		push r16
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 16, -6
  40 000a 1F93      		push r17
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 17, -7
  44 000c CF93      		push r28
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 28, -8
  48 000e DF93      		push r29
  49               	.LCFI7:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 29, -9
  52 0010 00D0      		rcall .
  53 0012 00D0      		rcall .
  54               	.LCFI8:
  55               		.cfi_def_cfa_offset 14
  56 0014 CDB7      		in r28,__SP_L__
  57 0016 DEB7      		in r29,__SP_H__
  58               	.LCFI9:
  59               		.cfi_def_cfa_register 28
  60               	/* prologue: function */
  61               	/* frame size = 4 */
  62               	/* stack size = 12 */
  63               	.L__stack_usage = 12
  64 0018 8C01      		movw r16,r24
  65               	.LBB5:
  62:../../os/hal/src/hal_flash.c **** 
  63:../../os/hal/src/hal_flash.c ****   while (true) {
  64:../../os/hal/src/hal_flash.c ****     flash_error_t err;
  65:../../os/hal/src/hal_flash.c ****     uint32_t msec;
  66:../../os/hal/src/hal_flash.c **** 
  67:../../os/hal/src/hal_flash.c ****     /* Checking operation state.*/
  68:../../os/hal/src/hal_flash.c ****     err = flashQueryErase(devp, &msec);
  69:../../os/hal/src/hal_flash.c ****     if (err != FLASH_BUSY_ERASING) {
  70:../../os/hal/src/hal_flash.c ****       return err;
  71:../../os/hal/src/hal_flash.c ****     }
  72:../../os/hal/src/hal_flash.c **** 
  73:../../os/hal/src/hal_flash.c ****     /* Interval because nice waiting.*/
  74:../../os/hal/src/hal_flash.c ****     osalThreadSleepMilliseconds(msec);
  66               		.loc 1 74 5 view .LVU2
  67 001a 88EE      		ldi r24,lo8(-24)
  68 001c C82E      		mov r12,r24
  69 001e 83E0      		ldi r24,lo8(3)
  70 0020 D82E      		mov r13,r24
  71 0022 E12C      		mov r14,__zero_reg__
  72 0024 F12C      		mov r15,__zero_reg__
  73               	.LVL1:
  74               		.loc 1 74 5 view .LVU3
  75 0026 00C0      		rjmp .L3
  76               	.LVL2:
  77               	.L6:
  78               		.loc 1 74 5 is_stmt 1 view .LVU4
  79               	.LBB6:
  80               	.LBI6:
  81               		.file 2 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../os/hal/osal/rt-nil/osal.h **** }
 669:../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../os/hal/osal/rt-nil/osal.h **** 
 671:../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../os/hal/osal/rt-nil/osal.h **** 
 682:../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../os/hal/osal/rt-nil/osal.h **** }
 684:../../os/hal/osal/rt-nil/osal.h **** 
 685:../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../os/hal/osal/rt-nil/osal.h **** 
 700:../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../os/hal/osal/rt-nil/osal.h **** }
 702:../../os/hal/osal/rt-nil/osal.h **** 
 703:../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../os/hal/osal/rt-nil/osal.h **** 
 715:../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../os/hal/osal/rt-nil/osal.h **** }
 717:../../os/hal/osal/rt-nil/osal.h **** 
 718:../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../os/hal/osal/rt-nil/osal.h **** 
 729:../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../os/hal/osal/rt-nil/osal.h **** }
 731:../../os/hal/osal/rt-nil/osal.h **** 
 732:../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../os/hal/osal/rt-nil/osal.h **** 
 750:../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../os/hal/osal/rt-nil/osal.h **** }
 752:../../os/hal/osal/rt-nil/osal.h **** 
 753:../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../os/hal/osal/rt-nil/osal.h **** 
 767:../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../os/hal/osal/rt-nil/osal.h **** }
 769:../../os/hal/osal/rt-nil/osal.h **** 
 770:../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
  82               		.loc 2 782 20 view .LVU5
  83               	.LBB7:
 783:../../os/hal/osal/rt-nil/osal.h **** 
 784:../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
  84               		.loc 2 784 3 view .LVU6
  85               	.LBE7:
  86               	.LBE6:
  87               		.loc 1 74 5 is_stmt 0 view .LVU7
  88 0028 2981      		ldd r18,Y+1
  89 002a 3A81      		ldd r19,Y+2
  90 002c 4B81      		ldd r20,Y+3
  91 002e 5C81      		ldd r21,Y+4
  92               	.LVL3:
  93               		.loc 1 74 5 view .LVU8
  94 0030 A8E0      		ldi r26,lo8(8)
  95 0032 BDE3      		ldi r27,lo8(61)
  96 0034 0E94 0000 		call __muluhisi3
  97 0038 6951      		subi r22,25
  98 003a 7C4F      		sbci r23,-4
  99 003c 8F4F      		sbci r24,-1
 100 003e 9F4F      		sbci r25,-1
 101 0040 A701      		movw r20,r14
 102 0042 9601      		movw r18,r12
 103               	.LVL4:
 104               		.loc 1 74 5 view .LVU9
 105 0044 0E94 0000 		call __udivmodsi4
 106               	.LBB9:
 107               	.LBB8:
 108               		.loc 2 784 3 view .LVU10
 109 0048 C901      		movw r24,r18
 110               	.LVL5:
 111               		.loc 2 784 3 view .LVU11
 112 004a 0E94 0000 		call chThdSleep
 113               	.LVL6:
 114               		.loc 2 784 3 view .LVU12
 115               	.LBE8:
 116               	.LBE9:
 117               	.LBE5:
  63:../../os/hal/src/hal_flash.c ****     flash_error_t err;
 118               		.loc 1 63 9 is_stmt 1 view .LVU13
 119               	.L3:
  63:../../os/hal/src/hal_flash.c ****     flash_error_t err;
 120               		.loc 1 63 3 view .LVU14
 121               	.LBB10:
  64:../../os/hal/src/hal_flash.c ****     uint32_t msec;
 122               		.loc 1 64 5 view .LVU15
  65:../../os/hal/src/hal_flash.c **** 
 123               		.loc 1 65 5 view .LVU16
  68:../../os/hal/src/hal_flash.c ****     if (err != FLASH_BUSY_ERASING) {
 124               		.loc 1 68 5 view .LVU17
  68:../../os/hal/src/hal_flash.c ****     if (err != FLASH_BUSY_ERASING) {
 125               		.loc 1 68 11 is_stmt 0 view .LVU18
 126 004e D801      		movw r26,r16
 127 0050 ED91      		ld r30,X+
 128 0052 FC91      		ld r31,X
 129 0054 0484      		ldd __tmp_reg__,Z+12
 130 0056 F585      		ldd r31,Z+13
 131 0058 E02D      		mov r30,__tmp_reg__
 132 005a BE01      		movw r22,r28
 133 005c 6F5F      		subi r22,-1
 134 005e 7F4F      		sbci r23,-1
 135 0060 C801      		movw r24,r16
 136 0062 0995      		icall
 137               	.LVL7:
  69:../../os/hal/src/hal_flash.c ****       return err;
 138               		.loc 1 69 5 is_stmt 1 view .LVU19
  69:../../os/hal/src/hal_flash.c ****       return err;
 139               		.loc 1 69 8 is_stmt 0 view .LVU20
 140 0064 8130      		cpi r24,lo8(1)
 141 0066 01F0      		breq .L6
 142               	/* epilogue start */
 143               	.LBE10:
  75:../../os/hal/src/hal_flash.c ****   }
  76:../../os/hal/src/hal_flash.c **** }
 144               		.loc 1 76 1 view .LVU21
 145 0068 0F90      		pop __tmp_reg__
 146 006a 0F90      		pop __tmp_reg__
 147 006c 0F90      		pop __tmp_reg__
 148 006e 0F90      		pop __tmp_reg__
 149 0070 DF91      		pop r29
 150 0072 CF91      		pop r28
 151 0074 1F91      		pop r17
 152 0076 0F91      		pop r16
 153               	.LVL8:
 154               		.loc 1 76 1 view .LVU22
 155 0078 FF90      		pop r15
 156 007a EF90      		pop r14
 157 007c DF90      		pop r13
 158 007e CF90      		pop r12
 159 0080 0895      		ret
 160               		.cfi_endproc
 161               	.LFE146:
 163               		.section	.text.flashGetSectorOffset,"ax",@progbits
 164               	.global	flashGetSectorOffset
 166               	flashGetSectorOffset:
 167               	.LVL9:
 168               	.LFB147:
  77:../../os/hal/src/hal_flash.c **** 
  78:../../os/hal/src/hal_flash.c **** /**
  79:../../os/hal/src/hal_flash.c ****  * @brief   Returns the offset of a sector.
  80:../../os/hal/src/hal_flash.c ****  *
  81:../../os/hal/src/hal_flash.c ****  * @param[in] devp      pointer to a @p BaseFlash object
  82:../../os/hal/src/hal_flash.c ****  * @param[in] sector    flash sector number
  83:../../os/hal/src/hal_flash.c ****  * @return              Sector offset.
  84:../../os/hal/src/hal_flash.c ****  *
  85:../../os/hal/src/hal_flash.c ****  * @api
  86:../../os/hal/src/hal_flash.c ****  */
  87:../../os/hal/src/hal_flash.c **** flash_offset_t flashGetSectorOffset(BaseFlash *devp,
  88:../../os/hal/src/hal_flash.c ****                                     flash_sector_t sector) {
 169               		.loc 1 88 60 is_stmt 1 view -0
 170               		.cfi_startproc
 171               		.loc 1 88 60 is_stmt 0 view .LVU24
 172 0000 CF92      		push r12
 173               	.LCFI10:
 174               		.cfi_def_cfa_offset 3
 175               		.cfi_offset 12, -2
 176 0002 DF92      		push r13
 177               	.LCFI11:
 178               		.cfi_def_cfa_offset 4
 179               		.cfi_offset 13, -3
 180 0004 EF92      		push r14
 181               	.LCFI12:
 182               		.cfi_def_cfa_offset 5
 183               		.cfi_offset 14, -4
 184 0006 FF92      		push r15
 185               	.LCFI13:
 186               		.cfi_def_cfa_offset 6
 187               		.cfi_offset 15, -5
 188 0008 CF93      		push r28
 189               	.LCFI14:
 190               		.cfi_def_cfa_offset 7
 191               		.cfi_offset 28, -6
 192 000a DF93      		push r29
 193               	.LCFI15:
 194               		.cfi_def_cfa_offset 8
 195               		.cfi_offset 29, -7
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 6 */
 199               	.L__stack_usage = 6
 200 000c DC01      		movw r26,r24
 201 000e 6A01      		movw r12,r20
 202 0010 7B01      		movw r14,r22
  89:../../os/hal/src/hal_flash.c ****   flash_offset_t offset;
 203               		.loc 1 89 3 is_stmt 1 view .LVU25
  90:../../os/hal/src/hal_flash.c ****   const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 204               		.loc 1 90 3 view .LVU26
 205               		.loc 1 90 42 is_stmt 0 view .LVU27
 206 0012 ED91      		ld r30,X+
 207 0014 FC91      		ld r31,X
 208 0016 0280      		ldd __tmp_reg__,Z+2
 209 0018 F381      		ldd r31,Z+3
 210 001a E02D      		mov r30,__tmp_reg__
 211 001c 0995      		icall
 212               	.LVL10:
 213               		.loc 1 90 42 view .LVU28
 214 001e EC01      		movw r28,r24
 215               	.LVL11:
  91:../../os/hal/src/hal_flash.c **** 
  92:../../os/hal/src/hal_flash.c ****   osalDbgAssert(sector < descriptor->sectors_count, "invalid sector");
 216               		.loc 1 92 3 is_stmt 1 view .LVU29
 217               		.loc 1 92 3 view .LVU30
 218               		.loc 1 92 3 discriminator 5 view .LVU31
  93:../../os/hal/src/hal_flash.c **** 
  94:../../os/hal/src/hal_flash.c ****   if (descriptor->sectors != NULL) {
 219               		.loc 1 94 3 view .LVU32
 220               		.loc 1 94 17 is_stmt 0 view .LVU33
 221 0020 8C85      		ldd r24,Y+12
 222 0022 9D85      		ldd r25,Y+13
 223               	.LVL12:
 224               		.loc 1 94 6 view .LVU34
 225 0024 0097      		sbiw r24,0
 226 0026 01F0      		breq .L8
  95:../../os/hal/src/hal_flash.c ****     offset = descriptor->sectors[sector].offset;
 227               		.loc 1 95 5 is_stmt 1 view .LVU35
 228               		.loc 1 95 12 is_stmt 0 view .LVU36
 229 0028 CC0C      		lsl r12
 230 002a DD1C      		rol r13
 231 002c CC0C      		lsl r12
 232 002e DD1C      		rol r13
 233 0030 CC0C      		lsl r12
 234 0032 DD1C      		rol r13
 235 0034 8C0D      		add r24,r12
 236 0036 9D1D      		adc r25,r13
 237 0038 FC01      		movw r30,r24
 238 003a 6081      		ld r22,Z
 239 003c 7181      		ldd r23,Z+1
 240 003e 8281      		ldd r24,Z+2
 241 0040 9381      		ldd r25,Z+3
 242               	.LVL13:
 243               	/* epilogue start */
  96:../../os/hal/src/hal_flash.c ****   }
  97:../../os/hal/src/hal_flash.c ****   else {
  98:../../os/hal/src/hal_flash.c ****     offset = (flash_offset_t)sector * (flash_offset_t)descriptor->sectors_size;
  99:../../os/hal/src/hal_flash.c ****   }
 100:../../os/hal/src/hal_flash.c **** 
 101:../../os/hal/src/hal_flash.c ****   return offset;
 102:../../os/hal/src/hal_flash.c **** }
 244               		.loc 1 102 1 view .LVU37
 245 0042 DF91      		pop r29
 246 0044 CF91      		pop r28
 247               	.LVL14:
 248               		.loc 1 102 1 view .LVU38
 249 0046 FF90      		pop r15
 250 0048 EF90      		pop r14
 251 004a DF90      		pop r13
 252 004c CF90      		pop r12
 253 004e 0895      		ret
 254               	.LVL15:
 255               	.L8:
  98:../../os/hal/src/hal_flash.c ****   }
 256               		.loc 1 98 5 is_stmt 1 view .LVU39
  98:../../os/hal/src/hal_flash.c ****   }
 257               		.loc 1 98 12 is_stmt 0 view .LVU40
 258 0050 6E85      		ldd r22,Y+14
 259 0052 7F85      		ldd r23,Y+15
 260 0054 8889      		ldd r24,Y+16
 261 0056 9989      		ldd r25,Y+17
 262 0058 A701      		movw r20,r14
 263 005a 9601      		movw r18,r12
 264 005c 0E94 0000 		call __mulsi3
 265               	.LVL16:
 101:../../os/hal/src/hal_flash.c **** }
 266               		.loc 1 101 3 is_stmt 1 view .LVU41
 267               	/* epilogue start */
 268               		.loc 1 102 1 is_stmt 0 view .LVU42
 269 0060 DF91      		pop r29
 270 0062 CF91      		pop r28
 271               	.LVL17:
 272               		.loc 1 102 1 view .LVU43
 273 0064 FF90      		pop r15
 274 0066 EF90      		pop r14
 275 0068 DF90      		pop r13
 276 006a CF90      		pop r12
 277 006c 0895      		ret
 278               		.cfi_endproc
 279               	.LFE147:
 281               		.section	.text.flashGetSectorSize,"ax",@progbits
 282               	.global	flashGetSectorSize
 284               	flashGetSectorSize:
 285               	.LVL18:
 286               	.LFB148:
 103:../../os/hal/src/hal_flash.c **** 
 104:../../os/hal/src/hal_flash.c **** /**
 105:../../os/hal/src/hal_flash.c ****  * @brief   Returns the size of a sector.
 106:../../os/hal/src/hal_flash.c ****  *
 107:../../os/hal/src/hal_flash.c ****  * @param[in] devp      pointer to a @p BaseFlash object
 108:../../os/hal/src/hal_flash.c ****  * @param[in] sector    flash sector number
 109:../../os/hal/src/hal_flash.c ****  * @return              Sector size.
 110:../../os/hal/src/hal_flash.c ****  *
 111:../../os/hal/src/hal_flash.c ****  * @api
 112:../../os/hal/src/hal_flash.c ****  */
 113:../../os/hal/src/hal_flash.c **** uint32_t flashGetSectorSize(BaseFlash *devp,
 114:../../os/hal/src/hal_flash.c ****                             flash_sector_t sector) {
 287               		.loc 1 114 52 is_stmt 1 view -0
 288               		.cfi_startproc
 289               		.loc 1 114 52 is_stmt 0 view .LVU45
 290 0000 CF92      		push r12
 291               	.LCFI16:
 292               		.cfi_def_cfa_offset 3
 293               		.cfi_offset 12, -2
 294 0002 DF92      		push r13
 295               	.LCFI17:
 296               		.cfi_def_cfa_offset 4
 297               		.cfi_offset 13, -3
 298 0004 EF92      		push r14
 299               	.LCFI18:
 300               		.cfi_def_cfa_offset 5
 301               		.cfi_offset 14, -4
 302 0006 FF92      		push r15
 303               	.LCFI19:
 304               		.cfi_def_cfa_offset 6
 305               		.cfi_offset 15, -5
 306 0008 CF93      		push r28
 307               	.LCFI20:
 308               		.cfi_def_cfa_offset 7
 309               		.cfi_offset 28, -6
 310 000a DF93      		push r29
 311               	.LCFI21:
 312               		.cfi_def_cfa_offset 8
 313               		.cfi_offset 29, -7
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 6 */
 317               	.L__stack_usage = 6
 318 000c DC01      		movw r26,r24
 319 000e 6A01      		movw r12,r20
 115:../../os/hal/src/hal_flash.c ****   uint32_t size;
 320               		.loc 1 115 3 is_stmt 1 view .LVU46
 116:../../os/hal/src/hal_flash.c ****   const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 321               		.loc 1 116 3 view .LVU47
 322               		.loc 1 116 42 is_stmt 0 view .LVU48
 323 0010 ED91      		ld r30,X+
 324 0012 FC91      		ld r31,X
 325 0014 0280      		ldd __tmp_reg__,Z+2
 326 0016 F381      		ldd r31,Z+3
 327 0018 E02D      		mov r30,__tmp_reg__
 328 001a 0995      		icall
 329               	.LVL19:
 330               		.loc 1 116 42 view .LVU49
 331 001c EC01      		movw r28,r24
 332               	.LVL20:
 117:../../os/hal/src/hal_flash.c **** 
 118:../../os/hal/src/hal_flash.c ****   osalDbgAssert(sector < descriptor->sectors_count, "invalid sector");
 333               		.loc 1 118 3 is_stmt 1 view .LVU50
 334               		.loc 1 118 3 view .LVU51
 335               		.loc 1 118 3 discriminator 5 view .LVU52
 119:../../os/hal/src/hal_flash.c **** 
 120:../../os/hal/src/hal_flash.c ****   if (descriptor->sectors != NULL) {
 336               		.loc 1 120 3 view .LVU53
 337               		.loc 1 120 17 is_stmt 0 view .LVU54
 338 001e 8C85      		ldd r24,Y+12
 339 0020 9D85      		ldd r25,Y+13
 340               	.LVL21:
 341               		.loc 1 120 6 view .LVU55
 342 0022 0097      		sbiw r24,0
 343 0024 01F0      		breq .L11
 121:../../os/hal/src/hal_flash.c ****     size = descriptor->sectors[sector].size;
 344               		.loc 1 121 5 is_stmt 1 view .LVU56
 345               		.loc 1 121 10 is_stmt 0 view .LVU57
 346 0026 CC0C      		lsl r12
 347 0028 DD1C      		rol r13
 348 002a CC0C      		lsl r12
 349 002c DD1C      		rol r13
 350 002e CC0C      		lsl r12
 351 0030 DD1C      		rol r13
 352 0032 8C0D      		add r24,r12
 353 0034 9D1D      		adc r25,r13
 354 0036 FC01      		movw r30,r24
 355 0038 6481      		ldd r22,Z+4
 356 003a 7581      		ldd r23,Z+5
 357 003c 8681      		ldd r24,Z+6
 358 003e 9781      		ldd r25,Z+7
 359               	.LVL22:
 360               	/* epilogue start */
 122:../../os/hal/src/hal_flash.c ****   }
 123:../../os/hal/src/hal_flash.c ****   else {
 124:../../os/hal/src/hal_flash.c ****     size = descriptor->sectors_size;
 125:../../os/hal/src/hal_flash.c ****   }
 126:../../os/hal/src/hal_flash.c **** 
 127:../../os/hal/src/hal_flash.c ****   return size;
 128:../../os/hal/src/hal_flash.c **** }
 361               		.loc 1 128 1 view .LVU58
 362 0040 DF91      		pop r29
 363 0042 CF91      		pop r28
 364               	.LVL23:
 365               		.loc 1 128 1 view .LVU59
 366 0044 FF90      		pop r15
 367 0046 EF90      		pop r14
 368 0048 DF90      		pop r13
 369 004a CF90      		pop r12
 370 004c 0895      		ret
 371               	.LVL24:
 372               	.L11:
 124:../../os/hal/src/hal_flash.c ****   }
 373               		.loc 1 124 5 is_stmt 1 view .LVU60
 124:../../os/hal/src/hal_flash.c ****   }
 374               		.loc 1 124 10 is_stmt 0 view .LVU61
 375 004e 6E85      		ldd r22,Y+14
 376 0050 7F85      		ldd r23,Y+15
 377 0052 8889      		ldd r24,Y+16
 378 0054 9989      		ldd r25,Y+17
 379               	.LVL25:
 127:../../os/hal/src/hal_flash.c **** }
 380               		.loc 1 127 3 is_stmt 1 view .LVU62
 381               	/* epilogue start */
 382               		.loc 1 128 1 is_stmt 0 view .LVU63
 383 0056 DF91      		pop r29
 384 0058 CF91      		pop r28
 385               	.LVL26:
 386               		.loc 1 128 1 view .LVU64
 387 005a FF90      		pop r15
 388 005c EF90      		pop r14
 389 005e DF90      		pop r13
 390 0060 CF90      		pop r12
 391 0062 0895      		ret
 392               		.cfi_endproc
 393               	.LFE148:
 395               		.section	.text.flashGetOffsetSector,"ax",@progbits
 396               	.global	flashGetOffsetSector
 398               	flashGetOffsetSector:
 399               	.LVL27:
 400               	.LFB149:
 129:../../os/hal/src/hal_flash.c **** 
 130:../../os/hal/src/hal_flash.c **** /**
 131:../../os/hal/src/hal_flash.c ****  * @brief   Returns the sector of an offset.
 132:../../os/hal/src/hal_flash.c ****  *
 133:../../os/hal/src/hal_flash.c ****  * @param[in] devp      pointer to a @p BaseFlash object
 134:../../os/hal/src/hal_flash.c ****  * @param[in] offset    flash offset
 135:../../os/hal/src/hal_flash.c ****  * @return              Flash sector.
 136:../../os/hal/src/hal_flash.c ****  *
 137:../../os/hal/src/hal_flash.c ****  * @api
 138:../../os/hal/src/hal_flash.c ****  */
 139:../../os/hal/src/hal_flash.c **** flash_sector_t flashGetOffsetSector(BaseFlash *devp, flash_offset_t offset) {
 401               		.loc 1 139 77 is_stmt 1 view -0
 402               		.cfi_startproc
 403               		.loc 1 139 77 is_stmt 0 view .LVU66
 404 0000 8F92      		push r8
 405               	.LCFI22:
 406               		.cfi_def_cfa_offset 3
 407               		.cfi_offset 8, -2
 408 0002 9F92      		push r9
 409               	.LCFI23:
 410               		.cfi_def_cfa_offset 4
 411               		.cfi_offset 9, -3
 412 0004 AF92      		push r10
 413               	.LCFI24:
 414               		.cfi_def_cfa_offset 5
 415               		.cfi_offset 10, -4
 416 0006 BF92      		push r11
 417               	.LCFI25:
 418               		.cfi_def_cfa_offset 6
 419               		.cfi_offset 11, -5
 420 0008 CF92      		push r12
 421               	.LCFI26:
 422               		.cfi_def_cfa_offset 7
 423               		.cfi_offset 12, -6
 424 000a DF92      		push r13
 425               	.LCFI27:
 426               		.cfi_def_cfa_offset 8
 427               		.cfi_offset 13, -7
 428 000c EF92      		push r14
 429               	.LCFI28:
 430               		.cfi_def_cfa_offset 9
 431               		.cfi_offset 14, -8
 432 000e FF92      		push r15
 433               	.LCFI29:
 434               		.cfi_def_cfa_offset 10
 435               		.cfi_offset 15, -9
 436 0010 0F93      		push r16
 437               	.LCFI30:
 438               		.cfi_def_cfa_offset 11
 439               		.cfi_offset 16, -10
 440 0012 1F93      		push r17
 441               	.LCFI31:
 442               		.cfi_def_cfa_offset 12
 443               		.cfi_offset 17, -11
 444 0014 CF93      		push r28
 445               	.LCFI32:
 446               		.cfi_def_cfa_offset 13
 447               		.cfi_offset 28, -12
 448 0016 DF93      		push r29
 449               	.LCFI33:
 450               		.cfi_def_cfa_offset 14
 451               		.cfi_offset 29, -13
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 12 */
 455               	.L__stack_usage = 12
 456 0018 DC01      		movw r26,r24
 457 001a 6A01      		movw r12,r20
 458 001c 7B01      		movw r14,r22
 140:../../os/hal/src/hal_flash.c ****   flash_sector_t sector, i;
 459               		.loc 1 140 3 is_stmt 1 view .LVU67
 141:../../os/hal/src/hal_flash.c ****   const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 460               		.loc 1 141 3 view .LVU68
 461               		.loc 1 141 42 is_stmt 0 view .LVU69
 462 001e ED91      		ld r30,X+
 463 0020 FC91      		ld r31,X
 464 0022 0280      		ldd __tmp_reg__,Z+2
 465 0024 F381      		ldd r31,Z+3
 466 0026 E02D      		mov r30,__tmp_reg__
 467 0028 0995      		icall
 468               	.LVL28:
 469               		.loc 1 141 42 view .LVU70
 470 002a EC01      		movw r28,r24
 471               	.LVL29:
 142:../../os/hal/src/hal_flash.c **** 
 143:../../os/hal/src/hal_flash.c ****   osalDbgAssert(offset < descriptor->size, "invalid offset");
 472               		.loc 1 143 3 is_stmt 1 view .LVU71
 473               		.loc 1 143 3 view .LVU72
 474               		.loc 1 143 3 discriminator 5 view .LVU73
 144:../../os/hal/src/hal_flash.c **** 
 145:../../os/hal/src/hal_flash.c ****   if (descriptor->sectors != NULL) {
 475               		.loc 1 145 3 view .LVU74
 476               		.loc 1 145 17 is_stmt 0 view .LVU75
 477 002c EC85      		ldd r30,Y+12
 478 002e FD85      		ldd r31,Y+13
 479               		.loc 1 145 6 view .LVU76
 480 0030 3097      		sbiw r30,0
 481 0032 01F4      		brne .+2
 482 0034 00C0      		rjmp .L14
 483               	.LVL30:
 484               	.LBB11:
 146:../../os/hal/src/hal_flash.c ****     flash_offset_t sector_start;
 147:../../os/hal/src/hal_flash.c ****     flash_offset_t sector_end;
 148:../../os/hal/src/hal_flash.c ****     for (i = 0; i < descriptor->sectors_count; i++) {
 485               		.loc 1 148 19 is_stmt 1 discriminator 1 view .LVU77
 486               		.loc 1 148 31 is_stmt 0 discriminator 1 view .LVU78
 487 0036 4885      		ldd r20,Y+8
 488 0038 5985      		ldd r21,Y+9
 489 003a 6A85      		ldd r22,Y+10
 490 003c 7B85      		ldd r23,Y+11
 491               		.loc 1 148 12 view .LVU79
 492 003e 00E0      		ldi r16,0
 493 0040 10E0      		ldi r17,0
 494 0042 9801      		movw r18,r16
 495               		.loc 1 148 19 discriminator 1 view .LVU80
 496 0044 4115      		cp r20,__zero_reg__
 497 0046 5105      		cpc r21,__zero_reg__
 498 0048 6105      		cpc r22,__zero_reg__
 499 004a 7105      		cpc r23,__zero_reg__
 500 004c 01F0      		breq .L13
 501               	.LVL31:
 502               	.L17:
 149:../../os/hal/src/hal_flash.c ****       sector_start = descriptor->sectors[i].offset;
 503               		.loc 1 149 7 is_stmt 1 view .LVU81
 504               		.loc 1 149 20 is_stmt 0 view .LVU82
 505 004e 8081      		ld r24,Z
 506 0050 9181      		ldd r25,Z+1
 507 0052 A281      		ldd r26,Z+2
 508 0054 B381      		ldd r27,Z+3
 509               	.LVL32:
 150:../../os/hal/src/hal_flash.c ****       sector_end = sector_start + descriptor->sectors[i].size - 1U;
 510               		.loc 1 150 7 is_stmt 1 view .LVU83
 151:../../os/hal/src/hal_flash.c ****       if ((offset >= sector_start) && (offset <= sector_end)) {
 511               		.loc 1 151 7 view .LVU84
 512               		.loc 1 151 10 is_stmt 0 view .LVU85
 513 0056 C816      		cp r12,r24
 514 0058 D906      		cpc r13,r25
 515 005a EA06      		cpc r14,r26
 516 005c FB06      		cpc r15,r27
 517 005e 00F0      		brlo .L16
 150:../../os/hal/src/hal_flash.c ****       sector_end = sector_start + descriptor->sectors[i].size - 1U;
 518               		.loc 1 150 33 view .LVU86
 519 0060 8480      		ldd r8,Z+4
 520 0062 9580      		ldd r9,Z+5
 521 0064 A680      		ldd r10,Z+6
 522 0066 B780      		ldd r11,Z+7
 523 0068 880D      		add r24,r8
 524 006a 991D      		adc r25,r9
 525 006c AA1D      		adc r26,r10
 526 006e BB1D      		adc r27,r11
 527               	.LVL33:
 150:../../os/hal/src/hal_flash.c ****       sector_end = sector_start + descriptor->sectors[i].size - 1U;
 528               		.loc 1 150 18 view .LVU87
 529 0070 0197      		sbiw r24,1
 530 0072 A109      		sbc r26,__zero_reg__
 531 0074 B109      		sbc r27,__zero_reg__
 532               		.loc 1 151 36 discriminator 1 view .LVU88
 533 0076 8C15      		cp r24,r12
 534 0078 9D05      		cpc r25,r13
 535 007a AE05      		cpc r26,r14
 536 007c BF05      		cpc r27,r15
 537 007e 00F4      		brsh .L13
 538               	.L16:
 148:../../os/hal/src/hal_flash.c ****       sector_start = descriptor->sectors[i].offset;
 539               		.loc 1 148 49 is_stmt 1 discriminator 2 view .LVU89
 540 0080 0F5F      		subi r16,-1
 541 0082 1F4F      		sbci r17,-1
 542 0084 2F4F      		sbci r18,-1
 543 0086 3F4F      		sbci r19,-1
 544               	.LVL34:
 148:../../os/hal/src/hal_flash.c ****       sector_start = descriptor->sectors[i].offset;
 545               		.loc 1 148 19 discriminator 1 view .LVU90
 546 0088 3896      		adiw r30,8
 547               	.LVL35:
 148:../../os/hal/src/hal_flash.c ****       sector_start = descriptor->sectors[i].offset;
 548               		.loc 1 148 19 is_stmt 0 discriminator 1 view .LVU91
 549 008a 0417      		cp r16,r20
 550 008c 1507      		cpc r17,r21
 551 008e 2607      		cpc r18,r22
 552 0090 3707      		cpc r19,r23
 553 0092 01F4      		brne .L17
 554               	.LBE11:
 152:../../os/hal/src/hal_flash.c ****         sector = i;
 153:../../os/hal/src/hal_flash.c ****         return sector;
 154:../../os/hal/src/hal_flash.c ****       }
 155:../../os/hal/src/hal_flash.c ****     }
 156:../../os/hal/src/hal_flash.c ****   }
 157:../../os/hal/src/hal_flash.c ****   else {
 158:../../os/hal/src/hal_flash.c ****     sector = offset / descriptor->sectors_size;
 159:../../os/hal/src/hal_flash.c ****     return sector;
 160:../../os/hal/src/hal_flash.c ****   }
 161:../../os/hal/src/hal_flash.c **** 
 162:../../os/hal/src/hal_flash.c ****   osalDbgAssert(FALSE, "invalid offset");
 163:../../os/hal/src/hal_flash.c **** 
 164:../../os/hal/src/hal_flash.c ****   return 0;
 555               		.loc 1 164 10 view .LVU92
 556 0094 00E0      		ldi r16,0
 557 0096 10E0      		ldi r17,0
 558 0098 9801      		movw r18,r16
 559               	.LVL36:
 560               	.L13:
 165:../../os/hal/src/hal_flash.c **** }
 561               		.loc 1 165 1 view .LVU93
 562 009a C901      		movw r24,r18
 563 009c B801      		movw r22,r16
 564               	/* epilogue start */
 565 009e DF91      		pop r29
 566 00a0 CF91      		pop r28
 567               	.LVL37:
 568               		.loc 1 165 1 view .LVU94
 569 00a2 1F91      		pop r17
 570 00a4 0F91      		pop r16
 571 00a6 FF90      		pop r15
 572 00a8 EF90      		pop r14
 573 00aa DF90      		pop r13
 574 00ac CF90      		pop r12
 575 00ae BF90      		pop r11
 576 00b0 AF90      		pop r10
 577 00b2 9F90      		pop r9
 578 00b4 8F90      		pop r8
 579 00b6 0895      		ret
 580               	.LVL38:
 581               	.L14:
 158:../../os/hal/src/hal_flash.c ****     return sector;
 582               		.loc 1 158 5 is_stmt 1 view .LVU95
 158:../../os/hal/src/hal_flash.c ****     return sector;
 583               		.loc 1 158 12 is_stmt 0 view .LVU96
 584 00b8 2E85      		ldd r18,Y+14
 585 00ba 3F85      		ldd r19,Y+15
 586 00bc 4889      		ldd r20,Y+16
 587 00be 5989      		ldd r21,Y+17
 588 00c0 C701      		movw r24,r14
 589 00c2 B601      		movw r22,r12
 590 00c4 0E94 0000 		call __udivmodsi4
 591 00c8 8901      		movw r16,r18
 592 00ca 9A01      		movw r18,r20
 593               	.LVL39:
 159:../../os/hal/src/hal_flash.c ****   }
 594               		.loc 1 159 5 is_stmt 1 view .LVU97
 159:../../os/hal/src/hal_flash.c ****   }
 595               		.loc 1 159 12 is_stmt 0 view .LVU98
 596 00cc 00C0      		rjmp .L13
 597               		.cfi_endproc
 598               	.LFE149:
 600               		.section	.text.flashGetOffsetAddress,"ax",@progbits
 601               	.global	flashGetOffsetAddress
 603               	flashGetOffsetAddress:
 604               	.LVL40:
 605               	.LFB150:
 166:../../os/hal/src/hal_flash.c **** 
 167:../../os/hal/src/hal_flash.c **** /**
 168:../../os/hal/src/hal_flash.c ****  * @brief   Get absolute address from offset
 169:../../os/hal/src/hal_flash.c ****  *
 170:../../os/hal/src/hal_flash.c ****  * @param[in] devp      pointer to a @p BaseFlash object
 171:../../os/hal/src/hal_flash.c ****  * @param[in] offset    flash offset
 172:../../os/hal/src/hal_flash.c ****  * @return              A pointer to the offset.
 173:../../os/hal/src/hal_flash.c ****  *
 174:../../os/hal/src/hal_flash.c ****  * @deprecated
 175:../../os/hal/src/hal_flash.c ****  */
 176:../../os/hal/src/hal_flash.c **** void *flashGetOffsetAddress(BaseFlash *devp, flash_offset_t offset) {
 606               		.loc 1 176 69 is_stmt 1 view -0
 607               		.cfi_startproc
 608               		.loc 1 176 69 is_stmt 0 view .LVU100
 609 0000 CF92      		push r12
 610               	.LCFI34:
 611               		.cfi_def_cfa_offset 3
 612               		.cfi_offset 12, -2
 613 0002 DF92      		push r13
 614               	.LCFI35:
 615               		.cfi_def_cfa_offset 4
 616               		.cfi_offset 13, -3
 617 0004 EF92      		push r14
 618               	.LCFI36:
 619               		.cfi_def_cfa_offset 5
 620               		.cfi_offset 14, -4
 621 0006 FF92      		push r15
 622               	.LCFI37:
 623               		.cfi_def_cfa_offset 6
 624               		.cfi_offset 15, -5
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 4 */
 628               	.L__stack_usage = 4
 629 0008 DC01      		movw r26,r24
 630 000a 6A01      		movw r12,r20
 631 000c 7B01      		movw r14,r22
 177:../../os/hal/src/hal_flash.c ****   const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 632               		.loc 1 177 3 is_stmt 1 view .LVU101
 633               		.loc 1 177 42 is_stmt 0 view .LVU102
 634 000e ED91      		ld r30,X+
 635 0010 FC91      		ld r31,X
 636 0012 0280      		ldd __tmp_reg__,Z+2
 637 0014 F381      		ldd r31,Z+3
 638 0016 E02D      		mov r30,__tmp_reg__
 639 0018 0995      		icall
 640               	.LVL41:
 178:../../os/hal/src/hal_flash.c **** 
 179:../../os/hal/src/hal_flash.c ****   osalDbgAssert(offset < descriptor->size, "invalid offset");
 641               		.loc 1 179 3 is_stmt 1 view .LVU103
 642               		.loc 1 179 3 view .LVU104
 643               		.loc 1 179 3 discriminator 5 view .LVU105
 180:../../os/hal/src/hal_flash.c **** 
 181:../../os/hal/src/hal_flash.c ****   return (void *)((flash_offset_t)descriptor->address + offset);
 644               		.loc 1 181 3 view .LVU106
 645               		.loc 1 181 19 is_stmt 0 view .LVU107
 646 001a FC01      		movw r30,r24
 647 001c 8289      		ldd r24,Z+18
 648 001e 9389      		ldd r25,Z+19
 649               	.LVL42:
 650               		.loc 1 181 19 view .LVU108
 651 0020 092E      		mov __tmp_reg__,r25
 652 0022 000C      		lsl r0
 653 0024 AA0B      		sbc r26,r26
 654 0026 BB0B      		sbc r27,r27
 655               		.loc 1 181 55 view .LVU109
 656 0028 8C0D      		add r24,r12
 657 002a 9D1D      		adc r25,r13
 658 002c AE1D      		adc r26,r14
 659 002e BF1D      		adc r27,r15
 660               	/* epilogue start */
 182:../../os/hal/src/hal_flash.c **** }
 661               		.loc 1 182 1 view .LVU110
 662 0030 FF90      		pop r15
 663 0032 EF90      		pop r14
 664 0034 DF90      		pop r13
 665 0036 CF90      		pop r12
 666 0038 0895      		ret
 667               		.cfi_endproc
 668               	.LFE150:
 670               		.section	.text.flashGetAddressOffset,"ax",@progbits
 671               	.global	flashGetAddressOffset
 673               	flashGetAddressOffset:
 674               	.LVL43:
 675               	.LFB151:
 183:../../os/hal/src/hal_flash.c **** 
 184:../../os/hal/src/hal_flash.c **** /**
 185:../../os/hal/src/hal_flash.c ****  * @brief   Get offset from absolute address
 186:../../os/hal/src/hal_flash.c ****  *
 187:../../os/hal/src/hal_flash.c ****  * @param[in] devp      pointer to a @p BaseFlash object
 188:../../os/hal/src/hal_flash.c ****  * @param[in] addr      pointer
 189:../../os/hal/src/hal_flash.c ****  * @return              flash offset
 190:../../os/hal/src/hal_flash.c ****  *
 191:../../os/hal/src/hal_flash.c ****  * @deprecated
 192:../../os/hal/src/hal_flash.c ****  */
 193:../../os/hal/src/hal_flash.c **** flash_offset_t flashGetAddressOffset(BaseFlash *devp, void *addr) {
 676               		.loc 1 193 67 is_stmt 1 view -0
 677               		.cfi_startproc
 678               		.loc 1 193 67 is_stmt 0 view .LVU112
 679 0000 0F93      		push r16
 680               	.LCFI38:
 681               		.cfi_def_cfa_offset 3
 682               		.cfi_offset 16, -2
 683 0002 1F93      		push r17
 684               	.LCFI39:
 685               		.cfi_def_cfa_offset 4
 686               		.cfi_offset 17, -3
 687 0004 CF93      		push r28
 688               	.LCFI40:
 689               		.cfi_def_cfa_offset 5
 690               		.cfi_offset 28, -4
 691 0006 DF93      		push r29
 692               	.LCFI41:
 693               		.cfi_def_cfa_offset 6
 694               		.cfi_offset 29, -5
 695               	/* prologue: function */
 696               	/* frame size = 0 */
 697               	/* stack size = 4 */
 698               	.L__stack_usage = 4
 699 0008 DC01      		movw r26,r24
 700 000a EB01      		movw r28,r22
 194:../../os/hal/src/hal_flash.c ****   const flash_descriptor_t *descriptor = flashGetDescriptor(devp);
 701               		.loc 1 194 3 is_stmt 1 view .LVU113
 702               		.loc 1 194 42 is_stmt 0 view .LVU114
 703 000c ED91      		ld r30,X+
 704 000e FC91      		ld r31,X
 705 0010 0280      		ldd __tmp_reg__,Z+2
 706 0012 F381      		ldd r31,Z+3
 707 0014 E02D      		mov r30,__tmp_reg__
 708 0016 0995      		icall
 709               	.LVL44:
 710               		.loc 1 194 42 view .LVU115
 711 0018 FC01      		movw r30,r24
 712               	.LVL45:
 195:../../os/hal/src/hal_flash.c **** 
 196:../../os/hal/src/hal_flash.c ****   osalDbgAssert(((flash_offset_t)addr >= (flash_offset_t)descriptor->address) &&
 713               		.loc 1 196 3 is_stmt 1 view .LVU116
 714               		.loc 1 196 3 view .LVU117
 715               		.loc 1 196 3 discriminator 7 view .LVU118
 197:../../os/hal/src/hal_flash.c ****                 ((flash_offset_t)addr <= (flash_offset_t)descriptor->address +
 198:../../os/hal/src/hal_flash.c ****                                          descriptor->size),
 199:../../os/hal/src/hal_flash.c ****                 "invalid address");
 200:../../os/hal/src/hal_flash.c **** 
 201:../../os/hal/src/hal_flash.c ****   return (flash_offset_t)addr - (flash_offset_t)descriptor->address;
 716               		.loc 1 201 3 view .LVU119
 717               		.loc 1 201 10 is_stmt 0 view .LVU120
 718 001a BE01      		movw r22,r28
 719 001c DD0F      		lsl r29
 720 001e 880B      		sbc r24,r24
 721 0020 990B      		sbc r25,r25
 722               		.loc 1 201 33 view .LVU121
 723 0022 0289      		ldd r16,Z+18
 724 0024 1389      		ldd r17,Z+19
 725 0026 012E      		mov __tmp_reg__,r17
 726 0028 000C      		lsl r0
 727 002a 220B      		sbc r18,r18
 728 002c 330B      		sbc r19,r19
 729               		.loc 1 201 31 view .LVU122
 730 002e 601B      		sub r22,r16
 731 0030 710B      		sbc r23,r17
 732 0032 820B      		sbc r24,r18
 733 0034 930B      		sbc r25,r19
 734               	/* epilogue start */
 202:../../os/hal/src/hal_flash.c **** }
 735               		.loc 1 202 1 view .LVU123
 736 0036 DF91      		pop r29
 737 0038 CF91      		pop r28
 738               	.LVL46:
 739               		.loc 1 202 1 view .LVU124
 740 003a 1F91      		pop r17
 741 003c 0F91      		pop r16
 742 003e 0895      		ret
 743               		.cfi_endproc
 744               	.LFE151:
 746               		.text
 747               	.Letext0:
 748               		.file 3 "/usr/lib/gcc/avr/14.1.0/include/stddef.h"
 749               		.file 4 "/usr/avr/include/stdint.h"
 750               		.file 5 "../../os/nil/include/ch.h"
 751               		.file 6 "../../os/hal/include/hal_flash.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hal_flash.c
     /tmp/ccQ0DXBp.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccQ0DXBp.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccQ0DXBp.s:4      *ABS*:0000003f __SREG__
     /tmp/ccQ0DXBp.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccQ0DXBp.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccQ0DXBp.s:14     .text.flashWaitErase:00000000 flashWaitErase
     /tmp/ccQ0DXBp.s:17     .text.flashWaitErase:00000000 .Loc.0
     /tmp/ccQ0DXBp.s:18     .text.flashWaitErase:00000000 L0
     /tmp/ccQ0DXBp.s:19     .text.flashWaitErase:00000000 .Loc.1
     /tmp/ccQ0DXBp.s:52     .text.flashWaitErase:00000012 L0
     /tmp/ccQ0DXBp.s:53     .text.flashWaitErase:00000014 L0
     /tmp/ccQ0DXBp.s:66     .text.flashWaitErase:0000001a .Loc.2
     /tmp/ccQ0DXBp.s:74     .text.flashWaitErase:00000026 .Loc.3
     /tmp/ccQ0DXBp.s:78     .text.flashWaitErase:00000028 .Loc.4
     /tmp/ccQ0DXBp.s:82     .text.flashWaitErase:00000028 .Loc.5
     /tmp/ccQ0DXBp.s:84     .text.flashWaitErase:00000028 .Loc.6
     /tmp/ccQ0DXBp.s:87     .text.flashWaitErase:00000028 .Loc.7
     /tmp/ccQ0DXBp.s:93     .text.flashWaitErase:00000030 .Loc.8
     /tmp/ccQ0DXBp.s:104    .text.flashWaitErase:00000044 .Loc.9
     /tmp/ccQ0DXBp.s:108    .text.flashWaitErase:00000048 .Loc.10
     /tmp/ccQ0DXBp.s:111    .text.flashWaitErase:0000004a .Loc.11
     /tmp/ccQ0DXBp.s:114    .text.flashWaitErase:0000004e .Loc.12
     /tmp/ccQ0DXBp.s:118    .text.flashWaitErase:0000004e .Loc.13
     /tmp/ccQ0DXBp.s:120    .text.flashWaitErase:0000004e .Loc.14
     /tmp/ccQ0DXBp.s:122    .text.flashWaitErase:0000004e .Loc.15
     /tmp/ccQ0DXBp.s:123    .text.flashWaitErase:0000004e .Loc.16
     /tmp/ccQ0DXBp.s:124    .text.flashWaitErase:0000004e .Loc.17
     /tmp/ccQ0DXBp.s:125    .text.flashWaitErase:0000004e .Loc.18
     /tmp/ccQ0DXBp.s:138    .text.flashWaitErase:00000064 .Loc.19
     /tmp/ccQ0DXBp.s:139    .text.flashWaitErase:00000064 .Loc.20
     /tmp/ccQ0DXBp.s:144    .text.flashWaitErase:00000068 .Loc.21
     /tmp/ccQ0DXBp.s:154    .text.flashWaitErase:00000078 .Loc.22
     /tmp/ccQ0DXBp.s:160    .text.flashWaitErase:00000082 L0
     /tmp/ccQ0DXBp.s:166    .text.flashGetSectorOffset:00000000 flashGetSectorOffset
     /tmp/ccQ0DXBp.s:169    .text.flashGetSectorOffset:00000000 .Loc.23
     /tmp/ccQ0DXBp.s:170    .text.flashGetSectorOffset:00000000 L0
     /tmp/ccQ0DXBp.s:171    .text.flashGetSectorOffset:00000000 .Loc.24
     /tmp/ccQ0DXBp.s:203    .text.flashGetSectorOffset:00000012 .Loc.25
     /tmp/ccQ0DXBp.s:204    .text.flashGetSectorOffset:00000012 .Loc.26
     /tmp/ccQ0DXBp.s:205    .text.flashGetSectorOffset:00000012 .Loc.27
     /tmp/ccQ0DXBp.s:213    .text.flashGetSectorOffset:0000001e .Loc.28
     /tmp/ccQ0DXBp.s:216    .text.flashGetSectorOffset:00000020 .Loc.29
     /tmp/ccQ0DXBp.s:217    .text.flashGetSectorOffset:00000020 .Loc.30
     /tmp/ccQ0DXBp.s:218    .text.flashGetSectorOffset:00000020 .Loc.31
     /tmp/ccQ0DXBp.s:219    .text.flashGetSectorOffset:00000020 .Loc.32
     /tmp/ccQ0DXBp.s:220    .text.flashGetSectorOffset:00000020 .Loc.33
     /tmp/ccQ0DXBp.s:224    .text.flashGetSectorOffset:00000024 .Loc.34
     /tmp/ccQ0DXBp.s:227    .text.flashGetSectorOffset:00000028 .Loc.35
     /tmp/ccQ0DXBp.s:228    .text.flashGetSectorOffset:00000028 .Loc.36
     /tmp/ccQ0DXBp.s:244    .text.flashGetSectorOffset:00000042 .Loc.37
     /tmp/ccQ0DXBp.s:248    .text.flashGetSectorOffset:00000046 .Loc.38
     /tmp/ccQ0DXBp.s:256    .text.flashGetSectorOffset:00000050 .Loc.39
     /tmp/ccQ0DXBp.s:257    .text.flashGetSectorOffset:00000050 .Loc.40
     /tmp/ccQ0DXBp.s:266    .text.flashGetSectorOffset:00000060 .Loc.41
     /tmp/ccQ0DXBp.s:268    .text.flashGetSectorOffset:00000060 .Loc.42
     /tmp/ccQ0DXBp.s:272    .text.flashGetSectorOffset:00000064 .Loc.43
     /tmp/ccQ0DXBp.s:278    .text.flashGetSectorOffset:0000006e L0
     /tmp/ccQ0DXBp.s:284    .text.flashGetSectorSize:00000000 flashGetSectorSize
     /tmp/ccQ0DXBp.s:287    .text.flashGetSectorSize:00000000 .Loc.44
     /tmp/ccQ0DXBp.s:288    .text.flashGetSectorSize:00000000 L0
     /tmp/ccQ0DXBp.s:289    .text.flashGetSectorSize:00000000 .Loc.45
     /tmp/ccQ0DXBp.s:320    .text.flashGetSectorSize:00000010 .Loc.46
     /tmp/ccQ0DXBp.s:321    .text.flashGetSectorSize:00000010 .Loc.47
     /tmp/ccQ0DXBp.s:322    .text.flashGetSectorSize:00000010 .Loc.48
     /tmp/ccQ0DXBp.s:330    .text.flashGetSectorSize:0000001c .Loc.49
     /tmp/ccQ0DXBp.s:333    .text.flashGetSectorSize:0000001e .Loc.50
     /tmp/ccQ0DXBp.s:334    .text.flashGetSectorSize:0000001e .Loc.51
     /tmp/ccQ0DXBp.s:335    .text.flashGetSectorSize:0000001e .Loc.52
     /tmp/ccQ0DXBp.s:336    .text.flashGetSectorSize:0000001e .Loc.53
     /tmp/ccQ0DXBp.s:337    .text.flashGetSectorSize:0000001e .Loc.54
     /tmp/ccQ0DXBp.s:341    .text.flashGetSectorSize:00000022 .Loc.55
     /tmp/ccQ0DXBp.s:344    .text.flashGetSectorSize:00000026 .Loc.56
     /tmp/ccQ0DXBp.s:345    .text.flashGetSectorSize:00000026 .Loc.57
     /tmp/ccQ0DXBp.s:361    .text.flashGetSectorSize:00000040 .Loc.58
     /tmp/ccQ0DXBp.s:365    .text.flashGetSectorSize:00000044 .Loc.59
     /tmp/ccQ0DXBp.s:373    .text.flashGetSectorSize:0000004e .Loc.60
     /tmp/ccQ0DXBp.s:374    .text.flashGetSectorSize:0000004e .Loc.61
     /tmp/ccQ0DXBp.s:380    .text.flashGetSectorSize:00000056 .Loc.62
     /tmp/ccQ0DXBp.s:382    .text.flashGetSectorSize:00000056 .Loc.63
     /tmp/ccQ0DXBp.s:386    .text.flashGetSectorSize:0000005a .Loc.64
     /tmp/ccQ0DXBp.s:392    .text.flashGetSectorSize:00000064 L0
     /tmp/ccQ0DXBp.s:398    .text.flashGetOffsetSector:00000000 flashGetOffsetSector
     /tmp/ccQ0DXBp.s:401    .text.flashGetOffsetSector:00000000 .Loc.65
     /tmp/ccQ0DXBp.s:402    .text.flashGetOffsetSector:00000000 L0
     /tmp/ccQ0DXBp.s:403    .text.flashGetOffsetSector:00000000 .Loc.66
     /tmp/ccQ0DXBp.s:459    .text.flashGetOffsetSector:0000001e .Loc.67
     /tmp/ccQ0DXBp.s:460    .text.flashGetOffsetSector:0000001e .Loc.68
     /tmp/ccQ0DXBp.s:461    .text.flashGetOffsetSector:0000001e .Loc.69
     /tmp/ccQ0DXBp.s:469    .text.flashGetOffsetSector:0000002a .Loc.70
     /tmp/ccQ0DXBp.s:472    .text.flashGetOffsetSector:0000002c .Loc.71
     /tmp/ccQ0DXBp.s:473    .text.flashGetOffsetSector:0000002c .Loc.72
     /tmp/ccQ0DXBp.s:474    .text.flashGetOffsetSector:0000002c .Loc.73
     /tmp/ccQ0DXBp.s:475    .text.flashGetOffsetSector:0000002c .Loc.74
     /tmp/ccQ0DXBp.s:476    .text.flashGetOffsetSector:0000002c .Loc.75
     /tmp/ccQ0DXBp.s:479    .text.flashGetOffsetSector:00000030 .Loc.76
     /tmp/ccQ0DXBp.s:481    .text.flashGetOffsetSector:00000034 L0
     /tmp/ccQ0DXBp.s:485    .text.flashGetOffsetSector:00000036 .Loc.77
     /tmp/ccQ0DXBp.s:486    .text.flashGetOffsetSector:00000036 .Loc.78
     /tmp/ccQ0DXBp.s:491    .text.flashGetOffsetSector:0000003e .Loc.79
     /tmp/ccQ0DXBp.s:495    .text.flashGetOffsetSector:00000044 .Loc.80
     /tmp/ccQ0DXBp.s:503    .text.flashGetOffsetSector:0000004e .Loc.81
     /tmp/ccQ0DXBp.s:504    .text.flashGetOffsetSector:0000004e .Loc.82
     /tmp/ccQ0DXBp.s:510    .text.flashGetOffsetSector:00000056 .Loc.83
     /tmp/ccQ0DXBp.s:511    .text.flashGetOffsetSector:00000056 .Loc.84
     /tmp/ccQ0DXBp.s:512    .text.flashGetOffsetSector:00000056 .Loc.85
     /tmp/ccQ0DXBp.s:518    .text.flashGetOffsetSector:00000060 .Loc.86
     /tmp/ccQ0DXBp.s:528    .text.flashGetOffsetSector:00000070 .Loc.87
     /tmp/ccQ0DXBp.s:532    .text.flashGetOffsetSector:00000076 .Loc.88
     /tmp/ccQ0DXBp.s:539    .text.flashGetOffsetSector:00000080 .Loc.89
     /tmp/ccQ0DXBp.s:545    .text.flashGetOffsetSector:00000088 .Loc.90
     /tmp/ccQ0DXBp.s:548    .text.flashGetOffsetSector:0000008a .Loc.91
     /tmp/ccQ0DXBp.s:555    .text.flashGetOffsetSector:00000094 .Loc.92
     /tmp/ccQ0DXBp.s:561    .text.flashGetOffsetSector:0000009a .Loc.93
     /tmp/ccQ0DXBp.s:568    .text.flashGetOffsetSector:000000a2 .Loc.94
     /tmp/ccQ0DXBp.s:582    .text.flashGetOffsetSector:000000b8 .Loc.95
     /tmp/ccQ0DXBp.s:583    .text.flashGetOffsetSector:000000b8 .Loc.96
     /tmp/ccQ0DXBp.s:594    .text.flashGetOffsetSector:000000cc .Loc.97
     /tmp/ccQ0DXBp.s:595    .text.flashGetOffsetSector:000000cc .Loc.98
     /tmp/ccQ0DXBp.s:597    .text.flashGetOffsetSector:000000ce L0
     /tmp/ccQ0DXBp.s:603    .text.flashGetOffsetAddress:00000000 flashGetOffsetAddress
     /tmp/ccQ0DXBp.s:606    .text.flashGetOffsetAddress:00000000 .Loc.99
     /tmp/ccQ0DXBp.s:607    .text.flashGetOffsetAddress:00000000 L0
     /tmp/ccQ0DXBp.s:608    .text.flashGetOffsetAddress:00000000 .Loc.100
     /tmp/ccQ0DXBp.s:632    .text.flashGetOffsetAddress:0000000e .Loc.101
     /tmp/ccQ0DXBp.s:633    .text.flashGetOffsetAddress:0000000e .Loc.102
     /tmp/ccQ0DXBp.s:641    .text.flashGetOffsetAddress:0000001a .Loc.103
     /tmp/ccQ0DXBp.s:642    .text.flashGetOffsetAddress:0000001a .Loc.104
     /tmp/ccQ0DXBp.s:643    .text.flashGetOffsetAddress:0000001a .Loc.105
     /tmp/ccQ0DXBp.s:644    .text.flashGetOffsetAddress:0000001a .Loc.106
     /tmp/ccQ0DXBp.s:645    .text.flashGetOffsetAddress:0000001a .Loc.107
     /tmp/ccQ0DXBp.s:650    .text.flashGetOffsetAddress:00000020 .Loc.108
     /tmp/ccQ0DXBp.s:655    .text.flashGetOffsetAddress:00000028 .Loc.109
     /tmp/ccQ0DXBp.s:661    .text.flashGetOffsetAddress:00000030 .Loc.110
     /tmp/ccQ0DXBp.s:667    .text.flashGetOffsetAddress:0000003a L0
     /tmp/ccQ0DXBp.s:673    .text.flashGetAddressOffset:00000000 flashGetAddressOffset
     /tmp/ccQ0DXBp.s:676    .text.flashGetAddressOffset:00000000 .Loc.111
     /tmp/ccQ0DXBp.s:677    .text.flashGetAddressOffset:00000000 L0
     /tmp/ccQ0DXBp.s:678    .text.flashGetAddressOffset:00000000 .Loc.112
     /tmp/ccQ0DXBp.s:701    .text.flashGetAddressOffset:0000000c .Loc.113
     /tmp/ccQ0DXBp.s:702    .text.flashGetAddressOffset:0000000c .Loc.114
     /tmp/ccQ0DXBp.s:710    .text.flashGetAddressOffset:00000018 .Loc.115
     /tmp/ccQ0DXBp.s:713    .text.flashGetAddressOffset:0000001a .Loc.116
     /tmp/ccQ0DXBp.s:714    .text.flashGetAddressOffset:0000001a .Loc.117
     /tmp/ccQ0DXBp.s:715    .text.flashGetAddressOffset:0000001a .Loc.118
     /tmp/ccQ0DXBp.s:716    .text.flashGetAddressOffset:0000001a .Loc.119
     /tmp/ccQ0DXBp.s:717    .text.flashGetAddressOffset:0000001a .Loc.120
     /tmp/ccQ0DXBp.s:722    .text.flashGetAddressOffset:00000022 .Loc.121
     /tmp/ccQ0DXBp.s:729    .text.flashGetAddressOffset:0000002e .Loc.122
     /tmp/ccQ0DXBp.s:735    .text.flashGetAddressOffset:00000036 .Loc.123
     /tmp/ccQ0DXBp.s:739    .text.flashGetAddressOffset:0000003a .Loc.124
     /tmp/ccQ0DXBp.s:743    .text.flashGetAddressOffset:00000040 L0
     /tmp/ccQ0DXBp.s:163    .text.flashWaitErase:00000082 L0
     /tmp/ccQ0DXBp.s:281    .text.flashGetSectorOffset:0000006e L0
     /tmp/ccQ0DXBp.s:395    .text.flashGetSectorSize:00000064 L0
     /tmp/ccQ0DXBp.s:600    .text.flashGetOffsetSector:000000ce L0
     /tmp/ccQ0DXBp.s:670    .text.flashGetOffsetAddress:0000003a L0
     /tmp/ccQ0DXBp.s:746    .text.flashGetAddressOffset:00000040 L0
                     .debug_frame:00000000 L0
     /tmp/ccQ0DXBp.s:119    .text.flashWaitErase:0000004e .L3
     /tmp/ccQ0DXBp.s:77     .text.flashWaitErase:00000028 .L6
     /tmp/ccQ0DXBp.s:255    .text.flashGetSectorOffset:00000050 .L8
     /tmp/ccQ0DXBp.s:372    .text.flashGetSectorSize:0000004e .L11
     /tmp/ccQ0DXBp.s:581    .text.flashGetOffsetSector:000000b8 .L14
     /tmp/ccQ0DXBp.s:560    .text.flashGetOffsetSector:0000009a .L13
     /tmp/ccQ0DXBp.s:538    .text.flashGetOffsetSector:00000080 .L16
     /tmp/ccQ0DXBp.s:502    .text.flashGetOffsetSector:0000004e .L17
     /tmp/ccQ0DXBp.s:1783   .debug_abbrev:00000000 .Ldebug_abbrev0
     /tmp/ccQ0DXBp.s:3361   .debug_ranges:00000000 .Ldebug_ranges0
     /tmp/ccQ0DXBp.s:3389   .debug_line:00000000 .Ldebug_line0
     /tmp/ccQ0DXBp.s:675    .text.flashGetAddressOffset:00000000 .LFB151
     /tmp/ccQ0DXBp.s:744    .text.flashGetAddressOffset:00000040 .LFE151
     /tmp/ccQ0DXBp.s:2255   .debug_loc:00000000 .LLST26
     /tmp/ccQ0DXBp.s:2293   .debug_loc:0000004d .LLST27
     /tmp/ccQ0DXBp.s:2288   .debug_loc:00000049 .LVUS27
     /tmp/ccQ0DXBp.s:2325   .debug_loc:0000007f .LLST28
     /tmp/ccQ0DXBp.s:2318   .debug_loc:00000079 .LVUS28
     /tmp/ccQ0DXBp.s:2362   .debug_loc:000000bd .LLST29
     /tmp/ccQ0DXBp.s:2359   .debug_loc:000000bb .LVUS29
     /tmp/ccQ0DXBp.s:709    .text.flashGetAddressOffset:00000018 .LVL44
     /tmp/ccQ0DXBp.s:605    .text.flashGetOffsetAddress:00000000 .LFB150
     /tmp/ccQ0DXBp.s:668    .text.flashGetOffsetAddress:0000003a .LFE150
     /tmp/ccQ0DXBp.s:2374   .debug_loc:000000d5 .LLST22
     /tmp/ccQ0DXBp.s:2412   .debug_loc:00000122 .LLST23
     /tmp/ccQ0DXBp.s:2407   .debug_loc:0000011e .LVUS23
     /tmp/ccQ0DXBp.s:2442   .debug_loc:00000152 .LLST24
     /tmp/ccQ0DXBp.s:2437   .debug_loc:0000014e .LVUS24
     /tmp/ccQ0DXBp.s:2478   .debug_loc:00000188 .LLST25
     /tmp/ccQ0DXBp.s:2473   .debug_loc:00000184 .LVUS25
     /tmp/ccQ0DXBp.s:640    .text.flashGetOffsetAddress:0000001a .LVL41
     /tmp/ccQ0DXBp.s:400    .text.flashGetOffsetSector:00000000 .LFB149
     /tmp/ccQ0DXBp.s:598    .text.flashGetOffsetSector:000000ce .LFE149
     /tmp/ccQ0DXBp.s:2499   .debug_loc:000001b0 .LLST14
     /tmp/ccQ0DXBp.s:2585   .debug_loc:00000265 .LLST15
     /tmp/ccQ0DXBp.s:2580   .debug_loc:00000261 .LVUS15
     /tmp/ccQ0DXBp.s:2615   .debug_loc:00000295 .LLST16
     /tmp/ccQ0DXBp.s:2610   .debug_loc:00000291 .LVUS16
     /tmp/ccQ0DXBp.s:2649   .debug_loc:000002c9 .LLST17
     /tmp/ccQ0DXBp.s:2646   .debug_loc:000002c7 .LVUS17
     /tmp/ccQ0DXBp.s:2672   .debug_loc:000002eb .LLST18
     /tmp/ccQ0DXBp.s:2667   .debug_loc:000002e7 .LVUS18
     /tmp/ccQ0DXBp.s:2702   .debug_loc:0000031b .LLST19
     /tmp/ccQ0DXBp.s:2695   .debug_loc:00000315 .LVUS19
     /tmp/ccQ0DXBp.s:484    .text.flashGetOffsetSector:00000036 .LBB11
     /tmp/ccQ0DXBp.s:554    .text.flashGetOffsetSector:00000094 .LBE11
     /tmp/ccQ0DXBp.s:2739   .debug_loc:00000359 .LLST20
     /tmp/ccQ0DXBp.s:2732   .debug_loc:00000353 .LVUS20
     /tmp/ccQ0DXBp.s:2774   .debug_loc:00000395 .LLST21
     /tmp/ccQ0DXBp.s:2767   .debug_loc:0000038f .LVUS21
     /tmp/ccQ0DXBp.s:468    .text.flashGetOffsetSector:0000002a .LVL28
     /tmp/ccQ0DXBp.s:286    .text.flashGetSectorSize:00000000 .LFB148
     /tmp/ccQ0DXBp.s:393    .text.flashGetSectorSize:00000064 .LFE148
     /tmp/ccQ0DXBp.s:2815   .debug_loc:000003d8 .LLST9
     /tmp/ccQ0DXBp.s:2865   .debug_loc:0000043f .LLST10
     /tmp/ccQ0DXBp.s:2860   .debug_loc:0000043b .LVUS10
     /tmp/ccQ0DXBp.s:2895   .debug_loc:0000046f .LLST11
     /tmp/ccQ0DXBp.s:2890   .debug_loc:0000046b .LVUS11
     /tmp/ccQ0DXBp.s:2931   .debug_loc:000004a5 .LLST12
     /tmp/ccQ0DXBp.s:2926   .debug_loc:000004a1 .LVUS12
     /tmp/ccQ0DXBp.s:2971   .debug_loc:000004df .LLST13
     /tmp/ccQ0DXBp.s:2964   .debug_loc:000004d9 .LVUS13
     /tmp/ccQ0DXBp.s:329    .text.flashGetSectorSize:0000001c .LVL19
     /tmp/ccQ0DXBp.s:168    .text.flashGetSectorOffset:00000000 .LFB147
     /tmp/ccQ0DXBp.s:279    .text.flashGetSectorOffset:0000006e .LFE147
     /tmp/ccQ0DXBp.s:3001   .debug_loc:00000517 .LLST4
     /tmp/ccQ0DXBp.s:3051   .debug_loc:0000057e .LLST5
     /tmp/ccQ0DXBp.s:3046   .debug_loc:0000057a .LVUS5
     /tmp/ccQ0DXBp.s:3081   .debug_loc:000005ae .LLST6
     /tmp/ccQ0DXBp.s:3076   .debug_loc:000005aa .LVUS6
     /tmp/ccQ0DXBp.s:3117   .debug_loc:000005e4 .LLST7
     /tmp/ccQ0DXBp.s:3112   .debug_loc:000005e0 .LVUS7
     /tmp/ccQ0DXBp.s:3157   .debug_loc:0000061e .LLST8
     /tmp/ccQ0DXBp.s:3150   .debug_loc:00000618 .LVUS8
     /tmp/ccQ0DXBp.s:212    .text.flashGetSectorOffset:0000001e .LVL10
     /tmp/ccQ0DXBp.s:16     .text.flashWaitErase:00000000 .LFB146
     /tmp/ccQ0DXBp.s:161    .text.flashWaitErase:00000082 .LFE146
     /tmp/ccQ0DXBp.s:3187   .debug_loc:00000656 .LLST0
     /tmp/ccQ0DXBp.s:3262   .debug_loc:000006f2 .LLST1
     /tmp/ccQ0DXBp.s:3255   .debug_loc:000006ec .LVUS1
     /tmp/ccQ0DXBp.s:3301   .debug_loc:00000732 .LLST2
     /tmp/ccQ0DXBp.s:3296   .debug_loc:0000072e .LVUS2
     /tmp/ccQ0DXBp.s:80     .text.flashWaitErase:00000028 .LBI6
     /tmp/ccQ0DXBp.s:3315   .debug_loc:00000752 .LLST3
     /tmp/ccQ0DXBp.s:3312   .debug_loc:00000750 .LVUS3
     /tmp/ccQ0DXBp.s:113    .text.flashWaitErase:0000004e .LVL6
     /tmp/ccQ0DXBp.s:137    .text.flashWaitErase:00000064 .LVL7
     /tmp/ccQ0DXBp.s:680    .text.flashGetAddressOffset:00000002 .LCFI38
     /tmp/ccQ0DXBp.s:684    .text.flashGetAddressOffset:00000004 .LCFI39
     /tmp/ccQ0DXBp.s:688    .text.flashGetAddressOffset:00000006 .LCFI40
     /tmp/ccQ0DXBp.s:692    .text.flashGetAddressOffset:00000008 .LCFI41
     /tmp/ccQ0DXBp.s:674    .text.flashGetAddressOffset:00000000 .LVL43
     /tmp/ccQ0DXBp.s:738    .text.flashGetAddressOffset:0000003a .LVL46
     /tmp/ccQ0DXBp.s:712    .text.flashGetAddressOffset:0000001a .LVL45
     /tmp/ccQ0DXBp.s:610    .text.flashGetOffsetAddress:00000002 .LCFI34
     /tmp/ccQ0DXBp.s:614    .text.flashGetOffsetAddress:00000004 .LCFI35
     /tmp/ccQ0DXBp.s:618    .text.flashGetOffsetAddress:00000006 .LCFI36
     /tmp/ccQ0DXBp.s:622    .text.flashGetOffsetAddress:00000008 .LCFI37
     /tmp/ccQ0DXBp.s:604    .text.flashGetOffsetAddress:00000000 .LVL40
     /tmp/ccQ0DXBp.s:649    .text.flashGetOffsetAddress:00000020 .LVL42
     /tmp/ccQ0DXBp.s:405    .text.flashGetOffsetSector:00000002 .LCFI22
     /tmp/ccQ0DXBp.s:409    .text.flashGetOffsetSector:00000004 .LCFI23
     /tmp/ccQ0DXBp.s:413    .text.flashGetOffsetSector:00000006 .LCFI24
     /tmp/ccQ0DXBp.s:417    .text.flashGetOffsetSector:00000008 .LCFI25
     /tmp/ccQ0DXBp.s:421    .text.flashGetOffsetSector:0000000a .LCFI26
     /tmp/ccQ0DXBp.s:425    .text.flashGetOffsetSector:0000000c .LCFI27
     /tmp/ccQ0DXBp.s:429    .text.flashGetOffsetSector:0000000e .LCFI28
     /tmp/ccQ0DXBp.s:433    .text.flashGetOffsetSector:00000010 .LCFI29
     /tmp/ccQ0DXBp.s:437    .text.flashGetOffsetSector:00000012 .LCFI30
     /tmp/ccQ0DXBp.s:441    .text.flashGetOffsetSector:00000014 .LCFI31
     /tmp/ccQ0DXBp.s:445    .text.flashGetOffsetSector:00000016 .LCFI32
     /tmp/ccQ0DXBp.s:449    .text.flashGetOffsetSector:00000018 .LCFI33
     /tmp/ccQ0DXBp.s:399    .text.flashGetOffsetSector:00000000 .LVL27
     /tmp/ccQ0DXBp.s:593    .text.flashGetOffsetSector:000000cc .LVL39
     /tmp/ccQ0DXBp.s:483    .text.flashGetOffsetSector:00000036 .LVL30
     /tmp/ccQ0DXBp.s:501    .text.flashGetOffsetSector:0000004e .LVL31
     /tmp/ccQ0DXBp.s:559    .text.flashGetOffsetSector:0000009a .LVL36
     /tmp/ccQ0DXBp.s:471    .text.flashGetOffsetSector:0000002c .LVL29
     /tmp/ccQ0DXBp.s:567    .text.flashGetOffsetSector:000000a2 .LVL37
     /tmp/ccQ0DXBp.s:580    .text.flashGetOffsetSector:000000b8 .LVL38
     /tmp/ccQ0DXBp.s:509    .text.flashGetOffsetSector:00000056 .LVL32
     /tmp/ccQ0DXBp.s:527    .text.flashGetOffsetSector:00000070 .LVL33
     /tmp/ccQ0DXBp.s:547    .text.flashGetOffsetSector:0000008a .LVL35
     /tmp/ccQ0DXBp.s:291    .text.flashGetSectorSize:00000002 .LCFI16
     /tmp/ccQ0DXBp.s:295    .text.flashGetSectorSize:00000004 .LCFI17
     /tmp/ccQ0DXBp.s:299    .text.flashGetSectorSize:00000006 .LCFI18
     /tmp/ccQ0DXBp.s:303    .text.flashGetSectorSize:00000008 .LCFI19
     /tmp/ccQ0DXBp.s:307    .text.flashGetSectorSize:0000000a .LCFI20
     /tmp/ccQ0DXBp.s:311    .text.flashGetSectorSize:0000000c .LCFI21
     /tmp/ccQ0DXBp.s:285    .text.flashGetSectorSize:00000000 .LVL18
     /tmp/ccQ0DXBp.s:359    .text.flashGetSectorSize:00000040 .LVL22
     /tmp/ccQ0DXBp.s:371    .text.flashGetSectorSize:0000004e .LVL24
     /tmp/ccQ0DXBp.s:379    .text.flashGetSectorSize:00000056 .LVL25
     /tmp/ccQ0DXBp.s:332    .text.flashGetSectorSize:0000001e .LVL20
     /tmp/ccQ0DXBp.s:340    .text.flashGetSectorSize:00000022 .LVL21
     /tmp/ccQ0DXBp.s:364    .text.flashGetSectorSize:00000044 .LVL23
     /tmp/ccQ0DXBp.s:385    .text.flashGetSectorSize:0000005a .LVL26
     /tmp/ccQ0DXBp.s:173    .text.flashGetSectorOffset:00000002 .LCFI10
     /tmp/ccQ0DXBp.s:177    .text.flashGetSectorOffset:00000004 .LCFI11
     /tmp/ccQ0DXBp.s:181    .text.flashGetSectorOffset:00000006 .LCFI12
     /tmp/ccQ0DXBp.s:185    .text.flashGetSectorOffset:00000008 .LCFI13
     /tmp/ccQ0DXBp.s:189    .text.flashGetSectorOffset:0000000a .LCFI14
     /tmp/ccQ0DXBp.s:193    .text.flashGetSectorOffset:0000000c .LCFI15
     /tmp/ccQ0DXBp.s:167    .text.flashGetSectorOffset:00000000 .LVL9
     /tmp/ccQ0DXBp.s:242    .text.flashGetSectorOffset:00000042 .LVL13
     /tmp/ccQ0DXBp.s:254    .text.flashGetSectorOffset:00000050 .LVL15
     /tmp/ccQ0DXBp.s:265    .text.flashGetSectorOffset:00000060 .LVL16
     /tmp/ccQ0DXBp.s:215    .text.flashGetSectorOffset:00000020 .LVL11
     /tmp/ccQ0DXBp.s:223    .text.flashGetSectorOffset:00000024 .LVL12
     /tmp/ccQ0DXBp.s:247    .text.flashGetSectorOffset:00000046 .LVL14
     /tmp/ccQ0DXBp.s:271    .text.flashGetSectorOffset:00000064 .LVL17
     /tmp/ccQ0DXBp.s:21     .text.flashWaitErase:00000002 .LCFI0
     /tmp/ccQ0DXBp.s:25     .text.flashWaitErase:00000004 .LCFI1
     /tmp/ccQ0DXBp.s:29     .text.flashWaitErase:00000006 .LCFI2
     /tmp/ccQ0DXBp.s:33     .text.flashWaitErase:00000008 .LCFI3
     /tmp/ccQ0DXBp.s:37     .text.flashWaitErase:0000000a .LCFI4
     /tmp/ccQ0DXBp.s:41     .text.flashWaitErase:0000000c .LCFI5
     /tmp/ccQ0DXBp.s:45     .text.flashWaitErase:0000000e .LCFI6
     /tmp/ccQ0DXBp.s:49     .text.flashWaitErase:00000010 .LCFI7
     /tmp/ccQ0DXBp.s:54     .text.flashWaitErase:00000014 .LCFI8
     /tmp/ccQ0DXBp.s:58     .text.flashWaitErase:00000018 .LCFI9
     /tmp/ccQ0DXBp.s:15     .text.flashWaitErase:00000000 .LVL0
     /tmp/ccQ0DXBp.s:73     .text.flashWaitErase:00000026 .LVL1
     /tmp/ccQ0DXBp.s:153    .text.flashWaitErase:00000078 .LVL8
     /tmp/ccQ0DXBp.s:76     .text.flashWaitErase:00000028 .LVL2
     /tmp/ccQ0DXBp.s:110    .text.flashWaitErase:0000004a .LVL5
     /tmp/ccQ0DXBp.s:92     .text.flashWaitErase:00000030 .LVL3
     /tmp/ccQ0DXBp.s:103    .text.flashWaitErase:00000044 .LVL4
     /tmp/ccQ0DXBp.s:753    .debug_info:00000000 .Ldebug_info0
     /tmp/ccQ0DXBp.s:65     .text.flashWaitErase:0000001a .LBB5
     /tmp/ccQ0DXBp.s:117    .text.flashWaitErase:0000004e .LBE5
     /tmp/ccQ0DXBp.s:121    .text.flashWaitErase:0000004e .LBB10
     /tmp/ccQ0DXBp.s:143    .text.flashWaitErase:00000068 .LBE10
     /tmp/ccQ0DXBp.s:79     .text.flashWaitErase:00000028 .LBB6
     /tmp/ccQ0DXBp.s:86     .text.flashWaitErase:00000028 .LBE6
     /tmp/ccQ0DXBp.s:106    .text.flashWaitErase:00000048 .LBB9
     /tmp/ccQ0DXBp.s:116    .text.flashWaitErase:0000004e .LBE9

UNDEFINED SYMBOLS
__muluhisi3
__udivmodsi4
chThdSleep
__mulsi3
