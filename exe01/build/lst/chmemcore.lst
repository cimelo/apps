   1               		.file	"chmemcore.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.file 1 "../../os/oslib/src/chmemcore.c"
  11               		.section	.text.__core_init,"ax",@progbits
  12               	.global	__core_init
  14               	__core_init:
  15               	.LFB98:
   1:../../os/oslib/src/chmemcore.c **** /*
   2:../../os/oslib/src/chmemcore.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/oslib/src/chmemcore.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/oslib/src/chmemcore.c **** 
   5:../../os/oslib/src/chmemcore.c ****     This file is part of ChibiOS.
   6:../../os/oslib/src/chmemcore.c **** 
   7:../../os/oslib/src/chmemcore.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/oslib/src/chmemcore.c ****     it under the terms of the GNU General Public License as published by
   9:../../os/oslib/src/chmemcore.c ****     the Free Software Foundation version 3 of the License.
  10:../../os/oslib/src/chmemcore.c **** 
  11:../../os/oslib/src/chmemcore.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/oslib/src/chmemcore.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/oslib/src/chmemcore.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/oslib/src/chmemcore.c ****     GNU General Public License for more details.
  15:../../os/oslib/src/chmemcore.c **** 
  16:../../os/oslib/src/chmemcore.c ****     You should have received a copy of the GNU General Public License
  17:../../os/oslib/src/chmemcore.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/oslib/src/chmemcore.c **** */
  19:../../os/oslib/src/chmemcore.c **** 
  20:../../os/oslib/src/chmemcore.c **** /**
  21:../../os/oslib/src/chmemcore.c ****  * @file    oslib/src/chmemcore.c
  22:../../os/oslib/src/chmemcore.c ****  * @brief   Core memory manager code.
  23:../../os/oslib/src/chmemcore.c ****  *
  24:../../os/oslib/src/chmemcore.c ****  * @addtogroup oslib_memcore
  25:../../os/oslib/src/chmemcore.c ****  * @details Core Memory Manager related APIs and services.
  26:../../os/oslib/src/chmemcore.c ****  *          <h2>Operation mode</h2>
  27:../../os/oslib/src/chmemcore.c ****  *          The core memory manager is a simplified allocator that only
  28:../../os/oslib/src/chmemcore.c ****  *          allows to allocate memory blocks without the possibility to
  29:../../os/oslib/src/chmemcore.c ****  *          free them.<br>
  30:../../os/oslib/src/chmemcore.c ****  *          This allocator is meant as a memory blocks provider for the
  31:../../os/oslib/src/chmemcore.c ****  *          other allocators such as:
  32:../../os/oslib/src/chmemcore.c ****  *          - C-Runtime allocator (through a compiler specific adapter module).
  33:../../os/oslib/src/chmemcore.c ****  *          - Heap allocator (see @ref oslib_memheaps).
  34:../../os/oslib/src/chmemcore.c ****  *          - Memory pools allocator (see @ref oslib_mempools).
  35:../../os/oslib/src/chmemcore.c ****  *          .
  36:../../os/oslib/src/chmemcore.c ****  *          By having a centralized memory provider the various allocators
  37:../../os/oslib/src/chmemcore.c ****  *          can coexist and share the main memory.<br>
  38:../../os/oslib/src/chmemcore.c ****  *          This allocator, alone, is also useful for very simple
  39:../../os/oslib/src/chmemcore.c ****  *          applications that just require a simple way to get memory
  40:../../os/oslib/src/chmemcore.c ****  *          blocks.
  41:../../os/oslib/src/chmemcore.c ****  * @pre     In order to use the core memory manager APIs the @p CH_CFG_USE_MEMCORE
  42:../../os/oslib/src/chmemcore.c ****  *          option must be enabled in @p chconf.h.
  43:../../os/oslib/src/chmemcore.c ****  * @note    Compatible with RT and NIL.
  44:../../os/oslib/src/chmemcore.c ****  * @{
  45:../../os/oslib/src/chmemcore.c ****  */
  46:../../os/oslib/src/chmemcore.c **** 
  47:../../os/oslib/src/chmemcore.c **** #include "ch.h"
  48:../../os/oslib/src/chmemcore.c **** 
  49:../../os/oslib/src/chmemcore.c **** #if (CH_CFG_USE_MEMCORE == TRUE) || defined(__DOXYGEN__)
  50:../../os/oslib/src/chmemcore.c **** 
  51:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  52:../../os/oslib/src/chmemcore.c **** /* Module exported variables.                                                */
  53:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  54:../../os/oslib/src/chmemcore.c **** 
  55:../../os/oslib/src/chmemcore.c **** /**
  56:../../os/oslib/src/chmemcore.c ****  * @brief   Memory core descriptor.
  57:../../os/oslib/src/chmemcore.c ****  */
  58:../../os/oslib/src/chmemcore.c **** memcore_t ch_memcore;
  59:../../os/oslib/src/chmemcore.c **** 
  60:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  61:../../os/oslib/src/chmemcore.c **** /* Module local types.                                                       */
  62:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  63:../../os/oslib/src/chmemcore.c **** 
  64:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  65:../../os/oslib/src/chmemcore.c **** /* Module local variables.                                                   */
  66:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  67:../../os/oslib/src/chmemcore.c **** 
  68:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  69:../../os/oslib/src/chmemcore.c **** /* Module local functions.                                                   */
  70:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  71:../../os/oslib/src/chmemcore.c **** 
  72:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  73:../../os/oslib/src/chmemcore.c **** /* Module exported functions.                                                */
  74:../../os/oslib/src/chmemcore.c **** /*===========================================================================*/
  75:../../os/oslib/src/chmemcore.c **** 
  76:../../os/oslib/src/chmemcore.c **** /**
  77:../../os/oslib/src/chmemcore.c ****  * @brief   Low level memory manager initialization.
  78:../../os/oslib/src/chmemcore.c ****  *
  79:../../os/oslib/src/chmemcore.c ****  * @notapi
  80:../../os/oslib/src/chmemcore.c ****  */
  81:../../os/oslib/src/chmemcore.c **** void __core_init(void) {
  16               		.loc 1 81 24 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  82:../../os/oslib/src/chmemcore.c **** #if CH_CFG_MEMCORE_SIZE == 0
  83:../../os/oslib/src/chmemcore.c ****   extern uint8_t __heap_base__[];
  84:../../os/oslib/src/chmemcore.c ****   extern uint8_t __heap_end__[];
  85:../../os/oslib/src/chmemcore.c **** 
  86:../../os/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] Required cast operations.*/
  87:../../os/oslib/src/chmemcore.c ****   ch_memcore.basemem = __heap_base__;
  88:../../os/oslib/src/chmemcore.c ****   ch_memcore.topmem  = __heap_end__;
  89:../../os/oslib/src/chmemcore.c ****   /*lint restore*/
  90:../../os/oslib/src/chmemcore.c **** #else
  91:../../os/oslib/src/chmemcore.c ****   static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];
  22               		.loc 1 91 3 view .LVU1
  92:../../os/oslib/src/chmemcore.c **** 
  93:../../os/oslib/src/chmemcore.c ****   ch_memcore.basemem = &static_heap[0];
  23               		.loc 1 93 3 view .LVU2
  24               		.loc 1 93 22 is_stmt 0 view .LVU3
  25 0000 E0E0      		ldi r30,lo8(ch_memcore)
  26 0002 F0E0      		ldi r31,hi8(ch_memcore)
  27 0004 80E0      		ldi r24,lo8(static_heap.0)
  28 0006 90E0      		ldi r25,hi8(static_heap.0)
  29 0008 9183      		std Z+1,r25
  30 000a 8083      		st Z,r24
  94:../../os/oslib/src/chmemcore.c ****   ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
  31               		.loc 1 94 3 is_stmt 1 view .LVU4
  32               		.loc 1 94 22 is_stmt 0 view .LVU5
  33 000c 80E0      		ldi r24,lo8(static_heap.0+128)
  34 000e 90E0      		ldi r25,hi8(static_heap.0+128)
  35 0010 9383      		std Z+3,r25
  36 0012 8283      		std Z+2,r24
  37               	/* epilogue start */
  95:../../os/oslib/src/chmemcore.c **** #endif
  96:../../os/oslib/src/chmemcore.c **** }
  38               		.loc 1 96 1 view .LVU6
  39 0014 0895      		ret
  40               		.cfi_endproc
  41               	.LFE98:
  43               		.section	.text.chCoreAllocFromBaseI,"ax",@progbits
  44               	.global	chCoreAllocFromBaseI
  46               	chCoreAllocFromBaseI:
  47               	.LVL0:
  48               	.LFB99:
  97:../../os/oslib/src/chmemcore.c **** 
  98:../../os/oslib/src/chmemcore.c **** /**
  99:../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the lowest address upward.
 100:../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 101:../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 102:../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 103:../../os/oslib/src/chmemcore.c ****  *
 104:../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 105:../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 106:../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 107:../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 108:../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 109:../../os/oslib/src/chmemcore.c ****  *
 110:../../os/oslib/src/chmemcore.c ****  * @iclass
 111:../../os/oslib/src/chmemcore.c ****  */
 112:../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromBaseI(size_t size, unsigned align, size_t offset) {
  49               		.loc 1 112 72 is_stmt 1 view -0
  50               		.cfi_startproc
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 0 */
  54               	.L__stack_usage = 0
  55               		.loc 1 112 72 is_stmt 0 view .LVU8
  56 0000 9B01      		movw r18,r22
 113:../../os/oslib/src/chmemcore.c ****   uint8_t *p, *next;
  57               		.loc 1 113 3 is_stmt 1 view .LVU9
 114:../../os/oslib/src/chmemcore.c **** 
 115:../../os/oslib/src/chmemcore.c ****   chDbgCheckClassI();
  58               		.loc 1 115 21 view .LVU10
 116:../../os/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
  59               		.loc 1 116 3 view .LVU11
  60               		.loc 1 116 3 view .LVU12
  61               		.loc 1 116 3 discriminator 7 view .LVU13
 117:../../os/oslib/src/chmemcore.c **** 
 118:../../os/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
  62               		.loc 1 118 3 view .LVU14
  63               		.loc 1 118 18 is_stmt 0 view .LVU15
  64 0002 6091 0000 		lds r22,ch_memcore
  65 0006 7091 0000 		lds r23,ch_memcore+1
  66               	.LVL1:
  67               		.loc 1 118 18 view .LVU16
  68 000a 460F      		add r20,r22
  69 000c 571F      		adc r21,r23
  70               	.LVL2:
  71               		.loc 1 118 18 view .LVU17
  72 000e F901      		movw r30,r18
  73 0010 3197      		sbiw r30,1
  74 0012 4E0F      		add r20,r30
  75 0014 5F1F      		adc r21,r31
  76 0016 3195      		neg r19
  77 0018 2195      		neg r18
  78 001a 3109      		sbc r19,__zero_reg__
  79               	.LVL3:
  80               		.loc 1 118 18 view .LVU18
  81 001c 4223      		and r20,r18
  82 001e 5323      		and r21,r19
  83               	.LVL4:
 119:../../os/oslib/src/chmemcore.c ****   next = p + size;
  84               		.loc 1 119 3 is_stmt 1 view .LVU19
  85               		.loc 1 119 8 is_stmt 0 view .LVU20
  86 0020 840F      		add r24,r20
  87 0022 951F      		adc r25,r21
  88               	.LVL5:
 120:../../os/oslib/src/chmemcore.c **** 
 121:../../os/oslib/src/chmemcore.c ****   /* Considering also the case where there is numeric overflow.*/
 122:../../os/oslib/src/chmemcore.c ****   if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
  89               		.loc 1 122 3 is_stmt 1 view .LVU21
  90               		.loc 1 122 6 is_stmt 0 view .LVU22
  91 0024 2091 0000 		lds r18,ch_memcore+2
  92 0028 3091 0000 		lds r19,ch_memcore+2+1
  93               	.LVL6:
  94               		.loc 1 122 6 view .LVU23
  95 002c 2817      		cp r18,r24
  96 002e 3907      		cpc r19,r25
  97 0030 00F0      		brlo .L6
  98               		.loc 1 122 34 discriminator 1 view .LVU24
  99 0032 8617      		cp r24,r22
 100 0034 9707      		cpc r25,r23
 101 0036 00F0      		brlo .L6
 123:../../os/oslib/src/chmemcore.c ****     return NULL;
 124:../../os/oslib/src/chmemcore.c ****   }
 125:../../os/oslib/src/chmemcore.c **** 
 126:../../os/oslib/src/chmemcore.c ****   ch_memcore.basemem = next;
 102               		.loc 1 126 3 is_stmt 1 view .LVU25
 103               		.loc 1 126 22 is_stmt 0 view .LVU26
 104 0038 9093 0000 		sts ch_memcore+1,r25
 105 003c 8093 0000 		sts ch_memcore,r24
 127:../../os/oslib/src/chmemcore.c **** 
 128:../../os/oslib/src/chmemcore.c ****   return p;
 106               		.loc 1 128 3 is_stmt 1 view .LVU27
 129:../../os/oslib/src/chmemcore.c **** }
 107               		.loc 1 129 1 is_stmt 0 view .LVU28
 108 0040 CA01      		movw r24,r20
 109               	.LVL7:
 110               	/* epilogue start */
 111               		.loc 1 129 1 view .LVU29
 112 0042 0895      		ret
 113               	.LVL8:
 114               	.L6:
 123:../../os/oslib/src/chmemcore.c ****     return NULL;
 115               		.loc 1 123 12 view .LVU30
 116 0044 40E0      		ldi r20,0
 117 0046 50E0      		ldi r21,0
 118               	.LVL9:
 119               		.loc 1 129 1 view .LVU31
 120 0048 CA01      		movw r24,r20
 121               	.LVL10:
 122               	/* epilogue start */
 123               		.loc 1 129 1 view .LVU32
 124 004a 0895      		ret
 125               		.cfi_endproc
 126               	.LFE99:
 128               		.section	.text.chCoreAllocFromTopI,"ax",@progbits
 129               	.global	chCoreAllocFromTopI
 131               	chCoreAllocFromTopI:
 132               	.LVL11:
 133               	.LFB100:
 130:../../os/oslib/src/chmemcore.c **** 
 131:../../os/oslib/src/chmemcore.c **** /**
 132:../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the top address downward.
 133:../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 134:../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 135:../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 136:../../os/oslib/src/chmemcore.c ****  *
 137:../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 138:../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 139:../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 140:../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 141:../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 142:../../os/oslib/src/chmemcore.c ****  *
 143:../../os/oslib/src/chmemcore.c ****  * @iclass
 144:../../os/oslib/src/chmemcore.c ****  */
 145:../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 134               		.loc 1 145 71 is_stmt 1 view -0
 135               		.cfi_startproc
 136               	/* prologue: function */
 137               	/* frame size = 0 */
 138               	/* stack size = 0 */
 139               	.L__stack_usage = 0
 146:../../os/oslib/src/chmemcore.c ****   uint8_t *p, *prev;
 140               		.loc 1 146 3 view .LVU34
 147:../../os/oslib/src/chmemcore.c **** 
 148:../../os/oslib/src/chmemcore.c ****   chDbgCheckClassI();
 141               		.loc 1 148 21 view .LVU35
 149:../../os/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 142               		.loc 1 149 3 view .LVU36
 143               		.loc 1 149 3 view .LVU37
 144               		.loc 1 149 3 discriminator 7 view .LVU38
 150:../../os/oslib/src/chmemcore.c **** 
 151:../../os/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 145               		.loc 1 151 3 view .LVU39
 146               		.loc 1 151 18 is_stmt 0 view .LVU40
 147 0000 E091 0000 		lds r30,ch_memcore+2
 148 0004 F091 0000 		lds r31,ch_memcore+2+1
 149 0008 9F01      		movw r18,r30
 150 000a 281B      		sub r18,r24
 151 000c 390B      		sbc r19,r25
 152 000e C901      		movw r24,r18
 153               	.LVL12:
 154               		.loc 1 151 18 view .LVU41
 155 0010 7195      		neg r23
 156 0012 6195      		neg r22
 157 0014 7109      		sbc r23,__zero_reg__
 158               	.LVL13:
 159               		.loc 1 151 18 view .LVU42
 160 0016 8623      		and r24,r22
 161 0018 9723      		and r25,r23
 162               	.LVL14:
 152:../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 163               		.loc 1 152 3 is_stmt 1 view .LVU43
 164               		.loc 1 152 8 is_stmt 0 view .LVU44
 165 001a 9C01      		movw r18,r24
 166 001c 241B      		sub r18,r20
 167 001e 350B      		sbc r19,r21
 168               	.LVL15:
 153:../../os/oslib/src/chmemcore.c **** 
 154:../../os/oslib/src/chmemcore.c ****   /* Considering also the case where there is numeric overflow.*/
 155:../../os/oslib/src/chmemcore.c ****   if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 169               		.loc 1 155 3 is_stmt 1 view .LVU45
 170               		.loc 1 155 6 is_stmt 0 view .LVU46
 171 0020 4091 0000 		lds r20,ch_memcore
 172 0024 5091 0000 		lds r21,ch_memcore+1
 173               	.LVL16:
 174               		.loc 1 155 6 view .LVU47
 175 0028 2417      		cp r18,r20
 176 002a 3507      		cpc r19,r21
 177 002c 00F0      		brlo .L10
 178               		.loc 1 155 35 discriminator 1 view .LVU48
 179 002e E217      		cp r30,r18
 180 0030 F307      		cpc r31,r19
 181 0032 00F0      		brlo .L10
 156:../../os/oslib/src/chmemcore.c ****     return NULL;
 157:../../os/oslib/src/chmemcore.c ****   }
 158:../../os/oslib/src/chmemcore.c **** 
 159:../../os/oslib/src/chmemcore.c ****   ch_memcore.topmem = prev;
 182               		.loc 1 159 3 is_stmt 1 view .LVU49
 183               		.loc 1 159 21 is_stmt 0 view .LVU50
 184 0034 3093 0000 		sts ch_memcore+2+1,r19
 185 0038 2093 0000 		sts ch_memcore+2,r18
 160:../../os/oslib/src/chmemcore.c **** 
 161:../../os/oslib/src/chmemcore.c ****   return p;
 186               		.loc 1 161 3 is_stmt 1 view .LVU51
 187               		.loc 1 161 10 is_stmt 0 view .LVU52
 188 003c 0895      		ret
 189               	.L10:
 156:../../os/oslib/src/chmemcore.c ****     return NULL;
 190               		.loc 1 156 12 view .LVU53
 191 003e 80E0      		ldi r24,0
 192 0040 90E0      		ldi r25,0
 193               	.LVL17:
 194               	/* epilogue start */
 162:../../os/oslib/src/chmemcore.c **** }
 195               		.loc 1 162 1 view .LVU54
 196 0042 0895      		ret
 197               		.cfi_endproc
 198               	.LFE100:
 200               		.section	.text.chCoreAllocFromBase,"ax",@progbits
 201               	.global	chCoreAllocFromBase
 203               	chCoreAllocFromBase:
 204               	.LVL18:
 205               	.LFB101:
 163:../../os/oslib/src/chmemcore.c **** 
 164:../../os/oslib/src/chmemcore.c **** /**
 165:../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the lowest address upward.
 166:../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 167:../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 168:../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 169:../../os/oslib/src/chmemcore.c ****  *
 170:../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 171:../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 172:../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 173:../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 174:../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 175:../../os/oslib/src/chmemcore.c ****  *
 176:../../os/oslib/src/chmemcore.c ****  * @api
 177:../../os/oslib/src/chmemcore.c ****  */
 178:../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromBase(size_t size, unsigned align, size_t offset) {
 206               		.loc 1 178 71 is_stmt 1 view -0
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212               		.loc 1 178 71 is_stmt 0 view .LVU56
 213 0000 FC01      		movw r30,r24
 214 0002 DB01      		movw r26,r22
 215 0004 9A01      		movw r18,r20
 179:../../os/oslib/src/chmemcore.c ****   void *p;
 216               		.loc 1 179 3 is_stmt 1 view .LVU57
 180:../../os/oslib/src/chmemcore.c **** 
 181:../../os/oslib/src/chmemcore.c ****   chSysLock();
 217               		.loc 1 181 3 view .LVU58
 218               	.LBB16:
 219               	.LBI16:
 220               		.file 2 "../../os/common/ports/AVR/chcore.h"
   1:../../os/common/ports/AVR/chcore.h **** /*
   2:../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../os/common/ports/AVR/chcore.h **** 
   5:../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../os/common/ports/AVR/chcore.h **** 
   7:../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../os/common/ports/AVR/chcore.h **** 
  11:../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../os/common/ports/AVR/chcore.h **** 
  16:../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../os/common/ports/AVR/chcore.h **** */
  19:../../os/common/ports/AVR/chcore.h **** 
  20:../../os/common/ports/AVR/chcore.h **** /**
  21:../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../os/common/ports/AVR/chcore.h ****  *
  24:../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../os/common/ports/AVR/chcore.h ****  */
  27:../../os/common/ports/AVR/chcore.h **** 
  28:../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../os/common/ports/AVR/chcore.h **** 
  31:../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../os/common/ports/AVR/chcore.h **** 
  34:../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../os/common/ports/AVR/chcore.h **** 
  36:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../os/common/ports/AVR/chcore.h **** 
  40:../../os/common/ports/AVR/chcore.h **** /**
  41:../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../os/common/ports/AVR/chcore.h ****  */
  44:../../os/common/ports/AVR/chcore.h **** /**
  45:../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../os/common/ports/AVR/chcore.h ****  */
  47:../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../os/common/ports/AVR/chcore.h **** 
  49:../../os/common/ports/AVR/chcore.h **** /**
  50:../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../os/common/ports/AVR/chcore.h ****  */
  53:../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../os/common/ports/AVR/chcore.h **** 
  55:../../os/common/ports/AVR/chcore.h **** /**
  56:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../os/common/ports/AVR/chcore.h ****  */
  59:../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../os/common/ports/AVR/chcore.h **** 
  61:../../os/common/ports/AVR/chcore.h **** /**
  62:../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../os/common/ports/AVR/chcore.h ****  */
  65:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../os/common/ports/AVR/chcore.h **** 
  68:../../os/common/ports/AVR/chcore.h **** /**
  69:../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../os/common/ports/AVR/chcore.h ****  */
  72:../../os/common/ports/AVR/chcore.h **** /**
  73:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../os/common/ports/AVR/chcore.h ****  */
  75:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../os/common/ports/AVR/chcore.h **** 
  77:../../os/common/ports/AVR/chcore.h **** /**
  78:../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../os/common/ports/AVR/chcore.h ****  */
  80:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../os/common/ports/AVR/chcore.h **** 
  82:../../os/common/ports/AVR/chcore.h **** /**
  83:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../os/common/ports/AVR/chcore.h ****  */
  85:../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../os/common/ports/AVR/chcore.h **** 
  87:../../os/common/ports/AVR/chcore.h **** /**
  88:../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../os/common/ports/AVR/chcore.h ****  */
  90:../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../os/common/ports/AVR/chcore.h **** 
  92:../../os/common/ports/AVR/chcore.h **** /**
  93:../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../os/common/ports/AVR/chcore.h ****  */
  95:../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../os/common/ports/AVR/chcore.h **** 
  98:../../os/common/ports/AVR/chcore.h **** #else
  99:../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../os/common/ports/AVR/chcore.h **** #endif
 101:../../os/common/ports/AVR/chcore.h **** 
 102:../../os/common/ports/AVR/chcore.h **** /**
 103:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../os/common/ports/AVR/chcore.h ****  */
 105:../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../os/common/ports/AVR/chcore.h **** 
 108:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../os/common/ports/AVR/chcore.h **** 
 112:../../os/common/ports/AVR/chcore.h **** /**
 113:../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../os/common/ports/AVR/chcore.h ****  */
 118:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../os/common/ports/AVR/chcore.h **** #endif
 121:../../os/common/ports/AVR/chcore.h **** 
 122:../../os/common/ports/AVR/chcore.h **** /**
 123:../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../os/common/ports/AVR/chcore.h ****  */
 127:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../os/common/ports/AVR/chcore.h **** #endif
 130:../../os/common/ports/AVR/chcore.h **** 
 131:../../os/common/ports/AVR/chcore.h **** /**
 132:../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../os/common/ports/AVR/chcore.h ****  */
 134:../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../os/common/ports/AVR/chcore.h **** #endif
 137:../../os/common/ports/AVR/chcore.h **** 
 138:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../os/common/ports/AVR/chcore.h **** 
 142:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../os/common/ports/AVR/chcore.h **** 
 146:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../os/common/ports/AVR/chcore.h **** 
 150:../../os/common/ports/AVR/chcore.h **** /**
 151:../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../os/common/ports/AVR/chcore.h ****  */
 154:../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../os/common/ports/AVR/chcore.h **** 
 156:../../os/common/ports/AVR/chcore.h **** /**
 157:../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../os/common/ports/AVR/chcore.h ****  */
 163:../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../os/common/ports/AVR/chcore.h **** #endif
 183:../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../os/common/ports/AVR/chcore.h **** };
 185:../../os/common/ports/AVR/chcore.h **** 
 186:../../os/common/ports/AVR/chcore.h **** /**
 187:../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../os/common/ports/AVR/chcore.h ****  */
 195:../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../os/common/ports/AVR/chcore.h **** #endif
 218:../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../os/common/ports/AVR/chcore.h **** };
 221:../../os/common/ports/AVR/chcore.h **** 
 222:../../os/common/ports/AVR/chcore.h **** /**
 223:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../os/common/ports/AVR/chcore.h ****  */
 227:../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../os/common/ports/AVR/chcore.h **** };
 230:../../os/common/ports/AVR/chcore.h **** 
 231:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../os/common/ports/AVR/chcore.h **** 
 233:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../os/common/ports/AVR/chcore.h **** 
 237:../../os/common/ports/AVR/chcore.h **** /**
 238:../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../os/common/ports/AVR/chcore.h ****  */
 242:../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../os/common/ports/AVR/chcore.h **** }
 254:../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../os/common/ports/AVR/chcore.h **** }
 265:../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../os/common/ports/AVR/chcore.h **** 
 267:../../os/common/ports/AVR/chcore.h **** /**
 268:../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../os/common/ports/AVR/chcore.h ****  */
 271:../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../os/common/ports/AVR/chcore.h **** 
 275:../../os/common/ports/AVR/chcore.h **** /**
 276:../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../os/common/ports/AVR/chcore.h ****  *
 280:../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../os/common/ports/AVR/chcore.h ****  */
 283:../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../os/common/ports/AVR/chcore.h **** 
 286:../../os/common/ports/AVR/chcore.h **** /**
 287:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../os/common/ports/AVR/chcore.h ****  */
 289:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../os/common/ports/AVR/chcore.h **** 
 291:../../os/common/ports/AVR/chcore.h **** /**
 292:../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../os/common/ports/AVR/chcore.h ****  */
 294:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../os/common/ports/AVR/chcore.h **** 
 296:../../os/common/ports/AVR/chcore.h **** /**
 297:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../os/common/ports/AVR/chcore.h ****  */
 303:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../os/common/ports/AVR/chcore.h **** }
 308:../../os/common/ports/AVR/chcore.h **** 
 309:../../os/common/ports/AVR/chcore.h **** /**
 310:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../os/common/ports/AVR/chcore.h ****  */
 314:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../os/common/ports/AVR/chcore.h **** }
 321:../../os/common/ports/AVR/chcore.h **** 
 322:../../os/common/ports/AVR/chcore.h **** /**
 323:../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../os/common/ports/AVR/chcore.h ****  */
 327:../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../os/common/ports/AVR/chcore.h **** 
 329:../../os/common/ports/AVR/chcore.h **** /**
 330:../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../os/common/ports/AVR/chcore.h ****  */
 334:../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../os/common/ports/AVR/chcore.h **** 
 336:../../os/common/ports/AVR/chcore.h **** /**
 337:../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../os/common/ports/AVR/chcore.h ****  *
 343:../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../os/common/ports/AVR/chcore.h ****  */
 346:../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../os/common/ports/AVR/chcore.h **** }
 350:../../os/common/ports/AVR/chcore.h **** 
 351:../../os/common/ports/AVR/chcore.h **** 
 352:../../os/common/ports/AVR/chcore.h **** /**
 353:../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../os/common/ports/AVR/chcore.h ****  */
 356:../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../os/common/ports/AVR/chcore.h **** }
 359:../../os/common/ports/AVR/chcore.h **** 
 360:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../os/common/ports/AVR/chcore.h **** 
 364:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../os/common/ports/AVR/chcore.h **** 
 368:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../os/common/ports/AVR/chcore.h **** #endif
 371:../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../os/common/ports/AVR/chcore.h **** }
 375:../../os/common/ports/AVR/chcore.h **** #endif
 376:../../os/common/ports/AVR/chcore.h **** 
 377:../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../os/common/ports/AVR/chcore.h **** 
 379:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../os/common/ports/AVR/chcore.h **** 
 383:../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../os/common/ports/AVR/chcore.h **** 
 387:../../os/common/ports/AVR/chcore.h **** /**
 388:../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../os/common/ports/AVR/chcore.h ****  *
 390:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../os/common/ports/AVR/chcore.h ****  */
 392:../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../os/common/ports/AVR/chcore.h **** 
 394:../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../os/common/ports/AVR/chcore.h **** }
 396:../../os/common/ports/AVR/chcore.h **** 
 397:../../os/common/ports/AVR/chcore.h **** /**
 398:../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../os/common/ports/AVR/chcore.h ****  *
 400:../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../os/common/ports/AVR/chcore.h ****  *
 402:../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../os/common/ports/AVR/chcore.h ****  */
 406:../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../os/common/ports/AVR/chcore.h **** 
 408:../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../os/common/ports/AVR/chcore.h **** }
 410:../../os/common/ports/AVR/chcore.h **** 
 411:../../os/common/ports/AVR/chcore.h **** /**
 412:../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../os/common/ports/AVR/chcore.h ****  *
 414:../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../os/common/ports/AVR/chcore.h ****  */
 418:../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../os/common/ports/AVR/chcore.h **** 
 420:../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../os/common/ports/AVR/chcore.h **** }
 422:../../os/common/ports/AVR/chcore.h **** 
 423:../../os/common/ports/AVR/chcore.h **** /**
 424:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../os/common/ports/AVR/chcore.h ****  */
 428:../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 221               		.loc 2 428 20 view .LVU59
 222               	.LBB17:
 429:../../os/common/ports/AVR/chcore.h **** 
 430:../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 223               		.loc 2 430 3 view .LVU60
 224               	/* #APP */
 225               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 226 0006 F894      		cli
 227               	 ;  0 "" 2
 228               	/* #NOAPP */
 229               	.LBE17:
 230               	.LBE16:
 231               		.loc 1 181 3 discriminator 1 view .LVU61
 232               		.loc 1 181 14 discriminator 1 view .LVU62
 182:../../os/oslib/src/chmemcore.c ****   p = chCoreAllocFromBaseI(size, align, offset);
 233               		.loc 1 182 3 view .LVU63
 234               	.LVL19:
 235               	.LBB18:
 236               	.LBI18:
 112:../../os/oslib/src/chmemcore.c ****   uint8_t *p, *next;
 237               		.loc 1 112 7 view .LVU64
 238               	.LBB19:
 113:../../os/oslib/src/chmemcore.c **** 
 239               		.loc 1 113 3 view .LVU65
 115:../../os/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 240               		.loc 1 115 21 view .LVU66
 116:../../os/oslib/src/chmemcore.c **** 
 241               		.loc 1 116 3 view .LVU67
 116:../../os/oslib/src/chmemcore.c **** 
 242               		.loc 1 116 3 view .LVU68
 116:../../os/oslib/src/chmemcore.c **** 
 243               		.loc 1 116 3 discriminator 7 view .LVU69
 118:../../os/oslib/src/chmemcore.c ****   next = p + size;
 244               		.loc 1 118 3 view .LVU70
 118:../../os/oslib/src/chmemcore.c ****   next = p + size;
 245               		.loc 1 118 18 is_stmt 0 view .LVU71
 246 0008 4091 0000 		lds r20,ch_memcore
 247 000c 5091 0000 		lds r21,ch_memcore+1
 248               	.LVL20:
 118:../../os/oslib/src/chmemcore.c ****   next = p + size;
 249               		.loc 1 118 18 view .LVU72
 250 0010 CA01      		movw r24,r20
 251               	.LVL21:
 118:../../os/oslib/src/chmemcore.c ****   next = p + size;
 252               		.loc 1 118 18 view .LVU73
 253 0012 820F      		add r24,r18
 254 0014 931F      		adc r25,r19
 255 0016 9B01      		movw r18,r22
 256               	.LVL22:
 118:../../os/oslib/src/chmemcore.c ****   next = p + size;
 257               		.loc 1 118 18 view .LVU74
 258 0018 2150      		subi r18,1
 259 001a 3109      		sbc r19,__zero_reg__
 260 001c 820F      		add r24,r18
 261 001e 931F      		adc r25,r19
 262 0020 B195      		neg r27
 263 0022 A195      		neg r26
 264 0024 B109      		sbc r27,__zero_reg__
 265 0026 8A23      		and r24,r26
 266 0028 9B23      		and r25,r27
 267               	.LVL23:
 119:../../os/oslib/src/chmemcore.c **** 
 268               		.loc 1 119 3 is_stmt 1 view .LVU75
 119:../../os/oslib/src/chmemcore.c **** 
 269               		.loc 1 119 8 is_stmt 0 view .LVU76
 270 002a E80F      		add r30,r24
 271 002c F91F      		adc r31,r25
 272               	.LVL24:
 122:../../os/oslib/src/chmemcore.c ****     return NULL;
 273               		.loc 1 122 3 is_stmt 1 view .LVU77
 122:../../os/oslib/src/chmemcore.c ****     return NULL;
 274               		.loc 1 122 6 is_stmt 0 view .LVU78
 275 002e 6091 0000 		lds r22,ch_memcore+2
 276 0032 7091 0000 		lds r23,ch_memcore+2+1
 277               	.LVL25:
 122:../../os/oslib/src/chmemcore.c ****     return NULL;
 278               		.loc 1 122 6 view .LVU79
 279 0036 6E17      		cp r22,r30
 280 0038 7F07      		cpc r23,r31
 281 003a 00F0      		brlo .L14
 122:../../os/oslib/src/chmemcore.c ****     return NULL;
 282               		.loc 1 122 34 discriminator 1 view .LVU80
 283 003c E417      		cp r30,r20
 284 003e F507      		cpc r31,r21
 285 0040 00F0      		brlo .L14
 126:../../os/oslib/src/chmemcore.c **** 
 286               		.loc 1 126 3 is_stmt 1 view .LVU81
 126:../../os/oslib/src/chmemcore.c **** 
 287               		.loc 1 126 22 is_stmt 0 view .LVU82
 288 0042 F093 0000 		sts ch_memcore+1,r31
 289 0046 E093 0000 		sts ch_memcore,r30
 128:../../os/oslib/src/chmemcore.c **** }
 290               		.loc 1 128 3 is_stmt 1 view .LVU83
 291               	.LVL26:
 128:../../os/oslib/src/chmemcore.c **** }
 292               		.loc 1 128 3 is_stmt 0 view .LVU84
 293               	.LBE19:
 294               	.LBE18:
 183:../../os/oslib/src/chmemcore.c ****   chSysUnlock();
 295               		.loc 1 183 3 is_stmt 1 view .LVU85
 296               		.loc 1 183 3 view .LVU86
 297               	.LBB21:
 298               	.LBI21:
 431:../../os/common/ports/AVR/chcore.h **** }
 432:../../os/common/ports/AVR/chcore.h **** 
 433:../../os/common/ports/AVR/chcore.h **** /**
 434:../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../os/common/ports/AVR/chcore.h ****  */
 438:../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 299               		.loc 2 438 20 view .LVU87
 300               	.LBB22:
 439:../../os/common/ports/AVR/chcore.h **** 
 440:../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 301               		.loc 2 440 3 view .LVU88
 302               	/* #APP */
 303               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 304 004a 7894      		sei
 305               	 ;  0 "" 2
 306               	/* #NOAPP */
 307               	.LBE22:
 308               	.LBE21:
 309               		.loc 1 183 16 discriminator 1 view .LVU89
 184:../../os/oslib/src/chmemcore.c **** 
 185:../../os/oslib/src/chmemcore.c ****   return p;
 310               		.loc 1 185 3 view .LVU90
 311               	/* epilogue start */
 186:../../os/oslib/src/chmemcore.c **** }
 312               		.loc 1 186 1 is_stmt 0 view .LVU91
 313 004c 0895      		ret
 314               	.LVL27:
 315               	.L14:
 316               	.LBB24:
 317               	.LBB20:
 123:../../os/oslib/src/chmemcore.c ****   }
 318               		.loc 1 123 12 view .LVU92
 319 004e 80E0      		ldi r24,0
 320 0050 90E0      		ldi r25,0
 321               	.LVL28:
 123:../../os/oslib/src/chmemcore.c ****   }
 322               		.loc 1 123 12 view .LVU93
 323               	.LBE20:
 324               	.LBE24:
 183:../../os/oslib/src/chmemcore.c **** 
 325               		.loc 1 183 3 is_stmt 1 view .LVU94
 183:../../os/oslib/src/chmemcore.c **** 
 326               		.loc 1 183 3 view .LVU95
 327               	.LBB25:
 438:../../os/common/ports/AVR/chcore.h **** 
 328               		.loc 2 438 20 view .LVU96
 329               	.LBB23:
 330               		.loc 2 440 3 view .LVU97
 331               	/* #APP */
 332               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 333 0052 7894      		sei
 334               	 ;  0 "" 2
 335               	/* #NOAPP */
 336               	.LBE23:
 337               	.LBE25:
 183:../../os/oslib/src/chmemcore.c **** 
 338               		.loc 1 183 16 discriminator 1 view .LVU98
 185:../../os/oslib/src/chmemcore.c **** }
 339               		.loc 1 185 3 view .LVU99
 340               	/* epilogue start */
 341               		.loc 1 186 1 is_stmt 0 view .LVU100
 342 0054 0895      		ret
 343               		.cfi_endproc
 344               	.LFE101:
 346               		.section	.text.chCoreAllocFromTop,"ax",@progbits
 347               	.global	chCoreAllocFromTop
 349               	chCoreAllocFromTop:
 350               	.LVL29:
 351               	.LFB102:
 187:../../os/oslib/src/chmemcore.c **** 
 188:../../os/oslib/src/chmemcore.c **** /**
 189:../../os/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block starting from the top address downward.
 190:../../os/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 191:../../os/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 192:../../os/oslib/src/chmemcore.c ****  *          @p size bytes after.
 193:../../os/oslib/src/chmemcore.c ****  *
 194:../../os/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 195:../../os/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 196:../../os/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 197:../../os/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 198:../../os/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 199:../../os/oslib/src/chmemcore.c ****  *
 200:../../os/oslib/src/chmemcore.c ****  * @api
 201:../../os/oslib/src/chmemcore.c ****  */
 202:../../os/oslib/src/chmemcore.c **** void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 352               		.loc 1 202 70 is_stmt 1 view -0
 353               		.cfi_startproc
 354               	/* prologue: function */
 355               	/* frame size = 0 */
 356               	/* stack size = 0 */
 357               	.L__stack_usage = 0
 358               		.loc 1 202 70 is_stmt 0 view .LVU102
 359 0000 DC01      		movw r26,r24
 360 0002 9B01      		movw r18,r22
 361 0004 FA01      		movw r30,r20
 203:../../os/oslib/src/chmemcore.c ****   void *p;
 362               		.loc 1 203 3 is_stmt 1 view .LVU103
 204:../../os/oslib/src/chmemcore.c **** 
 205:../../os/oslib/src/chmemcore.c ****   chSysLock();
 363               		.loc 1 205 3 view .LVU104
 364               	.LBB32:
 365               	.LBI32:
 428:../../os/common/ports/AVR/chcore.h **** 
 366               		.loc 2 428 20 view .LVU105
 367               	.LBB33:
 430:../../os/common/ports/AVR/chcore.h **** }
 368               		.loc 2 430 3 view .LVU106
 369               	/* #APP */
 370               	 ;  430 "../../os/common/ports/AVR/chcore.h" 1
 371 0006 F894      		cli
 372               	 ;  0 "" 2
 373               	/* #NOAPP */
 374               	.LBE33:
 375               	.LBE32:
 376               		.loc 1 205 3 discriminator 1 view .LVU107
 377               		.loc 1 205 14 discriminator 1 view .LVU108
 206:../../os/oslib/src/chmemcore.c ****   p = chCoreAllocFromTopI(size, align, offset);
 378               		.loc 1 206 3 view .LVU109
 379               	.LVL30:
 380               	.LBB34:
 381               	.LBI34:
 145:../../os/oslib/src/chmemcore.c ****   uint8_t *p, *prev;
 382               		.loc 1 145 7 view .LVU110
 383               	.LBB35:
 146:../../os/oslib/src/chmemcore.c **** 
 384               		.loc 1 146 3 view .LVU111
 148:../../os/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 385               		.loc 1 148 21 view .LVU112
 149:../../os/oslib/src/chmemcore.c **** 
 386               		.loc 1 149 3 view .LVU113
 149:../../os/oslib/src/chmemcore.c **** 
 387               		.loc 1 149 3 view .LVU114
 149:../../os/oslib/src/chmemcore.c **** 
 388               		.loc 1 149 3 discriminator 7 view .LVU115
 151:../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 389               		.loc 1 151 3 view .LVU116
 151:../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 390               		.loc 1 151 18 is_stmt 0 view .LVU117
 391 0008 4091 0000 		lds r20,ch_memcore+2
 392 000c 5091 0000 		lds r21,ch_memcore+2+1
 393               	.LVL31:
 151:../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 394               		.loc 1 151 18 view .LVU118
 395 0010 CA01      		movw r24,r20
 396               	.LVL32:
 151:../../os/oslib/src/chmemcore.c ****   prev = p - offset;
 397               		.loc 1 151 18 view .LVU119
 398 0012 8A1B      		sub r24,r26
 399 0014 9B0B      		sbc r25,r27
 400 0016 3195      		neg r19
 401 0018 2195      		neg r18
 402 001a 3109      		sbc r19,__zero_reg__
 403 001c 8223      		and r24,r18
 404 001e 9323      		and r25,r19
 405               	.LVL33:
 152:../../os/oslib/src/chmemcore.c **** 
 406               		.loc 1 152 3 is_stmt 1 view .LVU120
 152:../../os/oslib/src/chmemcore.c **** 
 407               		.loc 1 152 8 is_stmt 0 view .LVU121
 408 0020 9C01      		movw r18,r24
 409 0022 2E1B      		sub r18,r30
 410 0024 3F0B      		sbc r19,r31
 411               	.LVL34:
 155:../../os/oslib/src/chmemcore.c ****     return NULL;
 412               		.loc 1 155 3 is_stmt 1 view .LVU122
 155:../../os/oslib/src/chmemcore.c ****     return NULL;
 413               		.loc 1 155 6 is_stmt 0 view .LVU123
 414 0026 6091 0000 		lds r22,ch_memcore
 415 002a 7091 0000 		lds r23,ch_memcore+1
 416               	.LVL35:
 155:../../os/oslib/src/chmemcore.c ****     return NULL;
 417               		.loc 1 155 6 view .LVU124
 418 002e 2617      		cp r18,r22
 419 0030 3707      		cpc r19,r23
 420 0032 00F0      		brlo .L18
 155:../../os/oslib/src/chmemcore.c ****     return NULL;
 421               		.loc 1 155 35 discriminator 1 view .LVU125
 422 0034 4217      		cp r20,r18
 423 0036 5307      		cpc r21,r19
 424 0038 00F0      		brlo .L18
 159:../../os/oslib/src/chmemcore.c **** 
 425               		.loc 1 159 3 is_stmt 1 view .LVU126
 159:../../os/oslib/src/chmemcore.c **** 
 426               		.loc 1 159 21 is_stmt 0 view .LVU127
 427 003a 3093 0000 		sts ch_memcore+2+1,r19
 428 003e 2093 0000 		sts ch_memcore+2,r18
 161:../../os/oslib/src/chmemcore.c **** }
 429               		.loc 1 161 3 is_stmt 1 view .LVU128
 430               	.LVL36:
 161:../../os/oslib/src/chmemcore.c **** }
 431               		.loc 1 161 3 is_stmt 0 view .LVU129
 432               	.LBE35:
 433               	.LBE34:
 207:../../os/oslib/src/chmemcore.c ****   chSysUnlock();
 434               		.loc 1 207 3 is_stmt 1 view .LVU130
 435               		.loc 1 207 3 view .LVU131
 436               	.LBB37:
 437               	.LBI37:
 438:../../os/common/ports/AVR/chcore.h **** 
 438               		.loc 2 438 20 view .LVU132
 439               	.LBB38:
 440               		.loc 2 440 3 view .LVU133
 441               	/* #APP */
 442               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 443 0042 7894      		sei
 444               	 ;  0 "" 2
 445               	/* #NOAPP */
 446               	.LBE38:
 447               	.LBE37:
 448               		.loc 1 207 16 discriminator 1 view .LVU134
 208:../../os/oslib/src/chmemcore.c **** 
 209:../../os/oslib/src/chmemcore.c ****   return p;
 449               		.loc 1 209 3 view .LVU135
 450               	/* epilogue start */
 210:../../os/oslib/src/chmemcore.c **** }
 451               		.loc 1 210 1 is_stmt 0 view .LVU136
 452 0044 0895      		ret
 453               	.LVL37:
 454               	.L18:
 455               	.LBB40:
 456               	.LBB36:
 156:../../os/oslib/src/chmemcore.c ****   }
 457               		.loc 1 156 12 view .LVU137
 458 0046 80E0      		ldi r24,0
 459 0048 90E0      		ldi r25,0
 460               	.LVL38:
 156:../../os/oslib/src/chmemcore.c ****   }
 461               		.loc 1 156 12 view .LVU138
 462               	.LBE36:
 463               	.LBE40:
 207:../../os/oslib/src/chmemcore.c **** 
 464               		.loc 1 207 3 is_stmt 1 view .LVU139
 207:../../os/oslib/src/chmemcore.c **** 
 465               		.loc 1 207 3 view .LVU140
 466               	.LBB41:
 438:../../os/common/ports/AVR/chcore.h **** 
 467               		.loc 2 438 20 view .LVU141
 468               	.LBB39:
 469               		.loc 2 440 3 view .LVU142
 470               	/* #APP */
 471               	 ;  440 "../../os/common/ports/AVR/chcore.h" 1
 472 004a 7894      		sei
 473               	 ;  0 "" 2
 474               	/* #NOAPP */
 475               	.LBE39:
 476               	.LBE41:
 207:../../os/oslib/src/chmemcore.c **** 
 477               		.loc 1 207 16 discriminator 1 view .LVU143
 209:../../os/oslib/src/chmemcore.c **** }
 478               		.loc 1 209 3 view .LVU144
 479               	/* epilogue start */
 480               		.loc 1 210 1 is_stmt 0 view .LVU145
 481 004c 0895      		ret
 482               		.cfi_endproc
 483               	.LFE102:
 485               		.section	.text.chCoreGetStatusX,"ax",@progbits
 486               	.global	chCoreGetStatusX
 488               	chCoreGetStatusX:
 489               	.LFB103:
 211:../../os/oslib/src/chmemcore.c **** 
 212:../../os/oslib/src/chmemcore.c **** /**
 213:../../os/oslib/src/chmemcore.c ****  * @brief   Core memory status.
 214:../../os/oslib/src/chmemcore.c ****  *
 215:../../os/oslib/src/chmemcore.c ****  * @return              The size, in bytes, of the free core memory.
 216:../../os/oslib/src/chmemcore.c ****  *
 217:../../os/oslib/src/chmemcore.c ****  * @xclass
 218:../../os/oslib/src/chmemcore.c ****  */
 219:../../os/oslib/src/chmemcore.c **** size_t chCoreGetStatusX(void) {
 490               		.loc 1 219 31 is_stmt 1 view -0
 491               		.cfi_startproc
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 0 */
 495               	.L__stack_usage = 0
 220:../../os/oslib/src/chmemcore.c **** 
 221:../../os/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] The cast is safe.*/
 222:../../os/oslib/src/chmemcore.c ****   return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 496               		.loc 1 222 3 view .LVU147
 497               		.loc 1 222 29 is_stmt 0 view .LVU148
 498 0000 E0E0      		ldi r30,lo8(ch_memcore)
 499 0002 F0E0      		ldi r31,hi8(ch_memcore)
 500               		.loc 1 222 37 view .LVU149
 501 0004 8281      		ldd r24,Z+2
 502 0006 9381      		ldd r25,Z+3
 503 0008 2081      		ld r18,Z
 504 000a 3181      		ldd r19,Z+1
 223:../../os/oslib/src/chmemcore.c ****   /*lint -restore*/
 224:../../os/oslib/src/chmemcore.c **** }
 505               		.loc 1 224 1 view .LVU150
 506 000c 821B      		sub r24,r18
 507 000e 930B      		sbc r25,r19
 508               	/* epilogue start */
 509 0010 0895      		ret
 510               		.cfi_endproc
 511               	.LFE103:
 513               		.section	.bss.static_heap.0,"aw",@nobits
 516               	static_heap.0:
 517 0000 0000 0000 		.zero	128
 517      0000 0000 
 517      0000 0000 
 517      0000 0000 
 517      0000 0000 
 518               	.global	ch_memcore
 519               		.section	.bss.ch_memcore,"aw",@nobits
 522               	ch_memcore:
 523 0000 0000 0000 		.zero	4
 524               		.text
 525               	.Letext0:
 526               		.file 3 "/usr/lib/gcc/avr/14.1.0/include/stddef.h"
 527               		.file 4 "/usr/avr/include/stdint.h"
 528               		.file 5 "../../os/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:00000000 chmemcore.c
     /tmp/cc2fLEhr.s:2      *ABS*:0000003e __SP_H__
     /tmp/cc2fLEhr.s:3      *ABS*:0000003d __SP_L__
     /tmp/cc2fLEhr.s:4      *ABS*:0000003f __SREG__
     /tmp/cc2fLEhr.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc2fLEhr.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc2fLEhr.s:14     .text.__core_init:00000000 __core_init
     /tmp/cc2fLEhr.s:16     .text.__core_init:00000000 .Loc.0
     /tmp/cc2fLEhr.s:17     .text.__core_init:00000000 L0
     /tmp/cc2fLEhr.s:22     .text.__core_init:00000000 .Loc.1
     /tmp/cc2fLEhr.s:23     .text.__core_init:00000000 .Loc.2
     /tmp/cc2fLEhr.s:24     .text.__core_init:00000000 .Loc.3
     /tmp/cc2fLEhr.s:522    .bss.ch_memcore:00000000 ch_memcore
     /tmp/cc2fLEhr.s:516    .bss.static_heap.0:00000000 static_heap.0
     /tmp/cc2fLEhr.s:31     .text.__core_init:0000000c .Loc.4
     /tmp/cc2fLEhr.s:32     .text.__core_init:0000000c .Loc.5
     /tmp/cc2fLEhr.s:38     .text.__core_init:00000014 .Loc.6
     /tmp/cc2fLEhr.s:40     .text.__core_init:00000016 L0
     /tmp/cc2fLEhr.s:46     .text.chCoreAllocFromBaseI:00000000 chCoreAllocFromBaseI
     /tmp/cc2fLEhr.s:49     .text.chCoreAllocFromBaseI:00000000 .Loc.7
     /tmp/cc2fLEhr.s:50     .text.chCoreAllocFromBaseI:00000000 L0
     /tmp/cc2fLEhr.s:55     .text.chCoreAllocFromBaseI:00000000 .Loc.8
     /tmp/cc2fLEhr.s:57     .text.chCoreAllocFromBaseI:00000002 .Loc.9
     /tmp/cc2fLEhr.s:58     .text.chCoreAllocFromBaseI:00000002 .Loc.10
     /tmp/cc2fLEhr.s:59     .text.chCoreAllocFromBaseI:00000002 .Loc.11
     /tmp/cc2fLEhr.s:60     .text.chCoreAllocFromBaseI:00000002 .Loc.12
     /tmp/cc2fLEhr.s:61     .text.chCoreAllocFromBaseI:00000002 .Loc.13
     /tmp/cc2fLEhr.s:62     .text.chCoreAllocFromBaseI:00000002 .Loc.14
     /tmp/cc2fLEhr.s:63     .text.chCoreAllocFromBaseI:00000002 .Loc.15
     /tmp/cc2fLEhr.s:67     .text.chCoreAllocFromBaseI:0000000a .Loc.16
     /tmp/cc2fLEhr.s:71     .text.chCoreAllocFromBaseI:0000000e .Loc.17
     /tmp/cc2fLEhr.s:80     .text.chCoreAllocFromBaseI:0000001c .Loc.18
     /tmp/cc2fLEhr.s:84     .text.chCoreAllocFromBaseI:00000020 .Loc.19
     /tmp/cc2fLEhr.s:85     .text.chCoreAllocFromBaseI:00000020 .Loc.20
     /tmp/cc2fLEhr.s:89     .text.chCoreAllocFromBaseI:00000024 .Loc.21
     /tmp/cc2fLEhr.s:90     .text.chCoreAllocFromBaseI:00000024 .Loc.22
     /tmp/cc2fLEhr.s:94     .text.chCoreAllocFromBaseI:0000002c .Loc.23
     /tmp/cc2fLEhr.s:98     .text.chCoreAllocFromBaseI:00000032 .Loc.24
     /tmp/cc2fLEhr.s:102    .text.chCoreAllocFromBaseI:00000038 .Loc.25
     /tmp/cc2fLEhr.s:103    .text.chCoreAllocFromBaseI:00000038 .Loc.26
     /tmp/cc2fLEhr.s:106    .text.chCoreAllocFromBaseI:00000040 .Loc.27
     /tmp/cc2fLEhr.s:107    .text.chCoreAllocFromBaseI:00000040 .Loc.28
     /tmp/cc2fLEhr.s:111    .text.chCoreAllocFromBaseI:00000042 .Loc.29
     /tmp/cc2fLEhr.s:115    .text.chCoreAllocFromBaseI:00000044 .Loc.30
     /tmp/cc2fLEhr.s:119    .text.chCoreAllocFromBaseI:00000048 .Loc.31
     /tmp/cc2fLEhr.s:123    .text.chCoreAllocFromBaseI:0000004a .Loc.32
     /tmp/cc2fLEhr.s:125    .text.chCoreAllocFromBaseI:0000004c L0
     /tmp/cc2fLEhr.s:131    .text.chCoreAllocFromTopI:00000000 chCoreAllocFromTopI
     /tmp/cc2fLEhr.s:134    .text.chCoreAllocFromTopI:00000000 .Loc.33
     /tmp/cc2fLEhr.s:135    .text.chCoreAllocFromTopI:00000000 L0
     /tmp/cc2fLEhr.s:140    .text.chCoreAllocFromTopI:00000000 .Loc.34
     /tmp/cc2fLEhr.s:141    .text.chCoreAllocFromTopI:00000000 .Loc.35
     /tmp/cc2fLEhr.s:142    .text.chCoreAllocFromTopI:00000000 .Loc.36
     /tmp/cc2fLEhr.s:143    .text.chCoreAllocFromTopI:00000000 .Loc.37
     /tmp/cc2fLEhr.s:144    .text.chCoreAllocFromTopI:00000000 .Loc.38
     /tmp/cc2fLEhr.s:145    .text.chCoreAllocFromTopI:00000000 .Loc.39
     /tmp/cc2fLEhr.s:146    .text.chCoreAllocFromTopI:00000000 .Loc.40
     /tmp/cc2fLEhr.s:154    .text.chCoreAllocFromTopI:00000010 .Loc.41
     /tmp/cc2fLEhr.s:159    .text.chCoreAllocFromTopI:00000016 .Loc.42
     /tmp/cc2fLEhr.s:163    .text.chCoreAllocFromTopI:0000001a .Loc.43
     /tmp/cc2fLEhr.s:164    .text.chCoreAllocFromTopI:0000001a .Loc.44
     /tmp/cc2fLEhr.s:169    .text.chCoreAllocFromTopI:00000020 .Loc.45
     /tmp/cc2fLEhr.s:170    .text.chCoreAllocFromTopI:00000020 .Loc.46
     /tmp/cc2fLEhr.s:174    .text.chCoreAllocFromTopI:00000028 .Loc.47
     /tmp/cc2fLEhr.s:178    .text.chCoreAllocFromTopI:0000002e .Loc.48
     /tmp/cc2fLEhr.s:182    .text.chCoreAllocFromTopI:00000034 .Loc.49
     /tmp/cc2fLEhr.s:183    .text.chCoreAllocFromTopI:00000034 .Loc.50
     /tmp/cc2fLEhr.s:186    .text.chCoreAllocFromTopI:0000003c .Loc.51
     /tmp/cc2fLEhr.s:187    .text.chCoreAllocFromTopI:0000003c .Loc.52
     /tmp/cc2fLEhr.s:190    .text.chCoreAllocFromTopI:0000003e .Loc.53
     /tmp/cc2fLEhr.s:195    .text.chCoreAllocFromTopI:00000042 .Loc.54
     /tmp/cc2fLEhr.s:197    .text.chCoreAllocFromTopI:00000044 L0
     /tmp/cc2fLEhr.s:203    .text.chCoreAllocFromBase:00000000 chCoreAllocFromBase
     /tmp/cc2fLEhr.s:206    .text.chCoreAllocFromBase:00000000 .Loc.55
     /tmp/cc2fLEhr.s:207    .text.chCoreAllocFromBase:00000000 L0
     /tmp/cc2fLEhr.s:212    .text.chCoreAllocFromBase:00000000 .Loc.56
     /tmp/cc2fLEhr.s:216    .text.chCoreAllocFromBase:00000006 .Loc.57
     /tmp/cc2fLEhr.s:217    .text.chCoreAllocFromBase:00000006 .Loc.58
     /tmp/cc2fLEhr.s:221    .text.chCoreAllocFromBase:00000006 .Loc.59
     /tmp/cc2fLEhr.s:223    .text.chCoreAllocFromBase:00000006 .Loc.60
     /tmp/cc2fLEhr.s:231    .text.chCoreAllocFromBase:00000008 .Loc.61
     /tmp/cc2fLEhr.s:232    .text.chCoreAllocFromBase:00000008 .Loc.62
     /tmp/cc2fLEhr.s:233    .text.chCoreAllocFromBase:00000008 .Loc.63
     /tmp/cc2fLEhr.s:237    .text.chCoreAllocFromBase:00000008 .Loc.64
     /tmp/cc2fLEhr.s:239    .text.chCoreAllocFromBase:00000008 .Loc.65
     /tmp/cc2fLEhr.s:240    .text.chCoreAllocFromBase:00000008 .Loc.66
     /tmp/cc2fLEhr.s:241    .text.chCoreAllocFromBase:00000008 .Loc.67
     /tmp/cc2fLEhr.s:242    .text.chCoreAllocFromBase:00000008 .Loc.68
     /tmp/cc2fLEhr.s:243    .text.chCoreAllocFromBase:00000008 .Loc.69
     /tmp/cc2fLEhr.s:244    .text.chCoreAllocFromBase:00000008 .Loc.70
     /tmp/cc2fLEhr.s:245    .text.chCoreAllocFromBase:00000008 .Loc.71
     /tmp/cc2fLEhr.s:249    .text.chCoreAllocFromBase:00000010 .Loc.72
     /tmp/cc2fLEhr.s:252    .text.chCoreAllocFromBase:00000012 .Loc.73
     /tmp/cc2fLEhr.s:257    .text.chCoreAllocFromBase:00000018 .Loc.74
     /tmp/cc2fLEhr.s:268    .text.chCoreAllocFromBase:0000002a .Loc.75
     /tmp/cc2fLEhr.s:269    .text.chCoreAllocFromBase:0000002a .Loc.76
     /tmp/cc2fLEhr.s:273    .text.chCoreAllocFromBase:0000002e .Loc.77
     /tmp/cc2fLEhr.s:274    .text.chCoreAllocFromBase:0000002e .Loc.78
     /tmp/cc2fLEhr.s:278    .text.chCoreAllocFromBase:00000036 .Loc.79
     /tmp/cc2fLEhr.s:282    .text.chCoreAllocFromBase:0000003c .Loc.80
     /tmp/cc2fLEhr.s:286    .text.chCoreAllocFromBase:00000042 .Loc.81
     /tmp/cc2fLEhr.s:287    .text.chCoreAllocFromBase:00000042 .Loc.82
     /tmp/cc2fLEhr.s:290    .text.chCoreAllocFromBase:0000004a .Loc.83
     /tmp/cc2fLEhr.s:292    .text.chCoreAllocFromBase:0000004a .Loc.84
     /tmp/cc2fLEhr.s:295    .text.chCoreAllocFromBase:0000004a .Loc.85
     /tmp/cc2fLEhr.s:296    .text.chCoreAllocFromBase:0000004a .Loc.86
     /tmp/cc2fLEhr.s:299    .text.chCoreAllocFromBase:0000004a .Loc.87
     /tmp/cc2fLEhr.s:301    .text.chCoreAllocFromBase:0000004a .Loc.88
     /tmp/cc2fLEhr.s:309    .text.chCoreAllocFromBase:0000004c .Loc.89
     /tmp/cc2fLEhr.s:310    .text.chCoreAllocFromBase:0000004c .Loc.90
     /tmp/cc2fLEhr.s:312    .text.chCoreAllocFromBase:0000004c .Loc.91
     /tmp/cc2fLEhr.s:318    .text.chCoreAllocFromBase:0000004e .Loc.92
     /tmp/cc2fLEhr.s:322    .text.chCoreAllocFromBase:00000052 .Loc.93
     /tmp/cc2fLEhr.s:325    .text.chCoreAllocFromBase:00000052 .Loc.94
     /tmp/cc2fLEhr.s:326    .text.chCoreAllocFromBase:00000052 .Loc.95
     /tmp/cc2fLEhr.s:328    .text.chCoreAllocFromBase:00000052 .Loc.96
     /tmp/cc2fLEhr.s:330    .text.chCoreAllocFromBase:00000052 .Loc.97
     /tmp/cc2fLEhr.s:338    .text.chCoreAllocFromBase:00000054 .Loc.98
     /tmp/cc2fLEhr.s:339    .text.chCoreAllocFromBase:00000054 .Loc.99
     /tmp/cc2fLEhr.s:341    .text.chCoreAllocFromBase:00000054 .Loc.100
     /tmp/cc2fLEhr.s:343    .text.chCoreAllocFromBase:00000056 L0
     /tmp/cc2fLEhr.s:349    .text.chCoreAllocFromTop:00000000 chCoreAllocFromTop
     /tmp/cc2fLEhr.s:352    .text.chCoreAllocFromTop:00000000 .Loc.101
     /tmp/cc2fLEhr.s:353    .text.chCoreAllocFromTop:00000000 L0
     /tmp/cc2fLEhr.s:358    .text.chCoreAllocFromTop:00000000 .Loc.102
     /tmp/cc2fLEhr.s:362    .text.chCoreAllocFromTop:00000006 .Loc.103
     /tmp/cc2fLEhr.s:363    .text.chCoreAllocFromTop:00000006 .Loc.104
     /tmp/cc2fLEhr.s:366    .text.chCoreAllocFromTop:00000006 .Loc.105
     /tmp/cc2fLEhr.s:368    .text.chCoreAllocFromTop:00000006 .Loc.106
     /tmp/cc2fLEhr.s:376    .text.chCoreAllocFromTop:00000008 .Loc.107
     /tmp/cc2fLEhr.s:377    .text.chCoreAllocFromTop:00000008 .Loc.108
     /tmp/cc2fLEhr.s:378    .text.chCoreAllocFromTop:00000008 .Loc.109
     /tmp/cc2fLEhr.s:382    .text.chCoreAllocFromTop:00000008 .Loc.110
     /tmp/cc2fLEhr.s:384    .text.chCoreAllocFromTop:00000008 .Loc.111
     /tmp/cc2fLEhr.s:385    .text.chCoreAllocFromTop:00000008 .Loc.112
     /tmp/cc2fLEhr.s:386    .text.chCoreAllocFromTop:00000008 .Loc.113
     /tmp/cc2fLEhr.s:387    .text.chCoreAllocFromTop:00000008 .Loc.114
     /tmp/cc2fLEhr.s:388    .text.chCoreAllocFromTop:00000008 .Loc.115
     /tmp/cc2fLEhr.s:389    .text.chCoreAllocFromTop:00000008 .Loc.116
     /tmp/cc2fLEhr.s:390    .text.chCoreAllocFromTop:00000008 .Loc.117
     /tmp/cc2fLEhr.s:394    .text.chCoreAllocFromTop:00000010 .Loc.118
     /tmp/cc2fLEhr.s:397    .text.chCoreAllocFromTop:00000012 .Loc.119
     /tmp/cc2fLEhr.s:406    .text.chCoreAllocFromTop:00000020 .Loc.120
     /tmp/cc2fLEhr.s:407    .text.chCoreAllocFromTop:00000020 .Loc.121
     /tmp/cc2fLEhr.s:412    .text.chCoreAllocFromTop:00000026 .Loc.122
     /tmp/cc2fLEhr.s:413    .text.chCoreAllocFromTop:00000026 .Loc.123
     /tmp/cc2fLEhr.s:417    .text.chCoreAllocFromTop:0000002e .Loc.124
     /tmp/cc2fLEhr.s:421    .text.chCoreAllocFromTop:00000034 .Loc.125
     /tmp/cc2fLEhr.s:425    .text.chCoreAllocFromTop:0000003a .Loc.126
     /tmp/cc2fLEhr.s:426    .text.chCoreAllocFromTop:0000003a .Loc.127
     /tmp/cc2fLEhr.s:429    .text.chCoreAllocFromTop:00000042 .Loc.128
     /tmp/cc2fLEhr.s:431    .text.chCoreAllocFromTop:00000042 .Loc.129
     /tmp/cc2fLEhr.s:434    .text.chCoreAllocFromTop:00000042 .Loc.130
     /tmp/cc2fLEhr.s:435    .text.chCoreAllocFromTop:00000042 .Loc.131
     /tmp/cc2fLEhr.s:438    .text.chCoreAllocFromTop:00000042 .Loc.132
     /tmp/cc2fLEhr.s:440    .text.chCoreAllocFromTop:00000042 .Loc.133
     /tmp/cc2fLEhr.s:448    .text.chCoreAllocFromTop:00000044 .Loc.134
     /tmp/cc2fLEhr.s:449    .text.chCoreAllocFromTop:00000044 .Loc.135
     /tmp/cc2fLEhr.s:451    .text.chCoreAllocFromTop:00000044 .Loc.136
     /tmp/cc2fLEhr.s:457    .text.chCoreAllocFromTop:00000046 .Loc.137
     /tmp/cc2fLEhr.s:461    .text.chCoreAllocFromTop:0000004a .Loc.138
     /tmp/cc2fLEhr.s:464    .text.chCoreAllocFromTop:0000004a .Loc.139
     /tmp/cc2fLEhr.s:465    .text.chCoreAllocFromTop:0000004a .Loc.140
     /tmp/cc2fLEhr.s:467    .text.chCoreAllocFromTop:0000004a .Loc.141
     /tmp/cc2fLEhr.s:469    .text.chCoreAllocFromTop:0000004a .Loc.142
     /tmp/cc2fLEhr.s:477    .text.chCoreAllocFromTop:0000004c .Loc.143
     /tmp/cc2fLEhr.s:478    .text.chCoreAllocFromTop:0000004c .Loc.144
     /tmp/cc2fLEhr.s:480    .text.chCoreAllocFromTop:0000004c .Loc.145
     /tmp/cc2fLEhr.s:482    .text.chCoreAllocFromTop:0000004e L0
     /tmp/cc2fLEhr.s:488    .text.chCoreGetStatusX:00000000 chCoreGetStatusX
     /tmp/cc2fLEhr.s:490    .text.chCoreGetStatusX:00000000 .Loc.146
     /tmp/cc2fLEhr.s:491    .text.chCoreGetStatusX:00000000 L0
     /tmp/cc2fLEhr.s:496    .text.chCoreGetStatusX:00000000 .Loc.147
     /tmp/cc2fLEhr.s:497    .text.chCoreGetStatusX:00000000 .Loc.148
     /tmp/cc2fLEhr.s:500    .text.chCoreGetStatusX:00000004 .Loc.149
     /tmp/cc2fLEhr.s:505    .text.chCoreGetStatusX:0000000c .Loc.150
     /tmp/cc2fLEhr.s:510    .text.chCoreGetStatusX:00000012 L0
     /tmp/cc2fLEhr.s:43     .text.__core_init:00000016 L0
     /tmp/cc2fLEhr.s:128    .text.chCoreAllocFromBaseI:0000004c L0
     /tmp/cc2fLEhr.s:200    .text.chCoreAllocFromTopI:00000044 L0
     /tmp/cc2fLEhr.s:346    .text.chCoreAllocFromBase:00000056 L0
     /tmp/cc2fLEhr.s:485    .text.chCoreAllocFromTop:0000004e L0
     /tmp/cc2fLEhr.s:513    .text.chCoreGetStatusX:00000012 L0
                     .debug_frame:00000000 L0
     /tmp/cc2fLEhr.s:114    .text.chCoreAllocFromBaseI:00000044 .L6
     /tmp/cc2fLEhr.s:189    .text.chCoreAllocFromTopI:0000003e .L10
     /tmp/cc2fLEhr.s:315    .text.chCoreAllocFromBase:0000004e .L14
     /tmp/cc2fLEhr.s:454    .text.chCoreAllocFromTop:00000046 .L18
     /tmp/cc2fLEhr.s:1084   .debug_abbrev:00000000 .Ldebug_abbrev0
     /tmp/cc2fLEhr.s:2505   .debug_ranges:00000000 .Ldebug_ranges0
     /tmp/cc2fLEhr.s:2545   .debug_line:00000000 .Ldebug_line0
     /tmp/cc2fLEhr.s:489    .text.chCoreGetStatusX:00000000 .LFB103
     /tmp/cc2fLEhr.s:511    .text.chCoreGetStatusX:00000012 .LFE103
     /tmp/cc2fLEhr.s:351    .text.chCoreAllocFromTop:00000000 .LFB102
     /tmp/cc2fLEhr.s:483    .text.chCoreAllocFromTop:0000004e .LFE102
     /tmp/cc2fLEhr.s:1614   .debug_loc:00000004 .LLST19
     /tmp/cc2fLEhr.s:1609   .debug_loc:00000000 .LVUS19
     /tmp/cc2fLEhr.s:1640   .debug_loc:00000030 .LLST20
     /tmp/cc2fLEhr.s:1635   .debug_loc:0000002c .LVUS20
     /tmp/cc2fLEhr.s:1670   .debug_loc:00000060 .LLST21
     /tmp/cc2fLEhr.s:1665   .debug_loc:0000005c .LVUS21
     /tmp/cc2fLEhr.s:1696   .debug_loc:0000008c .LLST22
     /tmp/cc2fLEhr.s:1691   .debug_loc:00000088 .LVUS22
     /tmp/cc2fLEhr.s:365    .text.chCoreAllocFromTop:00000006 .LBI32
     /tmp/cc2fLEhr.s:364    .text.chCoreAllocFromTop:00000006 .LBB32
     /tmp/cc2fLEhr.s:375    .text.chCoreAllocFromTop:00000008 .LBE32
     /tmp/cc2fLEhr.s:381    .text.chCoreAllocFromTop:00000008 .LBI34
     /tmp/cc2fLEhr.s:1724   .debug_loc:000000ba .LLST23
     /tmp/cc2fLEhr.s:1717   .debug_loc:000000b4 .LVUS23
     /tmp/cc2fLEhr.s:1761   .debug_loc:000000f8 .LLST24
     /tmp/cc2fLEhr.s:1754   .debug_loc:000000f2 .LVUS24
     /tmp/cc2fLEhr.s:1806   .debug_loc:0000013e .LLST25
     /tmp/cc2fLEhr.s:1799   .debug_loc:00000138 .LVUS25
     /tmp/cc2fLEhr.s:1841   .debug_loc:0000017a .LLST26
     /tmp/cc2fLEhr.s:1836   .debug_loc:00000176 .LVUS26
     /tmp/cc2fLEhr.s:1867   .debug_loc:000001a6 .LLST27
     /tmp/cc2fLEhr.s:1862   .debug_loc:000001a2 .LVUS27
     /tmp/cc2fLEhr.s:437    .text.chCoreAllocFromTop:00000042 .LBI37
     /tmp/cc2fLEhr.s:205    .text.chCoreAllocFromBase:00000000 .LFB101
     /tmp/cc2fLEhr.s:344    .text.chCoreAllocFromBase:00000056 .LFE101
     /tmp/cc2fLEhr.s:1895   .debug_loc:000001d4 .LLST10
     /tmp/cc2fLEhr.s:1888   .debug_loc:000001ce .LVUS10
     /tmp/cc2fLEhr.s:1934   .debug_loc:00000214 .LLST11
     /tmp/cc2fLEhr.s:1929   .debug_loc:00000210 .LVUS11
     /tmp/cc2fLEhr.s:1960   .debug_loc:00000240 .LLST12
     /tmp/cc2fLEhr.s:1953   .debug_loc:0000023a .LVUS12
     /tmp/cc2fLEhr.s:1999   .debug_loc:00000280 .LLST13
     /tmp/cc2fLEhr.s:1994   .debug_loc:0000027c .LVUS13
     /tmp/cc2fLEhr.s:219    .text.chCoreAllocFromBase:00000006 .LBI16
     /tmp/cc2fLEhr.s:218    .text.chCoreAllocFromBase:00000006 .LBB16
     /tmp/cc2fLEhr.s:230    .text.chCoreAllocFromBase:00000008 .LBE16
     /tmp/cc2fLEhr.s:236    .text.chCoreAllocFromBase:00000008 .LBI18
     /tmp/cc2fLEhr.s:2029   .debug_loc:000002b0 .LLST14
     /tmp/cc2fLEhr.s:2020   .debug_loc:000002a8 .LVUS14
     /tmp/cc2fLEhr.s:2083   .debug_loc:00000306 .LLST15
     /tmp/cc2fLEhr.s:2076   .debug_loc:00000300 .LVUS15
     /tmp/cc2fLEhr.s:2118   .debug_loc:00000342 .LLST16
     /tmp/cc2fLEhr.s:2109   .debug_loc:0000033a .LVUS16
     /tmp/cc2fLEhr.s:2170   .debug_loc:00000396 .LLST17
     /tmp/cc2fLEhr.s:2165   .debug_loc:00000392 .LVUS17
     /tmp/cc2fLEhr.s:2196   .debug_loc:000003c2 .LLST18
     /tmp/cc2fLEhr.s:2191   .debug_loc:000003be .LVUS18
     /tmp/cc2fLEhr.s:298    .text.chCoreAllocFromBase:0000004a .LBI21
     /tmp/cc2fLEhr.s:15     .text.__core_init:00000000 .LFB98
     /tmp/cc2fLEhr.s:41     .text.__core_init:00000016 .LFE98
     /tmp/cc2fLEhr.s:48     .text.chCoreAllocFromBaseI:00000000 .LFB99
     /tmp/cc2fLEhr.s:126    .text.chCoreAllocFromBaseI:0000004c .LFE99
     /tmp/cc2fLEhr.s:2222   .debug_loc:000003ee .LLST0
     /tmp/cc2fLEhr.s:2217   .debug_loc:000003ea .LVUS0
     /tmp/cc2fLEhr.s:2256   .debug_loc:00000422 .LLST1
     /tmp/cc2fLEhr.s:2247   .debug_loc:0000041a .LVUS1
     /tmp/cc2fLEhr.s:2295   .debug_loc:00000469 .LLST2
     /tmp/cc2fLEhr.s:2290   .debug_loc:00000465 .LVUS2
     /tmp/cc2fLEhr.s:2323   .debug_loc:00000497 .LLST3
     /tmp/cc2fLEhr.s:2320   .debug_loc:00000495 .LVUS3
     /tmp/cc2fLEhr.s:2342   .debug_loc:000004b5 .LLST4
     /tmp/cc2fLEhr.s:2335   .debug_loc:000004af .LVUS4
     /tmp/cc2fLEhr.s:133    .text.chCoreAllocFromTopI:00000000 .LFB100
     /tmp/cc2fLEhr.s:198    .text.chCoreAllocFromTopI:00000044 .LFE100
     /tmp/cc2fLEhr.s:2373   .debug_loc:000004f0 .LLST5
     /tmp/cc2fLEhr.s:2368   .debug_loc:000004ec .LVUS5
     /tmp/cc2fLEhr.s:2403   .debug_loc:00000520 .LLST6
     /tmp/cc2fLEhr.s:2398   .debug_loc:0000051c .LVUS6
     /tmp/cc2fLEhr.s:2427   .debug_loc:0000054a .LLST7
     /tmp/cc2fLEhr.s:2422   .debug_loc:00000546 .LVUS7
     /tmp/cc2fLEhr.s:2455   .debug_loc:00000578 .LLST8
     /tmp/cc2fLEhr.s:2452   .debug_loc:00000576 .LVUS8
     /tmp/cc2fLEhr.s:2470   .debug_loc:00000592 .LLST9
     /tmp/cc2fLEhr.s:2467   .debug_loc:00000590 .LVUS9
     /tmp/cc2fLEhr.s:350    .text.chCoreAllocFromTop:00000000 .LVL29
     /tmp/cc2fLEhr.s:396    .text.chCoreAllocFromTop:00000012 .LVL32
     /tmp/cc2fLEhr.s:416    .text.chCoreAllocFromTop:0000002e .LVL35
     /tmp/cc2fLEhr.s:393    .text.chCoreAllocFromTop:00000010 .LVL31
     /tmp/cc2fLEhr.s:430    .text.chCoreAllocFromTop:00000042 .LVL36
     /tmp/cc2fLEhr.s:453    .text.chCoreAllocFromTop:00000046 .LVL37
     /tmp/cc2fLEhr.s:460    .text.chCoreAllocFromTop:0000004a .LVL38
     /tmp/cc2fLEhr.s:379    .text.chCoreAllocFromTop:00000008 .LVL30
     /tmp/cc2fLEhr.s:405    .text.chCoreAllocFromTop:00000020 .LVL33
     /tmp/cc2fLEhr.s:411    .text.chCoreAllocFromTop:00000026 .LVL34
     /tmp/cc2fLEhr.s:204    .text.chCoreAllocFromBase:00000000 .LVL18
     /tmp/cc2fLEhr.s:251    .text.chCoreAllocFromBase:00000012 .LVL21
     /tmp/cc2fLEhr.s:272    .text.chCoreAllocFromBase:0000002e .LVL24
     /tmp/cc2fLEhr.s:277    .text.chCoreAllocFromBase:00000036 .LVL25
     /tmp/cc2fLEhr.s:248    .text.chCoreAllocFromBase:00000010 .LVL20
     /tmp/cc2fLEhr.s:256    .text.chCoreAllocFromBase:00000018 .LVL22
     /tmp/cc2fLEhr.s:291    .text.chCoreAllocFromBase:0000004a .LVL26
     /tmp/cc2fLEhr.s:314    .text.chCoreAllocFromBase:0000004e .LVL27
     /tmp/cc2fLEhr.s:321    .text.chCoreAllocFromBase:00000052 .LVL28
     /tmp/cc2fLEhr.s:234    .text.chCoreAllocFromBase:00000008 .LVL19
     /tmp/cc2fLEhr.s:267    .text.chCoreAllocFromBase:0000002a .LVL23
     /tmp/cc2fLEhr.s:47     .text.chCoreAllocFromBaseI:00000000 .LVL0
     /tmp/cc2fLEhr.s:88     .text.chCoreAllocFromBaseI:00000024 .LVL5
     /tmp/cc2fLEhr.s:66     .text.chCoreAllocFromBaseI:0000000a .LVL1
     /tmp/cc2fLEhr.s:79     .text.chCoreAllocFromBaseI:0000001c .LVL3
     /tmp/cc2fLEhr.s:93     .text.chCoreAllocFromBaseI:0000002c .LVL6
     /tmp/cc2fLEhr.s:70     .text.chCoreAllocFromBaseI:0000000e .LVL2
     /tmp/cc2fLEhr.s:83     .text.chCoreAllocFromBaseI:00000020 .LVL4
     /tmp/cc2fLEhr.s:118    .text.chCoreAllocFromBaseI:00000048 .LVL9
     /tmp/cc2fLEhr.s:109    .text.chCoreAllocFromBaseI:00000042 .LVL7
     /tmp/cc2fLEhr.s:113    .text.chCoreAllocFromBaseI:00000044 .LVL8
     /tmp/cc2fLEhr.s:121    .text.chCoreAllocFromBaseI:0000004a .LVL10
     /tmp/cc2fLEhr.s:132    .text.chCoreAllocFromTopI:00000000 .LVL11
     /tmp/cc2fLEhr.s:153    .text.chCoreAllocFromTopI:00000010 .LVL12
     /tmp/cc2fLEhr.s:158    .text.chCoreAllocFromTopI:00000016 .LVL13
     /tmp/cc2fLEhr.s:173    .text.chCoreAllocFromTopI:00000028 .LVL16
     /tmp/cc2fLEhr.s:162    .text.chCoreAllocFromTopI:0000001a .LVL14
     /tmp/cc2fLEhr.s:193    .text.chCoreAllocFromTopI:00000042 .LVL17
     /tmp/cc2fLEhr.s:168    .text.chCoreAllocFromTopI:00000020 .LVL15
     /tmp/cc2fLEhr.s:530    .debug_info:00000000 .Ldebug_info0
     /tmp/cc2fLEhr.s:235    .text.chCoreAllocFromBase:00000008 .LBB18
     /tmp/cc2fLEhr.s:294    .text.chCoreAllocFromBase:0000004a .LBE18
     /tmp/cc2fLEhr.s:316    .text.chCoreAllocFromBase:0000004e .LBB24
     /tmp/cc2fLEhr.s:324    .text.chCoreAllocFromBase:00000052 .LBE24
     /tmp/cc2fLEhr.s:297    .text.chCoreAllocFromBase:0000004a .LBB21
     /tmp/cc2fLEhr.s:308    .text.chCoreAllocFromBase:0000004c .LBE21
     /tmp/cc2fLEhr.s:327    .text.chCoreAllocFromBase:00000052 .LBB25
     /tmp/cc2fLEhr.s:337    .text.chCoreAllocFromBase:00000054 .LBE25
     /tmp/cc2fLEhr.s:380    .text.chCoreAllocFromTop:00000008 .LBB34
     /tmp/cc2fLEhr.s:433    .text.chCoreAllocFromTop:00000042 .LBE34
     /tmp/cc2fLEhr.s:455    .text.chCoreAllocFromTop:00000046 .LBB40
     /tmp/cc2fLEhr.s:463    .text.chCoreAllocFromTop:0000004a .LBE40
     /tmp/cc2fLEhr.s:436    .text.chCoreAllocFromTop:00000042 .LBB37
     /tmp/cc2fLEhr.s:447    .text.chCoreAllocFromTop:00000044 .LBE37
     /tmp/cc2fLEhr.s:466    .text.chCoreAllocFromTop:0000004a .LBB41
     /tmp/cc2fLEhr.s:476    .text.chCoreAllocFromTop:0000004c .LBE41

UNDEFINED SYMBOLS
__do_clear_bss
