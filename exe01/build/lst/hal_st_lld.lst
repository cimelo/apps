   1               		.file	"hal_st_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.file 1 "../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c"
  11               		.section	.text.__vector_11,"ax",@progbits
  12               	.global	__vector_11
  14               	__vector_11:
  15               	.LFB146:
   1:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*
   2:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
   4:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     you may not use this file except in compliance with the License.
   6:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     You may obtain a copy of the License at
   7:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
   8:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  10:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     See the License for the specific language governing permissions and
  14:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     limitations under the License.
  15:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** */
  16:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  17:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /**
  18:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @file    TIMv1/hal_st_lld.c
  19:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @brief   AVR/MEGA ST subsystem low level driver source.
  20:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  *
  21:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @addtogroup ST
  22:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @{
  23:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  */
  24:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  25:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #include "hal.h"
  26:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  27:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
  28:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  29:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  30:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver local definitions.                                                */
  31:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  32:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  33:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /**
  34:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @brief  Timer maximum value
  35:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  */
  36:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #define AVR_TIMER_COUNTER_MAX 255
  37:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  38:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  39:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver exported variables.                                               */
  40:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  41:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  42:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  43:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver local types.                                                      */
  44:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  45:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  46:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  47:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver local variables and types.                                        */
  48:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
  49:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  50:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)
  51:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  52:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Work out what the timer interrupt is called on this MCU. */
  53:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #ifdef TIMER0_COMPA_vect
  54:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_VECT TIMER0_COMPA_vect
  55:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif defined(TIMER_COMPA_vect)
  56:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_VECT TIMER_COMPA_vect
  57:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif defined(TIMER0_COMP_vect)
  58:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_VECT TIMER0_COMP_vect
  59:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #else
  60:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #error "Cannot find interrupt vector name for timer"
  61:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif
  62:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  63:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Find the most suitable prescaler setting for the desired OSAL_ST_FREQUENCY*/
  64:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if ((F_CPU / OSAL_ST_FREQUENCY) <= AVR_TIMER_COUNTER_MAX)
  65:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  66:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 1
  67:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER_BITS ((0<<CS02)|(0<<CS01)|(1<<CS00)) /* CLK  */
  68:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  69:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 8) <= AVR_TIMER_COUNTER_MAX)
  70:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  71:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 8
  72:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER_BITS ((0<<CS02)|(1<<CS01)|(0<<CS00)) /* CLK/8 */
  73:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  74:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 64) <= AVR_TIMER_COUNTER_MAX)
  75:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  76:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 64
  77:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  78:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #ifdef __AVR_ATmega128__
  79:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((1<<CS02)|(0<<CS01)|(0<<CS00)) /* CLK/64   */
  80:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #else
  81:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((0<<CS02)|(1<<CS01)|(1<<CS00)) /* CLK/64   */
  82:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #endif
  83:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  84:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 256) <= AVR_TIMER_COUNTER_MAX)
  85:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  86:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 256
  87:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  88:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #ifdef __AVR_ATmega128__
  89:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((1<<CS02)|(1<<CS01)|(0<<CS00)) /* CLK/256  */
  90:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #else
  91:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS ((1<<CS02)|(0<<CS01)|(0<<CS00)) /* CLK/256  */
  92:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #endif
  93:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  94:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif ((F_CPU / OSAL_ST_FREQUENCY / 1024) <= AVR_TIMER_COUNTER_MAX)
  95:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  96:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #define AVR_TIMER_PRESCALER 1024
  97:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
  98:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #ifdef __AVR_ATmega128__
  99:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS (1<<CS02)|(1<<CS01)|(1<<CS00); /* CLK/1024 */
 100:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #else
 101:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****     #define AVR_TIMER_PRESCALER_BITS (1<<CS02)|(0<<CS01)|(1<<CS00); /* CLK/1024 */
 102:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #endif
 103:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 104:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #else
 105:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #error "Frequency too low for timer, please set OSAL_ST_FREQUENCY to a higher value"
 106:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif
 107:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 108:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #define AVR_TIMER_COUNTER (F_CPU / OSAL_ST_FREQUENCY / AVR_TIMER_PRESCALER)
 109:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 110:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Test if OSAL_ST_FREQUENCY can be matched exactly using this timer. */
 111:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #define F_CPU_ (AVR_TIMER_COUNTER * AVR_TIMER_PRESCALER * OSAL_ST_FREQUENCY)
 112:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (F_CPU_ != F_CPU)
 113:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #warning "OSAL_ST_FREQUENCY cannot be generated exactly using timer"
 114:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif
 115:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #undef F_CPU_
 116:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 117:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 118:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 119:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 120:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 121:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* FIXME: Prescaler is now fixed in 1024.
 122:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  *        Should add support for calculating best value according to
 123:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  *        user requested configuration.
 124:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  */
 125:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #define PRESCALER (_BV(CS12) | _BV(CS10))
 126:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 127:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 128:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 129:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
 130:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver local functions.                                                  */
 131:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
 132:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 133:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
 134:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver interrupt handlers.                                               */
 135:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
 136:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 137:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)
 138:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 139:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /**
 140:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @brief Timer handler for periodic mode.
 141:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  */
 142:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
 143:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 144:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
 145:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 146:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   osalSysLockFromISR();
 147:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   osalOsTimerHandlerI();
 148:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   osalSysUnlockFromISR();
 149:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 150:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
 151:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** }
 152:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 153:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 154:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 155:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 156:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 157:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /**
 158:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @brief Timer handler for free running mode.
 159:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  */
 160:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
  16               		.loc 1 160 37 view -0
  17               		.cfi_startproc
  18 0000 1F92      		push r1
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 1, -2
  22 0002 0F92      		push r0
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 0, -3
  26 0004 0FB6      		in r0,__SREG__
  27 0006 0F92      		push r0
  28 0008 1124      		clr __zero_reg__
  29 000a 2F93      		push r18
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 18, -4
  33 000c 3F93      		push r19
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 19, -5
  37 000e 4F93      		push r20
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 20, -6
  41 0010 5F93      		push r21
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 21, -7
  45 0012 6F93      		push r22
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 22, -8
  49 0014 7F93      		push r23
  50               	.LCFI7:
  51               		.cfi_def_cfa_offset 10
  52               		.cfi_offset 23, -9
  53 0016 8F93      		push r24
  54               	.LCFI8:
  55               		.cfi_def_cfa_offset 11
  56               		.cfi_offset 24, -10
  57 0018 9F93      		push r25
  58               	.LCFI9:
  59               		.cfi_def_cfa_offset 12
  60               		.cfi_offset 25, -11
  61 001a AF93      		push r26
  62               	.LCFI10:
  63               		.cfi_def_cfa_offset 13
  64               		.cfi_offset 26, -12
  65 001c BF93      		push r27
  66               	.LCFI11:
  67               		.cfi_def_cfa_offset 14
  68               		.cfi_offset 27, -13
  69 001e EF93      		push r30
  70               	.LCFI12:
  71               		.cfi_def_cfa_offset 15
  72               		.cfi_offset 30, -14
  73 0020 FF93      		push r31
  74               	.LCFI13:
  75               		.cfi_def_cfa_offset 16
  76               		.cfi_offset 31, -15
  77               	/* prologue: Signal */
  78               	/* frame size = 0 */
  79               	/* stack size = 15 */
  80               	.L__stack_usage = 15
 161:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 162:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
  81               		.loc 1 162 3 view .LVU1
  82               		.loc 1 162 3 view .LVU2
  83 0022 81E0      		ldi r24,lo8(1)
  84 0024 8093 0000 		sts __avr_in_isr,r24
  85               		.loc 1 162 3 view .LVU3
  86               		.loc 1 162 22 view .LVU4
 163:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 164:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   /* TODO: reset status if required. */
 165:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 166:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   osalSysLockFromISR();
  87               		.loc 1 166 3 view .LVU5
 167:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   osalOsTimerHandlerI();
  88               		.loc 1 167 3 view .LVU6
  89               	.LBB12:
  90               	.LBI12:
  91               		.file 2 "../../os/hal/osal/rt-nil/osal.h"
   1:../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../os/hal/osal/rt-nil/osal.h **** 
   4:../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../os/hal/osal/rt-nil/osal.h **** 
   8:../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../os/hal/osal/rt-nil/osal.h **** 
  10:../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../os/hal/osal/rt-nil/osal.h **** */
  16:../../os/hal/osal/rt-nil/osal.h **** 
  17:../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../os/hal/osal/rt-nil/osal.h **** 
  25:../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../os/hal/osal/rt-nil/osal.h **** 
  28:../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../os/hal/osal/rt-nil/osal.h **** 
  32:../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../os/hal/osal/rt-nil/osal.h **** 
  34:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../os/hal/osal/rt-nil/osal.h **** 
  38:../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../os/hal/osal/rt-nil/osal.h **** 
  46:../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../os/hal/osal/rt-nil/osal.h **** 
  50:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../os/hal/osal/rt-nil/osal.h **** 
  54:../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../os/hal/osal/rt-nil/osal.h **** 
  65:../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../os/hal/osal/rt-nil/osal.h **** 
  75:../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../os/hal/osal/rt-nil/osal.h **** 
  84:../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../os/hal/osal/rt-nil/osal.h **** 
  93:../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../os/hal/osal/rt-nil/osal.h **** 
  98:../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../os/hal/osal/rt-nil/osal.h **** 
 108:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../os/hal/osal/rt-nil/osal.h **** 
 112:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../os/hal/osal/rt-nil/osal.h **** 
 116:../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../os/hal/osal/rt-nil/osal.h **** 
 122:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../os/hal/osal/rt-nil/osal.h **** 
 127:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../os/hal/osal/rt-nil/osal.h **** 
 131:../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../os/hal/osal/rt-nil/osal.h **** 
 138:../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../os/hal/osal/rt-nil/osal.h **** 
 145:../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../os/hal/osal/rt-nil/osal.h **** 
 152:../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../os/hal/osal/rt-nil/osal.h **** 
 159:../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../os/hal/osal/rt-nil/osal.h **** 
 168:../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../os/hal/osal/rt-nil/osal.h **** 
 175:../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../os/hal/osal/rt-nil/osal.h **** 
 182:../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../os/hal/osal/rt-nil/osal.h **** 
 189:../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../os/hal/osal/rt-nil/osal.h **** 
 200:../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../os/hal/osal/rt-nil/osal.h **** 
 207:../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../os/hal/osal/rt-nil/osal.h **** };
 220:../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../os/hal/osal/rt-nil/osal.h **** 
 222:../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../os/hal/osal/rt-nil/osal.h **** 
 234:../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../os/hal/osal/rt-nil/osal.h **** 
 247:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../os/hal/osal/rt-nil/osal.h **** 
 251:../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../os/hal/osal/rt-nil/osal.h **** 
 271:../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../os/hal/osal/rt-nil/osal.h **** 
 283:../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../os/hal/osal/rt-nil/osal.h **** 
 289:../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../os/hal/osal/rt-nil/osal.h **** 
 296:../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../os/hal/osal/rt-nil/osal.h **** 
 305:../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../os/hal/osal/rt-nil/osal.h **** 
 311:../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../os/hal/osal/rt-nil/osal.h **** 
 317:../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../os/hal/osal/rt-nil/osal.h **** 
 326:../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../os/hal/osal/rt-nil/osal.h **** 
 345:../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../os/hal/osal/rt-nil/osal.h **** 
 360:../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../os/hal/osal/rt-nil/osal.h **** 
 375:../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../os/hal/osal/rt-nil/osal.h **** 
 390:../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../os/hal/osal/rt-nil/osal.h **** 
 405:../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../os/hal/osal/rt-nil/osal.h **** 
 421:../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../os/hal/osal/rt-nil/osal.h **** 
 438:../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../os/hal/osal/rt-nil/osal.h **** 
 452:../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../os/hal/osal/rt-nil/osal.h **** 
 467:../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../os/hal/osal/rt-nil/osal.h **** 
 483:../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../os/hal/osal/rt-nil/osal.h **** 
 496:../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../os/hal/osal/rt-nil/osal.h **** 
 510:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../os/hal/osal/rt-nil/osal.h **** 
 514:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../os/hal/osal/rt-nil/osal.h **** 
 518:../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../os/hal/osal/rt-nil/osal.h **** }
 520:../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../os/hal/osal/rt-nil/osal.h **** 
 522:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../os/hal/osal/rt-nil/osal.h **** 
 526:../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../os/hal/osal/rt-nil/osal.h **** 
 533:../../os/hal/osal/rt-nil/osal.h **** }
 534:../../os/hal/osal/rt-nil/osal.h **** 
 535:../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../os/hal/osal/rt-nil/osal.h **** 
 544:../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../os/hal/osal/rt-nil/osal.h **** }
 546:../../os/hal/osal/rt-nil/osal.h **** 
 547:../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../os/hal/osal/rt-nil/osal.h **** 
 554:../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../os/hal/osal/rt-nil/osal.h **** }
 556:../../os/hal/osal/rt-nil/osal.h **** 
 557:../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../os/hal/osal/rt-nil/osal.h **** 
 564:../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../os/hal/osal/rt-nil/osal.h **** }
 566:../../os/hal/osal/rt-nil/osal.h **** 
 567:../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../os/hal/osal/rt-nil/osal.h **** 
 575:../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../os/hal/osal/rt-nil/osal.h **** }
 577:../../os/hal/osal/rt-nil/osal.h **** 
 578:../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../os/hal/osal/rt-nil/osal.h **** 
 586:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../os/hal/osal/rt-nil/osal.h **** }
 588:../../os/hal/osal/rt-nil/osal.h **** 
 589:../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../os/hal/osal/rt-nil/osal.h **** 
 597:../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../os/hal/osal/rt-nil/osal.h **** }
 599:../../os/hal/osal/rt-nil/osal.h **** 
 600:../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../os/hal/osal/rt-nil/osal.h **** 
 608:../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../os/hal/osal/rt-nil/osal.h **** }
 610:../../os/hal/osal/rt-nil/osal.h **** 
 611:../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../os/hal/osal/rt-nil/osal.h **** 
 626:../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../os/hal/osal/rt-nil/osal.h **** }
 628:../../os/hal/osal/rt-nil/osal.h **** 
 629:../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../os/hal/osal/rt-nil/osal.h **** 
 640:../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../os/hal/osal/rt-nil/osal.h **** }
 642:../../os/hal/osal/rt-nil/osal.h **** 
 643:../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../os/hal/osal/rt-nil/osal.h **** 
 655:../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../os/hal/osal/rt-nil/osal.h **** }
 657:../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../os/hal/osal/rt-nil/osal.h **** 
 659:../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
  92               		.loc 2 665 20 view .LVU7
  93               	.LBB13:
 666:../../os/hal/osal/rt-nil/osal.h **** 
 667:../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
  94               		.loc 2 667 3 view .LVU8
  95 0028 0E94 0000 		call chSysTimerHandlerI
  96               	.LVL0:
  97               	.LBE13:
  98               	.LBE12:
 168:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   osalSysUnlockFromISR();
  99               		.loc 1 168 3 view .LVU9
 169:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 170:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
 100               		.loc 1 170 3 view .LVU10
 101               		.loc 1 170 3 view .LVU11
 102 002c 1092 0000 		sts __avr_in_isr,__zero_reg__
 103               		.loc 1 170 3 view .LVU12
 104               		.loc 1 170 3 view .LVU13
 105 0030 0E94 0000 		call chSchIsPreemptionRequired
 106               	.LVL1:
 107               		.loc 1 170 3 is_stmt 0 discriminator 1 view .LVU14
 108 0034 8115      		cp r24, __zero_reg__
 109 0036 01F4      		brne .L7
 110               	.L1:
 111               	/* epilogue start */
 171:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** }
 112               		.loc 1 171 1 view .LVU15
 113 0038 FF91      		pop r31
 114 003a EF91      		pop r30
 115 003c BF91      		pop r27
 116 003e AF91      		pop r26
 117 0040 9F91      		pop r25
 118 0042 8F91      		pop r24
 119 0044 7F91      		pop r23
 120 0046 6F91      		pop r22
 121 0048 5F91      		pop r21
 122 004a 4F91      		pop r20
 123 004c 3F91      		pop r19
 124 004e 2F91      		pop r18
 125 0050 0F90      		pop r0
 126 0052 0FBE      		out __SREG__,r0
 127 0054 0F90      		pop r0
 128 0056 1F90      		pop r1
 129 0058 1895      		reti
 130               	.L7:
 170:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** }
 131               		.loc 1 170 3 is_stmt 1 discriminator 1 view .LVU16
 132 005a 0E94 0000 		call chSchDoPreemption
 133               	.LVL2:
 170:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** }
 134               		.loc 1 170 3 discriminator 3 view .LVU17
 170:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** }
 135               		.loc 1 170 22 discriminator 3 view .LVU18
 136               		.loc 1 171 1 is_stmt 0 view .LVU19
 137 005e 00C0      		rjmp .L1
 138               		.cfi_endproc
 139               	.LFE146:
 141               		.section	.text.st_lld_init,"ax",@progbits
 142               	.global	st_lld_init
 144               	st_lld_init:
 145               	.LFB147:
 172:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 173:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 174:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 175:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
 176:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /* Driver exported functions.                                               */
 177:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /*==========================================================================*/
 178:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 179:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** /**
 180:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @brief   Low level ST driver initialization.
 181:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  *
 182:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  * @notapi
 183:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****  */
 184:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** void st_lld_init(void) {
 146               		.loc 1 184 24 is_stmt 1 view -0
 147               		.cfi_startproc
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
 185:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 186:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 187:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 188:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   /*
 189:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****    * Periodic mode uses Timer 1 (16 bit).
 190:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****    */
 191:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 192:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   /* CTC mode, no clock source. */
 193:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR1A     = 0;
 152               		.loc 1 193 3 view .LVU21
 153               		.loc 1 193 14 is_stmt 0 view .LVU22
 154 0000 1092 8000 		sts 128,__zero_reg__
 194:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR1B     = _BV(WGM12);
 155               		.loc 1 194 3 is_stmt 1 view .LVU23
 156               		.loc 1 194 14 is_stmt 0 view .LVU24
 157 0004 E1E8      		ldi r30,lo8(-127)
 158 0006 F0E0      		ldi r31,0
 159 0008 88E0      		ldi r24,lo8(8)
 160 000a 8083      		st Z,r24
 195:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 196:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   /* Start disabled. */
 197:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR1C     = 0;
 161               		.loc 1 197 3 is_stmt 1 view .LVU25
 162               		.loc 1 197 14 is_stmt 0 view .LVU26
 163 000c 1092 8200 		sts 130,__zero_reg__
 198:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OCR1A      = 0;
 164               		.loc 1 198 3 is_stmt 1 view .LVU27
 165               		.loc 1 198 14 is_stmt 0 view .LVU28
 166 0010 1092 8900 		sts 136+1,__zero_reg__
 167 0014 1092 8800 		sts 136,__zero_reg__
 199:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCNT1      = 0;
 168               		.loc 1 199 3 is_stmt 1 view .LVU29
 169               		.loc 1 199 14 is_stmt 0 view .LVU30
 170 0018 1092 8500 		sts 132+1,__zero_reg__
 171 001c 1092 8400 		sts 132,__zero_reg__
 200:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIFR_REG   = _BV(OCF1A);                              /* Reset pending.   */
 172               		.loc 1 200 3 is_stmt 1 view .LVU31
 173               		.loc 1 200 14 is_stmt 0 view .LVU32
 174 0020 82E0      		ldi r24,lo8(2)
 175 0022 86BB      		out 0x16,r24
 201:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIMSK_REG  = 0;
 176               		.loc 1 201 3 is_stmt 1 view .LVU33
 177               		.loc 1 201 14 is_stmt 0 view .LVU34
 178 0024 1092 6F00 		sts 111,__zero_reg__
 202:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR1B     = PRESCALER;
 179               		.loc 1 202 3 is_stmt 1 view .LVU35
 180               		.loc 1 202 14 is_stmt 0 view .LVU36
 181 0028 85E0      		ldi r24,lo8(5)
 182 002a 8083      		st Z,r24
 183               	/* epilogue start */
 203:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 204:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 205:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 206:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)
 207:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 208:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   /*
 209:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****    * Periodic mode uses Timer 0 (8 bit).
 210:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****    */
 211:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #if defined(TCCR0B) /* Timer has multiple output comparators.               */
 212:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
 213:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****             (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
 214:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****             (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
 215:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
 216:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OCR0A   = AVR_TIMER_COUNTER - 1;
 217:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCNT0   = 0;                                           /* Reset counter.  */
 218:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
 219:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
 220:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 221:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif defined(TCCR0A) /* AT90CAN doesn't have TCCR0B and slightly different */
 222:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****                       /* TCCR0A.                                            */
 223:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
 224:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****             (0 << COM0A1) | (0 << COM0A0);               /* OC0A disabled.  */
 225:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OCR0A   = AVR_TIMER_COUNTER - 1;
 226:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCNT0   = 0;                                           /* Reset counter.  */
 227:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
 228:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
 229:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 230:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #elif defined(TCCR0) /* Timer has single output comparator                  */
 231:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCCR0   = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
 232:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****             (0 << COM01) | (0 << COM00) |                /* OC0A disabled.  */
 233:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****             AVR_TIMER_PRESCALER_BITS;
 234:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   OCR0    = AVR_TIMER_COUNTER - 1;
 235:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TCNT0   = 0;                                           /* Reset counter.  */
 236:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIFR    = (1 << OCF0);                                 /* Reset pending.  */
 237:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   TIMSK   = (1 << OCIE0);                                /* IRQ on compare. */
 238:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #else
 239:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c ****   #error "Neither TCCR0A nor TCCR0 registers are defined"
 240:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif
 241:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** 
 242:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 243:../../os/hal/ports/AVR/MEGA/LLD/SYSTICKv1/hal_st_lld.c **** }
 184               		.loc 1 243 1 view .LVU37
 185 002c 0895      		ret
 186               		.cfi_endproc
 187               	.LFE147:
 189               		.text
 190               	.Letext0:
 191               		.file 3 "/usr/avr/include/stdint.h"
 192               		.file 4 "../../os/nil/include/ch.h"
 193               		.file 5 "../../os/common/ports/AVR/chcore.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hal_st_lld.c
     /tmp/ccHER6Kx.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccHER6Kx.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccHER6Kx.s:4      *ABS*:0000003f __SREG__
     /tmp/ccHER6Kx.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccHER6Kx.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccHER6Kx.s:14     .text.__vector_11:00000000 __vector_11
     /tmp/ccHER6Kx.s:16     .text.__vector_11:00000000 .Loc.0
     /tmp/ccHER6Kx.s:17     .text.__vector_11:00000000 L0
     /tmp/ccHER6Kx.s:81     .text.__vector_11:00000022 .Loc.1
     /tmp/ccHER6Kx.s:82     .text.__vector_11:00000022 .Loc.2
     /tmp/ccHER6Kx.s:85     .text.__vector_11:00000028 .Loc.3
     /tmp/ccHER6Kx.s:86     .text.__vector_11:00000028 .Loc.4
     /tmp/ccHER6Kx.s:87     .text.__vector_11:00000028 .Loc.5
     /tmp/ccHER6Kx.s:88     .text.__vector_11:00000028 .Loc.6
     /tmp/ccHER6Kx.s:92     .text.__vector_11:00000028 .Loc.7
     /tmp/ccHER6Kx.s:94     .text.__vector_11:00000028 .Loc.8
     /tmp/ccHER6Kx.s:99     .text.__vector_11:0000002c .Loc.9
     /tmp/ccHER6Kx.s:100    .text.__vector_11:0000002c .Loc.10
     /tmp/ccHER6Kx.s:101    .text.__vector_11:0000002c .Loc.11
     /tmp/ccHER6Kx.s:103    .text.__vector_11:00000030 .Loc.12
     /tmp/ccHER6Kx.s:104    .text.__vector_11:00000030 .Loc.13
     /tmp/ccHER6Kx.s:107    .text.__vector_11:00000034 .Loc.14
     /tmp/ccHER6Kx.s:112    .text.__vector_11:00000038 .Loc.15
     /tmp/ccHER6Kx.s:131    .text.__vector_11:0000005a .Loc.16
     /tmp/ccHER6Kx.s:134    .text.__vector_11:0000005e .Loc.17
     /tmp/ccHER6Kx.s:135    .text.__vector_11:0000005e .Loc.18
     /tmp/ccHER6Kx.s:136    .text.__vector_11:0000005e .Loc.19
     /tmp/ccHER6Kx.s:138    .text.__vector_11:00000060 L0
     /tmp/ccHER6Kx.s:144    .text.st_lld_init:00000000 st_lld_init
     /tmp/ccHER6Kx.s:146    .text.st_lld_init:00000000 .Loc.20
     /tmp/ccHER6Kx.s:147    .text.st_lld_init:00000000 L0
     /tmp/ccHER6Kx.s:152    .text.st_lld_init:00000000 .Loc.21
     /tmp/ccHER6Kx.s:153    .text.st_lld_init:00000000 .Loc.22
     /tmp/ccHER6Kx.s:155    .text.st_lld_init:00000004 .Loc.23
     /tmp/ccHER6Kx.s:156    .text.st_lld_init:00000004 .Loc.24
     /tmp/ccHER6Kx.s:161    .text.st_lld_init:0000000c .Loc.25
     /tmp/ccHER6Kx.s:162    .text.st_lld_init:0000000c .Loc.26
     /tmp/ccHER6Kx.s:164    .text.st_lld_init:00000010 .Loc.27
     /tmp/ccHER6Kx.s:165    .text.st_lld_init:00000010 .Loc.28
     /tmp/ccHER6Kx.s:168    .text.st_lld_init:00000018 .Loc.29
     /tmp/ccHER6Kx.s:169    .text.st_lld_init:00000018 .Loc.30
     /tmp/ccHER6Kx.s:172    .text.st_lld_init:00000020 .Loc.31
     /tmp/ccHER6Kx.s:173    .text.st_lld_init:00000020 .Loc.32
     /tmp/ccHER6Kx.s:176    .text.st_lld_init:00000024 .Loc.33
     /tmp/ccHER6Kx.s:177    .text.st_lld_init:00000024 .Loc.34
     /tmp/ccHER6Kx.s:179    .text.st_lld_init:00000028 .Loc.35
     /tmp/ccHER6Kx.s:180    .text.st_lld_init:00000028 .Loc.36
     /tmp/ccHER6Kx.s:184    .text.st_lld_init:0000002c .Loc.37
     /tmp/ccHER6Kx.s:186    .text.st_lld_init:0000002e L0
     /tmp/ccHER6Kx.s:141    .text.__vector_11:00000060 L0
     /tmp/ccHER6Kx.s:189    .text.st_lld_init:0000002e L0
                     .debug_frame:00000000 L0
     /tmp/ccHER6Kx.s:130    .text.__vector_11:0000005a .L7
     /tmp/ccHER6Kx.s:110    .text.__vector_11:00000038 .L1
     /tmp/ccHER6Kx.s:382    .debug_abbrev:00000000 .Ldebug_abbrev0
     /tmp/ccHER6Kx.s:712    .debug_ranges:00000000 .Ldebug_ranges0
     /tmp/ccHER6Kx.s:720    .debug_line:00000000 .Ldebug_line0
     /tmp/ccHER6Kx.s:145    .text.st_lld_init:00000000 .LFB147
     /tmp/ccHER6Kx.s:187    .text.st_lld_init:0000002e .LFE147
     /tmp/ccHER6Kx.s:15     .text.__vector_11:00000000 .LFB146
     /tmp/ccHER6Kx.s:139    .text.__vector_11:00000060 .LFE146
     /tmp/ccHER6Kx.s:604    .debug_loc:00000000 .LLST0
     /tmp/ccHER6Kx.s:90     .text.__vector_11:00000028 .LBI12
     /tmp/ccHER6Kx.s:89     .text.__vector_11:00000028 .LBB12
     /tmp/ccHER6Kx.s:98     .text.__vector_11:0000002c .LBE12
     /tmp/ccHER6Kx.s:96     .text.__vector_11:0000002c .LVL0
     /tmp/ccHER6Kx.s:106    .text.__vector_11:00000034 .LVL1
     /tmp/ccHER6Kx.s:133    .text.__vector_11:0000005e .LVL2
     /tmp/ccHER6Kx.s:19     .text.__vector_11:00000002 .LCFI0
     /tmp/ccHER6Kx.s:23     .text.__vector_11:00000004 .LCFI1
     /tmp/ccHER6Kx.s:30     .text.__vector_11:0000000c .LCFI2
     /tmp/ccHER6Kx.s:34     .text.__vector_11:0000000e .LCFI3
     /tmp/ccHER6Kx.s:38     .text.__vector_11:00000010 .LCFI4
     /tmp/ccHER6Kx.s:42     .text.__vector_11:00000012 .LCFI5
     /tmp/ccHER6Kx.s:46     .text.__vector_11:00000014 .LCFI6
     /tmp/ccHER6Kx.s:50     .text.__vector_11:00000016 .LCFI7
     /tmp/ccHER6Kx.s:54     .text.__vector_11:00000018 .LCFI8
     /tmp/ccHER6Kx.s:58     .text.__vector_11:0000001a .LCFI9
     /tmp/ccHER6Kx.s:62     .text.__vector_11:0000001c .LCFI10
     /tmp/ccHER6Kx.s:66     .text.__vector_11:0000001e .LCFI11
     /tmp/ccHER6Kx.s:70     .text.__vector_11:00000020 .LCFI12
     /tmp/ccHER6Kx.s:74     .text.__vector_11:00000022 .LCFI13
     /tmp/ccHER6Kx.s:195    .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
__avr_in_isr
chSysTimerHandlerI
chSchIsPreemptionRequired
chSchDoPreemption
